;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "الرجاء الانتظار...",
  "close": "قم بإغلاق",
  "signin": {
    "title": "تسجيل الدخول",
    "action": "تسجيل الدخول",
    "all": "إظهار الكل",
    "strategyEmailEmpty": "رسالة البريد الإلكتروني فارغاً.",
    "strategyEmailInvalid": "البريد الإلكتروني غير صالح.",
    "strategyDomainInvalid": "{المجال} لم يكن الإعداد.",
    "signupText": "التسجيل",
    "forgotText": "هل نسيت كلمة المرور الخاصة بك؟",
    "emailPlaceholder": "البريد الإلكتروني",
    "usernamePlaceholder": "اسم المستخدم",
    "passwordPlaceholder": "كلمة المرور",
    "separatorText": "أو",
    "serverErrorText": "حدث خطأ أثناء معالجة تسجيل الدخول.",
    "returnUserLabel": "آخر مرة قمت بتسجيل الدخول باستخدام...",
    "wrongEmailPasswordErrorText": "البريد الإلكتروني غير صحيح أو كلمة المرور.",
    "or": ".. أو قم بتسجيل الدخول باستخدام",
    "loadingMessage": "التوقيع في مع {connection}..."
  },
  "signup": {
    "description": "",
    "title": "التسجيل",
    "action": "التسجيل",
    "emailPlaceholder": "البريد الإلكتروني",
    "passwordPlaceholder": "إنشاء كلمة مرور",
    "cancelAction": "إلغاء الأمر",
    "headerText": "الرجاء إدخال البريد الإلكتروني وكلمة المرور الخاصة بك",
    "footerText": "",
    "enterpriseEmailWarningText": "هذا المجال {المجال} قد تم تكوينه لتسجيل الدخول، ولا يمكن أن تقوم بإنشاء حساب. حاول تسجيل الدخول بدلاً من ذلك.",
    "serverErrorText": "حدث خطأ أثناء معالجة العلامة التسجيل."
  },
  "reset": {
    "title": "إعادة تعيين كلمة المرور",
    "action": "إرسال",
    "emailPlaceholder": "البريد الإلكتروني",
    "passwordPlaceholder": "كلمة المرور الجديدة",
    "repeatPasswordPlaceholder": "تأكيد كلمة المرور الجديدة",
    "cancelAction": "إلغاء الأمر",
    "successText": "لقد أرسلنا فقط لك رسالة بريد إلكتروني إعادة تعيين كلمة المرور الخاصة بك.",
    "enterSamePasswordText": "الرجاء إدخال كلمة المرور نفسها.",
    "headerText": "الرجاء إدخال البريد الإلكتروني الخاص بك وكلمة المرور الجديدة. وسوف نرسل لك رسالة بالبريد إلكتروني لتأكيد تغيير كلمة المرور.",
    "serverErrorText": "حدث خطأ أثناء معالجة إعادة تعيين كلمة المرور."
  }
}
},{}],2:[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "Bitte warten...",
  "close": "Schließen",
  "signin": {
    "title": "Anmelden",
    "action": "Anmelden",
    "all": "Alle anzeigen",
    "strategyEmailEmpty": "Die e-Mail ist leer.",
    "strategyEmailInvalid": "Die e-Mail ist ungültig.",
    "strategyDomainInvalid": "{domain} wurde nicht eingerichtet.",
    "signupText": "Anmelden",
    "forgotText": "Passwort vergessen?",
    "emailPlaceholder": "E-Mail",
    "usernamePlaceholder": "Benutzername",
    "passwordPlaceholder": "Passwort",
    "separatorText": "oder",
    "serverErrorText": "Gab es Fehler beim Verarbeiten der anmelden.",
    "returnUserLabel": "Letzte Mal unterschrieben Sie bei der Verwendung...",
    "wrongEmailPasswordErrorText": "Falsche e-Mail oder Passwort.",
    "or": "... oder melden Sie sich mit",
    "loadingMessage": "Bei der Anmeldung mit {connection}..."
  },
  "signup": {
    "description": "",
    "title": "Anmelden",
    "action": "Anmelden",
    "emailPlaceholder": "E-Mail",
    "passwordPlaceholder": "Erstellen Sie ein Kennwort",
    "cancelAction": "Abbrechen",
    "headerText": "Bitte geben Sie Ihre e-Mail und Passwort",
    "footerText": "Durch Klicken auf \"Anmelden\", stimmen Sie unseren Nutzungsbedingungen oder Datenschutzrichtlinien.",
    "enterpriseEmailWarningText": "Diese Domäne {domain} für Single Sign On konfiguriert wurde und Sie können ein Konto erstellen. Versuchen Sie stattdessen sich anzumelden.",
    "serverErrorText": "Gab es Fehler beim Verarbeiten der Zeichens auf."
  },
  "reset": {
    "title": "Passwort zurücksetzen",
    "action": "Senden",
    "emailPlaceholder": "E-Mail",
    "passwordPlaceholder": "Neues Passwort",
    "repeatPasswordPlaceholder": "Neues Kennwort bestätigen",
    "cancelAction": "Abbrechen",
    "successText": "Wir haben Sie nur eine e-Mail zum Zurücksetzen Ihres Passworts geschickt.",
    "enterSamePasswordText": "Bitte geben Sie das gleiche Kennwort.",
    "headerText": "Bitte geben Sie Ihre e-Mail und das neue Kennwort. Wir senden Ihnen eine e-Mail zur Bestätigung der Passwortänderung.",
    "serverErrorText": "Gab es Fehler beim Verarbeiten des Kennworts zurücksetzen."
  }
}
},{}],3:[function(require,module,exports){
module.exports={
  "loadingTitle":                  "Please wait...",
  "close":                         "Close",
  "windowsAuthTitle":              "Windows Authentication",
  "invalid":                       "Invalid",
  "mustMatch":                     "Must match",
  "signin": {
    "title":                       "Login",
    "action":                      "Access",
    "all":                         "Show all",
    "strategyEmailEmpty":          "The email is empty.",
    "strategyEmailInvalid":        "The email is invalid.",
    "strategyDomainInvalid":       "The domain {domain} has not been setup.",
    "signupText":                  "Sign Up",
    "forgotText":                  "Forgot your password?",
    "emailPlaceholder":            "Email",
    "usernamePlaceholder":         "Username",
    "passwordPlaceholder":         "Password",
    "separatorText":               "or",
    "serverErrorText":             "There was an error processing the sign in.",
    "returnUserLabel":             "Last time you signed in using...",
    "domainUserLabel":             "You are connected from your corporate network...",
    "wrongEmailPasswordErrorText": "Wrong email or password.",
    "or":                          "... or sign in using",
    "loadingMessage":              "Signing In with {connection}...",
    "use":                         "Use",
  },
  "signup": {
    "description":                 "",
    "title":                       "Sign Up",
    "action":                      "Sign Up",
    "emailPlaceholder":            "Email",
    "passwordPlaceholder":         "Create a Password",
    "cancelAction":                "Cancel",
    "headerText":                  "Please enter your email and password",
    "footerText":                  "",
    "enterpriseEmailWarningText":  "This domain {domain} has been configured for Single Sign On and you can't create an account. Try signing in instead.",
    "serverErrorText":             "There was an error processing the sign up.",
    "userExistsErrorText":         "The user already exists.",
  },
  "reset": {
    "title":                       "Reset Password",
    "action":                      "Send",
    "emailPlaceholder":            "Email",
    "passwordPlaceholder":         "New Password",
    "repeatPasswordPlaceholder":   "Confirm New Password",
    "cancelAction":                "Cancel",
    "successText":                 "We've just sent you an email to reset your password.",
    "enterSamePasswordText":       "Please enter the same password.",
    "headerText":                  "Please enter your email and the new password. We will send you an email to confirm the password change.",
    "serverErrorText":             "There was an error processing the reset password.",
    "userDoesNotExistErrorText":   "User does not exist.",
  }
}
},{}],4:[function(require,module,exports){
module.exports={
  "loadingTitle":                  "Por favor espere...",
  "close":                         "Cerrar",
  "signin": {
    "title":                       "Iniciar sesión",
    "action":                      "Ingresar",
    "all":                         "Mostrar todas",
    "strategyEmailEmpty":          "El email esta vacío.",
    "strategyEmailInvalid":        "El email no es válido.",
    "strategyDomainInvalid":       "El dominio {domain} no esta configurado.",
    "signupText":                  "Registrarse",
    "forgotText":                  "Olvidé mi contraseña",
    "emailPlaceholder":            "Email",
    "usernamePlaceholder":         "Nombre de usuario",
    "passwordPlaceholder":         "Contraseña",
    "separatorText":               "o",
    "serverErrorText":             "Hubo un error al iniciar sesión.",
    "returnUserLabel":             "La última vez inició sesión con...",
    "domainUserLabel":             "Usted se encuentra conectado desde su red corporativa...",
    "wrongEmailPasswordErrorText": "Email o clave incorrecta.",
    "or":                          "... o inicie sesión usando",
    "loadingMessage":              "Iniciando sesión con {connection}..."
  },
  "signup": {
    "description":                 "",
    "title":                       "Registrarse",
    "action":                      "Registrar",
    "emailPlaceholder":            "Email",
    "passwordPlaceholder":         "Contraseña",
    "cancelAction":                "Cancelar",
    "headerText":                  "Por favor ingrese email y contraseña",
    "footerText":                  "",
    "enterpriseEmailWarningText":  "El dominio {domain} ha sido configurado para Single Sign On y no puede crear una cuenta. Intente iniciar sesión directamente.",
    "serverErrorText":             "Hubo un error al procesar su registro.",
    "userExistsErrorText":         "El usuario ya existe.",
  },
  "reset": {
    "title":                       "Resetear Contraseña",
    "action":                      "Enviar",
    "emailPlaceholder":            "Email",
    "passwordPlaceholder":         "Nueva Contraseña",
    "repeatPasswordPlaceholder":   "Confirme nueva contraseña",
    "cancelAction":                "Cancelar",
    "successText":                 "Hemos enviado un email para completar el reseteo de su contraseña.",
    "enterSamePasswordText":       "Por favor ingrese la misma contraseña.",
    "headerText":                  "Por favor ingrese su email y la nueva contraseña. Enviaremos un email para confirmar el cambio.",
    "serverErrorText":             "Hubo un error al resetear su contraseña.",
    "userDoesNotExistErrorText":   "Usuario inválido.",
  }
}

},{}],5:[function(require,module,exports){
module.exports={
  "loadingTitle": "Veuillez patienter...",
  "close": "Fermer",
  "windowsAuthTitle": "Connexion Windows",
  "signin": {
    "title": "Connexion",
    "action": "Connexion",
    "all": "Afficher tout",
    "strategyEmailEmpty": "Le courriel est vide.",
    "strategyEmailInvalid": "Le courriel n'est pas valide.",
    "strategyDomainInvalid": "Le domaine {domain} n'a pas été configuré.",
    "signupText": "Inscrivez-vous",
    "forgotText": "Vous avez oublié votre mot de passe ?",
    "emailPlaceholder": "Courriel",
    "usernamePlaceholder": "Nom d'utilisateur",
    "passwordPlaceholder": "Mot de passe",
    "separatorText": "ou",
    "serverErrorText": "Erreur lors de la connexion.",
    "returnUserLabel": "Lors de votre dernière connexion vous avez utilisé...",
    "domainUserLabel": "Vous êtes connecté depuis le réseau de votre entreprise...",
    "wrongEmailPasswordErrorText": "Courriel ou mot de passe incorrect.",
    "or": "... ou connectez-vous à l'aide de",
    "loadingMessage": "Connexion à l'aide de {connection}..."
  },
  "signup": {
    "description": "",
    "title": "Inscrivez-vous",
    "action": "Inscrivez-vous",
    "emailPlaceholder": "Courriel",
    "passwordPlaceholder": "Créer un mot de passe",
    "cancelAction": "Annuler",
    "headerText": "Veuillez entrer votre courriel et mot de passe",
    "footerText": "",
    "enterpriseEmailWarningText": "Ce domaine {domain} a été configuré pour le Single Sign On et vous ne pouvez pas créer de compte. Essayez de vous connecter à un compte existant.",
    "serverErrorText": "Erreur lors de l'inscription.",
    "userExistsErrorText": "Cet utilisateur existe déjà."
  },
  "reset": {
    "title": "Réinitialiser votre mot de passe",
    "action": "Envoyer",
    "emailPlaceholder": "Courriel",
    "passwordPlaceholder": "Nouveau mot de passe",
    "repeatPasswordPlaceholder": "Confirmer le nouveau mot de passe",
    "cancelAction": "Annuler",
    "successText": "Vous allez recevoir sous quelques minutes un courriel vous indiquant comment réinitialiser votre mot de passe.",
    "enterSamePasswordText": "S'il vous plaît entrez le même mot de passe.",
    "headerText": "Veuillez saisir votre courriel et mot de passe. Nous vous enverrons un courriel pour confirmer le changement de mot de passe.",
    "serverErrorText": "Erreur de traitement los de réinitialisation du mot de passe.",
    "userDoesNotExistErrorText": "Utilisateur introuvable."
  }
}

},{}],6:[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "חכה בבקשה...",
  "close": "סגור",
  "signin": {
    "title": "הירשם",
    "action": "הירשם",
    "all": "הצג הכל",
    "strategyEmailEmpty": "הדוא ל הוא ריק.",
    "strategyEmailInvalid": "הדוא ל אינו חוקי.",
    "strategyDomainInvalid": "התחום {domain} לא היתה תוכנית ההתקנה.",
    "signupText": "הירשם",
    "forgotText": "שכחת הסיסמא?",
    "emailPlaceholder": "דוא",
    "usernamePlaceholder": "שם משתמש",
    "passwordPlaceholder": "סיסמה",
    "separatorText": "או",
    "serverErrorText": "אירעה שגיאה בעיבוד הכניסה.",
    "returnUserLabel": "בפעם האחרונה נכנסת באמצעות...",
    "wrongEmailPasswordErrorText": "הדוא\"ל טועה או סיסמה.",
    "or": ". או כניסה באמצעות",
    "loadingMessage": "כניסה עם {connection}..."
  },
  "signup": {
    "description": "",
    "title": "הירשם",
    "action": "הירשם",
    "emailPlaceholder": "דוא",
    "passwordPlaceholder": "צור סיסמה",
    "cancelAction": "ביטול",
    "headerText": "הזינו את כתובת המייל והסיסמא",
    "footerText": "",
    "enterpriseEmailWarningText": "תחום זה, {domain} נקבעה עבור כניסה יחידה, אין באפשרותך ליצור חשבון. נסה להיכנס במקום.",
    "serverErrorText": "אירעה שגיאה בעיבוד את השלט למעלה."
  },
  "reset": {
    "title": "איפוס סיסמה",
    "action": "שלח",
    "emailPlaceholder": "דוא",
    "passwordPlaceholder": "סיסמה חדשה",
    "repeatPasswordPlaceholder": "אשר סיסמה חדשה",
    "cancelAction": "ביטול",
    "successText": "אנחנו פשוט לשלוח לך דואר אלקטרוני כדי לאפס את הסיסמה שלך.",
    "enterSamePasswordText": "הזינו בבקשה את אותה סיסמה.",
    "headerText": "אנא הזן את הדואר האלקטרוני שלך ואת הסיסמה החדשה. אנו נשלח לך הודעת דואר אלקטרוני כדי לאשר שינוי הסיסמה.",
    "serverErrorText": "אירעה שגיאה בעיבוד איפוס הסיסמה."
  }
}
},{}],7:[function(require,module,exports){
var dics_data = {
  'ar': require('./ar.json'),
  'de': require('./de.json'),
  'en': require('./en.json'),
  'es': require('./es.json'),
  'fr': require('./fr-FR.json'),
  'fr-FR': require('./fr-FR.json'),
  'he': require('./he.json'),
  'it': require('./it.json'),
  'ja': require('./ja.json'),
  'nl': require('./nl-NL.json'),
  'nl-NL': require('./nl-NL.json'),
  'pt': require('./pt.json'),
  'pt-BR': require('./pt-BR.json'),
  'ru': require('./ru.json'),
  'tlh': require('./tlh.json'),
  'zh': require('./zh.json')
};

var default_dict = dics_data['en'];

function findProp(o, s) {
    s = s.replace(/\[(\w+)\]/g, ':$1'); // convert indexes to properties
    s = s.replace(/^\:/, '');           // strip a leading dot
    var a = s.split(':');
    while (a.length) {
        var n = a.shift();
        if (n in o) {
            o = o[n];
        } else {
            return;
        }
    }
    return o;
}

function Dictionary (data) {
  this._data = data;
}

Dictionary.prototype.t = function (key) {
  return findProp(this._data, key) || findProp(default_dict, key);
};

module.exports.getDict = function ( langOrDict ) {

  if (!langOrDict) {
    return new Dictionary(default_dict);
  }

  if ( typeof langOrDict === 'string' ) {
    var dict = dics_data[langOrDict] || dics_data[langOrDict.split('-')[0]];
    return new Dictionary(dict);
  } else {
    return new Dictionary(langOrDict);
  }
};

},{"./ar.json":1,"./de.json":2,"./en.json":3,"./es.json":4,"./fr-FR.json":5,"./he.json":6,"./it.json":8,"./ja.json":9,"./nl-NL.json":10,"./pt-BR.json":11,"./pt.json":12,"./ru.json":13,"./tlh.json":14,"./zh.json":15}],8:[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "Attendere prego...",
  "close": "Chiudere",
  "signin": {
    "title": "Accedi",
    "action": "Accedi",
    "all": "Visualizza tutti",
    "strategyEmailEmpty": "L'email è vuota.",
    "strategyEmailInvalid": "L'email non è valido.",
    "strategyDomainInvalid": "Il dominio {domain} non è stata l'installazione.",
    "signupText": "Registrati",
    "forgotText": "Hai dimenticato la password?",
    "emailPlaceholder": "Posta elettronica",
    "usernamePlaceholder": "Nome utente",
    "passwordPlaceholder": "Password",
    "separatorText": "o",
    "serverErrorText": "C'è stato un errore durante l'elaborazione il segno in.",
    "returnUserLabel": "Ultima volta che hai eseguito utilizzando...",
    "wrongEmailPasswordErrorText": "Email errato o password.",
    "or": "... oppure accedi usando",
    "loadingMessage": "Accedi con {connection}..."
  },
  "signup": {
    "description": "",
    "title": "Registrati",
    "action": "Registrati",
    "emailPlaceholder": "Posta elettronica",
    "passwordPlaceholder": "Creare una Password",
    "cancelAction": "Annulla",
    "headerText": "Inserisci la tua email e la password",
    "footerText": "",
    "enterpriseEmailWarningText": "Questo dominio {domain} è stato configurato per il Single Sign On e non è possibile creare un account. Prova ad accedere invece.",
    "serverErrorText": "C'è stato un errore durante l'elaborazione il segno fino."
  },
  "reset": {
    "title": "Reimpostare la Password",
    "action": "Invia",
    "emailPlaceholder": "Posta elettronica",
    "passwordPlaceholder": "Nuova Password",
    "repeatPasswordPlaceholder": "Conferma nuova Password",
    "cancelAction": "Annulla",
    "successText": "Noi abbiamo appena inviato un'e-mail per reimpostare la password.",
    "enterSamePasswordText": "Inserisci la stessa password.",
    "headerText": "Inserisci il tuo indirizzo email e la password nuova. Ti invieremo un'email per confermare la modifica della password.",
    "serverErrorText": "C'è stato un errore durante l'elaborazione il password reset."
  }
}
},{}],9:[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "お待ちください。。。",
  "close": "閉じる",
  "signin": {
    "title": "サインイン",
    "action": "サインイン",
    "all": "すべて表示します。",
    "strategyEmailEmpty": "電子メールが空です。",
    "strategyEmailInvalid": "電子メールは有効です。",
    "strategyDomainInvalid": "{ドメイン} セットアップされていません。",
    "signupText": "サインアップ",
    "forgotText": "パスワードをお忘れですか？",
    "emailPlaceholder": "電子メール",
    "usernamePlaceholder": "ユーザ名",
    "passwordPlaceholder": "パスワード",
    "separatorText": "または",
    "serverErrorText": "サインインを処理中にエラーがありました。",
    "returnUserLabel": "最後の時間を使用してをサインインして.",
    "wrongEmailPasswordErrorText": "間違ったメール アドレスまたはパスワードです。",
    "or": "... またはを使用してサインイン",
    "loadingMessage": "でサインイン {connection}..."
  },
  "signup": {
    "description": "",
    "title": "サインアップ",
    "action": "サインアップ",
    "emailPlaceholder": "電子メール",
    "passwordPlaceholder": "パスワードを作成します。",
    "cancelAction": "キャンセル",
    "headerText": "あなたのメール アドレスとパスワードを入力してください。",
    "footerText": "",
    "enterpriseEmailWarningText": "このドメイン {} が構成されているシングル サインオン ・ アカウントを作成することはできません。代わりにサインインしてください。",
    "serverErrorText": "符号を処理中にエラーがありました。"
  },
  "reset": {
    "title": "パスワードのリセット",
    "action": "送信",
    "emailPlaceholder": "電子メール",
    "passwordPlaceholder": "新しいパスワード",
    "repeatPasswordPlaceholder": "新しいパスワードを確認します。",
    "cancelAction": "キャンセル",
    "successText": "我々 はちょうどあなたのパスワードをリセットするメールを送信しました。",
    "enterSamePasswordText": "同じパスワードを入力してください。",
    "headerText": "あなたのメール アドレスと新しいパスワードを入力してください。我々 は、パスワードの変更を確認するためにメールが送信されます。",
    "serverErrorText": "パスワードのリセットを処理中にエラーがありました。"
  }
}
},{}],10:[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "Een ogenblik geduld...",
  "close": "Sluiten",
  "signin": {
    "title": "Aanmelden",
    "action": "Aanmelden",
    "all": "Toon alles",
    "strategyEmailEmpty": "Het veld e-mail is leeg.",
    "strategyEmailInvalid": "Het veld e-mail is ongeldig.",
    "strategyDomainInvalid": "Het domein {domain} is niet geactiveerd.",
    "signupText": "Aanmelden",
    "forgotText": "Wachtwoord vergeten?",
    "emailPlaceholder": "E-mail",
    "usernamePlaceholder": "Usernamea",
    "passwordPlaceholder": "Wachtwoord",
    "separatorText": "of",
    "serverErrorText": "Er is een fout opgetreden tijdens het inloggen.",
    "returnUserLabel": "De laatste keer logde je in met...",
    "wrongEmailPasswordErrorText": "Verkeerd e-mail of wachtwoord.",
    "or": "... of meld u aan met",
    "loadingMessage": "Aanmelden met {connection}..."
  },
  "signup": {
    "description": "",
    "title": "Aanmelden",
    "action": "Aanmelden",
    "emailPlaceholder": "E-mail",
    "passwordPlaceholder": "Een wachtwoord maken",
    "cancelAction": "Annuleren",
    "headerText": "Voer je email en wachtwoord in",
    "footerText": "",
    "enterpriseEmailWarningText": "Dit domein {domain} is geconfigureerd voor eenmalige aanmelding en u kunt geen account aanmaken. Probeer u aan te melden in plaats daarvan.",
    "serverErrorText": "Er is een fout opgetreden bij de verwerking van uw aanmelding."
  },
  "reset": {
    "title": "Wachtwoord resetten",
    "action": "Verzenden",
    "emailPlaceholder": "E-mail",
    "passwordPlaceholder": "Nieuw wachtwoord",
    "repeatPasswordPlaceholder": "Bevestig het nieuwe wachtwoord",
    "cancelAction": "Annuleren",
    "successText": "We hebben u zojuist een e-mail gestuurd om uw wachtwoord te resetten.",
    "enterSamePasswordText": "Voer hetzelfde wachtwoord in.",
    "headerText": "Voer uw e-mailadres en het nieuwe wachtwoord in. Wij sturen u een e-mail ter bevestiging van de wachtwoordswijziging.",
    "serverErrorText": "Er is een fout opgetreden bij de verwerking van het nieuwe wachtwoord."
  }
}

},{}],11:[function(require,module,exports){
module.exports={
  "loadingTitle": "Carregando...",
  "close": "Fechar",
  "signin": {
    "title": "Entrar",
    "action": "Entrar",
    "all": "Mostrar todos",
    "strategyEmailEmpty": "O e-mail deve ser preenchido.",
    "strategyEmailInvalid": "O email é inválido.",
    "strategyDomainInvalid": "O domínio {domain} não foi informado.",
    "signupText": "Registe-se",
    "forgotText": "Esqueceu sua senha?",
    "emailPlaceholder": "E-mail",
    "usernamePlaceholder": "Nome de Usuário",
    "passwordPlaceholder": "Senha",
    "separatorText": "ou",
    "serverErrorText": "Houve um erro ao efetuar o login.",
    "returnUserLabel": "Da última vez que você fez login usando...",
    "wrongEmailPasswordErrorText": "E-mail ou senha inválidos.",
    "or": "... ou entre usando",
    "loadingMessage": "Entrar com {connection}..."
  },
  "signup": {
    "description": "",
    "title": "Cadastre-se",
    "action": "Cadastre-se",
    "emailPlaceholder": "E-mail",
    "passwordPlaceholder": "Crie uma senha",
    "cancelAction": "Cancelar",
    "headerText": "Por favor, digite seu e-mail e senha",
    "footerText": "",
    "enterpriseEmailWarningText": "Este domínio {domain} foi configurado para Sign-On único e você não pode criar uma conta. Tente fazer o login em vez disso.",
    "serverErrorText": "Houve um erro ao efetuar o login."
  },
  "reset": {
    "title": "Redefinir senha",
    "action": "Enviar",
    "emailPlaceholder": "E-mail",
    "passwordPlaceholder": "Nova senha",
    "repeatPasswordPlaceholder": "Confirmar nova senha",
    "cancelAction": "Cancelar",
    "successText": "Já enviamos um e-mail para redefinir sua senha.",
    "enterSamePasswordText": "Por favor digite a mesma senha.",
    "headerText": "Por favor, digite seu e-mail e a senha nova. Nós lhe enviaremos um e-mail para confirmar a alteração de senha.",
    "serverErrorText": "Houve um erro ao redefinir a senha."
  }
}
},{}],12:[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "Aguarde...",
  "close": "Fechar",
  "signin": {
    "title": "Entrar",
    "action": "Entrar",
    "all": "Mostrar todos",
    "strategyEmailEmpty": "O e-mail é vazio.",
    "strategyEmailInvalid": "O email é inválido.",
    "strategyDomainInvalid": "O domínio {domain} não foi a instalação.",
    "signupText": "Inscrição",
    "forgotText": "Esqueceu sua senha?",
    "emailPlaceholder": "Email",
    "usernamePlaceholder": "Nome de Usuário",
    "passwordPlaceholder": "Senha",
    "separatorText": "ou",
    "serverErrorText": "Houve um erro ao processar o sinal em.",
    "returnUserLabel": "Da última vez que você assinou usando...",
    "wrongEmailPasswordErrorText": "Senha ou e-mail errado.",
    "or": "... ou Cadastre-se no uso de",
    "loadingMessage": "Entrar com {connection}..."
  },
  "signup": {
    "description": "",
    "title": "Inscrição",
    "action": "Inscrição",
    "emailPlaceholder": "Email",
    "passwordPlaceholder": "Crie uma senha",
    "cancelAction": "Cancelar",
    "headerText": "Por favor, digite seu e-mail e senha",
    "footerText": "",
    "enterpriseEmailWarningText": "Este domínio {domain} tiver sido configurado para Sign-On único e você não pode criar uma conta. Tente entrar em vez disso.",
    "serverErrorText": "Houve um erro ao processar o sinal de cima."
  },
  "reset": {
    "title": "Redefinir senha",
    "action": "Enviar",
    "emailPlaceholder": "Email",
    "passwordPlaceholder": "Nova senha",
    "repeatPasswordPlaceholder": "Confirmar nova senha",
    "cancelAction": "Cancelar",
    "successText": "Só te enviamos um e-mail para redefinir sua senha.",
    "enterSamePasswordText": "Por favor digite a mesma senha.",
    "headerText": "Por favor, digite seu e-mail e a senha nova. Nós lhe enviaremos um e-mail para confirmar a alteração de senha.",
    "serverErrorText": "Houve um erro ao processar a redefinir a senha."
  }
}
},{}],13:[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "Подождите...",
  "close": "Закрыть",
  "signin": {
    "title": "Войти",
    "action": "Войти",
    "all": "Показать все",
    "strategyEmailEmpty": "Электронная почта является пустым.",
    "strategyEmailInvalid": "Электронной почты является недействительным.",
    "strategyDomainInvalid": "{domain} не было установки.",
    "signupText": "Регистрация",
    "forgotText": "Забыли ваш пароль?",
    "emailPlaceholder": "E-mail",
    "usernamePlaceholder": "Имя пользователя",
    "passwordPlaceholder": "Пароль",
    "separatorText": "или",
    "serverErrorText": "Произошла ошибка при обработке входа.",
    "returnUserLabel": "Последний раз вы подписали в использовании...",
    "wrongEmailPasswordErrorText": "Неправильный адрес или пароль.",
    "or": "... или войдите с помощью",
    "loadingMessage": "Подписание В с {connection}..."
  },
  "signup": {
    "description": "",
    "title": "Регистрация",
    "action": "Регистрация",
    "emailPlaceholder": "E-mail",
    "passwordPlaceholder": "Создайте пароль",
    "cancelAction": "Отмена",
    "headerText": "Пожалуйста, введите свой email и пароль",
    "footerText": "",
    "enterpriseEmailWarningText": "Этот домен {domain} был настроен для единого входа и нельзя создать учетную запись. Попробуйте войти в вместо этого.",
    "serverErrorText": "Произошла ошибка при обработке знак вверх."
  },
  "reset": {
    "title": "Сброс пароля",
    "action": "Отправить",
    "emailPlaceholder": "E-mail",
    "passwordPlaceholder": "Новый пароль",
    "repeatPasswordPlaceholder": "Подтвердите новый пароль",
    "cancelAction": "Отмена",
    "successText": "Мы только что отправил вам по электронной почте, чтобы сбросить ваш пароль.",
    "enterSamePasswordText": "Пожалуйста, введите тот же пароль.",
    "headerText": "Пожалуйста, введите ваш адрес электронной почты и новый пароль. Мы вышлем вам по электронной почте для подтверждения изменения пароля.",
    "serverErrorText": "Произошла ошибка при обработке сброса пароля."
  }
}
},{}],14:[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "DubelmoHchugh loS.",
  "close": "SoQmoH",
  "signin": {
    "title": "qI'",
    "action": "qI'",
    "all": "cha' Hoch",
    "strategyEmailEmpty": "chIm email.",
    "strategyEmailInvalid": "email invalid.",
    "strategyDomainInvalid": "{domain} yer wej setup.",
    "signupText": "qI'",
    "forgotText": "mu'wIj lIj?",
    "emailPlaceholder": "email",
    "usernamePlaceholder": "tus neeg siv lub npe",
    "passwordPlaceholder": "mu'wIj",
    "separatorText": "ghap",
    "serverErrorText": "Qagh qaStaHvIS qI' mIw tu'lu'.",
    "returnUserLabel": "Qav poH qI' SoH qaStaHvIS lo'.",
    "wrongEmailPasswordErrorText": "QIH email pagh mu'wIj.",
    "or": "... pagh qI' qaStaHvIS yIlo'",
    "loadingMessage": "Ukubhalisela In nge {connection}..."
  },
  "signup": {
    "description": "",
    "title": "qI'",
    "action": "qI'",
    "emailPlaceholder": "email",
    "passwordPlaceholder": "mu'wIj chenmoH",
    "cancelAction": "qIl",
    "headerText": "nuqneH email mu'wIj je",
    "footerText": "",
    "enterpriseEmailWarningText": "configured {domain} yer Vas qI' 'ej account pagh chenmoH SoH. nID, qI' instead.",
    "serverErrorText": "Qagh qI' mIw Ha' tu'lu'."
  },
  "reset": {
    "title": "mu'wIj reset",
    "action": "ngeH",
    "emailPlaceholder": "email",
    "passwordPlaceholder": "mu'wIj chu'",
    "repeatPasswordPlaceholder": "mu'wIj chu' confirm",
    "cancelAction": "qIl",
    "successText": "jIboQqang reset mu'wIj neH ngeH SoH maH.",
    "enterSamePasswordText": "DubelmoHchugh mu'wIj rap 'el.",
    "headerText": "nuqneH email chu' mu'wIj je. jIboQqang mu'wIj choH confirm ngeH SoH maH.",
    "serverErrorText": "Qagh reset mu'wIj mIw tu'lu'."
  }
}
},{}],15:[function(require,module,exports){
module.exports={
  "//": "This is an automatic translation. Help us to improve it.",
  "loadingTitle": "请稍候。。。",
  "close": "关闭",
  "signin": {
    "title": "登录",
    "action": "登录",
    "all": "全部显示",
    "strategyEmailEmpty": "电子邮件是空的。",
    "strategyEmailInvalid": "电子邮件是无效的。",
    "strategyDomainInvalid": "指定域 {domain} 尚未安装。",
    "signupText": "登记",
    "forgotText": "忘记了您的密码吗？",
    "emailPlaceholder": "电子邮件",
    "usernamePlaceholder": "用户名",
    "passwordPlaceholder": "密码",
    "separatorText": "或",
    "serverErrorText": "处理所示的标志时出错。",
    "returnUserLabel": "最后一次你在使用签署...",
    "wrongEmailPasswordErrorText": "错误的电子邮件或密码。",
    "or": "...或使用登录",
    "loadingMessage": "签约与 {connection}..."
  },
  "signup": {
    "description": "",
    "title": "登记",
    "action": "登记",
    "emailPlaceholder": "电子邮件",
    "passwordPlaceholder": "创建一个密码",
    "cancelAction": "取消",
    "headerText": "请输入您的电子邮件和密码",
    "footerText": "",
    "enterpriseEmailWarningText": "指定此域 {domain} 已配置为单一登录和您不能创建一个帐户。请尝试登录相反。",
    "serverErrorText": "处理标志向上时出错。"
  },
  "reset": {
    "title": "重置密码",
    "action": "发送",
    "emailPlaceholder": "电子邮件",
    "passwordPlaceholder": "新密码",
    "repeatPasswordPlaceholder": "确认新密码",
    "cancelAction": "取消",
    "successText": "我们刚刚已经向您发送一封电子邮件，重置您的密码。",
    "enterSamePasswordText": "请输入相同的密码。",
    "headerText": "请输入您的电子邮件和新的密码。我们将向您发送邮件以确认密码更改。",
    "serverErrorText": "处理重置密码时出错。"
  }
}
},{}],16:[function(require,module,exports){
function insert (css) {
    var head = document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    head.appendChild(style);

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
};

var fs = require('fs');
var style = ".a0-widget article,.a0-widget aside,.a0-widget details,.a0-widget figcaption,.a0-widget figure,.a0-widget footer,.a0-widget header,.a0-widget hgroup,.a0-widget nav,.a0-widget section,.a0-widget summary{display:block}.a0-widget audio,.a0-widget canvas,.a0-widget video{display:inline-block;*display:inline;*zoom:1}.a0-widget audio:not([controls]){display:none;height:0}.a0-widget [hidden]{display:none}.a0-widget html{font-size:100%;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}.a0-widget a,.a0-widget button,.a0-widget div,.a0-widget h1,.a0-widget h2,.a0-widget html,.a0-widget input,.a0-widget select,.a0-widget span,.a0-widget textarea{font-family:sans-serif}.a0-widget body{margin:0}.a0-widget a:focus{outline:thin dotted}.a0-widget a:active,.a0-widget a:hover{outline:0}.a0-widget h4{font-size:1em;margin:1.33em 0}.a0-widget h5{font-size:.83em;margin:1.67em 0}.a0-widget h6{font-size:.75em;margin:2.33em 0}.a0-widget abbr[title]{border-bottom:1px dotted}.a0-widget b,.a0-widget strong{font-weight:700}.a0-widget blockquote{margin:1em 40px}.a0-widget dfn{font-style:italic}.a0-widget mark{background:#ff0;color:#000}.a0-widget p,.a0-widget pre{margin:1em 0}.a0-widget code,.a0-widget kbd,.a0-widget pre,.a0-widget samp{font-family:monospace,serif;_font-family:'courier new',monospace;font-size:1em}.a0-widget pre{white-space:pre;white-space:pre-wrap;word-wrap:break-word}.a0-widget q{quotes:none}.a0-widget q:after,.a0-widget q:before{content:'';content:none}.a0-widget small{font-size:80%}.a0-widget sub,.a0-widget sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}.a0-widget sup{top:-.5em}.a0-widget sub{bottom:-.25em}.a0-widget dl,.a0-widget menu,.a0-widget ol,.a0-widget ul{margin:1em 0}.a0-widget dd{margin:0 0 0 40px}.a0-widget menu,.a0-widget ol,.a0-widget ul{padding:0 0 0 40px}.a0-widget nav ol,.a0-widget nav ul{list-style:none;list-style-image:none}.a0-widget img{border:0;-ms-interpolation-mode:bicubic}.a0-widget svg:not(:root){overflow:hidden}.a0-widget figure,.a0-widget form{margin:0}.a0-widget fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}.a0-widget legend{border:0;padding:0;white-space:normal;*margin-left:-7px}.a0-widget button,.a0-widget input,.a0-widget select,.a0-widget textarea{font-size:100%;margin:0;vertical-align:baseline;*vertical-align:middle}.a0-widget button,.a0-widget input{line-height:normal}.a0-widget button,.a0-widget html input[type=button],.a0-widget input[type=reset],.a0-widget input[type=submit]{-webkit-appearance:button;cursor:pointer;*overflow:visible}.a0-widget button[disabled],.a0-widget input[disabled]{cursor:default}.a0-widget input[type=checkbox],.a0-widget input[type=radio]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:0;*height:13px;*width:13px}.a0-widget input[type=search]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}.a0-widget input[type=search]::-webkit-search-cancel-button,.a0-widget input[type=search]::-webkit-search-decoration{-webkit-appearance:none}.a0-widget button::-moz-focus-inner,.a0-widget input::-moz-focus-inner{border:0;padding:0}.a0-widget textarea{overflow:auto;vertical-align:top}.a0-widget table{border-collapse:collapse;border-spacing:0}.a0-widget a,.a0-widget button,.a0-widget footer,.a0-widget form,.a0-widget form label,.a0-widget h1,.a0-widget h2,.a0-widget h3,.a0-widget header,.a0-widget input[type=button],.a0-widget input[type=email],.a0-widget input[type=password],.a0-widget input[type=text],.a0-widget span{font-smooth:never;-webkit-font-smoothing:auto;alignment-baseline:baseline;-webkit-animation:none 0 ease 0 1 normal;-moz-animation:none 0 ease 0 1 normal;animation:none 0 ease 0 1 normal;-webkit-animation-play-state:running;-moz-animation-play-state:running;animation-play-state:running;appearance:normal;-webkit-backface-visibility:visible;-moz-backface-visibility:visible;-ms-backface-visibility:visible;backface-visibility:visible;background:none 0 0 auto repeat scroll padding-box transparent;background-color:transparent;background-image:none;baseline-shift:baseline;binding:none;bleed:6pt;bookmark-label:content();bookmark-level:none;bookmark-state:open;bookmark-target:none;border:0 none transparent;border-radius:0;bottom:auto;-webkit-box-align:stretch;-webkit-align-items:stretch;-moz-box-align:stretch;-ms-flex-align:stretch;box-align:stretch;box-decoration-break:slice;-webkit-box-orient:vertical;-webkit-box-direction:normal;-webkit-flex-direction:normal;-moz-box-orient:vertical;-moz-box-direction:normal;-ms-flex-direction:normal;box-direction:normal;-webkit-box-flex:0;-webkit-flex:0;-moz-box-flex:0;-ms-flex:0;box-flex:0;box-flex-group:1;box-lines:single;-webkit-box-ordinal-group:2;-webkit-order:1;-moz-box-ordinal-group:2;-ms-flex-order:1;box-ordinal-group:1;box-orient:inline-axis;-webkit-box-pack:start;-webkit-justify-content:start;-moz-box-pack:start;-ms-flex-pack:start;box-pack:start;-webkit-box-shadow:none;box-shadow:none;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;-webkit-break-after:auto;-moz-break-after:auto;break-after:auto;-webkit-break-before:auto;-moz-break-before:auto;break-before:auto;-webkit-break-inside:auto;-moz-break-inside:auto;break-inside:auto;caption-side:top;clear:none;clip:auto;color:inherit;color-profile:auto;-webkit-column-count:auto;-moz-column-count:auto;column-count:auto;-webkit-column-fill:balance;-moz-column-fill:balance;column-fill:balance;-webkit-column-gap:normal;-moz-column-gap:normal;column-gap:normal;-webkit-column-rule:medium medium #1f1f1f;-moz-column-rule:medium medium #1f1f1f;column-rule:medium medium #1f1f1f;-webkit-column-span:1;-moz-column-span:1;column-span:1;-webkit-column-width:auto;-moz-column-width:auto;column-width:auto;-webkit-columns:auto auto;-moz-columns:auto auto;columns:auto auto;content:normal;counter-increment:none;counter-reset:none;crop:auto;cursor:auto;direction:auto;display:auto;dominant-baseline:auto;drop-initial-after-adjust:text-after-edge;drop-initial-after-align:baseline;drop-initial-before-adjust:text-before-edge;drop-initial-before-align:caps-height;drop-initial-size:auto;drop-initial-value:initial;elevation:level;empty-cells:show;fit:fill;fit-position:0 0;float:none;float-offset:0 0;font-size-adjust:none;font-stretch:normal;font:normal normal 100% \"Helvetica Neue\",Arial,sans-serif;grid-columns:none;grid-rows:none;hanging-punctuation:none;height:auto;hyphenate-after:auto;hyphenate-before:auto;hyphenate-character:auto;hyphenate-lines:no-limit;hyphenate-resource:none;-webkit-hyphens:manual;-moz-hyphens:manual;-ms-hyphens:manual;hyphens:manual;icon:auto;image-orientation:auto;image-rendering:auto;image-resolution:normal;inline-box-align:last;left:auto;letter-spacing:normal;line-height:normal;line-stacking:inline-line-height exclude-ruby consider-shifts;list-style:disc outside none;margin:0;marks:none;marquee-direction:forward;marquee-loop:1;marquee-play-count:1;marquee-speed:normal;marquee-style:scroll;max-height:none;max-width:none;min-height:0;min-width:0;move-to:normal;nav-down:auto;nav-index:auto;nav-left:auto;nav-right:auto;nav-up:auto;opacity:1;orphans:2;outline:invert none medium!important;outline-offset:0;overflow:visible;overflow-style:auto;padding:0;page:auto;page-break-after:auto;page-break-before:auto;page-break-inside:auto;page-policy:start;-webkit-perspective:none;-moz-perspective:none;-ms-perspective:none;perspective:none;-webkit-perspective-origin:50% 50%;-moz-perspective-origin:50% 50%;-ms-perspective-origin:50% 50%;perspective-origin:50% 50%;position:static;presentation-level:0;punctuation-trim:none;quotes:none;rendering-intent:auto;resize:none;right:auto;rotation:0;rotation-point:50% 50%;ruby-align:auto;ruby-overhang:none;ruby-position:before;ruby-span:none;size:auto;string-set:none;table-layout:auto;text-align:auto;text-align-last:start;text-decoration:none;text-emphasis:none;text-height:auto;text-indent:0;text-justify:auto;text-outline:0;text-shadow:none;text-transform:none;text-wrap:normal;top:auto;-webkit-transform:none;-moz-transform:none;-ms-transform:none;transform:none;-webkit-transform-origin:50% 50% 0;-moz-transform-origin:50% 50% 0;-ms-transform-origin:50% 50% 0;transform-origin:50% 50% 0;-webkit-transform-style:flat;-moz-transform-style:flat;-ms-transform-style:flat;transform-style:flat;-webkit-transition:all 0 ease 0;-moz-transition:all 0 ease 0;transition:all 0 ease 0;unicode-bidi:normal;vertical-align:baseline;visibility:visible;white-space:normal;white-space-collapse:collapse;widows:2;width:auto;word-break:normal;word-spacing:normal;word-wrap:normal;z-index:auto;filter:progid:DXImageTransform.Microsoft.gradient(enabled=false)}@font-face{font-family:auth0;src:url(data:application/x-font-woff;charset=utf-8;base64,d09GRgABAAAAAAsgABEAAAAAD0QAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAABgAAAABwAAAAcaymhr0dERUYAAAGcAAAAHQAAACAAQwAET1MvMgAAAbwAAABEAAAAVmLhkqRjbWFwAAACAAAAAF8AAAFyRMFQ0WN2dCAAAAJgAAAAEAAAABADZwIwZnBnbQAAAnAAAAGxAAACZVO0L6dnYXNwAAAEJAAAAAgAAAAIAAAAEGdseWYAAAQsAAAEmgAABdD0Aj87aGVhZAAACMgAAAAqAAAANgYfUBNoaGVhAAAI9AAAAB0AAAAkEAQH7mhtdHgAAAkUAAAANAAAAFhlxwJmbG9jYQAACUgAAAAXAAAALhjyF5htYXhwAAAJYAAAACAAAAAgATIBQW5hbWUAAAmAAAAAuQAAAXQbbzbjcG9zdAAACjwAAABsAAAAzTIROQNwcmVwAAAKqAAAAHAAAAB+62lBaHdlYmYAAAsYAAAABgAAAAZRDVNQAAAAAQAAAADMPaLPAAAAAM91/VQAAAAAz3YBi3jaY2BkYGDgA2IJBhBgYmAEQlEgZgHzGAAFMQBIAAAAeNpjYGTZwDiBgZWBhdWAdQYDA6MMhGa+wpDCJMDAwMTAyskAA4wMSCAgzTWFwYGBV/UPe8P/BgYGDgYGDZgaAJpHCXN42mNgYGBmgGAZBkYGEMgB8hjBfBaGACAtAITMYBlehlQFLgV9hXjVP///Q0USFRgQIv+//l/0gOP+k/tbb0lCTUMBjGwMcGFGJiDBhK6AgXLAzMLKxs4waAEAVdwTGgAAAAC6AIAAhAJ4AIAAbwByeNpdUbtOW0EQ3Q0PA4HE2CA52hSzmZDGe6EFCcTVjWJkO4XlCGk3cpGLcQEfQIFEDdqvGaChpEibBiEXSHxCPiESM2uIojQ7O7NzzpkzS8qRqnfpa89T5ySQwt0GzTb9Tki1swD3pOvrjYy0gwdabGb0ynX7/gsGm9GUO2oA5T1vKQ8ZTTuBWrSn/tH8Cob7/B/zOxi0NNP01DoJ6SEE5ptxS4PvGc26yw/6gtXhYjAwpJim4i4/plL+tzTnasuwtZHRvIMzEfnJNEBTa20Emv7UIdXzcRRLkMumsTaYmLL+JBPBhcl0VVO1zPjawV2ys+hggyrNgQfYw1Z5DB4ODyYU0rckyiwNEfZiq8QIEZMcCjnl3Mn+pED5SBLGvElKO+OGtQbGkdfAoDZPs/88m01tbx3C+FkcwXe/GUs6+MiG2hgRYjtiKYAJREJGVfmGGs+9LAbkUvvPQJSA5fGPf50ItO7YRDyXtXUOMVYIen7b3PLLirtWuc6LQndvqmqo0inN+17OvscDnh4Lw0FjwZvP+/5Kgfo8LK40aA4EQ3o3ev+iteqIq7wXPrIn07+xWgAAAAABAAH//wAPeNptlM9rG0cUx99brXYlR9i78mq1VuRkJetXLDuSrdWvxIk3jg2mlKKmDhYhBGGS1iQ5GBKKCTnoUMrSHySUUHToMYccfNiRSzElBx18yMEHQ8H4DyjFAh16yMGl0qZvk7TOoXuY+cybxzDv+3074IF7AOIzH8ApGIHTcBXapwCytlRgPr5rR2bt4Rza0RzjMPuz4gWRz7JxzDKFk4PbQ4FhKRGuAvMN04oTAiO0ys+MCiElHAyPYmw0Nurn5NioGlJETvRgrDU90+jtDY641t5gvclpnOby/tT5G6/3uOjgttf6/tsfnjp/bHGbaHGbf1kOzWjxfw6sb7578sT53XY3AIBHGsQm3XsEzkIacvAA2gG6OfPqhQJdr9v2u6sEASDBONdFO5+z4YBJ3q4tSSxAZeiEusQyhFnCrMTShF5Cr8TGCNHbZTM0Z3Q5yPwT1SpLZ4kSvmoV8jPnUDZSE0UDdBjHuBAalY1SITarhmRFmIjFU/h+C5XZomzEQwhCs7XubDkZZ2u91Vyu8M3K8nLlbxoR0Icb6HOg2eRhvdXp4Yqz1eu01gfgATdr4I58pbNDScc7nX7HNLFpmgAcNAF8SFrocIW4rbmVT1Plglv5ZbfyhZzNHTBT7NqmxCJU0CTVOCmxHGGIMCSxC4QBocuu0hwx5aB9ucpyk3LQ9AthbTyZCs4aZC+7EKL6y3NUP7ssEPJD1ao9LW9zoUjwxH41pifmsVQ20ql0KlkKFiVO52QlGOZFIVwql5LlYoorGkE9GFI4MRTmw2rY7ZJzmCoaX/GVTY+CDewY+Qp6lZo56DzfPR5sHO8+H7ycq91SP57jeM160eGg88KKcoq57MNP+8cD3yc4dfbMvZW8Fghcv3vm7NNlc7OO1iEaWHdeOHuHzmadxP7xy0T0WdNYxNpOHxWn199x7EXDsvTEo6Ghu4n0dYW6i2RHaIpvxCZEYQ4+hwNoV11lBVJWcX+ShQLLEN9xg/MeUvmLtypfJD0vSkwlHZOESYlNEsqEssSKhH5Cv8SWCNcI1yRWI7zh7bZrN4ay22btuj/L1imkXiQbqOcmk64No8pYLD4ynbvk2lCU6Zcrzy/coYXtl7fF5Y8abnxtiTz5bJU8qcn2NTKp+tYkkQIZ+Rc/p8pLq2tu4h2Fzr504leyVHxvlvw/XlFj6+qJVco7q8opVMOzpQJ1vCJ8sDXhWvnBgQYXi/OeXJ57zu3lPNKi7tzf6zjQud9wHucXNySzgVOSbeGG1ahJ+DAzJywMXg5ezSN6Hlg1nx7YOdnYpXdkxT0k7zRfdd5ACx9q2upSJrO0Gh57aGobu1jHAGacQ+f1T87hzUbC3KjrmRWj3sLK/tHRvuX0F+uV20r0pijWIpErw97fAgZ/uPv4tblCYe2WKF6LxFNjpxPvTszc7OBcH6PUDY/gV/FrcZdenDPQ5t0WUOh11HMshllgCk9KB6JV0rSszpb9qBbKJSPtRxpScdGPNAhK2I+C8lQ7r3oUj6KqU5rW73k0VaVIv9fvqeeJPVr/SN1/P6v/5k6pb3MVTSN8lwvuM/jfNwP/AM0vjlAAAHjaY2BkYGAAYqaGdv14fpuvDPIcDCBwvoyxG5nmYASLczAwgSgA2D0GvgAAeNpjYGRg4GD4fwNEMjD8/8/ByAAUQQFiAGQgBAcAAAB42uNggAAOCM7mYGAE0Q1AzAjEVSxQORjNtAqIgTRjKBSD2DOBRCGEBsmxX2BgAAC45QWReNpjYICCGIZHjH1M05ge4IEvABgRD6wAAAEAAAAWAGcABAAAAAAAAgABAAIAFgAAAQAA1gAAAAB42nWQOw7CMBBEX0hAIFEjyhSIDpREiF9HQ02BoAbxbQAFIu7CKThGuARnYRIbKU0Kr9+OZ9drA3UOuDheA4c2WK7QVGbYZUHHskeXh+UqLV6Wa3K/LafSU8sfAr5sSFR1Evd4cmbHkb2UIs+5crF7nGs+EX3V+Ey1ynqY05CR9IFWJEcoKvcXs5VizF1KdnvWJ7uxrHatuNV/mUn/7qWcibIZN/Uys2RxrMkCJoohw/w1+WQ/nBAycwAAAHjafcYxDoJAAETRGVBAUNTGcyyLi1oaYPUmSmIMDYW3V7JT+5v3EeF/B4ARY3To4XHDnQsumTBlxhVzFlxzw5Jb7rhPHq/P+KzS6T0YY7pZ+xtZSStreZRONvIkz/Iir0Hrgy7ofPsF66kkZnja28H4v3UDYy+D9waOgIiNjIx9kRvd2LQjFDcIRHpvEAkCMhoiZTewacdEMGxgUnDdwKztsoFZwXUXAxOjOgOTNpjPouC6iZkdwmHcwApVxQ4UZfVg0t7I7FYG5LKBNLEziTPARCI3iGgDAGTFIuUAAVNQUQwAAA==) format('woff');font-weight:400;font-style:normal}@font-face{font-family:proxima_nova;src:url(data:application/x-font-woff;charset=utf-8;base64,) format('woff'),url(https://cdn.auth0.com/fonts/proxima-nova/proxima_nova_thin-webfont-webfont.eot),url(https://cdn.auth0.com/fonts/proxima-nova/proxima_nova_thin-webfont-webfont.woff) format('woff');font-weight:100;font-style:normal}@font-face{font-family:proxima_nova;src:url(data:application/x-font-woff;charset=utf-8;base64,) format('woff'),url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-regular-webfont-webfont.eot),url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-regular-webfont-webfont.woff) format('woff');font-weight:400;font-style:normal}@font-face{font-family:proxima_nova;src:url(data:application/x-font-woff;charset=utf-8;base64,) format('woff'),url(https://cdn.auth0.com/fonts/proxima-nova/proximanova-semibold-webfont-webfont.ttf) format('truetype');font-weight:700;font-style:normal}#a0-widget [class*=\" a0-icon-\"]:before,#a0-widget [class^=a0-icon-]:before{font-family:auth0!important;font-style:normal!important;font-weight:400!important;font-variant:normal!important;text-transform:none!important;speak:none;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}#a0-widget .a0-icon-badge:before{content:\"a\"}#a0-widget .a0-icon-budicon:before{content:\"b\"}#a0-widget .a0-icon-budicon-1:before{content:\"c\"}#a0-widget .a0-icon-budicon-2:before{content:\"d\"}#a0-widget .a0-icon-budicon-3:before{content:\"e\"}#a0-widget .a0-animated{-webkit-animation-duration:1s;-moz-animation-duration:1s;animation-duration:1s;-webkit-animation-fill-mode:both;-moz-animation-fill-mode:both;animation-fill-mode:both}#a0-widget .a0-animated.a0-infinite{-webkit-animation-iteration-count:infinite;-moz-animation-iteration-count:infinite;animation-iteration-count:infinite}#a0-widget .a0-animated.a0-hinge{-webkit-animation-duration:2s;-moz-animation-duration:2s;animation-duration:2s}@-webkit-keyframes bounce{0%,100%,20%,50%,80%{-webkit-transform:translateY(0);transform:translateY(0)}40%{-webkit-transform:translateY(-30px);transform:translateY(-30px)}60%{-webkit-transform:translateY(-15px);transform:translateY(-15px)}}@keyframes bounce{0%,100%,20%,50%,80%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}40%{-webkit-transform:translateY(-30px);-ms-transform:translateY(-30px);-moz-transform:translateY(-30px);transform:translateY(-30px)}60%{-webkit-transform:translateY(-15px);-ms-transform:translateY(-15px);-moz-transform:translateY(-15px);transform:translateY(-15px)}}@-moz-keyframes bounce{0%,100%,20%,50%,80%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}40%{-webkit-transform:translateY(-30px);-ms-transform:translateY(-30px);-moz-transform:translateY(-30px);transform:translateY(-30px)}60%{-webkit-transform:translateY(-15px);-ms-transform:translateY(-15px);-moz-transform:translateY(-15px);transform:translateY(-15px)}}#a0-widget .a0-bounce{-webkit-animation-name:bounce;-moz-animation-name:bounce;animation-name:bounce}@-webkit-keyframes flash{0%,100%,50%{opacity:1}25%,75%{opacity:0}}@keyframes flash{0%,100%,50%{opacity:1}25%,75%{opacity:0}}@-moz-keyframes flash{0%,100%,50%{opacity:1}25%,75%{opacity:0}}#a0-widget .a0-flash{-webkit-animation-name:flash;-moz-animation-name:flash;animation-name:flash}@-webkit-keyframes pulse{0%{-webkit-transform:scale(1);transform:scale(1)}50%{-webkit-transform:scale(1.1);transform:scale(1.1)}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes pulse{0%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}50%{-webkit-transform:scale(1.1);-ms-transform:scale(1.1);-moz-transform:scale(1.1);transform:scale(1.1)}100%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}}@-moz-keyframes pulse{0%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}50%{-webkit-transform:scale(1.1);-ms-transform:scale(1.1);-moz-transform:scale(1.1);transform:scale(1.1)}100%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}}#a0-widget .a0-pulse{-webkit-animation-name:pulse;-moz-animation-name:pulse;animation-name:pulse}@-webkit-keyframes rubberBand{0%{-webkit-transform:scale(1);transform:scale(1)}30%{-webkit-transform:scaleX(1.25) scaleY(0.75);transform:scaleX(1.25) scaleY(0.75)}40%{-webkit-transform:scaleX(0.75) scaleY(1.25);transform:scaleX(0.75) scaleY(1.25)}60%{-webkit-transform:scaleX(1.15) scaleY(0.85);transform:scaleX(1.15) scaleY(0.85)}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes rubberBand{0%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}30%{-webkit-transform:scaleX(1.25) scaleY(0.75);-ms-transform:scaleX(1.25) scaleY(0.75);-moz-transform:scaleX(1.25) scaleY(0.75);transform:scaleX(1.25) scaleY(0.75)}40%{-webkit-transform:scaleX(0.75) scaleY(1.25);-ms-transform:scaleX(0.75) scaleY(1.25);-moz-transform:scaleX(0.75) scaleY(1.25);transform:scaleX(0.75) scaleY(1.25)}60%{-webkit-transform:scaleX(1.15) scaleY(0.85);-ms-transform:scaleX(1.15) scaleY(0.85);-moz-transform:scaleX(1.15) scaleY(0.85);transform:scaleX(1.15) scaleY(0.85)}100%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}}@-moz-keyframes rubberBand{0%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}30%{-webkit-transform:scaleX(1.25) scaleY(0.75);-ms-transform:scaleX(1.25) scaleY(0.75);-moz-transform:scaleX(1.25) scaleY(0.75);transform:scaleX(1.25) scaleY(0.75)}40%{-webkit-transform:scaleX(0.75) scaleY(1.25);-ms-transform:scaleX(0.75) scaleY(1.25);-moz-transform:scaleX(0.75) scaleY(1.25);transform:scaleX(0.75) scaleY(1.25)}60%{-webkit-transform:scaleX(1.15) scaleY(0.85);-ms-transform:scaleX(1.15) scaleY(0.85);-moz-transform:scaleX(1.15) scaleY(0.85);transform:scaleX(1.15) scaleY(0.85)}100%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}}#a0-widget .a0-rubberBand{-webkit-animation-name:rubberBand;-moz-animation-name:rubberBand;animation-name:rubberBand}@-webkit-keyframes shake{0%,100%{-webkit-transform:translateX(0);transform:translateX(0)}10%,30%,50%,70%,90%{-webkit-transform:translateX(-10px);transform:translateX(-10px)}20%,40%,60%,80%{-webkit-transform:translateX(10px);transform:translateX(10px)}}@keyframes shake{0%,100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}10%,30%,50%,70%,90%{-webkit-transform:translateX(-10px);-ms-transform:translateX(-10px);-moz-transform:translateX(-10px);transform:translateX(-10px)}20%,40%,60%,80%{-webkit-transform:translateX(10px);-ms-transform:translateX(10px);-moz-transform:translateX(10px);transform:translateX(10px)}}@-moz-keyframes shake{0%,100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}10%,30%,50%,70%,90%{-webkit-transform:translateX(-10px);-ms-transform:translateX(-10px);-moz-transform:translateX(-10px);transform:translateX(-10px)}20%,40%,60%,80%{-webkit-transform:translateX(10px);-ms-transform:translateX(10px);-moz-transform:translateX(10px);transform:translateX(10px)}}#a0-widget .a0-shake{-webkit-animation-name:shake;-moz-animation-name:shake;animation-name:shake}@-webkit-keyframes swing{20%{-webkit-transform:rotate(15deg);transform:rotate(15deg)}40%{-webkit-transform:rotate(-10deg);transform:rotate(-10deg)}60%{-webkit-transform:rotate(5deg);transform:rotate(5deg)}80%{-webkit-transform:rotate(-5deg);transform:rotate(-5deg)}100%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}}@keyframes swing{20%{-webkit-transform:rotate(15deg);-ms-transform:rotate(15deg);-moz-transform:rotate(15deg);transform:rotate(15deg)}40%{-webkit-transform:rotate(-10deg);-ms-transform:rotate(-10deg);-moz-transform:rotate(-10deg);transform:rotate(-10deg)}60%{-webkit-transform:rotate(5deg);-ms-transform:rotate(5deg);-moz-transform:rotate(5deg);transform:rotate(5deg)}80%{-webkit-transform:rotate(-5deg);-ms-transform:rotate(-5deg);-moz-transform:rotate(-5deg);transform:rotate(-5deg)}100%{-webkit-transform:rotate(0deg);-ms-transform:rotate(0deg);-moz-transform:rotate(0deg);transform:rotate(0deg)}}@-moz-keyframes swing{20%{-webkit-transform:rotate(15deg);-ms-transform:rotate(15deg);-moz-transform:rotate(15deg);transform:rotate(15deg)}40%{-webkit-transform:rotate(-10deg);-ms-transform:rotate(-10deg);-moz-transform:rotate(-10deg);transform:rotate(-10deg)}60%{-webkit-transform:rotate(5deg);-ms-transform:rotate(5deg);-moz-transform:rotate(5deg);transform:rotate(5deg)}80%{-webkit-transform:rotate(-5deg);-ms-transform:rotate(-5deg);-moz-transform:rotate(-5deg);transform:rotate(-5deg)}100%{-webkit-transform:rotate(0deg);-ms-transform:rotate(0deg);-moz-transform:rotate(0deg);transform:rotate(0deg)}}#a0-widget .a0-swing{-webkit-transform-origin:top center;-ms-transform-origin:top center;-moz-transform-origin:top center;transform-origin:top center;-webkit-animation-name:swing;-moz-animation-name:swing;animation-name:swing}@-webkit-keyframes tada{0%{-webkit-transform:scale(1);transform:scale(1)}10%,20%{-webkit-transform:scale(0.9) rotate(-3deg);transform:scale(0.9) rotate(-3deg)}30%,50%,70%,90%{-webkit-transform:scale(1.1) rotate(3deg);transform:scale(1.1) rotate(3deg)}40%,60%,80%{-webkit-transform:scale(1.1) rotate(-3deg);transform:scale(1.1) rotate(-3deg)}100%{-webkit-transform:scale(1) rotate(0);transform:scale(1) rotate(0)}}@keyframes tada{0%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}10%,20%{-webkit-transform:scale(0.9) rotate(-3deg);-ms-transform:scale(0.9) rotate(-3deg);-moz-transform:scale(0.9) rotate(-3deg);transform:scale(0.9) rotate(-3deg)}30%,50%,70%,90%{-webkit-transform:scale(1.1) rotate(3deg);-ms-transform:scale(1.1) rotate(3deg);-moz-transform:scale(1.1) rotate(3deg);transform:scale(1.1) rotate(3deg)}40%,60%,80%{-webkit-transform:scale(1.1) rotate(-3deg);-ms-transform:scale(1.1) rotate(-3deg);-moz-transform:scale(1.1) rotate(-3deg);transform:scale(1.1) rotate(-3deg)}100%{-webkit-transform:scale(1) rotate(0);-ms-transform:scale(1) rotate(0);-moz-transform:scale(1) rotate(0);transform:scale(1) rotate(0)}}@-moz-keyframes tada{0%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}10%,20%{-webkit-transform:scale(0.9) rotate(-3deg);-ms-transform:scale(0.9) rotate(-3deg);-moz-transform:scale(0.9) rotate(-3deg);transform:scale(0.9) rotate(-3deg)}30%,50%,70%,90%{-webkit-transform:scale(1.1) rotate(3deg);-ms-transform:scale(1.1) rotate(3deg);-moz-transform:scale(1.1) rotate(3deg);transform:scale(1.1) rotate(3deg)}40%,60%,80%{-webkit-transform:scale(1.1) rotate(-3deg);-ms-transform:scale(1.1) rotate(-3deg);-moz-transform:scale(1.1) rotate(-3deg);transform:scale(1.1) rotate(-3deg)}100%{-webkit-transform:scale(1) rotate(0);-ms-transform:scale(1) rotate(0);-moz-transform:scale(1) rotate(0);transform:scale(1) rotate(0)}}#a0-widget .a0-tada{-webkit-animation-name:tada;-moz-animation-name:tada;animation-name:tada}@-webkit-keyframes wobble{0%{-webkit-transform:translateX(0%);transform:translateX(0%)}15%{-webkit-transform:translateX(-25%) rotate(-5deg);transform:translateX(-25%) rotate(-5deg)}30%{-webkit-transform:translateX(20%) rotate(3deg);transform:translateX(20%) rotate(3deg)}45%{-webkit-transform:translateX(-15%) rotate(-3deg);transform:translateX(-15%) rotate(-3deg)}60%{-webkit-transform:translateX(10%) rotate(2deg);transform:translateX(10%) rotate(2deg)}75%{-webkit-transform:translateX(-5%) rotate(-1deg);transform:translateX(-5%) rotate(-1deg)}100%{-webkit-transform:translateX(0%);transform:translateX(0%)}}@keyframes wobble{0%{-webkit-transform:translateX(0%);-ms-transform:translateX(0%);-moz-transform:translateX(0%);transform:translateX(0%)}15%{-webkit-transform:translateX(-25%) rotate(-5deg);-ms-transform:translateX(-25%) rotate(-5deg);-moz-transform:translateX(-25%) rotate(-5deg);transform:translateX(-25%) rotate(-5deg)}30%{-webkit-transform:translateX(20%) rotate(3deg);-ms-transform:translateX(20%) rotate(3deg);-moz-transform:translateX(20%) rotate(3deg);transform:translateX(20%) rotate(3deg)}45%{-webkit-transform:translateX(-15%) rotate(-3deg);-ms-transform:translateX(-15%) rotate(-3deg);-moz-transform:translateX(-15%) rotate(-3deg);transform:translateX(-15%) rotate(-3deg)}60%{-webkit-transform:translateX(10%) rotate(2deg);-ms-transform:translateX(10%) rotate(2deg);-moz-transform:translateX(10%) rotate(2deg);transform:translateX(10%) rotate(2deg)}75%{-webkit-transform:translateX(-5%) rotate(-1deg);-ms-transform:translateX(-5%) rotate(-1deg);-moz-transform:translateX(-5%) rotate(-1deg);transform:translateX(-5%) rotate(-1deg)}100%{-webkit-transform:translateX(0%);-ms-transform:translateX(0%);-moz-transform:translateX(0%);transform:translateX(0%)}}@-moz-keyframes wobble{0%{-webkit-transform:translateX(0%);-ms-transform:translateX(0%);-moz-transform:translateX(0%);transform:translateX(0%)}15%{-webkit-transform:translateX(-25%) rotate(-5deg);-ms-transform:translateX(-25%) rotate(-5deg);-moz-transform:translateX(-25%) rotate(-5deg);transform:translateX(-25%) rotate(-5deg)}30%{-webkit-transform:translateX(20%) rotate(3deg);-ms-transform:translateX(20%) rotate(3deg);-moz-transform:translateX(20%) rotate(3deg);transform:translateX(20%) rotate(3deg)}45%{-webkit-transform:translateX(-15%) rotate(-3deg);-ms-transform:translateX(-15%) rotate(-3deg);-moz-transform:translateX(-15%) rotate(-3deg);transform:translateX(-15%) rotate(-3deg)}60%{-webkit-transform:translateX(10%) rotate(2deg);-ms-transform:translateX(10%) rotate(2deg);-moz-transform:translateX(10%) rotate(2deg);transform:translateX(10%) rotate(2deg)}75%{-webkit-transform:translateX(-5%) rotate(-1deg);-ms-transform:translateX(-5%) rotate(-1deg);-moz-transform:translateX(-5%) rotate(-1deg);transform:translateX(-5%) rotate(-1deg)}100%{-webkit-transform:translateX(0%);-ms-transform:translateX(0%);-moz-transform:translateX(0%);transform:translateX(0%)}}#a0-widget .a0-wobble{-webkit-animation-name:wobble;-moz-animation-name:wobble;animation-name:wobble}@-webkit-keyframes bounceIn{0%{opacity:0;-webkit-transform:scale(0.3);transform:scale(0.3)}50%{opacity:1;-webkit-transform:scale(1.05);transform:scale(1.05)}70%{-webkit-transform:scale(0.9);transform:scale(0.9)}100%{opacity:1;-webkit-transform:scale(1);transform:scale(1)}}@keyframes bounceIn{0%{opacity:0;-webkit-transform:scale(0.3);-ms-transform:scale(0.3);-moz-transform:scale(0.3);transform:scale(0.3)}50%{opacity:1;-webkit-transform:scale(1.05);-ms-transform:scale(1.05);-moz-transform:scale(1.05);transform:scale(1.05)}70%{-webkit-transform:scale(0.9);-ms-transform:scale(0.9);-moz-transform:scale(0.9);transform:scale(0.9)}100%{opacity:1;-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}}@-moz-keyframes bounceIn{0%{opacity:0;-webkit-transform:scale(0.3);-ms-transform:scale(0.3);-moz-transform:scale(0.3);transform:scale(0.3)}50%{opacity:1;-webkit-transform:scale(1.05);-ms-transform:scale(1.05);-moz-transform:scale(1.05);transform:scale(1.05)}70%{-webkit-transform:scale(0.9);-ms-transform:scale(0.9);-moz-transform:scale(0.9);transform:scale(0.9)}100%{opacity:1;-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}}#a0-widget .a0-bounceIn{-webkit-animation-name:bounceIn;-moz-animation-name:bounceIn;animation-name:bounceIn}@-webkit-keyframes bounceInDown{0%{opacity:0;-webkit-transform:translateY(-2000px);transform:translateY(-2000px)}60%{opacity:1;-webkit-transform:translateY(30px);transform:translateY(30px)}80%{-webkit-transform:translateY(-10px);transform:translateY(-10px)}100%{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes bounceInDown{0%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}60%{opacity:1;-webkit-transform:translateY(30px);-ms-transform:translateY(30px);-moz-transform:translateY(30px);transform:translateY(30px)}80%{-webkit-transform:translateY(-10px);-ms-transform:translateY(-10px);-moz-transform:translateY(-10px);transform:translateY(-10px)}100%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}@-moz-keyframes bounceInDown{0%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}60%{opacity:1;-webkit-transform:translateY(30px);-ms-transform:translateY(30px);-moz-transform:translateY(30px);transform:translateY(30px)}80%{-webkit-transform:translateY(-10px);-ms-transform:translateY(-10px);-moz-transform:translateY(-10px);transform:translateY(-10px)}100%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}#a0-widget .a0-bounceInDown{-webkit-animation-name:bounceInDown;-moz-animation-name:bounceInDown;animation-name:bounceInDown}@-webkit-keyframes bounceInLeft{0%{opacity:0;-webkit-transform:translateX(-2000px);transform:translateX(-2000px)}60%{opacity:1;-webkit-transform:translateX(30px);transform:translateX(30px)}80%{-webkit-transform:translateX(-10px);transform:translateX(-10px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes bounceInLeft{0%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}60%{opacity:1;-webkit-transform:translateX(30px);-ms-transform:translateX(30px);-moz-transform:translateX(30px);transform:translateX(30px)}80%{-webkit-transform:translateX(-10px);-ms-transform:translateX(-10px);-moz-transform:translateX(-10px);transform:translateX(-10px)}100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}@-moz-keyframes bounceInLeft{0%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}60%{opacity:1;-webkit-transform:translateX(30px);-ms-transform:translateX(30px);-moz-transform:translateX(30px);transform:translateX(30px)}80%{-webkit-transform:translateX(-10px);-ms-transform:translateX(-10px);-moz-transform:translateX(-10px);transform:translateX(-10px)}100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}#a0-widget .a0-bounceInLeft{-webkit-animation-name:bounceInLeft;-moz-animation-name:bounceInLeft;animation-name:bounceInLeft}@-webkit-keyframes bounceInRight{0%{opacity:0;-webkit-transform:translateX(2000px);transform:translateX(2000px)}60%{opacity:1;-webkit-transform:translateX(-30px);transform:translateX(-30px)}80%{-webkit-transform:translateX(10px);transform:translateX(10px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes bounceInRight{0%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}60%{opacity:1;-webkit-transform:translateX(-30px);-ms-transform:translateX(-30px);-moz-transform:translateX(-30px);transform:translateX(-30px)}80%{-webkit-transform:translateX(10px);-ms-transform:translateX(10px);-moz-transform:translateX(10px);transform:translateX(10px)}100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}@-moz-keyframes bounceInRight{0%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}60%{opacity:1;-webkit-transform:translateX(-30px);-ms-transform:translateX(-30px);-moz-transform:translateX(-30px);transform:translateX(-30px)}80%{-webkit-transform:translateX(10px);-ms-transform:translateX(10px);-moz-transform:translateX(10px);transform:translateX(10px)}100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}#a0-widget .a0-bounceInRight{-webkit-animation-name:bounceInRight;-moz-animation-name:bounceInRight;animation-name:bounceInRight}@-webkit-keyframes bounceInUp{0%{opacity:0;-webkit-transform:translateY(2000px);transform:translateY(2000px)}60%{opacity:1;-webkit-transform:translateY(-30px);transform:translateY(-30px)}80%{-webkit-transform:translateY(10px);transform:translateY(10px)}100%{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes bounceInUp{0%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}60%{opacity:1;-webkit-transform:translateY(-30px);-ms-transform:translateY(-30px);-moz-transform:translateY(-30px);transform:translateY(-30px)}80%{-webkit-transform:translateY(10px);-ms-transform:translateY(10px);-moz-transform:translateY(10px);transform:translateY(10px)}100%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}@-moz-keyframes bounceInUp{0%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}60%{opacity:1;-webkit-transform:translateY(-30px);-ms-transform:translateY(-30px);-moz-transform:translateY(-30px);transform:translateY(-30px)}80%{-webkit-transform:translateY(10px);-ms-transform:translateY(10px);-moz-transform:translateY(10px);transform:translateY(10px)}100%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}#a0-widget .a0-bounceInUp{-webkit-animation-name:bounceInUp;-moz-animation-name:bounceInUp;animation-name:bounceInUp}@-webkit-keyframes bounceOut{0%{-webkit-transform:scale(1);transform:scale(1)}25%{-webkit-transform:scale(0.95);transform:scale(0.95)}50%{opacity:1;-webkit-transform:scale(1.1);transform:scale(1.1)}100%{opacity:0;-webkit-transform:scale(0.3);transform:scale(0.3)}}@keyframes bounceOut{0%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}25%{-webkit-transform:scale(0.95);-ms-transform:scale(0.95);-moz-transform:scale(0.95);transform:scale(0.95)}50%{opacity:1;-webkit-transform:scale(1.1);-ms-transform:scale(1.1);-moz-transform:scale(1.1);transform:scale(1.1)}100%{opacity:0;-webkit-transform:scale(0.3);-ms-transform:scale(0.3);-moz-transform:scale(0.3);transform:scale(0.3)}}@-moz-keyframes bounceOut{0%{-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}25%{-webkit-transform:scale(0.95);-ms-transform:scale(0.95);-moz-transform:scale(0.95);transform:scale(0.95)}50%{opacity:1;-webkit-transform:scale(1.1);-ms-transform:scale(1.1);-moz-transform:scale(1.1);transform:scale(1.1)}100%{opacity:0;-webkit-transform:scale(0.3);-ms-transform:scale(0.3);-moz-transform:scale(0.3);transform:scale(0.3)}}#a0-widget .a0-bounceOut{-webkit-animation-name:bounceOut;-moz-animation-name:bounceOut;animation-name:bounceOut}@-webkit-keyframes bounceOutDown{0%{-webkit-transform:translateY(0);transform:translateY(0)}20%{opacity:1;-webkit-transform:translateY(-20px);transform:translateY(-20px)}100%{opacity:0;-webkit-transform:translateY(2000px);transform:translateY(2000px)}}@keyframes bounceOutDown{0%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}20%{opacity:1;-webkit-transform:translateY(-20px);-ms-transform:translateY(-20px);-moz-transform:translateY(-20px);transform:translateY(-20px)}100%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}}@-moz-keyframes bounceOutDown{0%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}20%{opacity:1;-webkit-transform:translateY(-20px);-ms-transform:translateY(-20px);-moz-transform:translateY(-20px);transform:translateY(-20px)}100%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}}#a0-widget .a0-bounceOutDown{-webkit-animation-name:bounceOutDown;-moz-animation-name:bounceOutDown;animation-name:bounceOutDown}@-webkit-keyframes bounceOutLeft{0%{-webkit-transform:translateX(0);transform:translateX(0)}20%{opacity:1;-webkit-transform:translateX(20px);transform:translateX(20px)}100%{opacity:0;-webkit-transform:translateX(-2000px);transform:translateX(-2000px)}}@keyframes bounceOutLeft{0%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}20%{opacity:1;-webkit-transform:translateX(20px);-ms-transform:translateX(20px);-moz-transform:translateX(20px);transform:translateX(20px)}100%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}}@-moz-keyframes bounceOutLeft{0%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}20%{opacity:1;-webkit-transform:translateX(20px);-ms-transform:translateX(20px);-moz-transform:translateX(20px);transform:translateX(20px)}100%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}}#a0-widget .a0-bounceOutLeft{-webkit-animation-name:bounceOutLeft;-moz-animation-name:bounceOutLeft;animation-name:bounceOutLeft}@-webkit-keyframes bounceOutRight{0%{-webkit-transform:translateX(0);transform:translateX(0)}20%{opacity:1;-webkit-transform:translateX(-20px);transform:translateX(-20px)}100%{opacity:0;-webkit-transform:translateX(2000px);transform:translateX(2000px)}}@keyframes bounceOutRight{0%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}20%{opacity:1;-webkit-transform:translateX(-20px);-ms-transform:translateX(-20px);-moz-transform:translateX(-20px);transform:translateX(-20px)}100%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}}@-moz-keyframes bounceOutRight{0%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}20%{opacity:1;-webkit-transform:translateX(-20px);-ms-transform:translateX(-20px);-moz-transform:translateX(-20px);transform:translateX(-20px)}100%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}}#a0-widget .a0-bounceOutRight{-webkit-animation-name:bounceOutRight;-moz-animation-name:bounceOutRight;animation-name:bounceOutRight}@-webkit-keyframes bounceOutUp{0%{-webkit-transform:translateY(0);transform:translateY(0)}20%{opacity:1;-webkit-transform:translateY(20px);transform:translateY(20px)}100%{opacity:0;-webkit-transform:translateY(-2000px);transform:translateY(-2000px)}}@keyframes bounceOutUp{0%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}20%{opacity:1;-webkit-transform:translateY(20px);-ms-transform:translateY(20px);-moz-transform:translateY(20px);transform:translateY(20px)}100%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}}@-moz-keyframes bounceOutUp{0%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}20%{opacity:1;-webkit-transform:translateY(20px);-ms-transform:translateY(20px);-moz-transform:translateY(20px);transform:translateY(20px)}100%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}}#a0-widget .a0-bounceOutUp{-webkit-animation-name:bounceOutUp;-moz-animation-name:bounceOutUp;animation-name:bounceOutUp}@-webkit-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@keyframes fadeIn{0%{opacity:0}100%{opacity:1}}@-moz-keyframes fadeIn{0%{opacity:0}100%{opacity:1}}#a0-widget .a0-fadeIn{-webkit-animation-name:fadeIn;-moz-animation-name:fadeIn;animation-name:fadeIn}@-webkit-keyframes fadeInDown{0%{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}100%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes fadeInDown{0%{opacity:0;-webkit-transform:translateY(-20px);-ms-transform:translateY(-20px);-moz-transform:translateY(-20px);transform:translateY(-20px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}@-moz-keyframes fadeInDown{0%{opacity:0;-webkit-transform:translateY(-20px);-ms-transform:translateY(-20px);-moz-transform:translateY(-20px);transform:translateY(-20px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}#a0-widget .a0-fadeInDown{-webkit-animation-name:fadeInDown;-moz-animation-name:fadeInDown;animation-name:fadeInDown}@-webkit-keyframes fadeInDownBig{0%{opacity:0;-webkit-transform:translateY(-2000px);transform:translateY(-2000px)}100%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes fadeInDownBig{0%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}@-moz-keyframes fadeInDownBig{0%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}#a0-widget .a0-fadeInDownBig{-webkit-animation-name:fadeInDownBig;-moz-animation-name:fadeInDownBig;animation-name:fadeInDownBig}@-webkit-keyframes fadeInLeft{0%{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}100%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes fadeInLeft{0%{opacity:0;-webkit-transform:translateX(-20px);-ms-transform:translateX(-20px);-moz-transform:translateX(-20px);transform:translateX(-20px)}100%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}@-moz-keyframes fadeInLeft{0%{opacity:0;-webkit-transform:translateX(-20px);-ms-transform:translateX(-20px);-moz-transform:translateX(-20px);transform:translateX(-20px)}100%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}#a0-widget .a0-fadeInLeft{-webkit-animation-name:fadeInLeft;-moz-animation-name:fadeInLeft;animation-name:fadeInLeft}@-webkit-keyframes fadeInLeftBig{0%{opacity:0;-webkit-transform:translateX(-2000px);transform:translateX(-2000px)}100%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes fadeInLeftBig{0%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}100%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}@-moz-keyframes fadeInLeftBig{0%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}100%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}#a0-widget .a0-fadeInLeftBig{-webkit-animation-name:fadeInLeftBig;-moz-animation-name:fadeInLeftBig;animation-name:fadeInLeftBig}@-webkit-keyframes fadeInRight{0%{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}100%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes fadeInRight{0%{opacity:0;-webkit-transform:translateX(20px);-ms-transform:translateX(20px);-moz-transform:translateX(20px);transform:translateX(20px)}100%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}@-moz-keyframes fadeInRight{0%{opacity:0;-webkit-transform:translateX(20px);-ms-transform:translateX(20px);-moz-transform:translateX(20px);transform:translateX(20px)}100%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}#a0-widget .a0-fadeInRight{-webkit-animation-name:fadeInRight;-moz-animation-name:fadeInRight;animation-name:fadeInRight}@-webkit-keyframes fadeInRightBig{0%{opacity:0;-webkit-transform:translateX(2000px);transform:translateX(2000px)}100%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes fadeInRightBig{0%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}100%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}@-moz-keyframes fadeInRightBig{0%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}100%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}#a0-widget .a0-fadeInRightBig{-webkit-animation-name:fadeInRightBig;-moz-animation-name:fadeInRightBig;animation-name:fadeInRightBig}@-webkit-keyframes fadeInUp{0%{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}100%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes fadeInUp{0%{opacity:0;-webkit-transform:translateY(20px);-ms-transform:translateY(20px);-moz-transform:translateY(20px);transform:translateY(20px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}@-moz-keyframes fadeInUp{0%{opacity:0;-webkit-transform:translateY(20px);-ms-transform:translateY(20px);-moz-transform:translateY(20px);transform:translateY(20px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}#a0-widget .a0-fadeInUp{-webkit-animation-name:fadeInUp;-moz-animation-name:fadeInUp;animation-name:fadeInUp}@-webkit-keyframes fadeInUpBig{0%{opacity:0;-webkit-transform:translateY(2000px);transform:translateY(2000px)}100%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes fadeInUpBig{0%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}@-moz-keyframes fadeInUpBig{0%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}#a0-widget .a0-fadeInUpBig{-webkit-animation-name:fadeInUpBig;-moz-animation-name:fadeInUpBig;animation-name:fadeInUpBig}@-webkit-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@keyframes fadeOut{0%{opacity:1}100%{opacity:0}}@-moz-keyframes fadeOut{0%{opacity:1}100%{opacity:0}}#a0-widget .a0-fadeOut{-webkit-animation-name:fadeOut;-moz-animation-name:fadeOut;animation-name:fadeOut}@-webkit-keyframes fadeOutDown{0%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}}@keyframes fadeOutDown{0%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(20px);-ms-transform:translateY(20px);-moz-transform:translateY(20px);transform:translateY(20px)}}@-moz-keyframes fadeOutDown{0%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(20px);-ms-transform:translateY(20px);-moz-transform:translateY(20px);transform:translateY(20px)}}#a0-widget .a0-fadeOutDown{-webkit-animation-name:fadeOutDown;-moz-animation-name:fadeOutDown;animation-name:fadeOutDown}@-webkit-keyframes fadeOutDownBig{0%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(2000px);transform:translateY(2000px)}}@keyframes fadeOutDownBig{0%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}}@-moz-keyframes fadeOutDownBig{0%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}}#a0-widget .a0-fadeOutDownBig{-webkit-animation-name:fadeOutDownBig;-moz-animation-name:fadeOutDownBig;animation-name:fadeOutDownBig}@-webkit-keyframes fadeOutLeft{0%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}}@keyframes fadeOutLeft{0%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-20px);-ms-transform:translateX(-20px);-moz-transform:translateX(-20px);transform:translateX(-20px)}}@-moz-keyframes fadeOutLeft{0%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-20px);-ms-transform:translateX(-20px);-moz-transform:translateX(-20px);transform:translateX(-20px)}}#a0-widget .a0-fadeOutLeft{-webkit-animation-name:fadeOutLeft;-moz-animation-name:fadeOutLeft;animation-name:fadeOutLeft}@-webkit-keyframes fadeOutLeftBig{0%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-2000px);transform:translateX(-2000px)}}@keyframes fadeOutLeftBig{0%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}}@-moz-keyframes fadeOutLeftBig{0%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}}#a0-widget .a0-fadeOutLeftBig{-webkit-animation-name:fadeOutLeftBig;-moz-animation-name:fadeOutLeftBig;animation-name:fadeOutLeftBig}@-webkit-keyframes fadeOutRight{0%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}}@keyframes fadeOutRight{0%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(20px);-ms-transform:translateX(20px);-moz-transform:translateX(20px);transform:translateX(20px)}}@-moz-keyframes fadeOutRight{0%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(20px);-ms-transform:translateX(20px);-moz-transform:translateX(20px);transform:translateX(20px)}}#a0-widget .a0-fadeOutRight{-webkit-animation-name:fadeOutRight;-moz-animation-name:fadeOutRight;animation-name:fadeOutRight}@-webkit-keyframes fadeOutRightBig{0%{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(2000px);transform:translateX(2000px)}}@keyframes fadeOutRightBig{0%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}}@-moz-keyframes fadeOutRightBig{0%{opacity:1;-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}}#a0-widget .a0-fadeOutRightBig{-webkit-animation-name:fadeOutRightBig;-moz-animation-name:fadeOutRightBig;animation-name:fadeOutRightBig}@-webkit-keyframes fadeOutUp{0%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}}@keyframes fadeOutUp{0%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-20px);-ms-transform:translateY(-20px);-moz-transform:translateY(-20px);transform:translateY(-20px)}}@-moz-keyframes fadeOutUp{0%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-20px);-ms-transform:translateY(-20px);-moz-transform:translateY(-20px);transform:translateY(-20px)}}#a0-widget .a0-fadeOutUp{-webkit-animation-name:fadeOutUp;-moz-animation-name:fadeOutUp;animation-name:fadeOutUp}@-webkit-keyframes fadeOutUpBig{0%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-2000px);transform:translateY(-2000px)}}@keyframes fadeOutUpBig{0%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}}@-moz-keyframes fadeOutUpBig{0%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}}#a0-widget .a0-fadeOutUpBig{-webkit-animation-name:fadeOutUpBig;-moz-animation-name:fadeOutUpBig;animation-name:fadeOutUpBig}@-webkit-keyframes flip{0%{-webkit-transform:perspective(400px) translateZ(0) rotateY(0) scale(1);transform:perspective(400px) translateZ(0) rotateY(0) scale(1);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}40%{-webkit-transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}50%{-webkit-transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}80%{-webkit-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}100%{-webkit-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);-webkit-animation-timing-function:ease-in;animation-timing-function:ease-in}}@keyframes flip{0%{-webkit-transform:perspective(400px) translateZ(0) rotateY(0) scale(1);-ms-transform:perspective(400px) translateZ(0) rotateY(0) scale(1);-moz-transform:perspective(400px) translateZ(0) rotateY(0) scale(1);transform:perspective(400px) translateZ(0) rotateY(0) scale(1);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}40%{-webkit-transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);-ms-transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);-moz-transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}50%{-webkit-transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);-ms-transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);-moz-transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);-webkit-animation-timing-function:ease-in;-moz-animation-timing-function:ease-in;animation-timing-function:ease-in}80%{-webkit-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);-ms-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);-moz-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);-webkit-animation-timing-function:ease-in;-moz-animation-timing-function:ease-in;animation-timing-function:ease-in}100%{-webkit-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);-ms-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);-moz-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);-webkit-animation-timing-function:ease-in;-moz-animation-timing-function:ease-in;animation-timing-function:ease-in}}@-moz-keyframes flip{0%{-webkit-transform:perspective(400px) translateZ(0) rotateY(0) scale(1);-ms-transform:perspective(400px) translateZ(0) rotateY(0) scale(1);-moz-transform:perspective(400px) translateZ(0) rotateY(0) scale(1);transform:perspective(400px) translateZ(0) rotateY(0) scale(1);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}40%{-webkit-transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);-ms-transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);-moz-transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);transform:perspective(400px) translateZ(150px) rotateY(170deg) scale(1);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}50%{-webkit-transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);-ms-transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);-moz-transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);transform:perspective(400px) translateZ(150px) rotateY(190deg) scale(1);-webkit-animation-timing-function:ease-in;-moz-animation-timing-function:ease-in;animation-timing-function:ease-in}80%{-webkit-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);-ms-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);-moz-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);transform:perspective(400px) translateZ(0) rotateY(360deg) scale(0.95);-webkit-animation-timing-function:ease-in;-moz-animation-timing-function:ease-in;animation-timing-function:ease-in}100%{-webkit-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);-ms-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);-moz-transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);transform:perspective(400px) translateZ(0) rotateY(360deg) scale(1);-webkit-animation-timing-function:ease-in;-moz-animation-timing-function:ease-in;animation-timing-function:ease-in}}#a0-widget .a0-animated.a0-flip{-webkit-backface-visibility:visible;-ms-backface-visibility:visible;-moz-backface-visibility:visible;backface-visibility:visible;-webkit-animation-name:flip;-moz-animation-name:flip;animation-name:flip}@-webkit-keyframes flipInX{0%{-webkit-transform:perspective(400px) rotateX(90deg);transform:perspective(400px) rotateX(90deg);opacity:0}40%{-webkit-transform:perspective(400px) rotateX(-10deg);transform:perspective(400px) rotateX(-10deg)}70%{-webkit-transform:perspective(400px) rotateX(10deg);transform:perspective(400px) rotateX(10deg)}100%{-webkit-transform:perspective(400px) rotateX(0deg);transform:perspective(400px) rotateX(0deg);opacity:1}}@keyframes flipInX{0%{-webkit-transform:perspective(400px) rotateX(90deg);-ms-transform:perspective(400px) rotateX(90deg);-moz-transform:perspective(400px) rotateX(90deg);transform:perspective(400px) rotateX(90deg);opacity:0}40%{-webkit-transform:perspective(400px) rotateX(-10deg);-ms-transform:perspective(400px) rotateX(-10deg);-moz-transform:perspective(400px) rotateX(-10deg);transform:perspective(400px) rotateX(-10deg)}70%{-webkit-transform:perspective(400px) rotateX(10deg);-ms-transform:perspective(400px) rotateX(10deg);-moz-transform:perspective(400px) rotateX(10deg);transform:perspective(400px) rotateX(10deg)}100%{-webkit-transform:perspective(400px) rotateX(0deg);-ms-transform:perspective(400px) rotateX(0deg);-moz-transform:perspective(400px) rotateX(0deg);transform:perspective(400px) rotateX(0deg);opacity:1}}@-moz-keyframes flipInX{0%{-webkit-transform:perspective(400px) rotateX(90deg);-ms-transform:perspective(400px) rotateX(90deg);-moz-transform:perspective(400px) rotateX(90deg);transform:perspective(400px) rotateX(90deg);opacity:0}40%{-webkit-transform:perspective(400px) rotateX(-10deg);-ms-transform:perspective(400px) rotateX(-10deg);-moz-transform:perspective(400px) rotateX(-10deg);transform:perspective(400px) rotateX(-10deg)}70%{-webkit-transform:perspective(400px) rotateX(10deg);-ms-transform:perspective(400px) rotateX(10deg);-moz-transform:perspective(400px) rotateX(10deg);transform:perspective(400px) rotateX(10deg)}100%{-webkit-transform:perspective(400px) rotateX(0deg);-ms-transform:perspective(400px) rotateX(0deg);-moz-transform:perspective(400px) rotateX(0deg);transform:perspective(400px) rotateX(0deg);opacity:1}}#a0-widget .a0-flipInX{-webkit-backface-visibility:visible!important;-ms-backface-visibility:visible!important;-moz-backface-visibility:visible!important;backface-visibility:visible!important;-webkit-animation-name:flipInX;-moz-animation-name:flipInX;animation-name:flipInX}@-webkit-keyframes flipInY{0%{-webkit-transform:perspective(400px) rotateY(90deg);transform:perspective(400px) rotateY(90deg);opacity:0}40%{-webkit-transform:perspective(400px) rotateY(-10deg);transform:perspective(400px) rotateY(-10deg)}70%{-webkit-transform:perspective(400px) rotateY(10deg);transform:perspective(400px) rotateY(10deg)}100%{-webkit-transform:perspective(400px) rotateY(0deg);transform:perspective(400px) rotateY(0deg);opacity:1}}@keyframes flipInY{0%{-webkit-transform:perspective(400px) rotateY(90deg);-ms-transform:perspective(400px) rotateY(90deg);-moz-transform:perspective(400px) rotateY(90deg);transform:perspective(400px) rotateY(90deg);opacity:0}40%{-webkit-transform:perspective(400px) rotateY(-10deg);-ms-transform:perspective(400px) rotateY(-10deg);-moz-transform:perspective(400px) rotateY(-10deg);transform:perspective(400px) rotateY(-10deg)}70%{-webkit-transform:perspective(400px) rotateY(10deg);-ms-transform:perspective(400px) rotateY(10deg);-moz-transform:perspective(400px) rotateY(10deg);transform:perspective(400px) rotateY(10deg)}100%{-webkit-transform:perspective(400px) rotateY(0deg);-ms-transform:perspective(400px) rotateY(0deg);-moz-transform:perspective(400px) rotateY(0deg);transform:perspective(400px) rotateY(0deg);opacity:1}}@-moz-keyframes flipInY{0%{-webkit-transform:perspective(400px) rotateY(90deg);-ms-transform:perspective(400px) rotateY(90deg);-moz-transform:perspective(400px) rotateY(90deg);transform:perspective(400px) rotateY(90deg);opacity:0}40%{-webkit-transform:perspective(400px) rotateY(-10deg);-ms-transform:perspective(400px) rotateY(-10deg);-moz-transform:perspective(400px) rotateY(-10deg);transform:perspective(400px) rotateY(-10deg)}70%{-webkit-transform:perspective(400px) rotateY(10deg);-ms-transform:perspective(400px) rotateY(10deg);-moz-transform:perspective(400px) rotateY(10deg);transform:perspective(400px) rotateY(10deg)}100%{-webkit-transform:perspective(400px) rotateY(0deg);-ms-transform:perspective(400px) rotateY(0deg);-moz-transform:perspective(400px) rotateY(0deg);transform:perspective(400px) rotateY(0deg);opacity:1}}#a0-widget .a0-flipInY{-webkit-backface-visibility:visible!important;-ms-backface-visibility:visible!important;-moz-backface-visibility:visible!important;backface-visibility:visible!important;-webkit-animation-name:flipInY;-moz-animation-name:flipInY;animation-name:flipInY}@-webkit-keyframes flipOutX{0%{-webkit-transform:perspective(400px) rotateX(0deg);transform:perspective(400px) rotateX(0deg);opacity:1}100%{-webkit-transform:perspective(400px) rotateX(90deg);transform:perspective(400px) rotateX(90deg);opacity:0}}@keyframes flipOutX{0%{-webkit-transform:perspective(400px) rotateX(0deg);-ms-transform:perspective(400px) rotateX(0deg);-moz-transform:perspective(400px) rotateX(0deg);transform:perspective(400px) rotateX(0deg);opacity:1}100%{-webkit-transform:perspective(400px) rotateX(90deg);-ms-transform:perspective(400px) rotateX(90deg);-moz-transform:perspective(400px) rotateX(90deg);transform:perspective(400px) rotateX(90deg);opacity:0}}@-moz-keyframes flipOutX{0%{-webkit-transform:perspective(400px) rotateX(0deg);-ms-transform:perspective(400px) rotateX(0deg);-moz-transform:perspective(400px) rotateX(0deg);transform:perspective(400px) rotateX(0deg);opacity:1}100%{-webkit-transform:perspective(400px) rotateX(90deg);-ms-transform:perspective(400px) rotateX(90deg);-moz-transform:perspective(400px) rotateX(90deg);transform:perspective(400px) rotateX(90deg);opacity:0}}#a0-widget .a0-flipOutX{-webkit-animation-name:flipOutX;-moz-animation-name:flipOutX;animation-name:flipOutX;-webkit-backface-visibility:visible!important;-ms-backface-visibility:visible!important;-moz-backface-visibility:visible!important;backface-visibility:visible!important}@-webkit-keyframes flipOutY{0%{-webkit-transform:perspective(400px) rotateY(0deg);transform:perspective(400px) rotateY(0deg);opacity:1}100%{-webkit-transform:perspective(400px) rotateY(90deg);transform:perspective(400px) rotateY(90deg);opacity:0}}@keyframes flipOutY{0%{-webkit-transform:perspective(400px) rotateY(0deg);-ms-transform:perspective(400px) rotateY(0deg);-moz-transform:perspective(400px) rotateY(0deg);transform:perspective(400px) rotateY(0deg);opacity:1}100%{-webkit-transform:perspective(400px) rotateY(90deg);-ms-transform:perspective(400px) rotateY(90deg);-moz-transform:perspective(400px) rotateY(90deg);transform:perspective(400px) rotateY(90deg);opacity:0}}@-moz-keyframes flipOutY{0%{-webkit-transform:perspective(400px) rotateY(0deg);-ms-transform:perspective(400px) rotateY(0deg);-moz-transform:perspective(400px) rotateY(0deg);transform:perspective(400px) rotateY(0deg);opacity:1}100%{-webkit-transform:perspective(400px) rotateY(90deg);-ms-transform:perspective(400px) rotateY(90deg);-moz-transform:perspective(400px) rotateY(90deg);transform:perspective(400px) rotateY(90deg);opacity:0}}#a0-widget .a0-flipOutY{-webkit-backface-visibility:visible!important;-ms-backface-visibility:visible!important;-moz-backface-visibility:visible!important;backface-visibility:visible!important;-webkit-animation-name:flipOutY;-moz-animation-name:flipOutY;animation-name:flipOutY}@-webkit-keyframes lightSpeedIn{0%{-webkit-transform:translateX(100%) skewX(-30deg);transform:translateX(100%) skewX(-30deg);opacity:0}60%{-webkit-transform:translateX(-20%) skewX(30deg);transform:translateX(-20%) skewX(30deg);opacity:1}80%{-webkit-transform:translateX(0%) skewX(-15deg);transform:translateX(0%) skewX(-15deg);opacity:1}100%{-webkit-transform:translateX(0%) skewX(0deg);transform:translateX(0%) skewX(0deg);opacity:1}}@keyframes lightSpeedIn{0%{-webkit-transform:translateX(100%) skewX(-30deg);-ms-transform:translateX(100%) skewX(-30deg);-moz-transform:translateX(100%) skewX(-30deg);transform:translateX(100%) skewX(-30deg);opacity:0}60%{-webkit-transform:translateX(-20%) skewX(30deg);-ms-transform:translateX(-20%) skewX(30deg);-moz-transform:translateX(-20%) skewX(30deg);transform:translateX(-20%) skewX(30deg);opacity:1}80%{-webkit-transform:translateX(0%) skewX(-15deg);-ms-transform:translateX(0%) skewX(-15deg);-moz-transform:translateX(0%) skewX(-15deg);transform:translateX(0%) skewX(-15deg);opacity:1}100%{-webkit-transform:translateX(0%) skewX(0deg);-ms-transform:translateX(0%) skewX(0deg);-moz-transform:translateX(0%) skewX(0deg);transform:translateX(0%) skewX(0deg);opacity:1}}@-moz-keyframes lightSpeedIn{0%{-webkit-transform:translateX(100%) skewX(-30deg);-ms-transform:translateX(100%) skewX(-30deg);-moz-transform:translateX(100%) skewX(-30deg);transform:translateX(100%) skewX(-30deg);opacity:0}60%{-webkit-transform:translateX(-20%) skewX(30deg);-ms-transform:translateX(-20%) skewX(30deg);-moz-transform:translateX(-20%) skewX(30deg);transform:translateX(-20%) skewX(30deg);opacity:1}80%{-webkit-transform:translateX(0%) skewX(-15deg);-ms-transform:translateX(0%) skewX(-15deg);-moz-transform:translateX(0%) skewX(-15deg);transform:translateX(0%) skewX(-15deg);opacity:1}100%{-webkit-transform:translateX(0%) skewX(0deg);-ms-transform:translateX(0%) skewX(0deg);-moz-transform:translateX(0%) skewX(0deg);transform:translateX(0%) skewX(0deg);opacity:1}}#a0-widget .a0-lightSpeedIn{-webkit-animation-name:lightSpeedIn;-moz-animation-name:lightSpeedIn;animation-name:lightSpeedIn;-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}@-webkit-keyframes lightSpeedOut{0%{-webkit-transform:translateX(0%) skewX(0deg);transform:translateX(0%) skewX(0deg);opacity:1}100%{-webkit-transform:translateX(100%) skewX(-30deg);transform:translateX(100%) skewX(-30deg);opacity:0}}@keyframes lightSpeedOut{0%{-webkit-transform:translateX(0%) skewX(0deg);-ms-transform:translateX(0%) skewX(0deg);-moz-transform:translateX(0%) skewX(0deg);transform:translateX(0%) skewX(0deg);opacity:1}100%{-webkit-transform:translateX(100%) skewX(-30deg);-ms-transform:translateX(100%) skewX(-30deg);-moz-transform:translateX(100%) skewX(-30deg);transform:translateX(100%) skewX(-30deg);opacity:0}}@-moz-keyframes lightSpeedOut{0%{-webkit-transform:translateX(0%) skewX(0deg);-ms-transform:translateX(0%) skewX(0deg);-moz-transform:translateX(0%) skewX(0deg);transform:translateX(0%) skewX(0deg);opacity:1}100%{-webkit-transform:translateX(100%) skewX(-30deg);-ms-transform:translateX(100%) skewX(-30deg);-moz-transform:translateX(100%) skewX(-30deg);transform:translateX(100%) skewX(-30deg);opacity:0}}#a0-widget .a0-lightSpeedOut{-webkit-animation-name:lightSpeedOut;-moz-animation-name:lightSpeedOut;animation-name:lightSpeedOut;-webkit-animation-timing-function:ease-in;-moz-animation-timing-function:ease-in;animation-timing-function:ease-in}@-webkit-keyframes rotateIn{0%{-webkit-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(-200deg);transform:rotate(-200deg);opacity:0}100%{-webkit-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}}@keyframes rotateIn{0%{-webkit-transform-origin:center center;-ms-transform-origin:center center;-moz-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(-200deg);-ms-transform:rotate(-200deg);-moz-transform:rotate(-200deg);transform:rotate(-200deg);opacity:0}100%{-webkit-transform-origin:center center;-ms-transform-origin:center center;-moz-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}@-moz-keyframes rotateIn{0%{-webkit-transform-origin:center center;-ms-transform-origin:center center;-moz-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(-200deg);-ms-transform:rotate(-200deg);-moz-transform:rotate(-200deg);transform:rotate(-200deg);opacity:0}100%{-webkit-transform-origin:center center;-ms-transform-origin:center center;-moz-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}#a0-widget .a0-rotateIn{-webkit-animation-name:rotateIn;-moz-animation-name:rotateIn;animation-name:rotateIn}@-webkit-keyframes rotateInDownLeft{0%{-webkit-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}100%{-webkit-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}}@keyframes rotateInDownLeft{0%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-moz-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}100%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}@-moz-keyframes rotateInDownLeft{0%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-moz-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}100%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}#a0-widget .a0-rotateInDownLeft{-webkit-animation-name:rotateInDownLeft;-moz-animation-name:rotateInDownLeft;animation-name:rotateInDownLeft}@-webkit-keyframes rotateInDownRight{0%{-webkit-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(90deg);transform:rotate(90deg);opacity:0}100%{-webkit-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}}@keyframes rotateInDownRight{0%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);transform:rotate(90deg);opacity:0}100%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}@-moz-keyframes rotateInDownRight{0%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);transform:rotate(90deg);opacity:0}100%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}#a0-widget .a0-rotateInDownRight{-webkit-animation-name:rotateInDownRight;-moz-animation-name:rotateInDownRight;animation-name:rotateInDownRight}@-webkit-keyframes rotateInUpLeft{0%{-webkit-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(90deg);transform:rotate(90deg);opacity:0}100%{-webkit-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}}@keyframes rotateInUpLeft{0%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);transform:rotate(90deg);opacity:0}100%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}@-moz-keyframes rotateInUpLeft{0%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);transform:rotate(90deg);opacity:0}100%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}#a0-widget .a0-rotateInUpLeft{-webkit-animation-name:rotateInUpLeft;-moz-animation-name:rotateInUpLeft;animation-name:rotateInUpLeft}@-webkit-keyframes rotateInUpRight{0%{-webkit-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}100%{-webkit-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}}@keyframes rotateInUpRight{0%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-moz-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}100%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}@-moz-keyframes rotateInUpRight{0%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-moz-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}100%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}}#a0-widget .a0-rotateInUpRight{-webkit-animation-name:rotateInUpRight;-moz-animation-name:rotateInUpRight;animation-name:rotateInUpRight}@-webkit-keyframes rotateOut{0%{-webkit-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(200deg);transform:rotate(200deg);opacity:0}}@keyframes rotateOut{0%{-webkit-transform-origin:center center;-ms-transform-origin:center center;-moz-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:center center;-ms-transform-origin:center center;-moz-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(200deg);-ms-transform:rotate(200deg);-moz-transform:rotate(200deg);transform:rotate(200deg);opacity:0}}@-moz-keyframes rotateOut{0%{-webkit-transform-origin:center center;-ms-transform-origin:center center;-moz-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:center center;-ms-transform-origin:center center;-moz-transform-origin:center center;transform-origin:center center;-webkit-transform:rotate(200deg);-ms-transform:rotate(200deg);-moz-transform:rotate(200deg);transform:rotate(200deg);opacity:0}}#a0-widget .a0-rotateOut{-webkit-animation-name:rotateOut;-moz-animation-name:rotateOut;animation-name:rotateOut}@-webkit-keyframes rotateOutDownLeft{0%{-webkit-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(90deg);transform:rotate(90deg);opacity:0}}@keyframes rotateOutDownLeft{0%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);transform:rotate(90deg);opacity:0}}@-moz-keyframes rotateOutDownLeft{0%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);transform:rotate(90deg);opacity:0}}#a0-widget .a0-rotateOutDownLeft{-webkit-animation-name:rotateOutDownLeft;-moz-animation-name:rotateOutDownLeft;animation-name:rotateOutDownLeft}@-webkit-keyframes rotateOutDownRight{0%{-webkit-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}}@keyframes rotateOutDownRight{0%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-moz-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}}@-moz-keyframes rotateOutDownRight{0%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-moz-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}}#a0-widget .a0-rotateOutDownRight{-webkit-animation-name:rotateOutDownRight;-moz-animation-name:rotateOutDownRight;animation-name:rotateOutDownRight}@-webkit-keyframes rotateOutUpLeft{0%{-webkit-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}}@keyframes rotateOutUpLeft{0%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-moz-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}}@-moz-keyframes rotateOutUpLeft{0%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:left bottom;-ms-transform-origin:left bottom;-moz-transform-origin:left bottom;transform-origin:left bottom;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);-moz-transform:rotate(-90deg);transform:rotate(-90deg);opacity:0}}#a0-widget .a0-rotateOutUpLeft{-webkit-animation-name:rotateOutUpLeft;-moz-animation-name:rotateOutUpLeft;animation-name:rotateOutUpLeft}@-webkit-keyframes rotateOutUpRight{0%{-webkit-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(90deg);transform:rotate(90deg);opacity:0}}@keyframes rotateOutUpRight{0%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);transform:rotate(90deg);opacity:0}}@-moz-keyframes rotateOutUpRight{0%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);opacity:1}100%{-webkit-transform-origin:right bottom;-ms-transform-origin:right bottom;-moz-transform-origin:right bottom;transform-origin:right bottom;-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);-moz-transform:rotate(90deg);transform:rotate(90deg);opacity:0}}#a0-widget .a0-rotateOutUpRight{-webkit-animation-name:rotateOutUpRight;-moz-animation-name:rotateOutUpRight;animation-name:rotateOutUpRight}@-webkit-keyframes slideInDown{0%{opacity:0;-webkit-transform:translateY(-2000px);transform:translateY(-2000px)}100%{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes slideInDown{0%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}100%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}@-moz-keyframes slideInDown{0%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}100%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}#a0-widget .a0-slideInDown{-webkit-animation-name:slideInDown;-moz-animation-name:slideInDown;animation-name:slideInDown}@-webkit-keyframes slideInLeft{0%{opacity:0;-webkit-transform:translateX(-2000px);transform:translateX(-2000px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes slideInLeft{0%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}@-moz-keyframes slideInLeft{0%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}#a0-widget .a0-slideInLeft{-webkit-animation-name:slideInLeft;-moz-animation-name:slideInLeft;animation-name:slideInLeft}@-webkit-keyframes slideInRight{0%{opacity:0;-webkit-transform:translateX(2000px);transform:translateX(2000px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes slideInRight{0%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}@-moz-keyframes slideInRight{0%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}100%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}}#a0-widget .a0-slideInRight{-webkit-animation-name:slideInRight;-moz-animation-name:slideInRight;animation-name:slideInRight}@-webkit-keyframes slideOutLeft{0%{-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-2000px);transform:translateX(-2000px)}}@keyframes slideOutLeft{0%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}}@-moz-keyframes slideOutLeft{0%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(-2000px);-ms-transform:translateX(-2000px);-moz-transform:translateX(-2000px);transform:translateX(-2000px)}}#a0-widget .a0-slideOutLeft{-webkit-animation-name:slideOutLeft;-moz-animation-name:slideOutLeft;animation-name:slideOutLeft}@-webkit-keyframes slideOutRight{0%{-webkit-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(2000px);transform:translateX(2000px)}}@keyframes slideOutRight{0%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}}@-moz-keyframes slideOutRight{0%{-webkit-transform:translateX(0);-ms-transform:translateX(0);-moz-transform:translateX(0);transform:translateX(0)}100%{opacity:0;-webkit-transform:translateX(2000px);-ms-transform:translateX(2000px);-moz-transform:translateX(2000px);transform:translateX(2000px)}}#a0-widget .a0-slideOutRight{-webkit-animation-name:slideOutRight;-moz-animation-name:slideOutRight;animation-name:slideOutRight}@-webkit-keyframes slideOutUp{0%{-webkit-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-2000px);transform:translateY(-2000px)}}@keyframes slideOutUp{0%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}}@-moz-keyframes slideOutUp{0%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(-2000px);-ms-transform:translateY(-2000px);-moz-transform:translateY(-2000px);transform:translateY(-2000px)}}#a0-widget .a0-slideOutUp{-webkit-animation-name:slideOutUp;-moz-animation-name:slideOutUp;animation-name:slideOutUp}@-webkit-keyframes slideInUp{0%{opacity:0;-webkit-transform:translateY(2000px);transform:translateY(2000px)}100%{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes slideInUp{0%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}@-moz-keyframes slideInUp{0%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}100%{opacity:1;-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}}#a0-widget .a0-slideInUp{-webkit-animation-name:slideInUp;-moz-animation-name:slideInUp;animation-name:slideInUp}@-webkit-keyframes slideOutDown{0%{-webkit-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(2000px);transform:translateY(2000px)}}@keyframes slideOutDown{0%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}}@-moz-keyframes slideOutDown{0%{-webkit-transform:translateY(0);-ms-transform:translateY(0);-moz-transform:translateY(0);transform:translateY(0)}100%{opacity:0;-webkit-transform:translateY(2000px);-ms-transform:translateY(2000px);-moz-transform:translateY(2000px);transform:translateY(2000px)}}#a0-widget .a0-slideOutDown{-webkit-animation-name:slideOutDown;-moz-animation-name:slideOutDown;animation-name:slideOutDown}@-webkit-keyframes hinge{0%{-webkit-transform:rotate(0);transform:rotate(0);-webkit-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}20%,60%{-webkit-transform:rotate(80deg);transform:rotate(80deg);-webkit-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}40%{-webkit-transform:rotate(60deg);transform:rotate(60deg);-webkit-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}80%{-webkit-transform:rotate(60deg) translateY(0);transform:rotate(60deg) translateY(0);-webkit-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out;opacity:1}100%{-webkit-transform:translateY(700px);transform:translateY(700px);opacity:0}}@keyframes hinge{0%{-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);-webkit-transform-origin:top left;-ms-transform-origin:top left;-moz-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}20%,60%{-webkit-transform:rotate(80deg);-ms-transform:rotate(80deg);-moz-transform:rotate(80deg);transform:rotate(80deg);-webkit-transform-origin:top left;-ms-transform-origin:top left;-moz-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}40%{-webkit-transform:rotate(60deg);-ms-transform:rotate(60deg);-moz-transform:rotate(60deg);transform:rotate(60deg);-webkit-transform-origin:top left;-ms-transform-origin:top left;-moz-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}80%{-webkit-transform:rotate(60deg) translateY(0);-ms-transform:rotate(60deg) translateY(0);-moz-transform:rotate(60deg) translateY(0);transform:rotate(60deg) translateY(0);-webkit-transform-origin:top left;-ms-transform-origin:top left;-moz-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out;opacity:1}100%{-webkit-transform:translateY(700px);-ms-transform:translateY(700px);-moz-transform:translateY(700px);transform:translateY(700px);opacity:0}}@-moz-keyframes hinge{0%{-webkit-transform:rotate(0);-ms-transform:rotate(0);-moz-transform:rotate(0);transform:rotate(0);-webkit-transform-origin:top left;-ms-transform-origin:top left;-moz-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}20%,60%{-webkit-transform:rotate(80deg);-ms-transform:rotate(80deg);-moz-transform:rotate(80deg);transform:rotate(80deg);-webkit-transform-origin:top left;-ms-transform-origin:top left;-moz-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}40%{-webkit-transform:rotate(60deg);-ms-transform:rotate(60deg);-moz-transform:rotate(60deg);transform:rotate(60deg);-webkit-transform-origin:top left;-ms-transform-origin:top left;-moz-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}80%{-webkit-transform:rotate(60deg) translateY(0);-ms-transform:rotate(60deg) translateY(0);-moz-transform:rotate(60deg) translateY(0);transform:rotate(60deg) translateY(0);-webkit-transform-origin:top left;-ms-transform-origin:top left;-moz-transform-origin:top left;transform-origin:top left;-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out;opacity:1}100%{-webkit-transform:translateY(700px);-ms-transform:translateY(700px);-moz-transform:translateY(700px);transform:translateY(700px);opacity:0}}#a0-widget .a0-hinge{-webkit-animation-name:hinge;-moz-animation-name:hinge;animation-name:hinge}@-webkit-keyframes rollIn{0%{opacity:0;-webkit-transform:translateX(-100%) rotate(-120deg);transform:translateX(-100%) rotate(-120deg)}100%{opacity:1;-webkit-transform:translateX(0px) rotate(0deg);transform:translateX(0px) rotate(0deg)}}@keyframes rollIn{0%{opacity:0;-webkit-transform:translateX(-100%) rotate(-120deg);-ms-transform:translateX(-100%) rotate(-120deg);-moz-transform:translateX(-100%) rotate(-120deg);transform:translateX(-100%) rotate(-120deg)}100%{opacity:1;-webkit-transform:translateX(0px) rotate(0deg);-ms-transform:translateX(0px) rotate(0deg);-moz-transform:translateX(0px) rotate(0deg);transform:translateX(0px) rotate(0deg)}}@-moz-keyframes rollIn{0%{opacity:0;-webkit-transform:translateX(-100%) rotate(-120deg);-ms-transform:translateX(-100%) rotate(-120deg);-moz-transform:translateX(-100%) rotate(-120deg);transform:translateX(-100%) rotate(-120deg)}100%{opacity:1;-webkit-transform:translateX(0px) rotate(0deg);-ms-transform:translateX(0px) rotate(0deg);-moz-transform:translateX(0px) rotate(0deg);transform:translateX(0px) rotate(0deg)}}#a0-widget .a0-rollIn{-webkit-animation-name:rollIn;-moz-animation-name:rollIn;animation-name:rollIn}@-webkit-keyframes rollOut{0%{opacity:1;-webkit-transform:translateX(0px) rotate(0deg);transform:translateX(0px) rotate(0deg)}100%{opacity:0;-webkit-transform:translateX(100%) rotate(120deg);transform:translateX(100%) rotate(120deg)}}@keyframes rollOut{0%{opacity:1;-webkit-transform:translateX(0px) rotate(0deg);-ms-transform:translateX(0px) rotate(0deg);-moz-transform:translateX(0px) rotate(0deg);transform:translateX(0px) rotate(0deg)}100%{opacity:0;-webkit-transform:translateX(100%) rotate(120deg);-ms-transform:translateX(100%) rotate(120deg);-moz-transform:translateX(100%) rotate(120deg);transform:translateX(100%) rotate(120deg)}}@-moz-keyframes rollOut{0%{opacity:1;-webkit-transform:translateX(0px) rotate(0deg);-ms-transform:translateX(0px) rotate(0deg);-moz-transform:translateX(0px) rotate(0deg);transform:translateX(0px) rotate(0deg)}100%{opacity:0;-webkit-transform:translateX(100%) rotate(120deg);-ms-transform:translateX(100%) rotate(120deg);-moz-transform:translateX(100%) rotate(120deg);transform:translateX(100%) rotate(120deg)}}#a0-widget .a0-rollOut{-webkit-animation-name:rollOut;-moz-animation-name:rollOut;animation-name:rollOut}@-webkit-keyframes zoomIn{0%{opacity:0;-webkit-transform:scale(0.3);transform:scale(0.3)}50%{opacity:1}}@keyframes zoomIn{0%{opacity:0;-webkit-transform:scale(0.3);-ms-transform:scale(0.3);-moz-transform:scale(0.3);transform:scale(0.3)}50%{opacity:1}}@-moz-keyframes zoomIn{0%{opacity:0;-webkit-transform:scale(0.3);-ms-transform:scale(0.3);-moz-transform:scale(0.3);transform:scale(0.3)}50%{opacity:1}}#a0-widget .a0-zoomIn{-webkit-animation-name:zoomIn;-moz-animation-name:zoomIn;animation-name:zoomIn}@-webkit-keyframes zoomInDown{0%{opacity:0;-webkit-transform:scale(0.1) translateY(-2000px);transform:scale(0.1) translateY(-2000px);-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateY(60px);transform:scale(0.475) translateY(60px);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}}@keyframes zoomInDown{0%{opacity:0;-webkit-transform:scale(0.1) translateY(-2000px);-ms-transform:scale(0.1) translateY(-2000px);-moz-transform:scale(0.1) translateY(-2000px);transform:scale(0.1) translateY(-2000px);-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateY(60px);-ms-transform:scale(0.475) translateY(60px);-moz-transform:scale(0.475) translateY(60px);transform:scale(0.475) translateY(60px);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}}@-moz-keyframes zoomInDown{0%{opacity:0;-webkit-transform:scale(0.1) translateY(-2000px);-ms-transform:scale(0.1) translateY(-2000px);-moz-transform:scale(0.1) translateY(-2000px);transform:scale(0.1) translateY(-2000px);-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateY(60px);-ms-transform:scale(0.475) translateY(60px);-moz-transform:scale(0.475) translateY(60px);transform:scale(0.475) translateY(60px);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}}#a0-widget .a0-zoomInDown{-webkit-animation-name:zoomInDown;-moz-animation-name:zoomInDown;animation-name:zoomInDown}@-webkit-keyframes zoomInLeft{0%{opacity:0;-webkit-transform:scale(0.1) translateX(-2000px);transform:scale(0.1) translateX(-2000px);-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateX(48px);transform:scale(0.475) translateX(48px);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}}@keyframes zoomInLeft{0%{opacity:0;-webkit-transform:scale(0.1) translateX(-2000px);-ms-transform:scale(0.1) translateX(-2000px);-moz-transform:scale(0.1) translateX(-2000px);transform:scale(0.1) translateX(-2000px);-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateX(48px);-ms-transform:scale(0.475) translateX(48px);-moz-transform:scale(0.475) translateX(48px);transform:scale(0.475) translateX(48px);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}}@-moz-keyframes zoomInLeft{0%{opacity:0;-webkit-transform:scale(0.1) translateX(-2000px);-ms-transform:scale(0.1) translateX(-2000px);-moz-transform:scale(0.1) translateX(-2000px);transform:scale(0.1) translateX(-2000px);-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateX(48px);-ms-transform:scale(0.475) translateX(48px);-moz-transform:scale(0.475) translateX(48px);transform:scale(0.475) translateX(48px);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}}#a0-widget .a0-zoomInLeft{-webkit-animation-name:zoomInLeft;-moz-animation-name:zoomInLeft;animation-name:zoomInLeft}@-webkit-keyframes zoomInRight{0%{opacity:0;-webkit-transform:scale(0.1) translateX(2000px);transform:scale(0.1) translateX(2000px);-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateX(-48px);transform:scale(0.475) translateX(-48px);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}}@keyframes zoomInRight{0%{opacity:0;-webkit-transform:scale(0.1) translateX(2000px);-ms-transform:scale(0.1) translateX(2000px);-moz-transform:scale(0.1) translateX(2000px);transform:scale(0.1) translateX(2000px);-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateX(-48px);-ms-transform:scale(0.475) translateX(-48px);-moz-transform:scale(0.475) translateX(-48px);transform:scale(0.475) translateX(-48px);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}}@-moz-keyframes zoomInRight{0%{opacity:0;-webkit-transform:scale(0.1) translateX(2000px);-ms-transform:scale(0.1) translateX(2000px);-moz-transform:scale(0.1) translateX(2000px);transform:scale(0.1) translateX(2000px);-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateX(-48px);-ms-transform:scale(0.475) translateX(-48px);-moz-transform:scale(0.475) translateX(-48px);transform:scale(0.475) translateX(-48px);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}}#a0-widget .a0-zoomInRight{-webkit-animation-name:zoomInRight;-moz-animation-name:zoomInRight;animation-name:zoomInRight}@-webkit-keyframes zoomInUp{0%{opacity:0;-webkit-transform:scale(0.1) translateY(2000px);transform:scale(0.1) translateY(2000px);-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateY(-60px);transform:scale(0.475) translateY(-60px);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}}@keyframes zoomInUp{0%{opacity:0;-webkit-transform:scale(0.1) translateY(2000px);-ms-transform:scale(0.1) translateY(2000px);-moz-transform:scale(0.1) translateY(2000px);transform:scale(0.1) translateY(2000px);-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateY(-60px);-ms-transform:scale(0.475) translateY(-60px);-moz-transform:scale(0.475) translateY(-60px);transform:scale(0.475) translateY(-60px);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}}@-moz-keyframes zoomInUp{0%{opacity:0;-webkit-transform:scale(0.1) translateY(2000px);-ms-transform:scale(0.1) translateY(2000px);-moz-transform:scale(0.1) translateY(2000px);transform:scale(0.1) translateY(2000px);-webkit-animation-timing-function:ease-in-out;-moz-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}60%{opacity:1;-webkit-transform:scale(0.475) translateY(-60px);-ms-transform:scale(0.475) translateY(-60px);-moz-transform:scale(0.475) translateY(-60px);transform:scale(0.475) translateY(-60px);-webkit-animation-timing-function:ease-out;-moz-animation-timing-function:ease-out;animation-timing-function:ease-out}}#a0-widget .a0-zoomInUp{-webkit-animation-name:zoomInUp;-moz-animation-name:zoomInUp;animation-name:zoomInUp}@-webkit-keyframes zoomOut{0%{opacity:1;-webkit-transform:scale(1);transform:scale(1)}50%{opacity:0;-webkit-transform:scale(0.3);transform:scale(0.3)}100%{opacity:0}}@keyframes zoomOut{0%{opacity:1;-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}50%{opacity:0;-webkit-transform:scale(0.3);-ms-transform:scale(0.3);-moz-transform:scale(0.3);transform:scale(0.3)}100%{opacity:0}}@-moz-keyframes zoomOut{0%{opacity:1;-webkit-transform:scale(1);-ms-transform:scale(1);-moz-transform:scale(1);transform:scale(1)}50%{opacity:0;-webkit-transform:scale(0.3);-ms-transform:scale(0.3);-moz-transform:scale(0.3);transform:scale(0.3)}100%{opacity:0}}#a0-widget .a0-zoomOut{-webkit-animation-name:zoomOut;-moz-animation-name:zoomOut;animation-name:zoomOut}@-webkit-keyframes zoomOutDown{40%{opacity:1;-webkit-transform:scale(0.475) translateY(-60px);transform:scale(0.475) translateY(-60px);-webkit-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateY(2000px);transform:scale(0.1) translateY(2000px);-webkit-transform-origin:center bottom;transform-origin:center bottom}}@keyframes zoomOutDown{40%{opacity:1;-webkit-transform:scale(0.475) translateY(-60px);-ms-transform:scale(0.475) translateY(-60px);-moz-transform:scale(0.475) translateY(-60px);transform:scale(0.475) translateY(-60px);-webkit-animation-timing-function:linear;-moz-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateY(2000px);-ms-transform:scale(0.1) translateY(2000px);-moz-transform:scale(0.1) translateY(2000px);transform:scale(0.1) translateY(2000px);-webkit-transform-origin:center bottom;-ms-transform-origin:center bottom;-moz-transform-origin:center bottom;transform-origin:center bottom}}@-moz-keyframes zoomOutDown{40%{opacity:1;-webkit-transform:scale(0.475) translateY(-60px);-ms-transform:scale(0.475) translateY(-60px);-moz-transform:scale(0.475) translateY(-60px);transform:scale(0.475) translateY(-60px);-webkit-animation-timing-function:linear;-moz-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateY(2000px);-ms-transform:scale(0.1) translateY(2000px);-moz-transform:scale(0.1) translateY(2000px);transform:scale(0.1) translateY(2000px);-webkit-transform-origin:center bottom;-ms-transform-origin:center bottom;-moz-transform-origin:center bottom;transform-origin:center bottom}}#a0-widget .a0-zoomOutDown{-webkit-animation-name:zoomOutDown;-moz-animation-name:zoomOutDown;animation-name:zoomOutDown}@-webkit-keyframes zoomOutLeft{40%{opacity:1;-webkit-transform:scale(0.475) translateX(42px);transform:scale(0.475) translateX(42px);-webkit-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateX(-2000px);transform:scale(0.1) translateX(-2000px);-webkit-transform-origin:left center;transform-origin:left center}}@keyframes zoomOutLeft{40%{opacity:1;-webkit-transform:scale(0.475) translateX(42px);-ms-transform:scale(0.475) translateX(42px);-moz-transform:scale(0.475) translateX(42px);transform:scale(0.475) translateX(42px);-webkit-animation-timing-function:linear;-moz-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateX(-2000px);-ms-transform:scale(0.1) translateX(-2000px);-moz-transform:scale(0.1) translateX(-2000px);transform:scale(0.1) translateX(-2000px);-webkit-transform-origin:left center;-ms-transform-origin:left center;-moz-transform-origin:left center;transform-origin:left center}}@-moz-keyframes zoomOutLeft{40%{opacity:1;-webkit-transform:scale(0.475) translateX(42px);-ms-transform:scale(0.475) translateX(42px);-moz-transform:scale(0.475) translateX(42px);transform:scale(0.475) translateX(42px);-webkit-animation-timing-function:linear;-moz-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateX(-2000px);-ms-transform:scale(0.1) translateX(-2000px);-moz-transform:scale(0.1) translateX(-2000px);transform:scale(0.1) translateX(-2000px);-webkit-transform-origin:left center;-ms-transform-origin:left center;-moz-transform-origin:left center;transform-origin:left center}}#a0-widget .a0-zoomOutLeft{-webkit-animation-name:zoomOutLeft;-moz-animation-name:zoomOutLeft;animation-name:zoomOutLeft}@-webkit-keyframes zoomOutRight{40%{opacity:1;-webkit-transform:scale(0.475) translateX(-42px);transform:scale(0.475) translateX(-42px);-webkit-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateX(2000px);transform:scale(0.1) translateX(2000px);-webkit-transform-origin:right center;transform-origin:right center}}@keyframes zoomOutRight{40%{opacity:1;-webkit-transform:scale(0.475) translateX(-42px);-ms-transform:scale(0.475) translateX(-42px);-moz-transform:scale(0.475) translateX(-42px);transform:scale(0.475) translateX(-42px);-webkit-animation-timing-function:linear;-moz-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateX(2000px);-ms-transform:scale(0.1) translateX(2000px);-moz-transform:scale(0.1) translateX(2000px);transform:scale(0.1) translateX(2000px);-webkit-transform-origin:right center;-ms-transform-origin:right center;-moz-transform-origin:right center;transform-origin:right center}}@-moz-keyframes zoomOutRight{40%{opacity:1;-webkit-transform:scale(0.475) translateX(-42px);-ms-transform:scale(0.475) translateX(-42px);-moz-transform:scale(0.475) translateX(-42px);transform:scale(0.475) translateX(-42px);-webkit-animation-timing-function:linear;-moz-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateX(2000px);-ms-transform:scale(0.1) translateX(2000px);-moz-transform:scale(0.1) translateX(2000px);transform:scale(0.1) translateX(2000px);-webkit-transform-origin:right center;-ms-transform-origin:right center;-moz-transform-origin:right center;transform-origin:right center}}#a0-widget .a0-zoomOutRight{-webkit-animation-name:zoomOutRight;-moz-animation-name:zoomOutRight;animation-name:zoomOutRight}@-webkit-keyframes zoomOutUp{40%{opacity:1;-webkit-transform:scale(0.475) translateY(60px);transform:scale(0.475) translateY(60px);-webkit-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateY(-2000px);transform:scale(0.1) translateY(-2000px);-webkit-transform-origin:center top;transform-origin:center top}}@keyframes zoomOutUp{40%{opacity:1;-webkit-transform:scale(0.475) translateY(60px);-ms-transform:scale(0.475) translateY(60px);-moz-transform:scale(0.475) translateY(60px);transform:scale(0.475) translateY(60px);-webkit-animation-timing-function:linear;-moz-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateY(-2000px);-ms-transform:scale(0.1) translateY(-2000px);-moz-transform:scale(0.1) translateY(-2000px);transform:scale(0.1) translateY(-2000px);-webkit-transform-origin:center top;-ms-transform-origin:center top;-moz-transform-origin:center top;transform-origin:center top}}@-moz-keyframes zoomOutUp{40%{opacity:1;-webkit-transform:scale(0.475) translateY(60px);-ms-transform:scale(0.475) translateY(60px);-moz-transform:scale(0.475) translateY(60px);transform:scale(0.475) translateY(60px);-webkit-animation-timing-function:linear;-moz-animation-timing-function:linear;animation-timing-function:linear}100%{opacity:0;-webkit-transform:scale(0.1) translateY(-2000px);-ms-transform:scale(0.1) translateY(-2000px);-moz-transform:scale(0.1) translateY(-2000px);transform:scale(0.1) translateY(-2000px);-webkit-transform-origin:center top;-ms-transform-origin:center top;-moz-transform-origin:center top;transform-origin:center top}}#a0-widget .a0-zoomOutUp{-webkit-animation-name:zoomOutUp;-moz-animation-name:zoomOutUp;animation-name:zoomOutUp}@-webkit-keyframes appear{from{opacity:0}to{opacity:1}}@-webkit-keyframes fadein{from{opacity:.3}to{opacity:1}}@-moz-keyframes showPanel{0%{opacity:0;-webkit-transform:scale(0.95) translate3d(0,0,0)}100%{opacity:1;-webkit-transform:scale(1) translate3d(0,0,0)}}@-webkit-keyframes showPanel{0%{opacity:0;-webkit-transform:scale(0.95) translate3d(0,0,0)}100%{opacity:1;-webkit-transform:scale(1) translate3d(0,0,0)}}@-ms-keyframes showPanel{0%{opacity:0;-webkit-transform:scale(0.95) translate3d(0,0,0)}100%{opacity:1;-webkit-transform:scale(1) translate3d(0,0,0)}}@keyframes showPanel{0%{opacity:0;-webkit-transform:scale(0.95) translate3d(0,0,0)}100%{opacity:1;-webkit-transform:scale(1) translate3d(0,0,0)}}@-moz-keyframes hidePanel{0%{-webkit-transform:scale(1) translate3d(0,0,0)}100%{-webkit-transform:scale(0.98) translate3d(0,0,0)}}@-webkit-keyframes hidePanel{0%{-webkit-transform:scale(1) translate3d(0,0,0)}100%{-webkit-transform:scale(0.98) translate3d(0,0,0)}}@-ms-keyframes hidePanel{0%{-webkit-transform:scale(1) translate3d(0,0,0)}100%{-webkit-transform:scale(0.98) translate3d(0,0,0)}}@keyframes hidePanel{0%{-webkit-transform:scale(1) translate3d(0,0,0)}100%{-webkit-transform:scale(0.98) translate3d(0,0,0)}}#a0-widget .a0-zocial,#a0-widget a.a0-zocial{color:#fff;text-align:left;text-decoration:none;white-space:nowrap;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:block;border-radius:3px;padding:0;margin-bottom:6px;cursor:pointer;overflow:hidden}#a0-widget .a0-zocial:hover{opacity:1}#a0-widget .a0-zocial span,#a0-widget a.a0-zocial span{text-transform:uppercase;font-weight:400;font-size:11px;line-height:40px;display:inline-block;padding-left:4%;width:86%;cursor:pointer;-webkit-transition:all .2s ease;-moz-transition:all .2s ease;transition:all .2s ease}#a0-widget .a0-strategy div.a0-zocial span{text-transform:lowercase;font-size:12px}#a0-widget .a0-zocial:hover span,#a0-widget a.a0-zocial,#a0-widget a.a0-zocial:hover span{background:rgba(0,0,0,.2)}#a0-widget .a0-zocial:before{font:14px zocial;font-weight:400;float:left;display:inline-block;line-height:40px;width:16%;cursor:pointer;text-align:center;background:rgba(0,0,0,.3);-webkit-transition:all .2s ease;-moz-transition:all .2s ease;transition:all .2s ease}#a0-widget .a0-zocial:active{outline:0}#a0-widget .a0-zocial.a0-icon{overflow:hidden;white-space:nowrap}#a0-widget .a0-zocial.a0-icon:before{-webkit-box-shadow:none;box-shadow:none;border:0}#a0-widget .a0-strategy{margin:10px 0}#a0-widget .a0-zocial.a0-amazon:before{content:\"a\"}#a0-widget .a0-zocial.a0-dropbox:before{content:\"d\";color:#1f75cc}#a0-widget .a0-zocial.a0-facebook:before{content:\"f\"}#a0-widget .a0-zocial.a0-github:before{content:\"\\00E8\"}#a0-widget .a0-zocial.a0-gmail:before{content:\"m\";color:red}#a0-widget .a0-zocial.a0-google:before{content:\"G\"}#a0-widget .a0-zocial.a0-googleplus:before{content:\"+\"}#a0-widget .a0-zocial.a0-guest:before{content:\"?\"}#a0-widget .a0-zocial.a0-ie:before{content:\"6\"}#a0-widget .a0-zocial.a0-linkedin:before{content:\"L\"}#a0-widget .a0-zocial.a0-openid:before{content:\"o\";color:#ff921d}#a0-widget .a0-zocial.a0-paypal:before{content:\"$\"}#a0-widget .a0-zocial.a0-stackoverflow:before{content:\"\\00EC\";color:#ff7a15}#a0-widget .a0-zocial.a0-twitter:before{content:\"T\"}#a0-widget .a0-zocial.a0-vk:before{content:\"N\"}#a0-widget .a0-zocial.a0-windows:before{content:\"W\"}#a0-widget .a0-zocial.a0-yahoo:before{content:\"Y\"}#a0-widget .a0-zocial.a0-office365:before{content:\"z\"}#a0-widget .a0-zocial.a0-thirtysevensignals:before{content:\"b\"}#a0-widget .a0-zocial.a0-salesforce:before{content:\"*\"}#a0-widget .a0-zocial.a0-waad:before{content:\"z\"}#a0-widget .a0-zocial.a0-box:before{content:\"x\"}#a0-widget .a0-zocial.a0-aol:before{content:\"l\"}#a0-widget .a0-zocial.a0-renren:before{content:\"r\"}#a0-widget .a0-zocial.a0-baidu:before{content:\"u\"}#a0-widget .a0-zocial.a0-fitbit:before{content:\"#\"}#a0-widget .a0-zocial.a0-yandex:before{content:\"&\"}#a0-widget .a0-zocial.a0-wordpress:before{content:\"w\"}#a0-widget .a0-zocial.a0-dwolla:before{content:\"D\"}#a0-widget .a0-zocial.a0-shopify:before{content:\"s\"}#a0-widget .a0-zocial.a0-yammer:before{content:\"!\"}#a0-widget .a0-zocial.a0-miicard:before{content:\"m\"}#a0-widget .a0-zocial.a0-soundcloud:before{content:\"t\"}#a0-widget .a0-zocial.a0-evernote:before{content:\"n\"}#a0-widget .a0-zocial.a0-ebay:before{content:\"e\"}#a0-widget .a0-zocial.a0-sharepoint:before{content:\"p\"}#a0-widget .a0-zocial.a0-weibo:before{content:\"S\"}#a0-widget .a0-zocial.a0-instagram:before{content:\"i\"}#a0-widget .a0-zocial.a0-amazon{background-color:#ffad1d;color:#030037}#a0-widget .a0-zocial.a0-dropbox{background-color:#fff;color:#312c2a}#a0-widget .a0-zocial.a0-facebook{background-color:#4863ae}#a0-widget .a0-zocial.a0-github{background-color:#eee;color:#050505}#a0-widget .a0-zocial.a0-wordpress{background-color:#1e8cbe;color:#fff}#a0-widget .a0-zocial.a0-dwolla{background-color:#F5891F;color:#fbfbfb}#a0-widget .a0-zocial.a0-gmail{background-color:#efefef;color:#222}#a0-widget .a0-zocial.a0-google{background-color:#4e6cf7}#a0-widget .a0-zocial.a0-googleplus{background-color:#dd4b39}#a0-widget .a0-zocial.a0-guest{background-color:#1b4d6d}#a0-widget .a0-zocial.a0-ie{background-color:#00a1d9}#a0-widget .a0-zocial.a0-linkedin{background-color:#0083a8}#a0-widget .a0-zocial.a0-openid{background-color:#f5f5f5;color:#333}#a0-widget .a0-zocial.a0-paypal{background-color:#fff;color:#32689a}#a0-widget .a0-zocial.a0-twitter{background-color:#46c0fb}#a0-widget .a0-zocial.a0-vk{background-color:#45688E}#a0-widget .a0-zocial.a0-office365{background-color:#00ACED;color:#fff}#a0-widget .a0-zocial.a0-waad{background-color:#00ADEF;color:#fff}#a0-widget .a0-zocial.a0-thirtysevensignals{background-color:#6AC071;color:#fff}#a0-widget .a0-zocial.a0-box{background-color:#267bb6;color:#fff}#a0-widget .a0-zocial.a0-salesforce{background-color:#fff;color:red}#a0-widget .a0-zocial.a0-windows{background-color:#2672EC;color:#fff}#a0-widget .a0-zocial.a0-yahoo{background-color:#a200c2;color:#fff}#a0-widget .a0-zocial.a0-aol{background-color:#0861A8;color:#fff}#a0-widget .a0-zocial.a0-renren{background-color:#0056B5;color:#fff}#a0-widget .a0-zocial.a0-baidu{background-color:#2832E1;color:#fff}#a0-widget .a0-zocial.a0-fitbit{background-color:#45C2C5;color:#fff}#a0-widget .a0-zocial.a0-yandex{background-color:red;color:#fff}#a0-widget .a0-zocial.a0-shopify{background-color:#9CC24C;color:#fbfbfb}#a0-widget .a0-zocial.a0-yammer{background-color:#0072c6;color:#fdfdfd}#a0-widget .a0-zocial.a0-miicard{background-color:#C7EAFF;color:#303030}#a0-widget .a0-zocial.a0-soundcloud{background-color:#ff4500}#a0-widget .a0-zocial.a0-evernote{background-color:#6bb130;color:#fff}#a0-widget .a0-zocial.a0-ebay{background-color:#000098;color:#fff}#a0-widget .a0-zocial.a0-sharepoint{background-color:#0072C6;color:#fff}#a0-widget .a0-zocial.a0-weibo{background-color:#faf6f1;color:#e6162d}#a0-widget .a0-zocial.a0-instagram{background-color:#25537B;color:#fff}#a0-widget button:-moz-focus-inner{border:0;padding:0}@font-face{font-family:zocial;src:url(https://d19p4zemcycm7a.cloudfront.net/w2/font/zocial-regular-webfont.eot)}@font-face{font-family:zocial;src:url(data:application/font-woff;charset=utf-8;base64,) format('woff'),url(https://d19p4zemcycm7a.cloudfront.net/w2/font/zocial-regular-webfont.ttf) format('truetype'),url(https://d19p4zemcycm7a.cloudfront.net/w2/font/zocial-regular-webfont.svg#zocialregular) format('svg');font-weight:400;font-style:normal}@media screen and (max-height:700px) and (max-width:480px){#a0-widget .a0-zocial{width:auto;display:inline-block;margin:0 6px}#a0-widget .a0-zocial:before{width:40px;background-color:transparent}#a0-widget .a0-zocial:hover:before{background-color:rgba(0,0,0,.4)}#a0-widget .a0-zocial span{display:none}}#a0-widget .a0-show{display:block}#a0-widget .a0-hide{display:none!important}#a0-widget .a0-panel{text-align:center;background:#fff;padding:20px;border-radius:3px;-webkit-box-shadow:0 1px 10px rgba(0,0,0,.4);box-shadow:0 1px 10px rgba(0,0,0,.4);font-size:13px;position:relative;color:#4d4d4d;max-width:320px;min-width:280px;display:block}#a0-widget .a0-panel .a0-mode{-webkit-animation-name:fadein;-webkit-animation-duration:.2s;-webkit-animation-iteration-count:once;-webkit-animation-timing-function:ease-in}#a0-widget .a0-panel *,#a0-widget .a0-panel input{font-family:proxima_nova;font-smoothing:antialiased}#a0-widget .a0-panel h1,#a0-widget .a0-panel h2,#a0-widget .a0-panel h3{font-family:proxima_nova!important}#a0-widget .a0-panel a,#a0-widget .a0-panel button{font-family:proxima_nova!important;-webkit-transition:all .2s ease;-moz-transition:all .2s ease;transition:all .2s ease;font-weight:700}#a0-widget .a0-panel h1{font-size:24px;font-weight:100;margin-bottom:20px}#a0-widget .a0-panel .a0-header{margin-bottom:10px}#a0-widget .a0-panel .a0-image{margin:auto;display:inline-block;margin-bottom:10px}#a0-widget .a0-panel .a0-image img{width:auto;max-height:58px}#a0-widget .a0-panel .a0-avatar{background:#D0D2D3;margin:auto;display:inline-block;margin-bottom:10px;border-radius:100%;width:58px;height:58px}#a0-widget .a0-panel .a0-avatar i{color:#EB5424;font-size:30px;display:block;padding-top:15px}#a0-widget .a0-panel .a0-footer{margin-top:30px}#a0-widget .a0-panel .a0-footer .a0-logo{margin-top:20px;position:absolute;bottom:10px;right:0;left:0;display:block}#a0-widget .a0-panel .a0-footer .a0-logo i{color:#EB5424;font-size:18px}#a0-widget .a0-panel .a0-instructions{margin-bottom:20px;line-height:18px}#a0-widget .a0-panel .a0-last-time{font-size:14px;margin-bottom:20px}#a0-widget .a0-panel .a0-password,#a0-widget .a0-panel .a0-repeatPassword{border-top:1px solid #ccc}#a0-widget .a0-panel .a0-email .a0-input-box,#a0-widget .a0-panel .a0-password .a0-input-box,#a0-widget .a0-panel .a0-repeatPassword .a0-input-box{position:relative;height:50px}#a0-widget .a0-panel .a0-email .a0-input-box i,#a0-widget .a0-panel .a0-password .a0-input-box i,#a0-widget .a0-panel .a0-repeatPassword .a0-input-box i{font-size:14px;z-index:10000;top:18px;left:16px;position:absolute;color:#999}#a0-widget .a0-panel .a0-email input,#a0-widget .a0-panel .a0-password input,#a0-widget .a0-panel .a0-repeatPassword input{padding:16px 10px;padding-left:40px;border-radius:0;position:absolute;right:0;left:0;bottom:0;top:0;background:#fff;max-width:228px;width:100%}#a0-widget .a0-panel .a0-email input:focus,#a0-widget .a0-panel .a0-password input:focus,#a0-widget .a0-panel .a0-repeatPassword input:focus{background:#fff}#a0-widget .a0-panel input::-webkit-input-placeholder{color:#9da4ad;-webkit-transition:color .2s ease-in}#a0-widget .a0-panel input:-moz-placeholder{color:#9da4ad}#a0-widget .a0-panel input::-moz-placeholder{color:#9da4ad}#a0-widget .a0-panel input:-ms-input-placeholder{color:#9da4ad}#a0-widget .a0-panel input:focus::-webkit-input-placeholder{color:#666}#a0-widget .a0-panel input:focus:-moz-placeholder{color:#666}#a0-widget .a0-panel input:focus::-moz-placeholder{color:#666}#a0-widget .a0-panel input:focus:-ms-input-placeholder{color:#666}#a0-widget .a0-panel .a0-inputs{border:1px solid #ccc;border-radius:3px;overflow:hidden}#a0-widget .a0-panel .a0-email input{border-bottom:0;border-top-left-radius:3px;border-top-right-radius:3px}#a0-widget .a0-panel .a0-password input{border-bottom-left-radius:3px;border-bottom-right-radius:3px}#a0-widget .a0-panel .a0-separator{margin-bottom:6px;margin-top:14px;color:#999;font-size:12px}#a0-widget .a0-panel .a0-separator span{letter-spacing:1px;text-transform:uppercase}#a0-widget .a0-panel button.a0-primary{text-align:center;text-transform:uppercase;font-weight:700;display:block!important;width:100%!important;float:none;min-width:auto;letter-spacing:1px;padding:20px 0;margin-bottom:10px;margin-top:20px;background-color:#16214D;color:#fff;cursor:pointer;border-radius:3px}#a0-widget .a0-panel button.a0-primary:hover{background:#0b1025}#a0-widget .a0-panel input[disabled]{background-color:#d9dee0}#a0-widget .a0-panel .a0-action{margin-bottom:10px}#a0-widget .a0-panel .a0-success{color:green}#a0-widget .a0-panel.a0-errors.a0-errors-global{border-color:red}#a0-widget .a0-panel.a0-errors .a0-error-input i{color:red}#a0-widget .a0-panel.a0-errors .a0-error-input span{position:absolute;top:15px;right:14px;font-size:9px;letter-spacing:1px;text-transform:uppercase;color:red;border:1px solid red;padding:4px 6px 4px 7px;border-radius:3px;display:block;z-index:10000}#a0-widget .a0-panel.a0-errors .a0-error-input input{color:red}#a0-widget .a0-panel.a0-errors .a0-error-input input::-webkit-input-placeholder{color:red}#a0-widget .a0-panel.a0-errors .a0-error-input input:-moz-placeholder{color:red}#a0-widget .a0-panel.a0-errors .a0-error-input input::-moz-placeholder{color:red}#a0-widget .a0-panel.a0-errors .a0-error-input input:-ms-input-placeholder{color:red}#a0-widget .a0-panel .a0-all{display:block;cursor:pointer;margin-bottom:10px;margin-top:10px;font-size:13px}#a0-widget .a0-panel .a0-all:hover{color:#000}#a0-widget .a0-panel .a0-close{position:absolute;top:20px;right:20px;display:block;cursor:pointer;font-size:16px;color:#ccc}#a0-widget .a0-panel .a0-close:hover{color:#333}#a0-widget .a0-panel #a0-change_password{margin-top:-10px}#a0-widget .a0-panel #a0-change_password .a0-password{margin-bottom:0}#a0-widget .a0-panel #a0-change_password .a0-password input{border-radius:0}#a0-widget .a0-panel #a0-change_password .a0-reset_easy_password input{border-bottom-right-radius:3px;border-bottom-left-radius:3px}#a0-widget .a0-popup .a0-centrix{padding:0;vertical-align:middle;display:table-cell;margin:0}#a0-widget .a0-popup .a0-overlay.a0-ie8-overlay{background:0 0;background-image:url(https://s3.amazonaws.com/assets.auth0.com/w2/img/bg-transp.png)}#a0-widget .a0-popup .a0-overlay{margin:0;display:table;position:fixed;left:0;top:0;bottom:0;right:0;width:100%;height:100%;overflow:hidden;z-index:9999;font-weight:200;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background:#000;background:rgba(0,0,0,.8);opacity:0;-webkit-transition:300ms opacity ease-out;-moz-transition:300ms opacity ease-out;transition:300ms opacity ease-out;-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}#a0-widget .a0-popup .a0-overlay.a0-active{opacity:1}#a0-widget .a0-popup .a0-overlay .a0-panel{display:none;margin:0 auto}#a0-widget .a0-popup .a0-overlay .a0-panel.a0-active{display:block}#a0-widget #a0-onestep{-webkit-transition:height 100ms ease-in;-moz-transition:height 100ms ease-in;transition:height 100ms ease-in}#a0-widget #a0-onestep.a0-disable-transition{-webkit-transition:none;-moz-transition:none;transition:none}#a0-widget #a0-onestep .a0-loading{min-height:110px}#a0-widget .a0-spin-container{position:relative;top:50%}#a0-widget .a0-loading.a0-with-message .a0-spin-container{top:37%}#a0-widget .a0-spin-message{text-align:center;position:relative;top:60px}#a0-widget .a0-spin-message span{font-size:14px;color:#41444a}#a0-widget .a0-spin-img{position:relative;top:50%;left:50%;width:32px;height:32px;margin-left:-16px;margin-top:-16px}#a0-widget .a0-sad-placeholder{display:none}#a0-widget .a0-no-placeholder-support .a0-sad-placeholder{display:block;text-align:left;font-weight:700;margin:14px 0 10px}#a0-widget .a0-no-placeholder-support .a0-inputs{border:0!important}#a0-widget .a0-no-placeholder-support .a0-inputs .a0-email,#a0-widget .a0-no-placeholder-support .a0-inputs .a0-password,#a0-widget .a0-no-placeholder-support .a0-inputs .a0-repeatPassword{border:0}#a0-widget .a0-no-placeholder-support .a0-inputs .a0-input-box{border:1px solid #ccc}#a0-widget .a0-no-placeholder-support .a0-inputs .a0-input-box input{border:0!important}@media screen and (max-width:480px){#a0-widget .a0-centrix{position:fixed;top:0;right:0;bottom:0;left:0;background:#fff;z-index:100000;border-radius:0;height:100%;overflow-y:scroll}#a0-widget .a0-centrix .a0-panel{-webkit-box-shadow:none;box-shadow:none}#a0-widget .a0-centrix .a0-panel .a0-db-actions,#a0-widget .a0-centrix .a0-panel .a0-options{margin-top:20px;font-size:14px}}@media screen and (max-height:470px){#a0-widget .a0-panel .a0-avatar,#a0-widget .a0-panel .a0-avatar-guest{display:none}}#a0-widget .a0-spinner-css{position:absolute;top:50%;left:50%;margin:-2.5em;display:block;width:5em;font-size:30px;color:#D0D2D3;border-radius:2.5em 0 2.5em 2.5em;-webkit-animation:spinner 2s ease-in-out 0s infinite}#a0-widget .a0-spinner-css:after{position:absolute;display:block;width:1.8em;background:#fff;top:2.5em;left:1.6em;font-family:auth0!important;content:\"a\"}@-webkit-keyframes spinner{from{-webkit-transform:rotateY(0deg)}to{-webkit-transform:rotateY(360deg)}}";
insert(style);
},{"fs":38}],17:[function(require,module,exports){
var json_parse = require('./json_parse');

function LoginError(status, details) {
  var obj;

  if (typeof details == 'string') {
    try {
      obj = json_parse(details);
    } catch (er) {
      obj = {message: details};
    }
  } else {
    obj = details || { description: 'server error' };
  }

  if (obj && !obj.code) {
    obj.code = obj.error;
  }
  
  var err = Error.call(this, obj.description || obj.message || obj.error);

  err.status = status;
  err.name = obj.code;
  err.code = obj.code;
  err.details = obj;

  if (status === 0) {
    err.code = "Unknown";
    err.message = "Unknown error.";
  }

  return err;
}

if (Object && Object.create) {
  LoginError.prototype = Object.create(Error.prototype, {
    constructor: { value: LoginError }
  });
}

module.exports = LoginError;
},{"./json_parse":21}],18:[function(require,module,exports){
module.exports = function (obj, prop) {
  if (!obj[prop]) {
    throw new Error(prop + ' is required.');
  }
};
},{}],19:[function(require,module,exports){
var Base64 = require('Base64');

module.exports = function(str) {
  var output = str.replace("-", "+").replace("_", "/");
  switch (output.length % 4) {
    case 0:
      break;
    case 2:
      output += "==";
      break;
    case 3:
      output += "=";
      break;
    default:
      throw "Illegal base64url string!";
  }
  return decodeURIComponent(escape(Base64.atob(output)));
};
},{"Base64":23}],20:[function(require,module,exports){
var global=typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};var assert_required   = require('./assert_required');
var base64_url_decode = require('./base64_url_decode');
var qs                = require('qs');
var xtend             = require('xtend');
var reqwest           = require('reqwest');

var jsonp             = require('jsonp');

var use_jsonp         = require('./use_jsonp');
var LoginError        = require('./LoginError');
var json_parse        = require('./json_parse');

function Auth0 (options) {
  if (!(this instanceof Auth0)) {
    return new Auth0(options);
  }

  assert_required(options, 'clientID');
  assert_required(options, 'callbackURL');
  assert_required(options, 'domain');

  this._useJSONP = options.forceJSONP || use_jsonp();
  this._clientID = options.clientID;
  this._callbackURL = options.callbackURL;
  this._domain = options.domain;
  this._callbackOnLocationHash = false || options.callbackOnLocationHash;
}

Auth0.prototype._redirect = function (url) {
  global.window.location = url;
};

Auth0.prototype._renderAndSubmitWSFedForm = function (options, formHtml) {
  var div = document.createElement('div');
  div.innerHTML = formHtml;
  var form = document.body.appendChild(div).children[0];

  if (options.popup && !this._callbackOnLocationHash) {
    form.target = 'auth0_signup_popup';
  }

  form.submit();
};

Auth0.prototype._getMode = function () {
  return {
    scope: 'openid',
    response_type: this._callbackOnLocationHash ? 'token' : 'code'
  };
};

Auth0.prototype._getUserInfo = function (profile, id_token, callback) {

  if (profile && !profile.user_id) { // the scope was just openid
    var self = this;
    var url = 'https://' + self._domain + '/tokeninfo?';
    var fail = function (status, description) {
      callback({
        error: status,
        error_description: description
      });
    };

    if (this._useJSONP) {
      return jsonp(url + qs.stringify({id_token: id_token}), {
        param: 'cbx',
        timeout: 15000
      }, function (err, resp) {
        if (err) {
          return fail(0, err.toString());
        }

        return resp.status === 200 ?
          callback(null, resp.user) :
          fail(resp.status, resp.error);
      });
    }

    return reqwest({
      url:          url,
      method:       'post',
      type:         'json',
      crossOrigin:  true,
      data:         {id_token: id_token}
    }).fail(function (err) {
      fail(err.status, err.responseText);
    }).then(function (userinfo) {
      callback(null, userinfo);
    });
  }

  callback(null, profile);
};

Auth0.prototype.getProfile = function (id_token, callback) {
  if (!id_token || typeof id_token !== 'string') {
    return callback(new Error('Invalid token'));
  }

  this._getUserInfo(this.decodeJwt(id_token), id_token, callback);
};

Auth0.prototype.validateUser = function (options, callback) {
  var endpoint = 'https://' + this._domain + '/public/api/users/validate_userpassword';
  var query = xtend(
    options,
    {
      client_id:    this._clientID,
      username:     options.username || options.email
    });

  if (this._useJSONP) {
    return jsonp(endpoint + '?' + qs.stringify(query), {
      param: 'cbx',
      timeout: 15000
    }, function (err, resp) {
      if (err) {
        return callback(err);
      }
      if('error' in resp && resp.status !== 404) {
        return callback(new Error(resp.error));
      }
      callback(null, resp.status === 200);
    });
  }

  reqwest({
    url:     endpoint,
    method:  'post',
    type:    'text',
    data:    query,
    crossOrigin: true,
    error: function (err) {
      if (err.status !== 404) { return callback(new Error(err.responseText)); }
      callback(null, false);
    },
    success: function (resp) {
      callback(null, resp.status === 200);
    }
  });
};

Auth0.prototype.decodeJwt = function (jwt) {
  var encoded = jwt && jwt.split('.')[1];
  return json_parse(base64_url_decode(encoded));
};

Auth0.prototype.parseHash = function (hash) {
  if (hash.match(/error/)) {
    hash = hash.substr(1).replace(/^\//, '');
    var parsed_qs = qs.parse(hash);
    var err = {
      error: parsed_qs.error,
      error_description: parsed_qs.error_description
    };
    return err;
  }
  if(!hash.match(/access_token/)) {
    // Invalid hash URL
    return null;
  }
  hash = hash.substr(1).replace(/^\//, '');
  var parsed_qs = qs.parse(hash);
  var id_token = parsed_qs.id_token;
  var prof = this.decodeJwt(id_token);
  var invalidJwt = function (error) {
    var err = {
      error: 'invalid_token',
      error_description: error
    };
    return err;
  };

  // aud should be the clientID
  if (prof.aud !== this._clientID) {
    return invalidJwt(
      'The clientID configured (' + this._clientID + ') does not match with the clientID set in the token (' + prof.aud + ').');
  }

  // iss should be the Auth0 domain (i.e.: https://contoso.auth0.com/)
  if (prof.iss && prof.iss !== 'https://' + this._domain + '/') {
    return invalidJwt(
      'The domain configured (https://' + this._domain + '/) does not match with the domain set in the token (' + prof.iss + ').');
  }

  return {
    profile: prof,
    id_token: id_token,
    access_token: parsed_qs.access_token,
    state: parsed_qs.state
  };
};


Auth0.prototype.signup = function (options, callback) {
  var self = this;

  var query = xtend(
    this._getMode(),
    options,
    {
      client_id: this._clientID,
      redirect_uri: this._callbackURL,
      email: options.username || options.email,
      tenant: this._domain.split('.')[0]
    });

  function success () {
    if ('auto_login' in options && !options.auto_login) {
      if (callback) callback();
      return;
    }
    self.login(options, callback);
  }

  function fail (status, resp) {
    var error = new LoginError(status, resp);
    if (callback) return callback(error);
    throw error;
  }

  if (this._useJSONP) {
    return jsonp('https://' + this._domain + '/dbconnections/signup?' + qs.stringify(query), {
      param: 'cbx',
      timeout: 15000
    }, function (err, resp) {
      if (err) {
        return fail(0, err);
      }
      return resp.status == 200 ?
              success() :
              fail(resp.status, resp.err);
    });
  }

  reqwest({
    url:     'https://' + this._domain + '/dbconnections/signup',
    method:  'post',
    type:    'html',
    data:    query,
    success: success,
    crossOrigin: true
  }).fail(function (err) {
    fail(err.status, err.responseText);
  });
};

Auth0.prototype.changePassword = function (options, callback) {
  var self = this;
  var query = {
    tenant:         this._domain.split('.')[0],
    client_id:      this._clientID,
    connection:     options.connection,
    email:          options.username || options.email,
    password:       options.password
  };


  function fail (status, resp) {
    var error = new LoginError(status, resp);
    if (callback)      return callback(error);
  }

  if (this._useJSONP) {
    return jsonp('https://' + this._domain + '/dbconnections/change_password?' + qs.stringify(query), {
      param: 'cbx',
      timeout: 15000
    }, function (err, resp) {
      if (err) {
        return fail(0, err);
      }
      return resp.status == 200 ?
              callback(null, resp.message) :
              fail(resp.status, resp.err);
    });
  }

  reqwest({
    url:     'https://' + this._domain + '/dbconnections/change_password',
    method:  'post',
    type:    'html',
    data:    query,
    crossOrigin: true
  }).fail(function (err) {
    fail(err.status, err.responseText);
  }).then(function (r) {
    callback(null, r);
  });
};


Auth0.prototype.login = Auth0.prototype.signin = function (options, callback) {
  if (typeof options.username !== 'undefined' ||
      typeof options.email !== 'undefined') {
    return this.loginWithUsernamePassword(options, callback);
  }

  if (!!options.popup) {
    return this.loginWithPopup(options, callback);
  }

  var query = xtend(
    this._getMode(),
    options,
    { client_id: this._clientID, redirect_uri: this._callbackURL });

  this._redirect('https://' + this._domain + '/authorize?' + qs.stringify(query));
};


Auth0.prototype.loginWithPopup = function(options, callback) {
  var self = this;
  var query = xtend(
    this._getMode(),
    options,
    { client_id: this._clientID, redirect_uri: this._callbackURL });

  var popupUrl = 'https://' + this._domain + '/authorize?' + qs.stringify(query);
  var popupOptions = xtend(
    { width: 500, height: 600 },
    options.popupOptions);

  if (!callback) {
    throw new Error('popup mode should receive a mandatory callback');
  }

  var popup = window.open(popupUrl, null, stringifyPopupSettings(popupOptions));
  if (!popup) { return callback(new Error('Unable to open popup')); }

  var popupReadyTimer = setInterval(popupReadyCheck, 50);
  popup.focus();

  function popupReadyCheck() {
    if (!popup) {
      // double check popup exists in case
      // check is called before reload and
      // after `popup = null` clear assignment
      return clearInterval(popupReadyTimer);
    }

    if (!(popup.top || popup.window)) {
      // popup was closed therefore stop check
      clearInterval(popupReadyTimer);
      popup = null;
      return;
    }

    var hash = '';
    try {
      // Avoids error throwing when protocols or
      // X-Origin restriction browser policies
      // block access to `popup` window properties
      if (/#access_token/.test(popup.location.href)) {
        clearInterval(popupReadyTimer);
        hash = popup.location.hash;
        popup.close();
        pupup = null;
      }
      if (/\?error/.test(popup.location.href)) {
        clearInterval(popupReadyTimer);
        hash = "#" + popup.location.search.slice(1);
        popup.close();
        popup = null;
      }
    } catch (err) { }

    if (hash.length) {
      var result = self.parseHash(hash);

      if (result && result.id_token) {
        return self.getProfile(result.id_token, function (err, profile) {
          callback(err, profile, result.id_token, result.access_token, result.state);
        });
      }

      // Nothing found at the URL, will check
      // on next cycle

    }
  }

};

function stringifyPopupSettings(popupOptions) {
  // Stringify popup options object into
  // `window.open` string options format
  var settings = '';

  for (var key in popupOptions) {
    settings += key + '=' + popupOptions[key] + ',';
  }

  return settings.slice(0, -1);
}


Auth0.prototype.loginWithResourceOwner = function (options, callback) {
  var self = this;
  var query = xtend(
    this._getMode(),
    options,
    {
      client_id:    this._clientID,
      username:     options.username || options.email,
      grant_type:   'password'
    });

  var endpoint = '/oauth/ro';

  function enrichGetProfile(resp, callback) {
    self.getProfile(resp.id_token, function (err, profile) {
      callback(err, profile, resp.id_token, resp.access_token, resp.state);
    });
  }

  if (this._useJSONP) {
    return jsonp('https://' + this._domain + endpoint + '?' + qs.stringify(query), {
      param: 'cbx',
      timeout: 15000
    }, function (err, resp) {
      if (err) {
        return callback(err);
      }
      if('error' in resp) {
        var error = new LoginError(resp.status, resp.error);
        return callback(error);
      }
      enrichGetProfile(resp, callback);
    });
  }

  reqwest({
    url:     'https://' + this._domain + endpoint,
    method:  'post',
    type:    'json',
    data:    query,
    crossOrigin: true,
    success: function (resp) {
      enrichGetProfile(resp, callback);
    }
  }).fail(function (err) {
    var er = err;
    if (!er.status || er.status === 0) { //ie10 trick
      er = {};
      er.status = 401;
      er.responseText = {
        code: 'invalid_user_password'
      };
    }
    else {
      er.responseText = err;
    }
    var error = new LoginError(er.status, er.responseText);
    callback(error);
  });
};

Auth0.prototype.loginWithUsernamePassword = function (options, callback) {
  if (callback && callback.length > 1) {
    return this.loginWithResourceOwner(options, callback);
  }

  var self = this;
  var popup;

  if (options.popup  && !this._callbackOnLocationHash) {
    var popupOptions = stringifyPopupSettings(xtend(
                            { width: 500, height: 600 },
                            (options.popupOptions || {})));
    popup = window.open('about:blank', 'auth0_signup_popup',popupOptions);
  }

  var query = xtend(
    this._getMode(),
    options,
    {
      client_id: this._clientID,
      redirect_uri: this._callbackURL,
      username: options.username || options.email,
      tenant: this._domain.split('.')[0]
    });

  var endpoint = '/usernamepassword/login';

  if (this._useJSONP) {
    return jsonp('https://' + this._domain + endpoint + '?' + qs.stringify(query), {
      param: 'cbx',
      timeout: 15000
    }, function (err, resp) {
      if (err) {
        if (popup) popup.close();
        return callback(err);
      }
      if('error' in resp) {
        if (popup) popup.close();
        var error = new LoginError(resp.status, resp.error);
        return callback(error);
      }
      self._renderAndSubmitWSFedForm(options, resp.form);
    });
  }

  function return_error (error) {
    if (callback) return callback(error);
    throw error;
  }

  reqwest({
    url:     'https://' + this._domain + endpoint,
    method:  'post',
    type:    'html',
    data:    query,
    crossOrigin: true,
    success: function (resp) {
      self._renderAndSubmitWSFedForm(options, resp);
    }
  }).fail(function (err) {
    var er = err;
    if (popup) popup.close();
    if (!er.status || er.status === 0) { //ie10 trick
      er = {};
      er.status = 401;
      er.responseText = {
        code: 'invalid_user_password'
      };
    }
    var error = new LoginError(er.status, er.responseText);
    return return_error(error);
  });
};

Auth0.prototype.getDelegationToken = function (targetClientId, id_token, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  options.id_token = id_token;

  var query = xtend({
    grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
    target:     targetClientId,
    client_id:  this._clientID
  }, options);

  var endpoint = '/delegation';

  if (this._useJSONP) {
    return jsonp('https://' + this._domain + endpoint + '?' + qs.stringify(query), {
      param: 'cbx',
      timeout: 15000
    }, function (err, resp) {
      if (err) {
        return callback(err);
      }
      if('error' in resp) {
        var error = new LoginError(resp.status, resp.error_description || resp.error);
        return callback(error);
      }
      callback(null, resp);
    });
  }

  reqwest({
    url:     'https://' + this._domain + endpoint,
    method:  'post',
    type:    'json',
    data:    query,
    crossOrigin: true,
    success: function (resp) {
      callback(null, resp);
    }
  }).fail(function (err) {
    try {
      callback(JSON.parse(err.responseText));
    }
    catch (e) {
      var er = err;
      if (!er.status || er.status === 0) { //ie10 trick
        er = {};
        er.status = 401;
        er.responseText = {
          code: 'invalid_operation'
        };
      }
      callback(new LoginError(er.status, er.responseText));
    }
  });
};

Auth0.prototype.logout = function (query) {
  var url = 'https://' + this._domain + '/logout';
  if (query) {
    url += '?' + qs.stringify(query);
  }
  this._redirect(url);
};

Auth0.prototype.getSSOData = function (withActiveDirectories, callback) {
  if (typeof withActiveDirectories === 'function') {
    callback = withActiveDirectories;
    withActiveDirectories = false;
  }

  var url = 'https://' + this._domain + '/user/ssodata';

  if (withActiveDirectories) {
    url += '?' + qs.stringify({ldaps: 1, client_id: this._clientID});
  }

  return jsonp(url, {
    param: 'cbx',
    timeout: 15000
  }, function (err, resp) {
    callback(null, err ? {} : resp); // Always return OK, regardless of any errors
  });
};

Auth0.prototype.getConnections = function (callback) {
  return jsonp('https://' + this._domain + '/public/api/' + this._clientID + '/connections', {
    param: 'cbx',
    timeout: 15000
  }, callback);
};

module.exports = Auth0;

},{"./LoginError":17,"./assert_required":18,"./base64_url_decode":19,"./json_parse":21,"./use_jsonp":22,"jsonp":25,"qs":26,"reqwest":27,"xtend":29}],21:[function(require,module,exports){
module.exports = function (str) {
  return window.JSON ? window.JSON.parse(str) : eval('(' + str + ')');
};
},{}],22:[function(require,module,exports){
module.exports = function () {
  var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : null;

  if (xhr && 'withCredentials' in xhr) {
    return false;
  }

  if ('XDomainRequest' in window && window.location.protocol === 'https:') {
    return false;
  }

  return true;
};
},{}],23:[function(require,module,exports){
;(function () {

  var
    object = typeof exports != 'undefined' ? exports : this, // #8: web workers
    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
    INVALID_CHARACTER_ERR = (function () {
      // fabricate a suitable error object
      try { document.createElement('$'); }
      catch (error) { return error; }}());

  // encoder
  // [https://gist.github.com/999166] by [https://github.com/nignag]
  object.btoa || (
  object.btoa = function (input) {
    for (
      // initialize result and counter
      var block, charCode, idx = 0, map = chars, output = '';
      // if the next input index does not exist:
      //   change the mapping table to "="
      //   check if d has no fractional digits
      input.charAt(idx | 0) || (map = '=', idx % 1);
      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
    ) {
      charCode = input.charCodeAt(idx += 3/4);
      if (charCode > 0xFF) throw INVALID_CHARACTER_ERR;
      block = block << 8 | charCode;
    }
    return output;
  });

  // decoder
  // [https://gist.github.com/1020396] by [https://github.com/atk]
  object.atob || (
  object.atob = function (input) {
    input = input.replace(/=+$/, '')
    if (input.length % 4 == 1) throw INVALID_CHARACTER_ERR;
    for (
      // initialize result and counters
      var bc = 0, bs, buffer, idx = 0, output = '';
      // get next character
      buffer = input.charAt(idx++);
      // character found in table? initialize bit storage and add its ascii value;
      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
        // and if not first of each 4 characters,
        // convert the first 8 bits to one ascii character
        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
    ) {
      // try to find character in table (0-63, not found => -1)
      buffer = chars.indexOf(buffer);
    }
    return output;
  });

}());

},{}],24:[function(require,module,exports){

/**
 * Expose `debug()` as the module.
 */

module.exports = debug;

/**
 * Create a debugger with the given `name`.
 *
 * @param {String} name
 * @return {Type}
 * @api public
 */

function debug(name) {
  if (!debug.enabled(name)) return function(){};

  return function(fmt){
    fmt = coerce(fmt);

    var curr = new Date;
    var ms = curr - (debug[name] || curr);
    debug[name] = curr;

    fmt = name
      + ' '
      + fmt
      + ' +' + debug.humanize(ms);

    // This hackery is required for IE8
    // where `console.log` doesn't have 'apply'
    window.console
      && console.log
      && Function.prototype.apply.call(console.log, console, arguments);
  }
}

/**
 * The currently active debug mode names.
 */

debug.names = [];
debug.skips = [];

/**
 * Enables a debug mode by name. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} name
 * @api public
 */

debug.enable = function(name) {
  try {
    localStorage.debug = name;
  } catch(e){}

  var split = (name || '').split(/[\s,]+/)
    , len = split.length;

  for (var i = 0; i < len; i++) {
    name = split[i].replace('*', '.*?');
    if (name[0] === '-') {
      debug.skips.push(new RegExp('^' + name.substr(1) + '$'));
    }
    else {
      debug.names.push(new RegExp('^' + name + '$'));
    }
  }
};

/**
 * Disable debug output.
 *
 * @api public
 */

debug.disable = function(){
  debug.enable('');
};

/**
 * Humanize the given `ms`.
 *
 * @param {Number} m
 * @return {String}
 * @api private
 */

debug.humanize = function(ms) {
  var sec = 1000
    , min = 60 * 1000
    , hour = 60 * min;

  if (ms >= hour) return (ms / hour).toFixed(1) + 'h';
  if (ms >= min) return (ms / min).toFixed(1) + 'm';
  if (ms >= sec) return (ms / sec | 0) + 's';
  return ms + 'ms';
};

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

debug.enabled = function(name) {
  for (var i = 0, len = debug.skips.length; i < len; i++) {
    if (debug.skips[i].test(name)) {
      return false;
    }
  }
  for (var i = 0, len = debug.names.length; i < len; i++) {
    if (debug.names[i].test(name)) {
      return true;
    }
  }
  return false;
};

/**
 * Coerce `val`.
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

// persist

try {
  if (window.localStorage) debug.enable(localStorage.debug);
} catch(e){}

},{}],25:[function(require,module,exports){

/**
 * Module dependencies
 */

var debug = require('debug')('jsonp');

/**
 * Module exports.
 */

module.exports = jsonp;

/**
 * Callback index.
 */

var count = 0;

/**
 * Noop function.
 */

function noop(){};

/**
 * JSONP handler
 *
 * Options:
 *  - param {String} qs parameter (`callback`)
 *  - timeout {Number} how long after a timeout error is emitted (`60000`)
 *
 * @param {String} url
 * @param {Object|Function} optional options / callback
 * @param {Function} optional callback
 */

function jsonp(url, opts, fn){
  if ('function' == typeof opts) {
    fn = opts;
    opts = {};
  }

  var opts = opts || {};
  var param = opts.param || 'callback';
  var timeout = null != opts.timeout ? opts.timeout : 60000;
  var enc = encodeURIComponent;
  var target = document.getElementsByTagName('script')[0];
  var script;
  var timer;

  // generate a unique id for this request
  var id = count++;

  if (timeout) {
    timer = setTimeout(function(){
      cleanup();
      fn && fn(new Error('Timeout'));
    }, timeout);
  }

  function cleanup(){
    target.parentNode.removeChild(script);
    window['__jp' + id] = noop;
  }

  window['__jp' + id] = function(data){
    debug('jsonp got', data);
    if (timer) clearTimeout(timer);
    cleanup();
    fn && fn(null, data);
  };

  // add qs component
  url += (~url.indexOf('?') ? '&' : '?') + param + '=' + enc('__jp' + id + '');
  url = url.replace('?&', '?');

  debug('jsonp req "%s"', url);

  // create script
  script = document.createElement('script');
  script.src = url;
  target.parentNode.insertBefore(script, target);
};

},{"debug":24}],26:[function(require,module,exports){
/**
 * Object#toString() ref for stringify().
 */

var toString = Object.prototype.toString;

/**
 * Object#hasOwnProperty ref
 */

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * see issue #70
 */
var isRestorableProto = (function () {
  var o;

  if (!Object.create) return false;

  o = Object.create(null);
  o.__proto__ = Object.prototype;

  return o.hasOwnProperty === hasOwnProperty;
})();

/**
 * Array#indexOf shim.
 */

var indexOf = typeof Array.prototype.indexOf === 'function'
  ? function(arr, el) { return arr.indexOf(el); }
  : function(arr, el) {
      if (typeof arr == 'string' && typeof "a"[0] == 'undefined') {
        arr = arr.split('');
      }
      for (var i = 0; i < arr.length; i++) {
        if (arr[i] === el) return i;
      }
      return -1;
    };

/**
 * Array.isArray shim.
 */

var isArray = Array.isArray || function(arr) {
  return toString.call(arr) == '[object Array]';
};

/**
 * Object.keys shim.
 */

var objectKeys = Object.keys || function(obj) {
  var ret = [];
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      ret.push(key);
    }
  }
  return ret;
};

/**
 * Array#forEach shim.
 */

var forEach = typeof Array.prototype.forEach === 'function'
  ? function(arr, fn) { return arr.forEach(fn); }
  : function(arr, fn) {
      for (var i = 0; i < arr.length; i++) fn(arr[i]);
    };

/**
 * Array#reduce shim.
 */

var reduce = function(arr, fn, initial) {
  if (typeof arr.reduce === 'function') return arr.reduce(fn, initial);
  var res = initial;
  for (var i = 0; i < arr.length; i++) res = fn(res, arr[i]);
  return res;
};

/**
 * Create a nullary object if possible
 */

function createObject() {
  return isRestorableProto
    ? Object.create(null)
    : {};
}

/**
 * Cache non-integer test regexp.
 */

var isint = /^[0-9]+$/;

function promote(parent, key) {
  if (parent[key].length == 0) return parent[key] = createObject();
  var t = createObject();
  for (var i in parent[key]) {
    if (hasOwnProperty.call(parent[key], i)) {
      t[i] = parent[key][i];
    }
  }
  parent[key] = t;
  return t;
}

function parse(parts, parent, key, val) {
  var part = parts.shift();
  // end
  if (!part) {
    if (isArray(parent[key])) {
      parent[key].push(val);
    } else if ('object' == typeof parent[key]) {
      parent[key] = val;
    } else if ('undefined' == typeof parent[key]) {
      parent[key] = val;
    } else {
      parent[key] = [parent[key], val];
    }
    // array
  } else {
    var obj = parent[key] = parent[key] || [];
    if (']' == part) {
      if (isArray(obj)) {
        if ('' != val) obj.push(val);
      } else if ('object' == typeof obj) {
        obj[objectKeys(obj).length] = val;
      } else {
        obj = parent[key] = [parent[key], val];
      }
      // prop
    } else if (~indexOf(part, ']')) {
      part = part.substr(0, part.length - 1);
      if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
      parse(parts, obj, part, val);
      // key
    } else {
      if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);
      parse(parts, obj, part, val);
    }
  }
}

/**
 * Merge parent key/val pair.
 */

function merge(parent, key, val){
  if (~indexOf(key, ']')) {
    var parts = key.split('[')
      , len = parts.length
      , last = len - 1;
    parse(parts, parent, 'base', val);
    // optimize
  } else {
    if (!isint.test(key) && isArray(parent.base)) {
      var t = createObject();
      for (var k in parent.base) t[k] = parent.base[k];
      parent.base = t;
    }
    set(parent.base, key, val);
  }

  return parent;
}

/**
 * Compact sparse arrays.
 */

function compact(obj) {
  if ('object' != typeof obj) return obj;

  if (isArray(obj)) {
    var ret = [];

    for (var i in obj) {
      if (hasOwnProperty.call(obj, i)) {
        ret.push(obj[i]);
      }
    }

    return ret;
  }

  for (var key in obj) {
    obj[key] = compact(obj[key]);
  }

  return obj;
}

/**
 * Restore Object.prototype.
 * see pull-request #58
 */

function restoreProto(obj) {
  if (!isRestorableProto) return obj;
  if (isArray(obj)) return obj;
  if (obj && 'object' != typeof obj) return obj;

  for (var key in obj) {
    if (hasOwnProperty.call(obj, key)) {
      obj[key] = restoreProto(obj[key]);
    }
  }

  obj.__proto__ = Object.prototype;
  return obj;
}

/**
 * Parse the given obj.
 */

function parseObject(obj){
  var ret = { base: {} };

  forEach(objectKeys(obj), function(name){
    merge(ret, name, obj[name]);
  });

  return compact(ret.base);
}

/**
 * Parse the given str.
 */

function parseString(str){
  var ret = reduce(String(str).split('&'), function(ret, pair){
    var eql = indexOf(pair, '=')
      , brace = lastBraceInKey(pair)
      , key = pair.substr(0, brace || eql)
      , val = pair.substr(brace || eql, pair.length)
      , val = val.substr(indexOf(val, '=') + 1, val.length);

    // ?foo
    if ('' == key) key = pair, val = '';
    if ('' == key) return ret;

    return merge(ret, decode(key), decode(val));
  }, { base: createObject() }).base;

  return restoreProto(compact(ret));
}

/**
 * Parse the given query `str` or `obj`, returning an object.
 *
 * @param {String} str | {Object} obj
 * @return {Object}
 * @api public
 */

exports.parse = function(str){
  if (null == str || '' == str) return {};
  return 'object' == typeof str
    ? parseObject(str)
    : parseString(str);
};

/**
 * Turn the given `obj` into a query string
 *
 * @param {Object} obj
 * @return {String}
 * @api public
 */

var stringify = exports.stringify = function(obj, prefix) {
  if (isArray(obj)) {
    return stringifyArray(obj, prefix);
  } else if ('[object Object]' == toString.call(obj)) {
    return stringifyObject(obj, prefix);
  } else if ('string' == typeof obj) {
    return stringifyString(obj, prefix);
  } else {
    return prefix + '=' + encodeURIComponent(String(obj));
  }
};

/**
 * Stringify the given `str`.
 *
 * @param {String} str
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyString(str, prefix) {
  if (!prefix) throw new TypeError('stringify expects an object');
  return prefix + '=' + encodeURIComponent(str);
}

/**
 * Stringify the given `arr`.
 *
 * @param {Array} arr
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyArray(arr, prefix) {
  var ret = [];
  if (!prefix) throw new TypeError('stringify expects an object');
  for (var i = 0; i < arr.length; i++) {
    ret.push(stringify(arr[i], prefix + '[' + i + ']'));
  }
  return ret.join('&');
}

/**
 * Stringify the given `obj`.
 *
 * @param {Object} obj
 * @param {String} prefix
 * @return {String}
 * @api private
 */

function stringifyObject(obj, prefix) {
  var ret = []
    , keys = objectKeys(obj)
    , key;

  for (var i = 0, len = keys.length; i < len; ++i) {
    key = keys[i];
    if ('' == key) continue;
    if (null == obj[key]) {
      ret.push(encodeURIComponent(key) + '=');
    } else {
      ret.push(stringify(obj[key], prefix
        ? prefix + '[' + encodeURIComponent(key) + ']'
        : encodeURIComponent(key)));
    }
  }

  return ret.join('&');
}

/**
 * Set `obj`'s `key` to `val` respecting
 * the weird and wonderful syntax of a qs,
 * where "foo=bar&foo=baz" becomes an array.
 *
 * @param {Object} obj
 * @param {String} key
 * @param {String} val
 * @api private
 */

function set(obj, key, val) {
  var v = obj[key];
  if (undefined === v) {
    obj[key] = val;
  } else if (isArray(v)) {
    v.push(val);
  } else {
    obj[key] = [v, val];
  }
}

/**
 * Locate last brace in `str` within the key.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function lastBraceInKey(str) {
  var len = str.length
    , brace
    , c;
  for (var i = 0; i < len; ++i) {
    c = str[i];
    if (']' == c) brace = false;
    if ('[' == c) brace = true;
    if ('=' == c && !brace) return i;
  }
}

/**
 * Decode `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

function decode(str) {
  try {
    return decodeURIComponent(str.replace(/\+/g, ' '));
  } catch (err) {
    return str;
  }
}

},{}],27:[function(require,module,exports){
/*! version: 0.9.7
  * Reqwest! A general purpose XHR connection manager
  * license MIT (c) Dustin Diaz 2013
  * https://github.com/ded/reqwest
  */

!function (name, context, definition) {
  if (typeof module != 'undefined' && module.exports) module.exports = definition()
  else if (typeof define == 'function' && define.amd) define(definition)
  else context[name] = definition()
}('reqwest', this, function () {

  var win = window
    , doc = document
    , twoHundo = /^(20\d|1223)$/
    , byTag = 'getElementsByTagName'
    , readyState = 'readyState'
    , contentType = 'Content-Type'
    , requestedWith = 'X-Requested-With'
    , head = doc[byTag]('head')[0]
    , uniqid = 0
    , callbackPrefix = 'reqwest_' + (+new Date())
    , lastValue // data stored by the most recent JSONP callback
    , xmlHttpRequest = 'XMLHttpRequest'
    , xDomainRequest = 'XDomainRequest'
    , noop = function () {}

    , isArray = typeof Array.isArray == 'function'
        ? Array.isArray
        : function (a) {
            return a instanceof Array
          }

    , defaultHeaders = {
          'contentType': 'application/x-www-form-urlencoded'
        , 'requestedWith': xmlHttpRequest
        , 'accept': {
              '*':  'text/javascript, text/html, application/xml, text/xml, */*'
            , 'xml':  'application/xml, text/xml'
            , 'html': 'text/html'
            , 'text': 'text/plain'
            , 'json': 'application/json, text/javascript'
            , 'js':   'application/javascript, text/javascript'
          }
      }

    , xhr = function(o) {
        // is it x-domain
        if (o['crossOrigin'] === true) {
          var xhr = win[xmlHttpRequest] ? new XMLHttpRequest() : null
          if (xhr && 'withCredentials' in xhr) {
            return xhr
          } else if (win[xDomainRequest]) {
            return new XDomainRequest()
          } else {
            throw new Error('Browser does not support cross-origin requests')
          }
        } else if (win[xmlHttpRequest]) {
          return new XMLHttpRequest()
        } else {
          return new ActiveXObject('Microsoft.XMLHTTP')
        }
      }
    , globalSetupOptions = {
        dataFilter: function (data) {
          return data
        }
      }

  function handleReadyState(r, success, error) {
    return function () {
      // use _aborted to mitigate against IE err c00c023f
      // (can't read props on aborted request objects)
      if (r._aborted) return error(r.request)
      if (r.request && r.request[readyState] == 4) {
        r.request.onreadystatechange = noop
        if (twoHundo.test(r.request.status))
          success(r.request)
        else
          error(r.request)
      }
    }
  }

  function setHeaders(http, o) {
    var headers = o['headers'] || {}
      , h

    headers['Accept'] = headers['Accept']
      || defaultHeaders['accept'][o['type']]
      || defaultHeaders['accept']['*']

    // breaks cross-origin requests with legacy browsers
    if (!o['crossOrigin'] && !headers[requestedWith]) headers[requestedWith] = defaultHeaders['requestedWith']
    if (!headers[contentType]) headers[contentType] = o['contentType'] || defaultHeaders['contentType']
    for (h in headers)
      headers.hasOwnProperty(h) && 'setRequestHeader' in http && http.setRequestHeader(h, headers[h])
  }

  function setCredentials(http, o) {
    if (typeof o['withCredentials'] !== 'undefined' && typeof http.withCredentials !== 'undefined') {
      http.withCredentials = !!o['withCredentials']
    }
  }

  function generalCallback(data) {
    lastValue = data
  }

  function urlappend (url, s) {
    return url + (/\?/.test(url) ? '&' : '?') + s
  }

  function handleJsonp(o, fn, err, url) {
    var reqId = uniqid++
      , cbkey = o['jsonpCallback'] || 'callback' // the 'callback' key
      , cbval = o['jsonpCallbackName'] || reqwest.getcallbackPrefix(reqId)
      // , cbval = o['jsonpCallbackName'] || ('reqwest_' + reqId) // the 'callback' value
      , cbreg = new RegExp('((^|\\?|&)' + cbkey + ')=([^&]+)')
      , match = url.match(cbreg)
      , script = doc.createElement('script')
      , loaded = 0
      , isIE10 = navigator.userAgent.indexOf('MSIE 10.0') !== -1

    if (match) {
      if (match[3] === '?') {
        url = url.replace(cbreg, '$1=' + cbval) // wildcard callback func name
      } else {
        cbval = match[3] // provided callback func name
      }
    } else {
      url = urlappend(url, cbkey + '=' + cbval) // no callback details, add 'em
    }

    win[cbval] = generalCallback

    script.type = 'text/javascript'
    script.src = url
    script.async = true
    if (typeof script.onreadystatechange !== 'undefined' && !isIE10) {
      // need this for IE due to out-of-order onreadystatechange(), binding script
      // execution to an event listener gives us control over when the script
      // is executed. See http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
      //
      // if this hack is used in IE10 jsonp callback are never called
      script.event = 'onclick'
      script.htmlFor = script.id = '_reqwest_' + reqId
    }

    script.onload = script.onreadystatechange = function () {
      if ((script[readyState] && script[readyState] !== 'complete' && script[readyState] !== 'loaded') || loaded) {
        return false
      }
      script.onload = script.onreadystatechange = null
      script.onclick && script.onclick()
      // Call the user callback with the last value stored and clean up values and scripts.
      fn(lastValue)
      lastValue = undefined
      head.removeChild(script)
      loaded = 1
    }

    // Add the script to the DOM head
    head.appendChild(script)

    // Enable JSONP timeout
    return {
      abort: function () {
        script.onload = script.onreadystatechange = null
        err({}, 'Request is aborted: timeout', {})
        lastValue = undefined
        head.removeChild(script)
        loaded = 1
      }
    }
  }

  function getRequest(fn, err) {
    var o = this.o
      , method = (o['method'] || 'GET').toUpperCase()
      , url = typeof o === 'string' ? o : o['url']
      // convert non-string objects to query-string form unless o['processData'] is false
      , data = (o['processData'] !== false && o['data'] && typeof o['data'] !== 'string')
        ? reqwest.toQueryString(o['data'])
        : (o['data'] || null)
      , http
      , sendWait = false

    // if we're working on a GET request and we have data then we should append
    // query string to end of URL and not post data
    if ((o['type'] == 'jsonp' || method == 'GET') && data) {
      url = urlappend(url, data)
      data = null
    }

    if (o['type'] == 'jsonp') return handleJsonp(o, fn, err, url)

    // get the xhr from the factory if passed
    // if the factory returns null, fall-back to ours
    http = (o.xhr && o.xhr(o)) || xhr(o)

    http.open(method, url, o['async'] === false ? false : true)
    setHeaders(http, o)
    setCredentials(http, o)
    if (win[xDomainRequest] && http instanceof win[xDomainRequest]) {
        http.onload = fn
        http.onerror = err
        // NOTE: see
        // http://social.msdn.microsoft.com/Forums/en-US/iewebdevelopment/thread/30ef3add-767c-4436-b8a9-f1ca19b4812e
        http.onprogress = function() {}
        sendWait = true
    } else {
      http.onreadystatechange = handleReadyState(this, fn, err)
    }
    o['before'] && o['before'](http)
    if (sendWait) {
      setTimeout(function () {
        http.send(data)
      }, 200)
    } else {
      http.send(data)
    }
    return http
  }

  function Reqwest(o, fn) {
    this.o = o
    this.fn = fn

    init.apply(this, arguments)
  }

  function setType(url) {
    var m = url.match(/\.(json|jsonp|html|xml)(\?|$)/)
    return m ? m[1] : 'js'
  }

  function init(o, fn) {

    this.url = typeof o == 'string' ? o : o['url']
    this.timeout = null

    // whether request has been fulfilled for purpose
    // of tracking the Promises
    this._fulfilled = false
    // success handlers
    this._successHandler = function(){}
    this._fulfillmentHandlers = []
    // error handlers
    this._errorHandlers = []
    // complete (both success and fail) handlers
    this._completeHandlers = []
    this._erred = false
    this._responseArgs = {}

    var self = this
      , type = o['type'] || setType(this.url)

    fn = fn || function () {}

    if (o['timeout']) {
      this.timeout = setTimeout(function () {
        self.abort()
      }, o['timeout'])
    }

    if (o['success']) {
      this._successHandler = function () {
        o['success'].apply(o, arguments)
      }
    }

    if (o['error']) {
      this._errorHandlers.push(function () {
        o['error'].apply(o, arguments)
      })
    }

    if (o['complete']) {
      this._completeHandlers.push(function () {
        o['complete'].apply(o, arguments)
      })
    }

    function complete (resp) {
      o['timeout'] && clearTimeout(self.timeout)
      self.timeout = null
      while (self._completeHandlers.length > 0) {
        self._completeHandlers.shift()(resp)
      }
    }

    function success (resp) {
      resp = (type !== 'jsonp') ? self.request : resp
      // use global data filter on response text
      var filteredResponse = globalSetupOptions.dataFilter(resp.responseText, type)
        , r = filteredResponse
      try {
        resp.responseText = r
      } catch (e) {
        // can't assign this in IE<=8, just ignore
      }
      if (r) {
        switch (type) {
        case 'json':
          try {
            resp = win.JSON ? win.JSON.parse(r) : eval('(' + r + ')')
          } catch (err) {
            return error(resp, 'Could not parse JSON in response', err)
          }
          break
        case 'js':
          resp = eval(r)
          break
        case 'html':
          resp = r
          break
        case 'xml':
          resp = resp.responseXML
              && resp.responseXML.parseError // IE trololo
              && resp.responseXML.parseError.errorCode
              && resp.responseXML.parseError.reason
            ? null
            : resp.responseXML
          break
        }
      }

      self._responseArgs.resp = resp
      self._fulfilled = true
      fn(resp)
      self._successHandler(resp)
      while (self._fulfillmentHandlers.length > 0) {
        resp = self._fulfillmentHandlers.shift()(resp)
      }

      complete(resp)
    }

    function error(resp, msg, t) {
      resp = self.request
      self._responseArgs.resp = resp
      self._responseArgs.msg = msg
      self._responseArgs.t = t
      self._erred = true
      while (self._errorHandlers.length > 0) {
        self._errorHandlers.shift()(resp, msg, t)
      }
      complete(resp)
    }

    this.request = getRequest.call(this, success, error)
  }

  Reqwest.prototype = {
    abort: function () {
      this._aborted = true
      this.request.abort()
    }

  , retry: function () {
      init.call(this, this.o, this.fn)
    }

    /**
     * Small deviation from the Promises A CommonJs specification
     * http://wiki.commonjs.org/wiki/Promises/A
     */

    /**
     * `then` will execute upon successful requests
     */
  , then: function (success, fail) {
      success = success || function () {}
      fail = fail || function () {}
      if (this._fulfilled) {
        this._responseArgs.resp = success(this._responseArgs.resp)
      } else if (this._erred) {
        fail(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)
      } else {
        this._fulfillmentHandlers.push(success)
        this._errorHandlers.push(fail)
      }
      return this
    }

    /**
     * `always` will execute whether the request succeeds or fails
     */
  , always: function (fn) {
      if (this._fulfilled || this._erred) {
        fn(this._responseArgs.resp)
      } else {
        this._completeHandlers.push(fn)
      }
      return this
    }

    /**
     * `fail` will execute when the request fails
     */
  , fail: function (fn) {
      if (this._erred) {
        fn(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)
      } else {
        this._errorHandlers.push(fn)
      }
      return this
    }
  }

  function reqwest(o, fn) {
    return new Reqwest(o, fn)
  }

  // normalize newline variants according to spec -> CRLF
  function normalize(s) {
    return s ? s.replace(/\r?\n/g, '\r\n') : ''
  }

  function serial(el, cb) {
    var n = el.name
      , t = el.tagName.toLowerCase()
      , optCb = function (o) {
          // IE gives value="" even where there is no value attribute
          // 'specified' ref: http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-862529273
          if (o && !o['disabled'])
            cb(n, normalize(o['attributes']['value'] && o['attributes']['value']['specified'] ? o['value'] : o['text']))
        }
      , ch, ra, val, i

    // don't serialize elements that are disabled or without a name
    if (el.disabled || !n) return

    switch (t) {
    case 'input':
      if (!/reset|button|image|file/i.test(el.type)) {
        ch = /checkbox/i.test(el.type)
        ra = /radio/i.test(el.type)
        val = el.value
        // WebKit gives us "" instead of "on" if a checkbox has no value, so correct it here
        ;(!(ch || ra) || el.checked) && cb(n, normalize(ch && val === '' ? 'on' : val))
      }
      break
    case 'textarea':
      cb(n, normalize(el.value))
      break
    case 'select':
      if (el.type.toLowerCase() === 'select-one') {
        optCb(el.selectedIndex >= 0 ? el.options[el.selectedIndex] : null)
      } else {
        for (i = 0; el.length && i < el.length; i++) {
          el.options[i].selected && optCb(el.options[i])
        }
      }
      break
    }
  }

  // collect up all form elements found from the passed argument elements all
  // the way down to child elements; pass a '<form>' or form fields.
  // called with 'this'=callback to use for serial() on each element
  function eachFormElement() {
    var cb = this
      , e, i
      , serializeSubtags = function (e, tags) {
          var i, j, fa
          for (i = 0; i < tags.length; i++) {
            fa = e[byTag](tags[i])
            for (j = 0; j < fa.length; j++) serial(fa[j], cb)
          }
        }

    for (i = 0; i < arguments.length; i++) {
      e = arguments[i]
      if (/input|select|textarea/i.test(e.tagName)) serial(e, cb)
      serializeSubtags(e, [ 'input', 'select', 'textarea' ])
    }
  }

  // standard query string style serialization
  function serializeQueryString() {
    return reqwest.toQueryString(reqwest.serializeArray.apply(null, arguments))
  }

  // { 'name': 'value', ... } style serialization
  function serializeHash() {
    var hash = {}
    eachFormElement.apply(function (name, value) {
      if (name in hash) {
        hash[name] && !isArray(hash[name]) && (hash[name] = [hash[name]])
        hash[name].push(value)
      } else hash[name] = value
    }, arguments)
    return hash
  }

  // [ { name: 'name', value: 'value' }, ... ] style serialization
  reqwest.serializeArray = function () {
    var arr = []
    eachFormElement.apply(function (name, value) {
      arr.push({name: name, value: value})
    }, arguments)
    return arr
  }

  reqwest.serialize = function () {
    if (arguments.length === 0) return ''
    var opt, fn
      , args = Array.prototype.slice.call(arguments, 0)

    opt = args.pop()
    opt && opt.nodeType && args.push(opt) && (opt = null)
    opt && (opt = opt.type)

    if (opt == 'map') fn = serializeHash
    else if (opt == 'array') fn = reqwest.serializeArray
    else fn = serializeQueryString

    return fn.apply(null, args)
  }

  reqwest.toQueryString = function (o, trad) {
    var prefix, i
      , traditional = trad || false
      , s = []
      , enc = encodeURIComponent
      , add = function (key, value) {
          // If value is a function, invoke it and return its value
          value = ('function' === typeof value) ? value() : (value == null ? '' : value)
          s[s.length] = enc(key) + '=' + enc(value)
        }
    // If an array was passed in, assume that it is an array of form elements.
    if (isArray(o)) {
      for (i = 0; o && i < o.length; i++) add(o[i]['name'], o[i]['value'])
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in o) {
        if (o.hasOwnProperty(prefix)) buildParams(prefix, o[prefix], traditional, add)
      }
    }

    // spaces should be + according to spec
    return s.join('&').replace(/%20/g, '+')
  }

  function buildParams(prefix, obj, traditional, add) {
    var name, i, v
      , rbracket = /\[\]$/

    if (isArray(obj)) {
      // Serialize array item.
      for (i = 0; obj && i < obj.length; i++) {
        v = obj[i]
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v)
        } else {
          buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add)
        }
      }
    } else if (obj && obj.toString() === '[object Object]') {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + '[' + name + ']', obj[name], traditional, add)
      }

    } else {
      // Serialize scalar item.
      add(prefix, obj)
    }
  }

  reqwest.getcallbackPrefix = function () {
    return callbackPrefix
  }

  // jQuery and Zepto compatibility, differences can be remapped here so you can call
  // .ajax.compat(options, callback)
  reqwest.compat = function (o, fn) {
    if (o) {
      o['type'] && (o['method'] = o['type']) && delete o['type']
      o['dataType'] && (o['type'] = o['dataType'])
      o['jsonpCallback'] && (o['jsonpCallbackName'] = o['jsonpCallback']) && delete o['jsonpCallback']
      o['jsonp'] && (o['jsonpCallback'] = o['jsonp'])
    }
    return new Reqwest(o, fn)
  }

  reqwest.ajaxSetup = function (options) {
    options = options || {}
    for (var k in options) {
      globalSetupOptions[k] = options[k]
    }
  }

  return reqwest
});

},{}],28:[function(require,module,exports){
module.exports = hasKeys

function hasKeys(source) {
    return source !== null &&
        (typeof source === "object" ||
        typeof source === "function")
}

},{}],29:[function(require,module,exports){
var Keys = require("object-keys")
var hasKeys = require("./has-keys")

module.exports = extend

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        if (!hasKeys(source)) {
            continue
        }

        var keys = Keys(source)

        for (var j = 0; j < keys.length; j++) {
            var name = keys[j]
            target[name] = source[name]
        }
    }

    return target
}

},{"./has-keys":28,"object-keys":31}],30:[function(require,module,exports){
var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

var isFunction = function (fn) {
	var isFunc = (typeof fn === 'function' && !(fn instanceof RegExp)) || toString.call(fn) === '[object Function]';
	if (!isFunc && typeof window !== 'undefined') {
		isFunc = fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt;
	}
	return isFunc;
};

module.exports = function forEach(obj, fn) {
	if (!isFunction(fn)) {
		throw new TypeError('iterator must be a function');
	}
	var i, k,
		isString = typeof obj === 'string',
		l = obj.length,
		context = arguments.length > 2 ? arguments[2] : null;
	if (l === +l) {
		for (i = 0; i < l; i++) {
			if (context === null) {
				fn(isString ? obj.charAt(i) : obj[i], i, obj);
			} else {
				fn.call(context, isString ? obj.charAt(i) : obj[i], i, obj);
			}
		}
	} else {
		for (k in obj) {
			if (hasOwn.call(obj, k)) {
				if (context === null) {
					fn(obj[k], k, obj);
				} else {
					fn.call(context, obj[k], k, obj);
				}
			}
		}
	}
};


},{}],31:[function(require,module,exports){
module.exports = Object.keys || require('./shim');


},{"./shim":33}],32:[function(require,module,exports){
var toString = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toString.call(value);
	var isArguments = str === '[object Arguments]';
	if (!isArguments) {
		isArguments = str !== '[object Array]'
			&& value !== null
			&& typeof value === 'object'
			&& typeof value.length === 'number'
			&& value.length >= 0
			&& toString.call(value.callee) === '[object Function]';
	}
	return isArguments;
};


},{}],33:[function(require,module,exports){
(function () {
	"use strict";

	// modified from https://github.com/kriskowal/es5-shim
	var has = Object.prototype.hasOwnProperty,
		toString = Object.prototype.toString,
		forEach = require('./foreach'),
		isArgs = require('./isArguments'),
		hasDontEnumBug = !({'toString': null}).propertyIsEnumerable('toString'),
		hasProtoEnumBug = (function () {}).propertyIsEnumerable('prototype'),
		dontEnums = [
			"toString",
			"toLocaleString",
			"valueOf",
			"hasOwnProperty",
			"isPrototypeOf",
			"propertyIsEnumerable",
			"constructor"
		],
		keysShim;

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object',
			isFunction = toString.call(object) === '[object Function]',
			isArguments = isArgs(object),
			theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError("Object.keys called on a non-object");
		}

		if (isArguments) {
			forEach(object, function (value) {
				theKeys.push(value);
			});
		} else {
			var name,
				skipProto = hasProtoEnumBug && isFunction;

			for (name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(name);
				}
			}
		}

		if (hasDontEnumBug) {
			var ctor = object.constructor,
				skipConstructor = ctor && ctor.prototype === object;

			forEach(dontEnums, function (dontEnum) {
				if (!(skipConstructor && dontEnum === 'constructor') && has.call(object, dontEnum)) {
					theKeys.push(dontEnum);
				}
			});
		}
		return theKeys;
	};

	module.exports = keysShim;
}());


},{"./foreach":30,"./isArguments":32}],34:[function(require,module,exports){
/*!
  * Bean - copyright (c) Jacob Thornton 2011-2012
  * https://github.com/fat/bean
  * MIT license
  */
(function (name, context, definition) {
  if (typeof module != 'undefined' && module.exports) module.exports = definition()
  else if (typeof define == 'function' && define.amd) define(definition)
  else context[name] = definition()
})('bean', this, function (name, context) {
  name    = name    || 'bean'
  context = context || this

  var win            = window
    , old            = context[name]
    , namespaceRegex = /[^\.]*(?=\..*)\.|.*/
    , nameRegex      = /\..*/
    , addEvent       = 'addEventListener'
    , removeEvent    = 'removeEventListener'
    , doc            = document || {}
    , root           = doc.documentElement || {}
    , W3C_MODEL      = root[addEvent]
    , eventSupport   = W3C_MODEL ? addEvent : 'attachEvent'
    , ONE            = {} // singleton for quick matching making add() do one()

    , slice          = Array.prototype.slice
    , str2arr        = function (s, d) { return s.split(d || ' ') }
    , isString       = function (o) { return typeof o == 'string' }
    , isFunction     = function (o) { return typeof o == 'function' }

      // events that we consider to be 'native', anything not in this list will
      // be treated as a custom event
    , standardNativeEvents =
        'click dblclick mouseup mousedown contextmenu '                  + // mouse buttons
        'mousewheel mousemultiwheel DOMMouseScroll '                     + // mouse wheel
        'mouseover mouseout mousemove selectstart selectend '            + // mouse movement
        'keydown keypress keyup '                                        + // keyboard
        'orientationchange '                                             + // mobile
        'focus blur change reset select submit '                         + // form elements
        'load unload beforeunload resize move DOMContentLoaded '         + // window
        'readystatechange message '                                      + // window
        'error abort scroll '                                              // misc
      // element.fireEvent('onXYZ'... is not forgiving if we try to fire an event
      // that doesn't actually exist, so make sure we only do these on newer browsers
    , w3cNativeEvents =
        'show '                                                          + // mouse buttons
        'input invalid '                                                 + // form elements
        'touchstart touchmove touchend touchcancel '                     + // touch
        'gesturestart gesturechange gestureend '                         + // gesture
        'textinput'                                                      + // TextEvent
        'readystatechange pageshow pagehide popstate '                   + // window
        'hashchange offline online '                                     + // window
        'afterprint beforeprint '                                        + // printing
        'dragstart dragenter dragover dragleave drag drop dragend '      + // dnd
        'loadstart progress suspend emptied stalled loadmetadata '       + // media
        'loadeddata canplay canplaythrough playing waiting seeking '     + // media
        'seeked ended durationchange timeupdate play pause ratechange '  + // media
        'volumechange cuechange '                                        + // media
        'checking noupdate downloading cached updateready obsolete '       // appcache

      // convert to a hash for quick lookups
    , nativeEvents = (function (hash, events, i) {
        for (i = 0; i < events.length; i++) events[i] && (hash[events[i]] = 1)
        return hash
      }({}, str2arr(standardNativeEvents + (W3C_MODEL ? w3cNativeEvents : ''))))

      // custom events are events that we *fake*, they are not provided natively but
      // we can use native events to generate them
    , customEvents = (function () {
        var isAncestor = 'compareDocumentPosition' in root
              ? function (element, container) {
                  return container.compareDocumentPosition && (container.compareDocumentPosition(element) & 16) === 16
                }
              : 'contains' in root
                ? function (element, container) {
                    container = container.nodeType === 9 || container === window ? root : container
                    return container !== element && container.contains(element)
                  }
                : function (element, container) {
                    while (element = element.parentNode) if (element === container) return 1
                    return 0
                  }
          , check = function (event) {
              var related = event.relatedTarget
              return !related
                ? related == null
                : (related !== this && related.prefix !== 'xul' && !/document/.test(this.toString())
                    && !isAncestor(related, this))
            }

        return {
            mouseenter: { base: 'mouseover', condition: check }
          , mouseleave: { base: 'mouseout', condition: check }
          , mousewheel: { base: /Firefox/.test(navigator.userAgent) ? 'DOMMouseScroll' : 'mousewheel' }
        }
      }())

      // we provide a consistent Event object across browsers by taking the actual DOM
      // event object and generating a new one from its properties.
    , Event = (function () {
            // a whitelist of properties (for different event types) tells us what to check for and copy
        var commonProps  = str2arr('altKey attrChange attrName bubbles cancelable ctrlKey currentTarget ' +
              'detail eventPhase getModifierState isTrusted metaKey relatedNode relatedTarget shiftKey '  +
              'srcElement target timeStamp type view which propertyName')
          , mouseProps   = commonProps.concat(str2arr('button buttons clientX clientY dataTransfer '      +
              'fromElement offsetX offsetY pageX pageY screenX screenY toElement'))
          , mouseWheelProps = mouseProps.concat(str2arr('wheelDelta wheelDeltaX wheelDeltaY wheelDeltaZ ' +
              'axis')) // 'axis' is FF specific
          , keyProps     = commonProps.concat(str2arr('char charCode key keyCode keyIdentifier '          +
              'keyLocation location'))
          , textProps    = commonProps.concat(str2arr('data'))
          , touchProps   = commonProps.concat(str2arr('touches targetTouches changedTouches scale rotation'))
          , messageProps = commonProps.concat(str2arr('data origin source'))
          , stateProps   = commonProps.concat(str2arr('state'))
          , overOutRegex = /over|out/
            // some event types need special handling and some need special properties, do that all here
          , typeFixers   = [
                { // key events
                    reg: /key/i
                  , fix: function (event, newEvent) {
                      newEvent.keyCode = event.keyCode || event.which
                      return keyProps
                    }
                }
              , { // mouse events
                    reg: /click|mouse(?!(.*wheel|scroll))|menu|drag|drop/i
                  , fix: function (event, newEvent, type) {
                      newEvent.rightClick = event.which === 3 || event.button === 2
                      newEvent.pos = { x: 0, y: 0 }
                      if (event.pageX || event.pageY) {
                        newEvent.clientX = event.pageX
                        newEvent.clientY = event.pageY
                      } else if (event.clientX || event.clientY) {
                        newEvent.clientX = event.clientX + doc.body.scrollLeft + root.scrollLeft
                        newEvent.clientY = event.clientY + doc.body.scrollTop + root.scrollTop
                      }
                      if (overOutRegex.test(type)) {
                        newEvent.relatedTarget = event.relatedTarget
                          || event[(type == 'mouseover' ? 'from' : 'to') + 'Element']
                      }
                      return mouseProps
                    }
                }
              , { // mouse wheel events
                    reg: /mouse.*(wheel|scroll)/i
                  , fix: function () { return mouseWheelProps }
                }
              , { // TextEvent
                    reg: /^text/i
                  , fix: function () { return textProps }
                }
              , { // touch and gesture events
                    reg: /^touch|^gesture/i
                  , fix: function () { return touchProps }
                }
              , { // message events
                    reg: /^message$/i
                  , fix: function () { return messageProps }
                }
              , { // popstate events
                    reg: /^popstate$/i
                  , fix: function () { return stateProps }
                }
              , { // everything else
                    reg: /.*/
                  , fix: function () { return commonProps }
                }
            ]
          , typeFixerMap = {} // used to map event types to fixer functions (above), a basic cache mechanism

          , Event = function (event, element, isNative) {
              if (!arguments.length) return
              event = event || ((element.ownerDocument || element.document || element).parentWindow || win).event
              this.originalEvent = event
              this.isNative       = isNative
              this.isBean         = true

              if (!event) return

              var type   = event.type
                , target = event.target || event.srcElement
                , i, l, p, props, fixer

              this.target = target && target.nodeType === 3 ? target.parentNode : target

              if (isNative) { // we only need basic augmentation on custom events, the rest expensive & pointless
                fixer = typeFixerMap[type]
                if (!fixer) { // haven't encountered this event type before, map a fixer function for it
                  for (i = 0, l = typeFixers.length; i < l; i++) {
                    if (typeFixers[i].reg.test(type)) { // guaranteed to match at least one, last is .*
                      typeFixerMap[type] = fixer = typeFixers[i].fix
                      break
                    }
                  }
                }

                props = fixer(event, this, type)
                for (i = props.length; i--;) {
                  if (!((p = props[i]) in this) && p in event) this[p] = event[p]
                }
              }
            }

        // preventDefault() and stopPropagation() are a consistent interface to those functions
        // on the DOM, stop() is an alias for both of them together
        Event.prototype.preventDefault = function () {
          if (this.originalEvent.preventDefault) this.originalEvent.preventDefault()
          else this.originalEvent.returnValue = false
        }
        Event.prototype.stopPropagation = function () {
          if (this.originalEvent.stopPropagation) this.originalEvent.stopPropagation()
          else this.originalEvent.cancelBubble = true
        }
        Event.prototype.stop = function () {
          this.preventDefault()
          this.stopPropagation()
          this.stopped = true
        }
        // stopImmediatePropagation() has to be handled internally because we manage the event list for
        // each element
        // note that originalElement may be a Bean#Event object in some situations
        Event.prototype.stopImmediatePropagation = function () {
          if (this.originalEvent.stopImmediatePropagation) this.originalEvent.stopImmediatePropagation()
          this.isImmediatePropagationStopped = function () { return true }
        }
        Event.prototype.isImmediatePropagationStopped = function () {
          return this.originalEvent.isImmediatePropagationStopped && this.originalEvent.isImmediatePropagationStopped()
        }
        Event.prototype.clone = function (currentTarget) {
          //TODO: this is ripe for optimisation, new events are *expensive*
          // improving this will speed up delegated events
          var ne = new Event(this, this.element, this.isNative)
          ne.currentTarget = currentTarget
          return ne
        }

        return Event
      }())

      // if we're in old IE we can't do onpropertychange on doc or win so we use doc.documentElement for both
    , targetElement = function (element, isNative) {
        return !W3C_MODEL && !isNative && (element === doc || element === win) ? root : element
      }

      /**
        * Bean maintains an internal registry for event listeners. We don't touch elements, objects
        * or functions to identify them, instead we store everything in the registry.
        * Each event listener has a RegEntry object, we have one 'registry' for the whole instance.
        */
    , RegEntry = (function () {
        // each handler is wrapped so we can handle delegation and custom events
        var wrappedHandler = function (element, fn, condition, args) {
            var call = function (event, eargs) {
                  return fn.apply(element, args ? slice.call(eargs, event ? 0 : 1).concat(args) : eargs)
                }
              , findTarget = function (event, eventElement) {
                  return fn.__beanDel ? fn.__beanDel.ft(event.target, element) : eventElement
                }
              , handler = condition
                  ? function (event) {
                      var target = findTarget(event, this) // deleated event
                      if (condition.apply(target, arguments)) {
                        if (event) event.currentTarget = target
                        return call(event, arguments)
                      }
                    }
                  : function (event) {
                      if (fn.__beanDel) event = event.clone(findTarget(event)) // delegated event, fix the fix
                      return call(event, arguments)
                    }
            handler.__beanDel = fn.__beanDel
            return handler
          }

        , RegEntry = function (element, type, handler, original, namespaces, args, root) {
            var customType     = customEvents[type]
              , isNative

            if (type == 'unload') {
              // self clean-up
              handler = once(removeListener, element, type, handler, original)
            }

            if (customType) {
              if (customType.condition) {
                handler = wrappedHandler(element, handler, customType.condition, args)
              }
              type = customType.base || type
            }

            this.isNative      = isNative = nativeEvents[type] && !!element[eventSupport]
            this.customType    = !W3C_MODEL && !isNative && type
            this.element       = element
            this.type          = type
            this.original      = original
            this.namespaces    = namespaces
            this.eventType     = W3C_MODEL || isNative ? type : 'propertychange'
            this.target        = targetElement(element, isNative)
            this[eventSupport] = !!this.target[eventSupport]
            this.root          = root
            this.handler       = wrappedHandler(element, handler, null, args)
          }

        // given a list of namespaces, is our entry in any of them?
        RegEntry.prototype.inNamespaces = function (checkNamespaces) {
          var i, j, c = 0
          if (!checkNamespaces) return true
          if (!this.namespaces) return false
          for (i = checkNamespaces.length; i--;) {
            for (j = this.namespaces.length; j--;) {
              if (checkNamespaces[i] == this.namespaces[j]) c++
            }
          }
          return checkNamespaces.length === c
        }

        // match by element, original fn (opt), handler fn (opt)
        RegEntry.prototype.matches = function (checkElement, checkOriginal, checkHandler) {
          return this.element === checkElement &&
            (!checkOriginal || this.original === checkOriginal) &&
            (!checkHandler || this.handler === checkHandler)
        }

        return RegEntry
      }())

    , registry = (function () {
        // our map stores arrays by event type, just because it's better than storing
        // everything in a single array.
        // uses '$' as a prefix for the keys for safety and 'r' as a special prefix for
        // rootListeners so we can look them up fast
        var map = {}

          // generic functional search of our registry for matching listeners,
          // `fn` returns false to break out of the loop
          , forAll = function (element, type, original, handler, root, fn) {
              var pfx = root ? 'r' : '$'
              if (!type || type == '*') {
                // search the whole registry
                for (var t in map) {
                  if (t.charAt(0) == pfx) {
                    forAll(element, t.substr(1), original, handler, root, fn)
                  }
                }
              } else {
                var i = 0, l, list = map[pfx + type], all = element == '*'
                if (!list) return
                for (l = list.length; i < l; i++) {
                  if ((all || list[i].matches(element, original, handler)) && !fn(list[i], list, i, type)) return
                }
              }
            }

          , has = function (element, type, original, root) {
              // we're not using forAll here simply because it's a bit slower and this
              // needs to be fast
              var i, list = map[(root ? 'r' : '$') + type]
              if (list) {
                for (i = list.length; i--;) {
                  if (!list[i].root && list[i].matches(element, original, null)) return true
                }
              }
              return false
            }

          , get = function (element, type, original, root) {
              var entries = []
              forAll(element, type, original, null, root, function (entry) {
                return entries.push(entry)
              })
              return entries
            }

          , put = function (entry) {
              var has = !entry.root && !this.has(entry.element, entry.type, null, false)
                , key = (entry.root ? 'r' : '$') + entry.type
              ;(map[key] || (map[key] = [])).push(entry)
              return has
            }

          , del = function (entry) {
              forAll(entry.element, entry.type, null, entry.handler, entry.root, function (entry, list, i) {
                list.splice(i, 1)
                entry.removed = true
                if (list.length === 0) delete map[(entry.root ? 'r' : '$') + entry.type]
                return false
              })
            }

            // dump all entries, used for onunload
          , entries = function () {
              var t, entries = []
              for (t in map) {
                if (t.charAt(0) == '$') entries = entries.concat(map[t])
              }
              return entries
            }

        return { has: has, get: get, put: put, del: del, entries: entries }
      }())

      // we need a selector engine for delegated events, use querySelectorAll if it exists
      // but for older browsers we need Qwery, Sizzle or similar
    , selectorEngine
    , setSelectorEngine = function (e) {
        if (!arguments.length) {
          selectorEngine = doc.querySelectorAll
            ? function (s, r) {
                return r.querySelectorAll(s)
              }
            : function () {
                throw new Error('Bean: No selector engine installed') // eeek
              }
        } else {
          selectorEngine = e
        }
      }

      // we attach this listener to each DOM event that we need to listen to, only once
      // per event type per DOM element
    , rootListener = function (event, type) {
        if (!W3C_MODEL && type && event && event.propertyName != '_on' + type) return

        var listeners = registry.get(this, type || event.type, null, false)
          , l = listeners.length
          , i = 0

        event = new Event(event, this, true)
        if (type) event.type = type

        // iterate through all handlers registered for this type, calling them unless they have
        // been removed by a previous handler or stopImmediatePropagation() has been called
        for (; i < l && !event.isImmediatePropagationStopped(); i++) {
          if (!listeners[i].removed) listeners[i].handler.call(this, event)
        }
      }

      // add and remove listeners to DOM elements
    , listener = W3C_MODEL
        ? function (element, type, add) {
            // new browsers
            element[add ? addEvent : removeEvent](type, rootListener, false)
          }
        : function (element, type, add, custom) {
            // IE8 and below, use attachEvent/detachEvent and we have to piggy-back propertychange events
            // to simulate event bubbling etc.
            var entry
            if (add) {
              registry.put(entry = new RegEntry(
                  element
                , custom || type
                , function (event) { // handler
                    rootListener.call(element, event, custom)
                  }
                , rootListener
                , null
                , null
                , true // is root
              ))
              if (custom && element['_on' + custom] == null) element['_on' + custom] = 0
              entry.target.attachEvent('on' + entry.eventType, entry.handler)
            } else {
              entry = registry.get(element, custom || type, rootListener, true)[0]
              if (entry) {
                entry.target.detachEvent('on' + entry.eventType, entry.handler)
                registry.del(entry)
              }
            }
          }

    , once = function (rm, element, type, fn, originalFn) {
        // wrap the handler in a handler that does a remove as well
        return function () {
          fn.apply(this, arguments)
          rm(element, type, originalFn)
        }
      }

    , removeListener = function (element, orgType, handler, namespaces) {
        var type     = orgType && orgType.replace(nameRegex, '')
          , handlers = registry.get(element, type, null, false)
          , removed  = {}
          , i, l

        for (i = 0, l = handlers.length; i < l; i++) {
          if ((!handler || handlers[i].original === handler) && handlers[i].inNamespaces(namespaces)) {
            // TODO: this is problematic, we have a registry.get() and registry.del() that
            // both do registry searches so we waste cycles doing this. Needs to be rolled into
            // a single registry.forAll(fn) that removes while finding, but the catch is that
            // we'll be splicing the arrays that we're iterating over. Needs extra tests to
            // make sure we don't screw it up. @rvagg
            registry.del(handlers[i])
            if (!removed[handlers[i].eventType] && handlers[i][eventSupport])
              removed[handlers[i].eventType] = { t: handlers[i].eventType, c: handlers[i].type }
          }
        }
        // check each type/element for removed listeners and remove the rootListener where it's no longer needed
        for (i in removed) {
          if (!registry.has(element, removed[i].t, null, false)) {
            // last listener of this type, remove the rootListener
            listener(element, removed[i].t, false, removed[i].c)
          }
        }
      }

      // set up a delegate helper using the given selector, wrap the handler function
    , delegate = function (selector, fn) {
        //TODO: findTarget (therefore $) is called twice, once for match and once for
        // setting e.currentTarget, fix this so it's only needed once
        var findTarget = function (target, root) {
              var i, array = isString(selector) ? selectorEngine(selector, root) : selector
              for (; target && target !== root; target = target.parentNode) {
                for (i = array.length; i--;) {
                  if (array[i] === target) return target
                }
              }
            }
          , handler = function (e) {
              var match = findTarget(e.target, this)
              if (match) fn.apply(match, arguments)
            }

        // __beanDel isn't pleasant but it's a private function, not exposed outside of Bean
        handler.__beanDel = {
            ft       : findTarget // attach it here for customEvents to use too
          , selector : selector
        }
        return handler
      }

    , fireListener = W3C_MODEL ? function (isNative, type, element) {
        // modern browsers, do a proper dispatchEvent()
        var evt = doc.createEvent(isNative ? 'HTMLEvents' : 'UIEvents')
        evt[isNative ? 'initEvent' : 'initUIEvent'](type, true, true, win, 1)
        element.dispatchEvent(evt)
      } : function (isNative, type, element) {
        // old browser use onpropertychange, just increment a custom property to trigger the event
        element = targetElement(element, isNative)
        isNative ? element.fireEvent('on' + type, doc.createEventObject()) : element['_on' + type]++
      }

      /**
        * Public API: off(), on(), add(), (remove()), one(), fire(), clone()
        */

      /**
        * off(element[, eventType(s)[, handler ]])
        */
    , off = function (element, typeSpec, fn) {
        var isTypeStr = isString(typeSpec)
          , k, type, namespaces, i

        if (isTypeStr && typeSpec.indexOf(' ') > 0) {
          // off(el, 't1 t2 t3', fn) or off(el, 't1 t2 t3')
          typeSpec = str2arr(typeSpec)
          for (i = typeSpec.length; i--;)
            off(element, typeSpec[i], fn)
          return element
        }

        type = isTypeStr && typeSpec.replace(nameRegex, '')
        if (type && customEvents[type]) type = customEvents[type].base

        if (!typeSpec || isTypeStr) {
          // off(el) or off(el, t1.ns) or off(el, .ns) or off(el, .ns1.ns2.ns3)
          if (namespaces = isTypeStr && typeSpec.replace(namespaceRegex, '')) namespaces = str2arr(namespaces, '.')
          removeListener(element, type, fn, namespaces)
        } else if (isFunction(typeSpec)) {
          // off(el, fn)
          removeListener(element, null, typeSpec)
        } else {
          // off(el, { t1: fn1, t2, fn2 })
          for (k in typeSpec) {
            if (typeSpec.hasOwnProperty(k)) off(element, k, typeSpec[k])
          }
        }

        return element
      }

      /**
        * on(element, eventType(s)[, selector], handler[, args ])
        */
    , on = function(element, events, selector, fn) {
        var originalFn, type, types, i, args, entry, first

        //TODO: the undefined check means you can't pass an 'args' argument, fix this perhaps?
        if (selector === undefined && typeof events == 'object') {
          //TODO: this can't handle delegated events
          for (type in events) {
            if (events.hasOwnProperty(type)) {
              on.call(this, element, type, events[type])
            }
          }
          return
        }

        if (!isFunction(selector)) {
          // delegated event
          originalFn = fn
          args       = slice.call(arguments, 4)
          fn         = delegate(selector, originalFn, selectorEngine)
        } else {
          args       = slice.call(arguments, 3)
          fn         = originalFn = selector
        }

        types = str2arr(events)

        // special case for one(), wrap in a self-removing handler
        if (this === ONE) {
          fn = once(off, element, events, fn, originalFn)
        }

        for (i = types.length; i--;) {
          // add new handler to the registry and check if it's the first for this element/type
          first = registry.put(entry = new RegEntry(
              element
            , types[i].replace(nameRegex, '') // event type
            , fn
            , originalFn
            , str2arr(types[i].replace(namespaceRegex, ''), '.') // namespaces
            , args
            , false // not root
          ))
          if (entry[eventSupport] && first) {
            // first event of this type on this element, add root listener
            listener(element, entry.eventType, true, entry.customType)
          }
        }

        return element
      }

      /**
        * add(element[, selector], eventType(s), handler[, args ])
        *
        * Deprecated: kept (for now) for backward-compatibility
        */
    , add = function (element, events, fn, delfn) {
        return on.apply(
            null
          , !isString(fn)
              ? slice.call(arguments)
              : [ element, fn, events, delfn ].concat(arguments.length > 3 ? slice.call(arguments, 5) : [])
        )
      }

      /**
        * one(element, eventType(s)[, selector], handler[, args ])
        */
    , one = function () {
        return on.apply(ONE, arguments)
      }

      /**
        * fire(element, eventType(s)[, args ])
        *
        * The optional 'args' argument must be an array, if no 'args' argument is provided
        * then we can use the browser's DOM event system, otherwise we trigger handlers manually
        */
    , fire = function (element, type, args) {
        var types = str2arr(type)
          , i, j, l, names, handlers

        for (i = types.length; i--;) {
          type = types[i].replace(nameRegex, '')
          if (names = types[i].replace(namespaceRegex, '')) names = str2arr(names, '.')
          if (!names && !args && element[eventSupport]) {
            fireListener(nativeEvents[type], type, element)
          } else {
            // non-native event, either because of a namespace, arguments or a non DOM element
            // iterate over all listeners and manually 'fire'
            handlers = registry.get(element, type, null, false)
            args = [false].concat(args)
            for (j = 0, l = handlers.length; j < l; j++) {
              if (handlers[j].inNamespaces(names)) {
                handlers[j].handler.apply(element, args)
              }
            }
          }
        }
        return element
      }

      /**
        * clone(dstElement, srcElement[, eventType ])
        *
        * TODO: perhaps for consistency we should allow the same flexibility in type specifiers?
        */
    , clone = function (element, from, type) {
        var handlers = registry.get(from, type, null, false)
          , l = handlers.length
          , i = 0
          , args, beanDel

        for (; i < l; i++) {
          if (handlers[i].original) {
            args = [ element, handlers[i].type ]
            if (beanDel = handlers[i].handler.__beanDel) args.push(beanDel.selector)
            args.push(handlers[i].original)
            on.apply(null, args)
          }
        }
        return element
      }

    , bean = {
          'on'                : on
        , 'add'               : add
        , 'one'               : one
        , 'off'               : off
        , 'remove'            : off
        , 'clone'             : clone
        , 'fire'              : fire
        , 'Event'             : Event
        , 'setSelectorEngine' : setSelectorEngine
        , 'noConflict'        : function () {
            context[name] = old
            return this
          }
      }

  // for IE, clean up on unload to avoid leaks
  if (win.attachEvent) {
    var cleanup = function () {
      var i, entries = registry.entries()
      for (i in entries) {
        if (entries[i].type && entries[i].type !== 'unload') off(entries[i].element, entries[i].type)
      }
      win.detachEvent('onunload', cleanup)
      win.CollectGarbage && win.CollectGarbage()
    }
    win.attachEvent('onunload', cleanup)
  }

  // initialize selector engine to internal default (qSA or throw Error)
  setSelectorEngine()

  return bean
});
},{}],35:[function(require,module,exports){
/*!
  * Bonzo: DOM Utility (c) Dustin Diaz 2012
  * https://github.com/ded/bonzo
  * License MIT
  */
(function (name, context, definition) {
  if (typeof module != 'undefined' && module.exports) module.exports = definition()
  else if (typeof define == 'function' && define.amd) define(definition)
  else context[name] = definition()
})('bonzo', this, function() {
  var win = window
    , doc = win.document
    , html = doc.documentElement
    , parentNode = 'parentNode'
    , specialAttributes = /^(checked|value|selected|disabled)$/i
      // tags that we have trouble inserting *into*
    , specialTags = /^(select|fieldset|table|tbody|tfoot|td|tr|colgroup)$/i
    , simpleScriptTagRe = /\s*<script +src=['"]([^'"]+)['"]>/
    , table = ['<table>', '</table>', 1]
    , td = ['<table><tbody><tr>', '</tr></tbody></table>', 3]
    , option = ['<select>', '</select>', 1]
    , noscope = ['_', '', 0, 1]
    , tagMap = { // tags that we have trouble *inserting*
          thead: table, tbody: table, tfoot: table, colgroup: table, caption: table
        , tr: ['<table><tbody>', '</tbody></table>', 2]
        , th: td , td: td
        , col: ['<table><colgroup>', '</colgroup></table>', 2]
        , fieldset: ['<form>', '</form>', 1]
        , legend: ['<form><fieldset>', '</fieldset></form>', 2]
        , option: option, optgroup: option
        , script: noscope, style: noscope, link: noscope, param: noscope, base: noscope
      }
    , stateAttributes = /^(checked|selected|disabled)$/
    , ie = /msie/i.test(navigator.userAgent)
    , hasClass, addClass, removeClass
    , uidMap = {}
    , uuids = 0
    , digit = /^-?[\d\.]+$/
    , dattr = /^data-(.+)$/
    , px = 'px'
    , setAttribute = 'setAttribute'
    , getAttribute = 'getAttribute'
    , byTag = 'getElementsByTagName'
    , features = function() {
        var e = doc.createElement('p')
        e.innerHTML = '<a href="#x">x</a><table style="float:left;"></table>'
        return {
          hrefExtended: e[byTag]('a')[0][getAttribute]('href') != '#x' // IE < 8
        , autoTbody: e[byTag]('tbody').length !== 0 // IE < 8
        , computedStyle: doc.defaultView && doc.defaultView.getComputedStyle
        , cssFloat: e[byTag]('table')[0].style.styleFloat ? 'styleFloat' : 'cssFloat'
        , transform: function () {
            var props = ['transform', 'webkitTransform', 'MozTransform', 'OTransform', 'msTransform'], i
            for (i = 0; i < props.length; i++) {
              if (props[i] in e.style) return props[i]
            }
          }()
        , classList: 'classList' in e
        , opasity: function () {
            return typeof doc.createElement('a').style.opacity !== 'undefined'
          }()
        }
      }()
    , trimReplace = /(^\s*|\s*$)/g
    , whitespaceRegex = /\s+/
    , toString = String.prototype.toString
    , unitless = { lineHeight: 1, zoom: 1, zIndex: 1, opacity: 1, boxFlex: 1, WebkitBoxFlex: 1, MozBoxFlex: 1 }
    , query = doc.querySelectorAll && function (selector) { return doc.querySelectorAll(selector) }
    , trim = String.prototype.trim ?
        function (s) {
          return s.trim()
        } :
        function (s) {
          return s.replace(trimReplace, '')
        }

    , getStyle = features.computedStyle
        ? function (el, property) {
            var value = null
              , computed = doc.defaultView.getComputedStyle(el, '')
            computed && (value = computed[property])
            return el.style[property] || value
          }
        : !(ie && html.currentStyle)
          ? function (el, property) {
              return el.style[property]
            }
          :
          /**
           * @param {Element} el
           * @param {string} property
           * @return {string|number}
           */
          function (el, property) {
            var val, value
            if (property == 'opacity' && !features.opasity) {
              val = 100
              try {
                val = el['filters']['DXImageTransform.Microsoft.Alpha'].opacity
              } catch (e1) {
                try {
                  val = el['filters']('alpha').opacity
                } catch (e2) {}
              }
              return val / 100
            }
            value = el.currentStyle ? el.currentStyle[property] : null
            return el.style[property] || value
          }

  function isNode(node) {
    return node && node.nodeName && (node.nodeType == 1 || node.nodeType == 11)
  }


  function normalize(node, host, clone) {
    var i, l, ret
    if (typeof node == 'string') return bonzo.create(node)
    if (isNode(node)) node = [ node ]
    if (clone) {
      ret = [] // don't change original array
      for (i = 0, l = node.length; i < l; i++) ret[i] = cloneNode(host, node[i])
      return ret
    }
    return node
  }

  /**
   * @param {string} c a class name to test
   * @return {boolean}
   */
  function classReg(c) {
    return new RegExp('(^|\\s+)' + c + '(\\s+|$)')
  }


  /**
   * @param {Bonzo|Array} ar
   * @param {function(Object, number, (Bonzo|Array))} fn
   * @param {Object=} opt_scope
   * @param {boolean=} opt_rev
   * @return {Bonzo|Array}
   */
  function each(ar, fn, opt_scope, opt_rev) {
    var ind, i = 0, l = ar.length
    for (; i < l; i++) {
      ind = opt_rev ? ar.length - i - 1 : i
      fn.call(opt_scope || ar[ind], ar[ind], ind, ar)
    }
    return ar
  }


  /**
   * @param {Bonzo|Array} ar
   * @param {function(Object, number, (Bonzo|Array))} fn
   * @param {Object=} opt_scope
   * @return {Bonzo|Array}
   */
  function deepEach(ar, fn, opt_scope) {
    for (var i = 0, l = ar.length; i < l; i++) {
      if (isNode(ar[i])) {
        deepEach(ar[i].childNodes, fn, opt_scope)
        fn.call(opt_scope || ar[i], ar[i], i, ar)
      }
    }
    return ar
  }


  /**
   * @param {string} s
   * @return {string}
   */
  function camelize(s) {
    return s.replace(/-(.)/g, function (m, m1) {
      return m1.toUpperCase()
    })
  }


  /**
   * @param {string} s
   * @return {string}
   */
  function decamelize(s) {
    return s ? s.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase() : s
  }


  /**
   * @param {Element} el
   * @return {*}
   */
  function data(el) {
    el[getAttribute]('data-node-uid') || el[setAttribute]('data-node-uid', ++uuids)
    var uid = el[getAttribute]('data-node-uid')
    return uidMap[uid] || (uidMap[uid] = {})
  }


  /**
   * removes the data associated with an element
   * @param {Element} el
   */
  function clearData(el) {
    var uid = el[getAttribute]('data-node-uid')
    if (uid) delete uidMap[uid]
  }


  function dataValue(d) {
    var f
    try {
      return (d === null || d === undefined) ? undefined :
        d === 'true' ? true :
          d === 'false' ? false :
            d === 'null' ? null :
              (f = parseFloat(d)) == d ? f : d;
    } catch(e) {}
    return undefined
  }


  /**
   * @param {Bonzo|Array} ar
   * @param {function(Object, number, (Bonzo|Array))} fn
   * @param {Object=} opt_scope
   * @return {boolean} whether `some`thing was found
   */
  function some(ar, fn, opt_scope) {
    for (var i = 0, j = ar.length; i < j; ++i) if (fn.call(opt_scope || null, ar[i], i, ar)) return true
    return false
  }


  /**
   * this could be a giant enum of CSS properties
   * but in favor of file size sans-closure deadcode optimizations
   * we're just asking for any ol string
   * then it gets transformed into the appropriate style property for JS access
   * @param {string} p
   * @return {string}
   */
  function styleProperty(p) {
      (p == 'transform' && (p = features.transform)) ||
        (/^transform-?[Oo]rigin$/.test(p) && (p = features.transform + 'Origin')) ||
        (p == 'float' && (p = features.cssFloat))
      return p ? camelize(p) : null
  }

  // this insert method is intense
  function insert(target, host, fn, rev) {
    var i = 0, self = host || this, r = []
      // target nodes could be a css selector if it's a string and a selector engine is present
      // otherwise, just use target
      , nodes = query && typeof target == 'string' && target.charAt(0) != '<' ? query(target) : target
    // normalize each node in case it's still a string and we need to create nodes on the fly
    each(normalize(nodes), function (t, j) {
      each(self, function (el) {
        fn(t, r[i++] = j > 0 ? cloneNode(self, el) : el)
      }, null, rev)
    }, this, rev)
    self.length = i
    each(r, function (e) {
      self[--i] = e
    }, null, !rev)
    return self
  }


  /**
   * sets an element to an explicit x/y position on the page
   * @param {Element} el
   * @param {?number} x
   * @param {?number} y
   */
  function xy(el, x, y) {
    var $el = bonzo(el)
      , style = $el.css('position')
      , offset = $el.offset()
      , rel = 'relative'
      , isRel = style == rel
      , delta = [parseInt($el.css('left'), 10), parseInt($el.css('top'), 10)]

    if (style == 'static') {
      $el.css('position', rel)
      style = rel
    }

    isNaN(delta[0]) && (delta[0] = isRel ? 0 : el.offsetLeft)
    isNaN(delta[1]) && (delta[1] = isRel ? 0 : el.offsetTop)

    x != null && (el.style.left = x - offset.left + delta[0] + px)
    y != null && (el.style.top = y - offset.top + delta[1] + px)

  }

  // classList support for class management
  // altho to be fair, the api sucks because it won't accept multiple classes at once
  if (features.classList) {
    hasClass = function (el, c) {
      return el.classList.contains(c)
    }
    addClass = function (el, c) {
      el.classList.add(c)
    }
    removeClass = function (el, c) {
      el.classList.remove(c)
    }
  }
  else {
    hasClass = function (el, c) {
      return classReg(c).test(el.className)
    }
    addClass = function (el, c) {
      el.className = trim(el.className + ' ' + c)
    }
    removeClass = function (el, c) {
      el.className = trim(el.className.replace(classReg(c), ' '))
    }
  }


  /**
   * this allows method calling for setting values
   *
   * @example
   * bonzo(elements).css('color', function (el) {
   *   return el.getAttribute('data-original-color')
   * })
   *
   * @param {Element} el
   * @param {function (Element)|string}
   * @return {string}
   */
  function setter(el, v) {
    return typeof v == 'function' ? v(el) : v
  }

  function scroll(x, y, type) {
    var el = this[0]
    if (!el) return this
    if (x == null && y == null) {
      return (isBody(el) ? getWindowScroll() : { x: el.scrollLeft, y: el.scrollTop })[type]
    }
    if (isBody(el)) {
      win.scrollTo(x, y)
    } else {
      x != null && (el.scrollLeft = x)
      y != null && (el.scrollTop = y)
    }
    return this
  }

  /**
   * @constructor
   * @param {Array.<Element>|Element|Node|string} elements
   */
  function Bonzo(elements) {
    this.length = 0
    if (elements) {
      elements = typeof elements !== 'string' &&
        !elements.nodeType &&
        typeof elements.length !== 'undefined' ?
          elements :
          [elements]
      this.length = elements.length
      for (var i = 0; i < elements.length; i++) this[i] = elements[i]
    }
  }

  Bonzo.prototype = {

      /**
       * @param {number} index
       * @return {Element|Node}
       */
      get: function (index) {
        return this[index] || null
      }

      // itetators
      /**
       * @param {function(Element|Node)} fn
       * @param {Object=} opt_scope
       * @return {Bonzo}
       */
    , each: function (fn, opt_scope) {
        return each(this, fn, opt_scope)
      }

      /**
       * @param {Function} fn
       * @param {Object=} opt_scope
       * @return {Bonzo}
       */
    , deepEach: function (fn, opt_scope) {
        return deepEach(this, fn, opt_scope)
      }


      /**
       * @param {Function} fn
       * @param {Function=} opt_reject
       * @return {Array}
       */
    , map: function (fn, opt_reject) {
        var m = [], n, i
        for (i = 0; i < this.length; i++) {
          n = fn.call(this, this[i], i)
          opt_reject ? (opt_reject(n) && m.push(n)) : m.push(n)
        }
        return m
      }

    // text and html inserters!

    /**
     * @param {string} h the HTML to insert
     * @param {boolean=} opt_text whether to set or get text content
     * @return {Bonzo|string}
     */
    , html: function (h, opt_text) {
        var method = opt_text
              ? html.textContent === undefined ? 'innerText' : 'textContent'
              : 'innerHTML'
          , that = this
          , append = function (el, i) {
              each(normalize(h, that, i), function (node) {
                el.appendChild(node)
              })
            }
          , updateElement = function (el, i) {
              try {
                if (opt_text || (typeof h == 'string' && !specialTags.test(el.tagName))) {
                  return el[method] = h
                }
              } catch (e) {}
              append(el, i)
            }
        return typeof h != 'undefined'
          ? this.empty().each(updateElement)
          : this[0] ? this[0][method] : ''
      }

      /**
       * @param {string=} opt_text the text to set, otherwise this is a getter
       * @return {Bonzo|string}
       */
    , text: function (opt_text) {
        return this.html(opt_text, true)
      }

      // more related insertion methods

      /**
       * @param {Bonzo|string|Element|Array} node
       * @return {Bonzo}
       */
    , append: function (node) {
        var that = this
        return this.each(function (el, i) {
          each(normalize(node, that, i), function (i) {
            el.appendChild(i)
          })
        })
      }


      /**
       * @param {Bonzo|string|Element|Array} node
       * @return {Bonzo}
       */
    , prepend: function (node) {
        var that = this
        return this.each(function (el, i) {
          var first = el.firstChild
          each(normalize(node, that, i), function (i) {
            el.insertBefore(i, first)
          })
        })
      }


      /**
       * @param {Bonzo|string|Element|Array} target the location for which you'll insert your new content
       * @param {Object=} opt_host an optional host scope (primarily used when integrated with Ender)
       * @return {Bonzo}
       */
    , appendTo: function (target, opt_host) {
        return insert.call(this, target, opt_host, function (t, el) {
          t.appendChild(el)
        })
      }


      /**
       * @param {Bonzo|string|Element|Array} target the location for which you'll insert your new content
       * @param {Object=} opt_host an optional host scope (primarily used when integrated with Ender)
       * @return {Bonzo}
       */
    , prependTo: function (target, opt_host) {
        return insert.call(this, target, opt_host, function (t, el) {
          t.insertBefore(el, t.firstChild)
        }, 1)
      }


      /**
       * @param {Bonzo|string|Element|Array} node
       * @return {Bonzo}
       */
    , before: function (node) {
        var that = this
        return this.each(function (el, i) {
          each(normalize(node, that, i), function (i) {
            el[parentNode].insertBefore(i, el)
          })
        })
      }


      /**
       * @param {Bonzo|string|Element|Array} node
       * @return {Bonzo}
       */
    , after: function (node) {
        var that = this
        return this.each(function (el, i) {
          each(normalize(node, that, i), function (i) {
            el[parentNode].insertBefore(i, el.nextSibling)
          }, null, 1)
        })
      }


      /**
       * @param {Bonzo|string|Element|Array} target the location for which you'll insert your new content
       * @param {Object=} opt_host an optional host scope (primarily used when integrated with Ender)
       * @return {Bonzo}
       */
    , insertBefore: function (target, opt_host) {
        return insert.call(this, target, opt_host, function (t, el) {
          t[parentNode].insertBefore(el, t)
        })
      }


      /**
       * @param {Bonzo|string|Element|Array} target the location for which you'll insert your new content
       * @param {Object=} opt_host an optional host scope (primarily used when integrated with Ender)
       * @return {Bonzo}
       */
    , insertAfter: function (target, opt_host) {
        return insert.call(this, target, opt_host, function (t, el) {
          var sibling = t.nextSibling
          sibling ?
            t[parentNode].insertBefore(el, sibling) :
            t[parentNode].appendChild(el)
        }, 1)
      }


      /**
       * @param {Bonzo|string|Element|Array} node
       * @return {Bonzo}
       */
    , replaceWith: function (node) {
        bonzo(normalize(node)).insertAfter(this)
        return this.remove()
      }

      /**
       * @param {Object=} opt_host an optional host scope (primarily used when integrated with Ender)
       * @return {Bonzo}
       */
    , clone: function (opt_host) {
        var ret = [] // don't change original array
          , l, i
        for (i = 0, l = this.length; i < l; i++) ret[i] = cloneNode(opt_host || this, this[i])
        return bonzo(ret)
      }

      // class management

      /**
       * @param {string} c
       * @return {Bonzo}
       */
    , addClass: function (c) {
        c = toString.call(c).split(whitespaceRegex)
        return this.each(function (el) {
          // we `each` here so you can do $el.addClass('foo bar')
          each(c, function (c) {
            if (c && !hasClass(el, setter(el, c)))
              addClass(el, setter(el, c))
          })
        })
      }


      /**
       * @param {string} c
       * @return {Bonzo}
       */
    , removeClass: function (c) {
        c = toString.call(c).split(whitespaceRegex)
        return this.each(function (el) {
          each(c, function (c) {
            if (c && hasClass(el, setter(el, c)))
              removeClass(el, setter(el, c))
          })
        })
      }


      /**
       * @param {string} c
       * @return {boolean}
       */
    , hasClass: function (c) {
        c = toString.call(c).split(whitespaceRegex)
        return some(this, function (el) {
          return some(c, function (c) {
            return c && hasClass(el, c)
          })
        })
      }


      /**
       * @param {string} c classname to toggle
       * @param {boolean=} opt_condition whether to add or remove the class straight away
       * @return {Bonzo}
       */
    , toggleClass: function (c, opt_condition) {
        c = toString.call(c).split(whitespaceRegex)
        return this.each(function (el) {
          each(c, function (c) {
            if (c) {
              typeof opt_condition !== 'undefined' ?
                opt_condition ? !hasClass(el, c) && addClass(el, c) : removeClass(el, c) :
                hasClass(el, c) ? removeClass(el, c) : addClass(el, c)
            }
          })
        })
      }

      // display togglers

      /**
       * @param {string=} opt_type useful to set back to anything other than an empty string
       * @return {Bonzo}
       */
    , show: function (opt_type) {
        opt_type = typeof opt_type == 'string' ? opt_type : ''
        return this.each(function (el) {
          el.style.display = opt_type
        })
      }


      /**
       * @return {Bonzo}
       */
    , hide: function () {
        return this.each(function (el) {
          el.style.display = 'none'
        })
      }


      /**
       * @param {Function=} opt_callback
       * @param {string=} opt_type
       * @return {Bonzo}
       */
    , toggle: function (opt_callback, opt_type) {
        opt_type = typeof opt_type == 'string' ? opt_type : '';
        typeof opt_callback != 'function' && (opt_callback = null)
        return this.each(function (el) {
          el.style.display = (el.offsetWidth || el.offsetHeight) ? 'none' : opt_type;
          opt_callback && opt_callback.call(el)
        })
      }


      // DOM Walkers & getters

      /**
       * @return {Element|Node}
       */
    , first: function () {
        return bonzo(this.length ? this[0] : [])
      }


      /**
       * @return {Element|Node}
       */
    , last: function () {
        return bonzo(this.length ? this[this.length - 1] : [])
      }


      /**
       * @return {Element|Node}
       */
    , next: function () {
        return this.related('nextSibling')
      }


      /**
       * @return {Element|Node}
       */
    , previous: function () {
        return this.related('previousSibling')
      }


      /**
       * @return {Element|Node}
       */
    , parent: function() {
        return this.related(parentNode)
      }


      /**
       * @private
       * @param {string} method the directional DOM method
       * @return {Element|Node}
       */
    , related: function (method) {
        return bonzo(this.map(
          function (el) {
            el = el[method]
            while (el && el.nodeType !== 1) {
              el = el[method]
            }
            return el || 0
          },
          function (el) {
            return el
          }
        ))
      }


      /**
       * @return {Bonzo}
       */
    , focus: function () {
        this.length && this[0].focus()
        return this
      }


      /**
       * @return {Bonzo}
       */
    , blur: function () {
        this.length && this[0].blur()
        return this
      }

      // style getter setter & related methods

      /**
       * @param {Object|string} o
       * @param {string=} opt_v
       * @return {Bonzo|string}
       */
    , css: function (o, opt_v) {
        var p, iter = o
        // is this a request for just getting a style?
        if (opt_v === undefined && typeof o == 'string') {
          // repurpose 'v'
          opt_v = this[0]
          if (!opt_v) return null
          if (opt_v === doc || opt_v === win) {
            p = (opt_v === doc) ? bonzo.doc() : bonzo.viewport()
            return o == 'width' ? p.width : o == 'height' ? p.height : ''
          }
          return (o = styleProperty(o)) ? getStyle(opt_v, o) : null
        }

        if (typeof o == 'string') {
          iter = {}
          iter[o] = opt_v
        }

        if (!features.opasity && 'opacity' in iter) {
          // oh this 'ol gamut
          iter.filter = iter.opacity != null && iter.opacity !== ''
            ? 'alpha(opacity=' + (iter.opacity * 100) + ')'
            : ''
          // give it layout
          iter.zoom = o.zoom || 1
          ;delete iter.opacity
        }

        function fn(el, p, v) {
          for (var k in iter) {
            if (iter.hasOwnProperty(k)) {
              v = iter[k];
              // change "5" to "5px" - unless you're line-height, which is allowed
              (p = styleProperty(k)) && digit.test(v) && !(p in unitless) && (v += px)
              try { el.style[p] = setter(el, v) } catch(e) {}
            }
          }
        }
        return this.each(fn)
      }


      /**
       * @param {number=} opt_x
       * @param {number=} opt_y
       * @return {Bonzo|number}
       */
    , offset: function (opt_x, opt_y) {
        if (opt_x && typeof opt_x == 'object' && (typeof opt_x.top == 'number' || typeof opt_x.left == 'number')) {
          return this.each(function (el) {
            xy(el, opt_x.left, opt_x.top)
          })
        } else if (typeof opt_x == 'number' || typeof opt_y == 'number') {
          return this.each(function (el) {
            xy(el, opt_x, opt_y)
          })
        }
        if (!this[0]) return {
            top: 0
          , left: 0
          , height: 0
          , width: 0
        }
        var el = this[0]
          , de = el.ownerDocument.documentElement
          , bcr = el.getBoundingClientRect()
          , scroll = getWindowScroll()
          , width = el.offsetWidth
          , height = el.offsetHeight
          , top = bcr.top + scroll.y - Math.max(0, de && de.clientTop, doc.body.clientTop)
          , left = bcr.left + scroll.x - Math.max(0, de && de.clientLeft, doc.body.clientLeft)

        return {
            top: top
          , left: left
          , height: height
          , width: width
        }
      }


      /**
       * @return {number}
       */
    , dim: function () {
        if (!this.length) return { height: 0, width: 0 }
        var el = this[0]
          , de = el.nodeType == 9 && el.documentElement // document
          , orig = !de && !!el.style && !el.offsetWidth && !el.offsetHeight ?
             // el isn't visible, can't be measured properly, so fix that
             function (t) {
               var s = {
                   position: el.style.position || ''
                 , visibility: el.style.visibility || ''
                 , display: el.style.display || ''
               }
               t.first().css({
                   position: 'absolute'
                 , visibility: 'hidden'
                 , display: 'block'
               })
               return s
            }(this) : null
          , width = de
              ? Math.max(el.body.scrollWidth, el.body.offsetWidth, de.scrollWidth, de.offsetWidth, de.clientWidth)
              : el.offsetWidth
          , height = de
              ? Math.max(el.body.scrollHeight, el.body.offsetHeight, de.scrollHeight, de.offsetHeight, de.clientHeight)
              : el.offsetHeight

        orig && this.first().css(orig)
        return {
            height: height
          , width: width
        }
      }

      // attributes are hard. go shopping

      /**
       * @param {string} k an attribute to get or set
       * @param {string=} opt_v the value to set
       * @return {Bonzo|string}
       */
    , attr: function (k, opt_v) {
        var el = this[0]
          , n

        if (typeof k != 'string' && !(k instanceof String)) {
          for (n in k) {
            k.hasOwnProperty(n) && this.attr(n, k[n])
          }
          return this
        }

        return typeof opt_v == 'undefined' ?
          !el ? null : specialAttributes.test(k) ?
            stateAttributes.test(k) && typeof el[k] == 'string' ?
              true : el[k] : (k == 'href' || k =='src') && features.hrefExtended ?
                el[getAttribute](k, 2) : el[getAttribute](k) :
          this.each(function (el) {
            specialAttributes.test(k) ? (el[k] = setter(el, opt_v)) : el[setAttribute](k, setter(el, opt_v))
          })
      }


      /**
       * @param {string} k
       * @return {Bonzo}
       */
    , removeAttr: function (k) {
        return this.each(function (el) {
          stateAttributes.test(k) ? (el[k] = false) : el.removeAttribute(k)
        })
      }


      /**
       * @param {string=} opt_s
       * @return {Bonzo|string}
       */
    , val: function (s) {
        return (typeof s == 'string' || typeof s == 'number') ?
          this.attr('value', s) :
          this.length ? this[0].value : null
      }

      // use with care and knowledge. this data() method uses data attributes on the DOM nodes
      // to do this differently costs a lot more code. c'est la vie
      /**
       * @param {string|Object=} opt_k the key for which to get or set data
       * @param {Object=} opt_v
       * @return {Bonzo|Object}
       */
    , data: function (opt_k, opt_v) {
        var el = this[0], o, m
        if (typeof opt_v === 'undefined') {
          if (!el) return null
          o = data(el)
          if (typeof opt_k === 'undefined') {
            each(el.attributes, function (a) {
              (m = ('' + a.name).match(dattr)) && (o[camelize(m[1])] = dataValue(a.value))
            })
            return o
          } else {
            if (typeof o[opt_k] === 'undefined')
              o[opt_k] = dataValue(this.attr('data-' + decamelize(opt_k)))
            return o[opt_k]
          }
        } else {
          return this.each(function (el) { data(el)[opt_k] = opt_v })
        }
      }

      // DOM detachment & related

      /**
       * @return {Bonzo}
       */
    , remove: function () {
        this.deepEach(clearData)
        return this.detach()
      }


      /**
       * @return {Bonzo}
       */
    , empty: function () {
        return this.each(function (el) {
          deepEach(el.childNodes, clearData)

          while (el.firstChild) {
            el.removeChild(el.firstChild)
          }
        })
      }


      /**
       * @return {Bonzo}
       */
    , detach: function () {
        return this.each(function (el) {
          el[parentNode] && el[parentNode].removeChild(el)
        })
      }

      // who uses a mouse anyway? oh right.

      /**
       * @param {number} y
       */
    , scrollTop: function (y) {
        return scroll.call(this, null, y, 'y')
      }


      /**
       * @param {number} x
       */
    , scrollLeft: function (x) {
        return scroll.call(this, x, null, 'x')
      }

  }


  function cloneNode(host, el) {
    var c = el.cloneNode(true)
      , cloneElems
      , elElems
      , i

    // check for existence of an event cloner
    // preferably https://github.com/fat/bean
    // otherwise Bonzo won't do this for you
    if (host.$ && typeof host.cloneEvents == 'function') {
      host.$(c).cloneEvents(el)

      // clone events from every child node
      cloneElems = host.$(c).find('*')
      elElems = host.$(el).find('*')

      for (i = 0; i < elElems.length; i++)
        host.$(cloneElems[i]).cloneEvents(elElems[i])
    }
    return c
  }

  function isBody(element) {
    return element === win || (/^(?:body|html)$/i).test(element.tagName)
  }

  function getWindowScroll() {
    return { x: win.pageXOffset || html.scrollLeft, y: win.pageYOffset || html.scrollTop }
  }

  function createScriptFromHtml(html) {
    var scriptEl = document.createElement('script')
      , matches = html.match(simpleScriptTagRe)
    scriptEl.src = matches[1]
    return scriptEl
  }

  /**
   * @param {Array.<Element>|Element|Node|string} els
   * @return {Bonzo}
   */
  function bonzo(els) {
    return new Bonzo(els)
  }

  bonzo.setQueryEngine = function (q) {
    query = q;
    delete bonzo.setQueryEngine
  }

  bonzo.aug = function (o, target) {
    // for those standalone bonzo users. this love is for you.
    for (var k in o) {
      o.hasOwnProperty(k) && ((target || Bonzo.prototype)[k] = o[k])
    }
  }

  bonzo.create = function (node) {
    // hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
    return typeof node == 'string' && node !== '' ?
      function () {
        if (simpleScriptTagRe.test(node)) return [createScriptFromHtml(node)]
        var tag = node.match(/^\s*<([^\s>]+)/)
          , el = doc.createElement('div')
          , els = []
          , p = tag ? tagMap[tag[1].toLowerCase()] : null
          , dep = p ? p[2] + 1 : 1
          , ns = p && p[3]
          , pn = parentNode
          , tb = features.autoTbody && p && p[0] == '<table>' && !(/<tbody/i).test(node)

        el.innerHTML = p ? (p[0] + node + p[1]) : node
        while (dep--) el = el.firstChild
        // for IE NoScope, we may insert cruft at the begining just to get it to work
        if (ns && el && el.nodeType !== 1) el = el.nextSibling
        do {
          // tbody special case for IE<8, creates tbody on any empty table
          // we don't want it if we're just after a <thead>, <caption>, etc.
          if ((!tag || el.nodeType == 1) && (!tb || (el.tagName && el.tagName != 'TBODY'))) {
            els.push(el)
          }
        } while (el = el.nextSibling)
        // IE < 9 gives us a parentNode which messes up insert() check for cloning
        // `dep` > 1 can also cause problems with the insert() check (must do this last)
        each(els, function(el) { el[pn] && el[pn].removeChild(el) })
        return els
      }() : isNode(node) ? [node.cloneNode(true)] : []
  }

  bonzo.doc = function () {
    var vp = bonzo.viewport()
    return {
        width: Math.max(doc.body.scrollWidth, html.scrollWidth, vp.width)
      , height: Math.max(doc.body.scrollHeight, html.scrollHeight, vp.height)
    }
  }

  bonzo.firstChild = function (el) {
    for (var c = el.childNodes, i = 0, j = (c && c.length) || 0, e; i < j; i++) {
      if (c[i].nodeType === 1) e = c[j = i]
    }
    return e
  }

  bonzo.viewport = function () {
    return {
        width: ie ? html.clientWidth : win.innerWidth
      , height: ie ? html.clientHeight : win.innerHeight
    }
  }

  bonzo.isAncestor = 'compareDocumentPosition' in html ?
    function (container, element) {
      return (container.compareDocumentPosition(element) & 16) == 16
    } : 'contains' in html ?
    function (container, element) {
      return container !== element && container.contains(element);
    } :
    function (container, element) {
      while (element = element[parentNode]) {
        if (element === container) {
          return true
        }
      }
      return false
    }

  return bonzo
}); // the only line we care about using a semi-colon. placed here for concatenation tools

},{}],36:[function(require,module,exports){


//
// The shims in this file are not fully implemented shims for the ES5
// features, but do work for the particular usecases there is in
// the other modules.
//

var toString = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

// Array.isArray is supported in IE9
function isArray(xs) {
  return toString.call(xs) === '[object Array]';
}
exports.isArray = typeof Array.isArray === 'function' ? Array.isArray : isArray;

// Array.prototype.indexOf is supported in IE9
exports.indexOf = function indexOf(xs, x) {
  if (xs.indexOf) return xs.indexOf(x);
  for (var i = 0; i < xs.length; i++) {
    if (x === xs[i]) return i;
  }
  return -1;
};

// Array.prototype.filter is supported in IE9
exports.filter = function filter(xs, fn) {
  if (xs.filter) return xs.filter(fn);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    if (fn(xs[i], i, xs)) res.push(xs[i]);
  }
  return res;
};

// Array.prototype.forEach is supported in IE9
exports.forEach = function forEach(xs, fn, self) {
  if (xs.forEach) return xs.forEach(fn, self);
  for (var i = 0; i < xs.length; i++) {
    fn.call(self, xs[i], i, xs);
  }
};

// Array.prototype.map is supported in IE9
exports.map = function map(xs, fn) {
  if (xs.map) return xs.map(fn);
  var out = new Array(xs.length);
  for (var i = 0; i < xs.length; i++) {
    out[i] = fn(xs[i], i, xs);
  }
  return out;
};

// Array.prototype.reduce is supported in IE9
exports.reduce = function reduce(array, callback, opt_initialValue) {
  if (array.reduce) return array.reduce(callback, opt_initialValue);
  var value, isValueSet = false;

  if (2 < arguments.length) {
    value = opt_initialValue;
    isValueSet = true;
  }
  for (var i = 0, l = array.length; l > i; ++i) {
    if (array.hasOwnProperty(i)) {
      if (isValueSet) {
        value = callback(value, array[i], i, array);
      }
      else {
        value = array[i];
        isValueSet = true;
      }
    }
  }

  return value;
};

// String.prototype.substr - negative index don't work in IE8
if ('ab'.substr(-1) !== 'b') {
  exports.substr = function (str, start, length) {
    // did we get a negative start, calculate how much it is from the beginning of the string
    if (start < 0) start = str.length + start;

    // call the original function
    return str.substr(start, length);
  };
} else {
  exports.substr = function (str, start, length) {
    return str.substr(start, length);
  };
}

// String.prototype.trim is supported in IE9
exports.trim = function (str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
};

// Function.prototype.bind is supported in IE9
exports.bind = function () {
  var args = Array.prototype.slice.call(arguments);
  var fn = args.shift();
  if (fn.bind) return fn.bind.apply(fn, args);
  var self = args.shift();
  return function () {
    fn.apply(self, args.concat([Array.prototype.slice.call(arguments)]));
  };
};

// Object.create is supported in IE9
function create(prototype, properties) {
  var object;
  if (prototype === null) {
    object = { '__proto__' : null };
  }
  else {
    if (typeof prototype !== 'object') {
      throw new TypeError(
        'typeof prototype[' + (typeof prototype) + '] != \'object\''
      );
    }
    var Type = function () {};
    Type.prototype = prototype;
    object = new Type();
    object.__proto__ = prototype;
  }
  if (typeof properties !== 'undefined' && Object.defineProperties) {
    Object.defineProperties(object, properties);
  }
  return object;
}
exports.create = typeof Object.create === 'function' ? Object.create : create;

// Object.keys and Object.getOwnPropertyNames is supported in IE9 however
// they do show a description and number property on Error objects
function notObject(object) {
  return ((typeof object != "object" && typeof object != "function") || object === null);
}

function keysShim(object) {
  if (notObject(object)) {
    throw new TypeError("Object.keys called on a non-object");
  }

  var result = [];
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result.push(name);
    }
  }
  return result;
}

// getOwnPropertyNames is almost the same as Object.keys one key feature
//  is that it returns hidden properties, since that can't be implemented,
//  this feature gets reduced so it just shows the length property on arrays
function propertyShim(object) {
  if (notObject(object)) {
    throw new TypeError("Object.getOwnPropertyNames called on a non-object");
  }

  var result = keysShim(object);
  if (exports.isArray(object) && exports.indexOf(object, 'length') === -1) {
    result.push('length');
  }
  return result;
}

var keys = typeof Object.keys === 'function' ? Object.keys : keysShim;
var getOwnPropertyNames = typeof Object.getOwnPropertyNames === 'function' ?
  Object.getOwnPropertyNames : propertyShim;

if (new Error().hasOwnProperty('description')) {
  var ERROR_PROPERTY_FILTER = function (obj, array) {
    if (toString.call(obj) === '[object Error]') {
      array = exports.filter(array, function (name) {
        return name !== 'description' && name !== 'number' && name !== 'message';
      });
    }
    return array;
  };

  exports.keys = function (object) {
    return ERROR_PROPERTY_FILTER(object, keys(object));
  };
  exports.getOwnPropertyNames = function (object) {
    return ERROR_PROPERTY_FILTER(object, getOwnPropertyNames(object));
  };
} else {
  exports.keys = keys;
  exports.getOwnPropertyNames = getOwnPropertyNames;
}

// Object.getOwnPropertyDescriptor - supported in IE8 but only on dom elements
function valueObject(value, key) {
  return { value: value[key] };
}

if (typeof Object.getOwnPropertyDescriptor === 'function') {
  try {
    Object.getOwnPropertyDescriptor({'a': 1}, 'a');
    exports.getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  } catch (e) {
    // IE8 dom element issue - use a try catch and default to valueObject
    exports.getOwnPropertyDescriptor = function (value, key) {
      try {
        return Object.getOwnPropertyDescriptor(value, key);
      } catch (e) {
        return valueObject(value, key);
      }
    };
  }
} else {
  exports.getOwnPropertyDescriptor = valueObject;
}

},{}],37:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = require('util');

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!util.isNumber(n) || n < 0)
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (util.isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        throw TypeError('Uncaught, unspecified "error" event.');
      }
      return false;
    }
  }

  handler = this._events[type];

  if (util.isUndefined(handler))
    return false;

  if (util.isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (util.isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!util.isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              util.isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (util.isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (util.isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!util.isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      console.trace();
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!util.isFunction(listener))
    throw TypeError('listener must be a function');

  function g() {
    this.removeListener(type, g);
    listener.apply(this, arguments);
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!util.isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (util.isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (util.isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (util.isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (util.isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (util.isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};
},{"util":39}],38:[function(require,module,exports){

// not implemented
// The reason for having an empty file and not throwing is to allow
// untraditional implementation of this module.

},{}],39:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var shims = require('_shims');

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  shims.forEach(array, function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = shims.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = shims.getOwnPropertyNames(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }

  shims.forEach(keys, function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = shims.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }

  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (shims.indexOf(ctx.seen, desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = shims.reduce(output, function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return shims.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) && objectToString(e) === '[object Error]';
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.binarySlice === 'function'
  ;
}
exports.isBuffer = isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = function(ctor, superCtor) {
  ctor.super_ = superCtor;
  ctor.prototype = shims.create(superCtor.prototype, {
    constructor: {
      value: ctor,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
};

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = shims.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

},{"_shims":36}],40:[function(require,module,exports){
/*!
  * domready (c) Dustin Diaz 2012 - License MIT
  */
!function (name, definition) {
  if (typeof module != 'undefined') module.exports = definition()
  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)
  else this[name] = definition()
}('domready', function (ready) {

  var fns = [], fn, f = false
    , doc = document
    , testEl = doc.documentElement
    , hack = testEl.doScroll
    , domContentLoaded = 'DOMContentLoaded'
    , addEventListener = 'addEventListener'
    , onreadystatechange = 'onreadystatechange'
    , readyState = 'readyState'
    , loadedRgx = hack ? /^loaded|^c/ : /^loaded|c/
    , loaded = loadedRgx.test(doc[readyState])

  function flush(f) {
    loaded = 1
    while (f = fns.shift()) f()
  }

  doc[addEventListener] && doc[addEventListener](domContentLoaded, fn = function () {
    doc.removeEventListener(domContentLoaded, fn, f)
    flush()
  }, f)


  hack && doc.attachEvent(onreadystatechange, fn = function () {
    if (/^c/.test(doc[readyState])) {
      doc.detachEvent(onreadystatechange, fn)
      flush()
    }
  })

  return (ready = hack ?
    function (fn) {
      self != top ?
        loaded ? fn() : fns.push(fn) :
        function () {
          try {
            testEl.doScroll('left')
          } catch (e) {
            return setTimeout(function() { ready(fn) }, 50)
          }
          fn()
        }()
    } :
    function (fn) {
      loaded ? fn() : fns.push(fn)
    })
})

},{}],41:[function(require,module,exports){
/**
 * This will store the property that the current
 * browser uses for transitionDuration
 */
var property;

/**
 * The properties we'll check on an element
 * to determine if it actually has transitions
 * We use duration as this is the only property
 * needed to technically have transitions
 * @type {Array}
 */
var types = [
  "transitionDuration",
  "MozTransitionDuration",
  "webkitTransitionDuration",
  "msTransitionDuration",
  "KhtmlTransitionDuration",
  "OTransitionDuration"
];

/**
 * Determine the correct property for this browser
 * just once so we done need to check every time
 */
while(types.length) {
  var type = types.shift();
  if(type in document.body.style) {
    property = type;
  }
}

/**
 * Determine if the browser supports transitions or
 * if an element has transitions at all.
 * @param  {Element}  el Optional. Returns browser support if not included
 * @return {Boolean}
 */
function hasTransitions(el){
  if(!property) {
    return false; // No browser support for transitions
  }
  if(!el) {
    return property != null; // We just want to know if browsers support it
  }
  var duration = getComputedStyle(el)[property];
  return duration !== "" && parseFloat(duration) !== 0; // Does this element have transitions?
}

module.exports = hasTransitions;

},{}],42:[function(require,module,exports){
/*!
  * @preserve Qwery - A Blazing Fast query selector engine
  * https://github.com/ded/qwery
  * copyright Dustin Diaz 2012
  * MIT License
  */

(function (name, context, definition) {
  if (typeof module != 'undefined' && module.exports) module.exports = definition()
  else if (typeof define == 'function' && define.amd) define(definition)
  else context[name] = definition()
})('qwery', this, function () {
  var doc = document
    , html = doc.documentElement
    , byClass = 'getElementsByClassName'
    , byTag = 'getElementsByTagName'
    , qSA = 'querySelectorAll'
    , useNativeQSA = 'useNativeQSA'
    , tagName = 'tagName'
    , nodeType = 'nodeType'
    , select // main select() method, assign later

    , id = /#([\w\-]+)/
    , clas = /\.[\w\-]+/g
    , idOnly = /^#([\w\-]+)$/
    , classOnly = /^\.([\w\-]+)$/
    , tagOnly = /^([\w\-]+)$/
    , tagAndOrClass = /^([\w]+)?\.([\w\-]+)$/
    , splittable = /(^|,)\s*[>~+]/
    , normalizr = /^\s+|\s*([,\s\+\~>]|$)\s*/g
    , splitters = /[\s\>\+\~]/
    , splittersMore = /(?![\s\w\-\/\?\&\=\:\.\(\)\!,@#%<>\{\}\$\*\^'"]*\]|[\s\w\+\-]*\))/
    , specialChars = /([.*+?\^=!:${}()|\[\]\/\\])/g
    , simple = /^(\*|[a-z0-9]+)?(?:([\.\#]+[\w\-\.#]+)?)/
    , attr = /\[([\w\-]+)(?:([\|\^\$\*\~]?\=)['"]?([ \w\-\/\?\&\=\:\.\(\)\!,@#%<>\{\}\$\*\^]+)["']?)?\]/
    , pseudo = /:([\w\-]+)(\(['"]?([^()]+)['"]?\))?/
    , easy = new RegExp(idOnly.source + '|' + tagOnly.source + '|' + classOnly.source)
    , dividers = new RegExp('(' + splitters.source + ')' + splittersMore.source, 'g')
    , tokenizr = new RegExp(splitters.source + splittersMore.source)
    , chunker = new RegExp(simple.source + '(' + attr.source + ')?' + '(' + pseudo.source + ')?')

  var walker = {
      ' ': function (node) {
        return node && node !== html && node.parentNode
      }
    , '>': function (node, contestant) {
        return node && node.parentNode == contestant.parentNode && node.parentNode
      }
    , '~': function (node) {
        return node && node.previousSibling
      }
    , '+': function (node, contestant, p1, p2) {
        if (!node) return false
        return (p1 = previous(node)) && (p2 = previous(contestant)) && p1 == p2 && p1
      }
    }

  function cache() {
    this.c = {}
  }
  cache.prototype = {
    g: function (k) {
      return this.c[k] || undefined
    }
  , s: function (k, v, r) {
      v = r ? new RegExp(v) : v
      return (this.c[k] = v)
    }
  }

  var classCache = new cache()
    , cleanCache = new cache()
    , attrCache = new cache()
    , tokenCache = new cache()

  function classRegex(c) {
    return classCache.g(c) || classCache.s(c, '(^|\\s+)' + c + '(\\s+|$)', 1)
  }

  // not quite as fast as inline loops in older browsers so don't use liberally
  function each(a, fn) {
    var i = 0, l = a.length
    for (; i < l; i++) fn(a[i])
  }

  function flatten(ar) {
    for (var r = [], i = 0, l = ar.length; i < l; ++i) arrayLike(ar[i]) ? (r = r.concat(ar[i])) : (r[r.length] = ar[i])
    return r
  }

  function arrayify(ar) {
    var i = 0, l = ar.length, r = []
    for (; i < l; i++) r[i] = ar[i]
    return r
  }

  function previous(n) {
    while (n = n.previousSibling) if (n[nodeType] == 1) break;
    return n
  }

  function q(query) {
    return query.match(chunker)
  }

  // called using `this` as element and arguments from regex group results.
  // given => div.hello[title="world"]:foo('bar')
  // div.hello[title="world"]:foo('bar'), div, .hello, [title="world"], title, =, world, :foo('bar'), foo, ('bar'), bar]
  function interpret(whole, tag, idsAndClasses, wholeAttribute, attribute, qualifier, value, wholePseudo, pseudo, wholePseudoVal, pseudoVal) {
    var i, m, k, o, classes
    if (this[nodeType] !== 1) return false
    if (tag && tag !== '*' && this[tagName] && this[tagName].toLowerCase() !== tag) return false
    if (idsAndClasses && (m = idsAndClasses.match(id)) && m[1] !== this.id) return false
    if (idsAndClasses && (classes = idsAndClasses.match(clas))) {
      for (i = classes.length; i--;) if (!classRegex(classes[i].slice(1)).test(this.className)) return false
    }
    if (pseudo && qwery.pseudos[pseudo] && !qwery.pseudos[pseudo](this, pseudoVal)) return false
    if (wholeAttribute && !value) { // select is just for existance of attrib
      o = this.attributes
      for (k in o) {
        if (Object.prototype.hasOwnProperty.call(o, k) && (o[k].name || k) == attribute) {
          return this
        }
      }
    }
    if (wholeAttribute && !checkAttr(qualifier, getAttr(this, attribute) || '', value)) {
      // select is for attrib equality
      return false
    }
    return this
  }

  function clean(s) {
    return cleanCache.g(s) || cleanCache.s(s, s.replace(specialChars, '\\$1'))
  }

  function checkAttr(qualify, actual, val) {
    switch (qualify) {
    case '=':
      return actual == val
    case '^=':
      return actual.match(attrCache.g('^=' + val) || attrCache.s('^=' + val, '^' + clean(val), 1))
    case '$=':
      return actual.match(attrCache.g('$=' + val) || attrCache.s('$=' + val, clean(val) + '$', 1))
    case '*=':
      return actual.match(attrCache.g(val) || attrCache.s(val, clean(val), 1))
    case '~=':
      return actual.match(attrCache.g('~=' + val) || attrCache.s('~=' + val, '(?:^|\\s+)' + clean(val) + '(?:\\s+|$)', 1))
    case '|=':
      return actual.match(attrCache.g('|=' + val) || attrCache.s('|=' + val, '^' + clean(val) + '(-|$)', 1))
    }
    return 0
  }

  // given a selector, first check for simple cases then collect all base candidate matches and filter
  function _qwery(selector, _root) {
    var r = [], ret = [], i, l, m, token, tag, els, intr, item, root = _root
      , tokens = tokenCache.g(selector) || tokenCache.s(selector, selector.split(tokenizr))
      , dividedTokens = selector.match(dividers)

    if (!tokens.length) return r

    token = (tokens = tokens.slice(0)).pop() // copy cached tokens, take the last one
    if (tokens.length && (m = tokens[tokens.length - 1].match(idOnly))) root = byId(_root, m[1])
    if (!root) return r

    intr = q(token)
    // collect base candidates to filter
    els = root !== _root && root[nodeType] !== 9 && dividedTokens && /^[+~]$/.test(dividedTokens[dividedTokens.length - 1]) ?
      function (r) {
        while (root = root.nextSibling) {
          root[nodeType] == 1 && (intr[1] ? intr[1] == root[tagName].toLowerCase() : 1) && (r[r.length] = root)
        }
        return r
      }([]) :
      root[byTag](intr[1] || '*')
    // filter elements according to the right-most part of the selector
    for (i = 0, l = els.length; i < l; i++) {
      if (item = interpret.apply(els[i], intr)) r[r.length] = item
    }
    if (!tokens.length) return r

    // filter further according to the rest of the selector (the left side)
    each(r, function (e) { if (ancestorMatch(e, tokens, dividedTokens)) ret[ret.length] = e })
    return ret
  }

  // compare element to a selector
  function is(el, selector, root) {
    if (isNode(selector)) return el == selector
    if (arrayLike(selector)) return !!~flatten(selector).indexOf(el) // if selector is an array, is el a member?

    var selectors = selector.split(','), tokens, dividedTokens
    while (selector = selectors.pop()) {
      tokens = tokenCache.g(selector) || tokenCache.s(selector, selector.split(tokenizr))
      dividedTokens = selector.match(dividers)
      tokens = tokens.slice(0) // copy array
      if (interpret.apply(el, q(tokens.pop())) && (!tokens.length || ancestorMatch(el, tokens, dividedTokens, root))) {
        return true
      }
    }
    return false
  }

  // given elements matching the right-most part of a selector, filter out any that don't match the rest
  function ancestorMatch(el, tokens, dividedTokens, root) {
    var cand
    // recursively work backwards through the tokens and up the dom, covering all options
    function crawl(e, i, p) {
      while (p = walker[dividedTokens[i]](p, e)) {
        if (isNode(p) && (interpret.apply(p, q(tokens[i])))) {
          if (i) {
            if (cand = crawl(p, i - 1, p)) return cand
          } else return p
        }
      }
    }
    return (cand = crawl(el, tokens.length - 1, el)) && (!root || isAncestor(cand, root))
  }

  function isNode(el, t) {
    return el && typeof el === 'object' && (t = el[nodeType]) && (t == 1 || t == 9)
  }

  function uniq(ar) {
    var a = [], i, j;
    o:
    for (i = 0; i < ar.length; ++i) {
      for (j = 0; j < a.length; ++j) if (a[j] == ar[i]) continue o
      a[a.length] = ar[i]
    }
    return a
  }

  function arrayLike(o) {
    return (typeof o === 'object' && isFinite(o.length))
  }

  function normalizeRoot(root) {
    if (!root) return doc
    if (typeof root == 'string') return qwery(root)[0]
    if (!root[nodeType] && arrayLike(root)) return root[0]
    return root
  }

  function byId(root, id, el) {
    // if doc, query on it, else query the parent doc or if a detached fragment rewrite the query and run on the fragment
    return root[nodeType] === 9 ? root.getElementById(id) :
      root.ownerDocument &&
        (((el = root.ownerDocument.getElementById(id)) && isAncestor(el, root) && el) ||
          (!isAncestor(root, root.ownerDocument) && select('[id="' + id + '"]', root)[0]))
  }

  function qwery(selector, _root) {
    var m, el, root = normalizeRoot(_root)

    // easy, fast cases that we can dispatch with simple DOM calls
    if (!root || !selector) return []
    if (selector === window || isNode(selector)) {
      return !_root || (selector !== window && isNode(root) && isAncestor(selector, root)) ? [selector] : []
    }
    if (selector && arrayLike(selector)) return flatten(selector)
    if (m = selector.match(easy)) {
      if (m[1]) return (el = byId(root, m[1])) ? [el] : []
      if (m[2]) return arrayify(root[byTag](m[2]))
      if (hasByClass && m[3]) return arrayify(root[byClass](m[3]))
    }

    return select(selector, root)
  }

  // where the root is not document and a relationship selector is first we have to
  // do some awkward adjustments to get it to work, even with qSA
  function collectSelector(root, collector) {
    return function (s) {
      var oid, nid
      if (splittable.test(s)) {
        if (root[nodeType] !== 9) {
          // make sure the el has an id, rewrite the query, set root to doc and run it
          if (!(nid = oid = root.getAttribute('id'))) root.setAttribute('id', nid = '__qwerymeupscotty')
          s = '[id="' + nid + '"]' + s // avoid byId and allow us to match context element
          collector(root.parentNode || root, s, true)
          oid || root.removeAttribute('id')
        }
        return;
      }
      s.length && collector(root, s, false)
    }
  }

  var isAncestor = 'compareDocumentPosition' in html ?
    function (element, container) {
      return (container.compareDocumentPosition(element) & 16) == 16
    } : 'contains' in html ?
    function (element, container) {
      container = container[nodeType] === 9 || container == window ? html : container
      return container !== element && container.contains(element)
    } :
    function (element, container) {
      while (element = element.parentNode) if (element === container) return 1
      return 0
    }
  , getAttr = function () {
      // detect buggy IE src/href getAttribute() call
      var e = doc.createElement('p')
      return ((e.innerHTML = '<a href="#x">x</a>') && e.firstChild.getAttribute('href') != '#x') ?
        function (e, a) {
          return a === 'class' ? e.className : (a === 'href' || a === 'src') ?
            e.getAttribute(a, 2) : e.getAttribute(a)
        } :
        function (e, a) { return e.getAttribute(a) }
    }()
  , hasByClass = !!doc[byClass]
    // has native qSA support
  , hasQSA = doc.querySelector && doc[qSA]
    // use native qSA
  , selectQSA = function (selector, root) {
      var result = [], ss, e
      try {
        if (root[nodeType] === 9 || !splittable.test(selector)) {
          // most work is done right here, defer to qSA
          return arrayify(root[qSA](selector))
        }
        // special case where we need the services of `collectSelector()`
        each(ss = selector.split(','), collectSelector(root, function (ctx, s) {
          e = ctx[qSA](s)
          if (e.length == 1) result[result.length] = e.item(0)
          else if (e.length) result = result.concat(arrayify(e))
        }))
        return ss.length > 1 && result.length > 1 ? uniq(result) : result
      } catch (ex) { }
      return selectNonNative(selector, root)
    }
    // no native selector support
  , selectNonNative = function (selector, root) {
      var result = [], items, m, i, l, r, ss
      selector = selector.replace(normalizr, '$1')
      if (m = selector.match(tagAndOrClass)) {
        r = classRegex(m[2])
        items = root[byTag](m[1] || '*')
        for (i = 0, l = items.length; i < l; i++) {
          if (r.test(items[i].className)) result[result.length] = items[i]
        }
        return result
      }
      // more complex selector, get `_qwery()` to do the work for us
      each(ss = selector.split(','), collectSelector(root, function (ctx, s, rewrite) {
        r = _qwery(s, ctx)
        for (i = 0, l = r.length; i < l; i++) {
          if (ctx[nodeType] === 9 || rewrite || isAncestor(r[i], root)) result[result.length] = r[i]
        }
      }))
      return ss.length > 1 && result.length > 1 ? uniq(result) : result
    }
  , configure = function (options) {
      // configNativeQSA: use fully-internal selector or native qSA where present
      if (typeof options[useNativeQSA] !== 'undefined')
        select = !options[useNativeQSA] ? selectNonNative : hasQSA ? selectQSA : selectNonNative
    }

  configure({ useNativeQSA: true })

  qwery.configure = configure
  qwery.uniq = uniq
  qwery.is = is
  qwery.pseudos = {}

  return qwery
});

},{}],43:[function(require,module,exports){
//     Underscore.js 1.5.2
//     http://underscorejs.org
//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    concat           = ArrayProto.concat,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.5.2';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, length = obj.length; i < length; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      var keys = _.keys(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
      }
    }
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, iterator, context) {
    var result;
    any(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, iterator, context) {
    return _.filter(obj, function(value, index, list) {
      return !iterator.call(context, value, index, list);
    }, context);
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
    each(obj, function(value, index, list) {
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
    each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    return any(obj, function(value) {
      return value === target;
    });
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, function(value){ return value[key]; });
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs, first) {
    if (_.isEmpty(attrs)) return first ? void 0 : [];
    return _[first ? 'find' : 'filter'](obj, function(value) {
      for (var key in attrs) {
        if (attrs[key] !== value[key]) return false;
      }
      return true;
    });
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.where(obj, attrs, true);
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return -Infinity;
    var result = {computed : -Infinity, value: -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed > result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return Infinity;
    var result = {computed : Infinity, value: Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Shuffle an array, using the modern version of the 
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // Sample **n** random values from an array.
  // If **n** is not specified, returns a single random element from the array.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (arguments.length < 2 || guard) {
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    return _.isFunction(value) ? value : function(obj){ return obj[value]; };
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, value, context) {
    var iterator = lookupIterator(value);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, value, context) {
      var result = {};
      var iterator = value == null ? _.identity : lookupIterator(value);
      each(obj, function(value, index) {
        var key = iterator.call(context, value, index, obj);
        behavior(result, key, value);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, key, value) {
    (_.has(result, key) ? result[key] : (result[key] = [])).push(value);
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, key, value) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, key) {
    _.has(result, key) ? result[key]++ : result[key] = 1;
  });

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = iterator == null ? _.identity : lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    return (n == null) || guard ? array[0] : slice.call(array, 0, n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) {
      return array[array.length - 1];
    } else {
      return slice.call(array, Math.max(array.length - n, 0));
    }
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    each(input, function(value) {
      if (_.isArray(value) || _.isArguments(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(_.flatten(arguments, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.indexOf(other, item) >= 0;
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var length = _.max(_.pluck(arguments, "length").concat(0));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, '' + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(length);

    while(idx < length) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context.
  _.partial = function(func) {
    var args = slice.call(arguments, 1);
    return function() {
      return func.apply(this, args.concat(slice.call(arguments)));
    };
  };

  // Bind all of an object's methods to that object. Useful for ensuring that
  // all callbacks defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0) throw new Error("bindAll must be passed function names");
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    options || (options = {});
    var later = function() {
      previous = options.leading === false ? 0 : new Date;
      timeout = null;
      result = func.apply(context, args);
    };
    return function() {
      var now = new Date;
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;
    return function() {
      context = this;
      args = arguments;
      timestamp = new Date();
      var later = function() {
        var last = (new Date()) - timestamp;
        if (last < wait) {
          timeout = setTimeout(later, wait - last);
        } else {
          timeout = null;
          if (!immediate) result = func.apply(context, args);
        }
      };
      var callNow = immediate && !timeout;
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow) result = func.apply(context, args);
      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return function() {
      var args = [func];
      push.apply(args, arguments);
      return wrapper.apply(this, args);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = nativeKeys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = new Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = new Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                             _.isFunction(bCtor) && (bCtor instanceof bCtor))) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    var accum = Array(Math.max(0, n));
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

}).call(this);

},{}],44:[function(require,module,exports){
var global=typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};/*
 *
 * This is used to build the bundle with browserify.
 *
 * The bundle is used by people who doesn't use browserify.require
 * Those who use browserify will install with npm and require the module,
 * the package.json file points to index.js.
 */
var Auth0Widget = require('./widget');

// use amd or just throught to window object.
if (typeof global.window.define == 'function' && global.window.define.amd) {
  global.window.define('auth0-widget', function () { return Auth0Widget; });
} else if (global.window) {
  global.window.Auth0Widget = Auth0Widget;
}
},{"./widget":50}],45:[function(require,module,exports){
module.exports = (function anonymous(locals, filters, escape, rethrow) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!#?[a-zA-Z0-9]+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/'/g, '&#39;')
    .replace(/"/g, '&quot;');
};
var __stack = { lineno: 1, input: "<% var icon_class = !use_big_buttons ? 'a0-icon' : 'a0-block' %>\n<div tabindex=\"0\"\n\t\tdata-strategy=\"<%= name %>\"\n\t\ttitle=\"<%= title %>\"\n\t\tclass=\"a0-zocial <%= icon_class %> a0-<%= css %> <%= locals.imageicon ? 'a0-image-icon' : '' %>\" dir=\"ltr\">\n\n\n\t<span>Login with <%= title %></span>\n</div>", filename: "/Users/cristian/Work/auth0/apps/widget/widget/html/button.ejs" };
function rethrow(err, str, filename, lineno){
  var lines = str.split('\n')
    , start = Math.max(lineno - 3, 0)
    , end = Math.min(lines.length, lineno + 3);

  // Error context
  var context = lines.slice(start, end).map(function(line, i){
    var curr = i + start + 1;
    return (curr == lineno ? ' >> ' : '    ')
      + curr
      + '| '
      + line;
  }).join('\n');

  // Alter exception message
  err.path = filename;
  err.message = (filename || 'ejs') + ':'
    + lineno + '\n'
    + context + '\n\n'
    + err.message;
  
  throw err;
}
try {
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('');__stack.lineno=1; var icon_class = !use_big_buttons ? 'a0-icon' : 'a0-block' ; buf.push('\n<div tabindex="0"\n		data-strategy="', escape((__stack.lineno=3,  name )), '"\n		title="', escape((__stack.lineno=4,  title )), '"\n		class="a0-zocial ', escape((__stack.lineno=5,  icon_class )), ' a0-', escape((__stack.lineno=5,  css )), ' ', escape((__stack.lineno=5,  locals.imageicon ? 'a0-image-icon' : '' )), '" dir="ltr">\n\n\n	<span>Login with ', escape((__stack.lineno=8,  title )), '</span>\n</div>'); })();
} 
return buf.join('');
} catch (err) {
  rethrow(err, __stack.input, __stack.filename, __stack.lineno);
}
})
},{}],46:[function(require,module,exports){
module.exports = (function anonymous(locals, filters, escape, rethrow) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!#?[a-zA-Z0-9]+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/'/g, '&#39;')
    .replace(/"/g, '&quot;');
};
var __stack = { lineno: 1, input: "<div tabindex=\"0\"\n\t\tdata-strategy=\"<%= name %>\"\n\t\ttitle=\"<%= username ? (username + ' (' + title + ')') : title %>\"\n\t\tclass=\"a0-zocial a0-block a0-<%= css %> <%= locals.imageicon ? 'a0-image-icon' : '' %>\">\n\t<span><%= username || title %></span>\n</div>", filename: "/Users/cristian/Work/auth0/apps/widget/widget/html/loggedin_button.ejs" };
function rethrow(err, str, filename, lineno){
  var lines = str.split('\n')
    , start = Math.max(lineno - 3, 0)
    , end = Math.min(lines.length, lineno + 3);

  // Error context
  var context = lines.slice(start, end).map(function(line, i){
    var curr = i + start + 1;
    return (curr == lineno ? ' >> ' : '    ')
      + curr
      + '| '
      + line;
  }).join('\n');

  // Alter exception message
  err.path = filename;
  err.message = (filename || 'ejs') + ':'
    + lineno + '\n'
    + context + '\n\n'
    + err.message;
  
  throw err;
}
try {
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div tabindex="0"\n		data-strategy="', escape((__stack.lineno=2,  name )), '"\n		title="', escape((__stack.lineno=3,  username ? (username + ' (' + title + ')') : title )), '"\n		class="a0-zocial a0-block a0-', escape((__stack.lineno=4,  css )), ' ', escape((__stack.lineno=4,  locals.imageicon ? 'a0-image-icon' : '' )), '">\n	<span>', escape((__stack.lineno=5,  username || title )), '</span>\n</div>'); })();
} 
return buf.join('');
} catch (err) {
  rethrow(err, __stack.input, __stack.filename, __stack.lineno);
}
})
},{}],47:[function(require,module,exports){
module.exports = (function anonymous(locals, filters, escape, rethrow) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!#?[a-zA-Z0-9]+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/'/g, '&#39;')
    .replace(/"/g, '&quot;');
};
var __stack = { lineno: 1, input: "<div class=\"a0-create-account\">\n  <% if (showSignup) { %>\n  <a href=\"<%= locals.signupLink || 'javascript: {}' %>\"\n    class=\"a0-sign-up\">\n    <%= i18n.t('signin:signupText') %>\n  </a>\n  <% } %>\n  <% if (showSignup && showForgot) { %>\n  <span class=\"a0-divider\">&nbsp;•&nbsp;</span>\n  <% } %>\n  <% if (showForgot) { %>\n  <a href=\"<%= locals.forgotLink || 'javascript: {}' %>\"\n    class=\"a0-forgot-pass\"><%= i18n.t('signin:forgotText') %></a>\n  <% } %>\n</div>", filename: "/Users/cristian/Work/auth0/apps/widget/widget/html/login_actions.ejs" };
function rethrow(err, str, filename, lineno){
  var lines = str.split('\n')
    , start = Math.max(lineno - 3, 0)
    , end = Math.min(lines.length, lineno + 3);

  // Error context
  var context = lines.slice(start, end).map(function(line, i){
    var curr = i + start + 1;
    return (curr == lineno ? ' >> ' : '    ')
      + curr
      + '| '
      + line;
  }).join('\n');

  // Alter exception message
  err.path = filename;
  err.message = (filename || 'ejs') + ':'
    + lineno + '\n'
    + context + '\n\n'
    + err.message;
  
  throw err;
}
try {
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div class="a0-create-account">\n  ');__stack.lineno=2; if (showSignup) { ; buf.push('\n  <a href="', escape((__stack.lineno=3,  locals.signupLink || 'javascript: {}' )), '"\n    class="a0-sign-up">\n    ', escape((__stack.lineno=5,  i18n.t('signin:signupText') )), '\n  </a>\n  ');__stack.lineno=7; } ; buf.push('\n  ');__stack.lineno=8; if (showSignup && showForgot) { ; buf.push('\n  <span class="a0-divider">&nbsp;•&nbsp;</span>\n  ');__stack.lineno=10; } ; buf.push('\n  ');__stack.lineno=11; if (showForgot) { ; buf.push('\n  <a href="', escape((__stack.lineno=12,  locals.forgotLink || 'javascript: {}' )), '"\n    class="a0-forgot-pass">', escape((__stack.lineno=13,  i18n.t('signin:forgotText') )), '</a>\n  ');__stack.lineno=14; } ; buf.push('\n</div>'); })();
} 
return buf.join('');
} catch (err) {
  rethrow(err, __stack.input, __stack.filename, __stack.lineno);
}
})
},{}],48:[function(require,module,exports){
module.exports = (function anonymous(locals, filters, escape, rethrow) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!#?[a-zA-Z0-9]+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/'/g, '&#39;')
    .replace(/"/g, '&quot;');
};
var __stack = { lineno: 1, input: "<div id=\"a0-widget\" class=\"a0-widget\" dir=\"auto\">\n    <div class=\"a0-signin <%= locals && locals.embedded ? 'a0-embedded' : '' %> <%= options.theme ? ('a0-theme-' + options.theme) : '' %>\">\n        <div class=\"a0-popup\">\n            <div class=\"a0-overlay\">\n                <div class=\"<%= locals && locals.expand ? '' : 'a0-centrix' %>\">\n                    <% include widget %>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n", filename: "/Users/cristian/Work/auth0/apps/widget/widget/html/main.ejs" };
function rethrow(err, str, filename, lineno){
  var lines = str.split('\n')
    , start = Math.max(lineno - 3, 0)
    , end = Math.min(lines.length, lineno + 3);

  // Error context
  var context = lines.slice(start, end).map(function(line, i){
    var curr = i + start + 1;
    return (curr == lineno ? ' >> ' : '    ')
      + curr
      + '| '
      + line;
  }).join('\n');

  // Alter exception message
  err.path = filename;
  err.message = (filename || 'ejs') + ':'
    + lineno + '\n'
    + context + '\n\n'
    + err.message;
  
  throw err;
}
try {
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div id="a0-widget" class="a0-widget" dir="auto">\n    <div class="a0-signin ', escape((__stack.lineno=2,  locals && locals.embedded ? 'a0-embedded' : '' )), ' ', escape((__stack.lineno=2,  options.theme ? ('a0-theme-' + options.theme) : '' )), '">\n        <div class="a0-popup">\n            <div class="a0-overlay">\n                <div class="', escape((__stack.lineno=5,  locals && locals.expand ? '' : 'a0-centrix' )), '">\n                    ' + (function(){var buf = [];
 buf.push('<div id="a0-onestep" class="a0-panel a0-onestep a0-free-subscription">\n    ');__stack.lineno=2; if (!locals.embedded) { ; buf.push('\n    <div class="a0-header a0-top-header">\n        <div class="a0-image ', escape((__stack.lineno=4,  !options.showIcon ? 'a0-hide' : '' )), '">\n            <img src="', escape((__stack.lineno=5,  options.icon || '' )), '">\n        </div>\n        <div class="a0-avatar ', escape((__stack.lineno=7,  options.showIcon ? 'a0-hide' : '' )), '">\n            <i class="a0-avatar-guest a0-icon-budicon-2"></i>\n        </div>\n        <h1>', escape((__stack.lineno=10,  i18n.t('signin:title') )), '</h1>\n        <h2 class="a0-error a0-hide">&nbsp;</h2>\n        <h2 class="a0-success a0-hide">&nbsp;</h2>\n        <a class="a0-close a0-icon-budicon-3 ', escape((__stack.lineno=13,  options.standalone ? 'a0-hide' : '' )), ';">\n\n        </a>\n    </div>\n    ');__stack.lineno=17; } ; buf.push('\n\n\n    <div class="a0-loading a0-mode">\n        ');__stack.lineno=21; if (locals.alt_spinner) { ; buf.push('\n        <div class="a0-spin-img" style="background-image: url(\'', escape((__stack.lineno=22,  locals.alt_spinner )), '\')"></div>\n        ');__stack.lineno=23; } else { ; buf.push('\n        <div class="a0-spin-container">\n            <div class="a0-spinner-css">\n              <span class="a0-side a0-sp_left">\n                <span class="a0-fill"></span>\n              </span>\n              <span class="a0-side a0-sp_right">\n                <span class="a0-fill"></span>\n              </span>\n            </div>\n            <div class="a0-spin-message">\n                <span>&nbsp;</span>\n            </div>\n        </div>\n        ');__stack.lineno=37; } ; buf.push('\n    </div>\n\n\n    ' + (function(){var buf = [];
 buf.push('<div class="a0-loggedin a0-mode a0-hide">\n    <form novalidate>\n        <span class="a0-centered a0-last-time">', escape((__stack.lineno=3,  i18n.t('signin:returnUserLabel') )), '</span>\n        <div class="a0-strategy"></div>\n        <div class="a0-emailPassword a0-hide">\n            <div class="a0-email">\n                <span class="a0-email-readonly"></span>\n                <input name="email"\n                       type="email"\n                       value=""\n                       disabled\n                       placeholder="', escape((__stack.lineno=12,  i18n.t('signin:emailPlaceholder') )), '"\n                       title="', escape((__stack.lineno=13,  i18n.t('signin:emailPlaceholder') )), '"\n                       class="a0-hide">\n            </div>\n            <div class="a0-password">\n                <label class="a0-sad-placeholder">\n                  ', escape((__stack.lineno=18,  i18n.t('signin:passwordPlaceholder') )), '\n                </label>\n                <input name="password" type="password"\n                       autofocus\n                       placeholder="', escape((__stack.lineno=22,  i18n.t('signin:passwordPlaceholder') )), '"\n                       title="', escape((__stack.lineno=23,  i18n.t('signin:passwordPlaceholder') )), '">\n            </div>\n            <div class="a0-action">\n                <button type="submit" class="a0-primary a0-next" style="width: 100%;">', escape((__stack.lineno=26,  i18n.t('signin:action') )), '</button>\n                ');__stack.lineno=27; if (options.showForgot !== false) { ; buf.push('\n                <label class="a0-create-account">\n                  <a href="', escape((__stack.lineno=29,  options.forgotLink || 'javascript: {}' )), '"\n                    class="a0-forgot-pass">', escape((__stack.lineno=30,  i18n.t('signin:forgotText') )), '</a>\n                </label>\n                ');__stack.lineno=32; } ; buf.push('\n            </div>\n        </div>\n        <span class="a0-centered a0-all">', escape((__stack.lineno=35,  i18n.t('signin:all') )), '</span>\n    </form>\n</div>');
return buf.join('');})() + '\n    ' + (function(){var buf = [];
 buf.push('<div class="a0-notloggedin a0-mode a0-hide">\n    <form novalidate>\n      <div class="a0-collapse-social">\n        <div class="a0-iconlist a0-hide"><p class="a0-hide">', escape((__stack.lineno=4,  i18n.t('signin:or') )), '</p></div>\n        <div class="a0-separator a0-hide"><span>', escape((__stack.lineno=5,  i18n.t('signin:separatorText') )), '</span></div>\n      </div>\n      <div class="a0-emailPassword">\n        <div class="a0-inputs">\n          ');__stack.lineno=9; if (options.showEmail !== false) { ; buf.push('\n\n          <div class="a0-email">\n              <label for="a0-signin_easy_email" class="a0-sad-placeholder">\n                ', escape((__stack.lineno=13,  i18n.t('signin:emailPlaceholder') )), '\n              </label>\n\n              <div class="a0-input-box">\n                <i class="a0-icon-budicon-1"></i>\n\n              <input name="email"\n                     id="a0-signin_easy_email"\n                     type="email"\n                     placeholder="', escape((__stack.lineno=22,  i18n.t('signin:emailPlaceholder') )), '"\n                     title="', escape((__stack.lineno=23,  i18n.t('signin:emailPlaceholder') )), '">\n              </div>\n          </div>\n          ');__stack.lineno=26; } ; buf.push('\n          <div class="a0-password a0-hide">\n              <label for="a0-signin_easy_password" class="a0-sad-placeholder">\n                ', escape((__stack.lineno=29,  i18n.t('signin:passwordPlaceholder') )), '\n              </label>\n\n              <div class="a0-input-box">\n                <div class="input-box">\n                <i class="a0-icon-budicon"></i>\n\n              <input name="password"\n                     id="a0-signin_easy_password"\n                     type="password"\n                     placeholder="', escape((__stack.lineno=39,  i18n.t('signin:passwordPlaceholder') )), '"\n                     title="', escape((__stack.lineno=40,  i18n.t('signin:passwordPlaceholder') )), '">\n              </div>\n              </div>\n          </div>\n\n        </div>\n        <!-- .a0-inputs -->\n\n        <div class="a0-action">\n            <button type="submit" class="a0-primary a0-next">', escape((__stack.lineno=49,  i18n.t('signin:action') )), '</button>\n            <div class="a0-db-actions">\n            </div>\n        </div>\n      </div>\n    </form>\n</div>');
return buf.join('');})() + '\n    ' + (function(){var buf = [];
 buf.push('<div class="a0-signup a0-mode a0-hide">\n    <form novalidate>\n        <div class="a0-header">', escape((__stack.lineno=3,  i18n.t('signup:description') )), '</div>\n        <div class="a0-collapse-social-signup">\n          <div class="a0-iconlist"><p class="a0-hide">', escape((__stack.lineno=5,  i18n.t('signin:or') )), '</p></div>\n          <div class="a0-separator"><span>', escape((__stack.lineno=6,  i18n.t('signin:separatorText') )), '</span></div>\n        </div>\n        <div class="a0-header">', escape((__stack.lineno=8,  i18n.t('signup:headerText') )), '</div>\n        <div class="a0-emailPassword">\n            <div class="a0-inputs">\n              <div class="a0-email">\n                  <label for="a0-signup_easy_email" class="a0-sad-placeholder">\n                    ', escape((__stack.lineno=13,  i18n.t('signup:emailPlaceholder') )), '\n                  </label>\n                  <div class="a0-input-box">\n                    <i class="a0-icon-budicon-1"></i>\n                    <input name="email" id="a0-signup_easy_email"\n                         type="email" value=""\n                         placeholder="', escape((__stack.lineno=19,  i18n.t('signup:emailPlaceholder') )), '"\n                         title="', escape((__stack.lineno=20,  i18n.t('signup:emailPlaceholder') )), '">\n                  </div>\n              </div>\n              <div class="a0-password">\n                  <label for="a0-signup_easy_password" class="a0-sad-placeholder">\n                    ', escape((__stack.lineno=25,  i18n.t('signup:passwordPlaceholder') )), '\n                  </label>\n\n                  <div class="a0-input-box">\n                    \n                    <i class="a0-icon-budicon"></i>\n                    <input name="password" id="a0-signup_easy_password"\n                           type="password" value=""\n                           placeholder="', escape((__stack.lineno=33,  i18n.t('signup:passwordPlaceholder') )), '"\n                           title="', escape((__stack.lineno=34,  i18n.t('signup:passwordPlaceholder') )), '">\n\n                  </div>\n\n              </div>\n            </div>\n            <div class="a0-action">\n                <button type="submit" class="a0-primary a0-next">', escape((__stack.lineno=41,  i18n.t('signup:action') )), '</button>\n                <div class="a0-options">\n                    <a href="javascript: {}" class="a0-centered a0-cancel">', escape((__stack.lineno=43,  i18n.t('signup:cancelAction') )), '</a>\n                </div>\n            </div>\n            <div class="a0-signup-footer">\n            ', (__stack.lineno=47,  i18n.t('signup:footerText') ), '\n            </div>\n        </div>\n    </form>\n</div>');
return buf.join('');})() + '\n    ' + (function(){var buf = [];
 buf.push('<div class="a0-reset a0-mode a0-hide">\n    <form id="a0-change_password" class="form-reset-password" novalidate>\n        <div class="a0-collapse-reset">\n            <div class="a0-header a0-instructions">', escape((__stack.lineno=4,  i18n.t('reset:headerText') )), '</div>\n        </div>\n        <div class="a0-emailPassword">\n            <div class="a0-inputs">\n\n                <div class="a0-email">\n                    <label for="a0-reset_easy_email" class="a0-sad-placeholder">\n                      ', escape((__stack.lineno=11,  i18n.t('reset:emailPlaceholder') )), '\n                    </label>\n                    <div class="a0-input-box">\n                      <i class="a0-icon-budicon-1"></i>\n                      <input name="email"\n                           id="a0-reset_easy_email"\n                           type="email"\n                           value=""\n                           placeholder="', escape((__stack.lineno=19,  i18n.t('reset:emailPlaceholder') )), '"\n                           title="', escape((__stack.lineno=20,  i18n.t('reset:emailPlaceholder') )), '">\n                    </div>\n                </div>\n                <div class="a0-password">\n                    <label for="a0-reset_easy_password" class="a0-sad-placeholder">\n                      ', escape((__stack.lineno=25,  i18n.t('reset:passwordPlaceholder') )), '\n                    </label>\n                    <div class="a0-input-box">\n                      <i class="a0-icon-budicon"></i>\n                      <input name="password"\n                           id="a0-reset_easy_password"\n                           type="password"\n                           value=""\n                           placeholder="', escape((__stack.lineno=33,  i18n.t('reset:passwordPlaceholder') )), '"\n                           title="', escape((__stack.lineno=34,  i18n.t('reset:passwordPlaceholder') )), '">\n                    </div>\n                </div>\n                <div class="a0-repeatPassword">\n                    <label for="a0-reset_easy_repeat_password" class="a0-sad-placeholder">\n                      ', escape((__stack.lineno=39,  i18n.t('reset:repeatPasswordPlaceholder') )), '\n                    </label>\n                    <div class="a0-input-box">\n                      <i class="a0-icon-budicon"></i>\n                      <input name="repeat_password"\n                           id="a0-reset_easy_repeat_password"\n                           type="password" value=""\n                           placeholder="', escape((__stack.lineno=46,  i18n.t('reset:repeatPasswordPlaceholder') )), '"\n                           title="', escape((__stack.lineno=47,  i18n.t('reset:repeatPasswordPlaceholder') )), '">\n                    </div>\n                </div>\n\n            </div>\n\n            <div class="a0-action">\n                <button type="submit" class="a0-primary a0-next" style="width: 100%;">', escape((__stack.lineno=54,  i18n.t('reset:action') )), '</button>\n                <div class="a0-options">\n                    <a href="javascript: {}" class="a0-centered a0-cancel">', escape((__stack.lineno=56,  i18n.t('reset:cancelAction') )), '</a>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>');
return buf.join('');})() + '\n\n    <div class=\'a0-footer\'>\n\n        <a href="http://auth0.com" target="_new" class="a0-logo">\n            <i class="a0-icon-badge"></i>\n        </a>\n    </div>\n</div>');
return buf.join('');})() + '\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n'); })();
} 
return buf.join('');
} catch (err) {
  rethrow(err, __stack.input, __stack.filename, __stack.lineno);
}
})
},{}],49:[function(require,module,exports){
module.exports = (function anonymous(locals, filters, escape, rethrow) {
escape = escape || function (html){
  return String(html)
    .replace(/&(?!#?[a-zA-Z0-9]+;)/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/'/g, '&#39;')
    .replace(/"/g, '&quot;');
};
var __stack = { lineno: 1, input: "<div id=\"a0-widget\" class=\"a0-widget\" dir=\"auto\">\n    <div class=\"a0-signin a0-embedded <%= options.theme ? ('a0-theme-' + options.theme) : '' %>\">\n        <% include widget %>\n    </div>\n</div>\n", filename: "/Users/cristian/Work/auth0/apps/widget/widget/html/main_embedded.ejs" };
function rethrow(err, str, filename, lineno){
  var lines = str.split('\n')
    , start = Math.max(lineno - 3, 0)
    , end = Math.min(lines.length, lineno + 3);

  // Error context
  var context = lines.slice(start, end).map(function(line, i){
    var curr = i + start + 1;
    return (curr == lineno ? ' >> ' : '    ')
      + curr
      + '| '
      + line;
  }).join('\n');

  // Alter exception message
  err.path = filename;
  err.message = (filename || 'ejs') + ':'
    + lineno + '\n'
    + context + '\n\n'
    + err.message;
  
  throw err;
}
try {
var buf = [];
with (locals || {}) { (function(){ 
 buf.push('<div id="a0-widget" class="a0-widget" dir="auto">\n    <div class="a0-signin a0-embedded ', escape((__stack.lineno=2,  options.theme ? ('a0-theme-' + options.theme) : '' )), '">\n        ' + (function(){var buf = [];
 buf.push('<div id="a0-onestep" class="a0-panel a0-onestep a0-free-subscription">\n    ');__stack.lineno=2; if (!locals.embedded) { ; buf.push('\n    <div class="a0-header a0-top-header">\n        <div class="a0-image ', escape((__stack.lineno=4,  !options.showIcon ? 'a0-hide' : '' )), '">\n            <img src="', escape((__stack.lineno=5,  options.icon || '' )), '">\n        </div>\n        <div class="a0-avatar ', escape((__stack.lineno=7,  options.showIcon ? 'a0-hide' : '' )), '">\n            <i class="a0-avatar-guest a0-icon-budicon-2"></i>\n        </div>\n        <h1>', escape((__stack.lineno=10,  i18n.t('signin:title') )), '</h1>\n        <h2 class="a0-error a0-hide">&nbsp;</h2>\n        <h2 class="a0-success a0-hide">&nbsp;</h2>\n        <a class="a0-close a0-icon-budicon-3 ', escape((__stack.lineno=13,  options.standalone ? 'a0-hide' : '' )), ';">\n\n        </a>\n    </div>\n    ');__stack.lineno=17; } ; buf.push('\n\n\n    <div class="a0-loading a0-mode">\n        ');__stack.lineno=21; if (locals.alt_spinner) { ; buf.push('\n        <div class="a0-spin-img" style="background-image: url(\'', escape((__stack.lineno=22,  locals.alt_spinner )), '\')"></div>\n        ');__stack.lineno=23; } else { ; buf.push('\n        <div class="a0-spin-container">\n            <div class="a0-spinner-css">\n              <span class="a0-side a0-sp_left">\n                <span class="a0-fill"></span>\n              </span>\n              <span class="a0-side a0-sp_right">\n                <span class="a0-fill"></span>\n              </span>\n            </div>\n            <div class="a0-spin-message">\n                <span>&nbsp;</span>\n            </div>\n        </div>\n        ');__stack.lineno=37; } ; buf.push('\n    </div>\n\n\n    ' + (function(){var buf = [];
 buf.push('<div class="a0-loggedin a0-mode a0-hide">\n    <form novalidate>\n        <span class="a0-centered a0-last-time">', escape((__stack.lineno=3,  i18n.t('signin:returnUserLabel') )), '</span>\n        <div class="a0-strategy"></div>\n        <div class="a0-emailPassword a0-hide">\n            <div class="a0-email">\n                <span class="a0-email-readonly"></span>\n                <input name="email"\n                       type="email"\n                       value=""\n                       disabled\n                       placeholder="', escape((__stack.lineno=12,  i18n.t('signin:emailPlaceholder') )), '"\n                       title="', escape((__stack.lineno=13,  i18n.t('signin:emailPlaceholder') )), '"\n                       class="a0-hide">\n            </div>\n            <div class="a0-password">\n                <label class="a0-sad-placeholder">\n                  ', escape((__stack.lineno=18,  i18n.t('signin:passwordPlaceholder') )), '\n                </label>\n                <input name="password" type="password"\n                       autofocus\n                       placeholder="', escape((__stack.lineno=22,  i18n.t('signin:passwordPlaceholder') )), '"\n                       title="', escape((__stack.lineno=23,  i18n.t('signin:passwordPlaceholder') )), '">\n            </div>\n            <div class="a0-action">\n                <button type="submit" class="a0-primary a0-next" style="width: 100%;">', escape((__stack.lineno=26,  i18n.t('signin:action') )), '</button>\n                ');__stack.lineno=27; if (options.showForgot !== false) { ; buf.push('\n                <label class="a0-create-account">\n                  <a href="', escape((__stack.lineno=29,  options.forgotLink || 'javascript: {}' )), '"\n                    class="a0-forgot-pass">', escape((__stack.lineno=30,  i18n.t('signin:forgotText') )), '</a>\n                </label>\n                ');__stack.lineno=32; } ; buf.push('\n            </div>\n        </div>\n        <span class="a0-centered a0-all">', escape((__stack.lineno=35,  i18n.t('signin:all') )), '</span>\n    </form>\n</div>');
return buf.join('');})() + '\n    ' + (function(){var buf = [];
 buf.push('<div class="a0-notloggedin a0-mode a0-hide">\n    <form novalidate>\n      <div class="a0-collapse-social">\n        <div class="a0-iconlist a0-hide"><p class="a0-hide">', escape((__stack.lineno=4,  i18n.t('signin:or') )), '</p></div>\n        <div class="a0-separator a0-hide"><span>', escape((__stack.lineno=5,  i18n.t('signin:separatorText') )), '</span></div>\n      </div>\n      <div class="a0-emailPassword">\n        <div class="a0-inputs">\n          ');__stack.lineno=9; if (options.showEmail !== false) { ; buf.push('\n\n          <div class="a0-email">\n              <label for="a0-signin_easy_email" class="a0-sad-placeholder">\n                ', escape((__stack.lineno=13,  i18n.t('signin:emailPlaceholder') )), '\n              </label>\n\n              <div class="a0-input-box">\n                <i class="a0-icon-budicon-1"></i>\n\n              <input name="email"\n                     id="a0-signin_easy_email"\n                     type="email"\n                     placeholder="', escape((__stack.lineno=22,  i18n.t('signin:emailPlaceholder') )), '"\n                     title="', escape((__stack.lineno=23,  i18n.t('signin:emailPlaceholder') )), '">\n              </div>\n          </div>\n          ');__stack.lineno=26; } ; buf.push('\n          <div class="a0-password a0-hide">\n              <label for="a0-signin_easy_password" class="a0-sad-placeholder">\n                ', escape((__stack.lineno=29,  i18n.t('signin:passwordPlaceholder') )), '\n              </label>\n\n              <div class="a0-input-box">\n                <div class="input-box">\n                <i class="a0-icon-budicon"></i>\n\n              <input name="password"\n                     id="a0-signin_easy_password"\n                     type="password"\n                     placeholder="', escape((__stack.lineno=39,  i18n.t('signin:passwordPlaceholder') )), '"\n                     title="', escape((__stack.lineno=40,  i18n.t('signin:passwordPlaceholder') )), '">\n              </div>\n              </div>\n          </div>\n\n        </div>\n        <!-- .a0-inputs -->\n\n        <div class="a0-action">\n            <button type="submit" class="a0-primary a0-next">', escape((__stack.lineno=49,  i18n.t('signin:action') )), '</button>\n            <div class="a0-db-actions">\n            </div>\n        </div>\n      </div>\n    </form>\n</div>');
return buf.join('');})() + '\n    ' + (function(){var buf = [];
 buf.push('<div class="a0-signup a0-mode a0-hide">\n    <form novalidate>\n        <div class="a0-header">', escape((__stack.lineno=3,  i18n.t('signup:description') )), '</div>\n        <div class="a0-collapse-social-signup">\n          <div class="a0-iconlist"><p class="a0-hide">', escape((__stack.lineno=5,  i18n.t('signin:or') )), '</p></div>\n          <div class="a0-separator"><span>', escape((__stack.lineno=6,  i18n.t('signin:separatorText') )), '</span></div>\n        </div>\n        <div class="a0-header">', escape((__stack.lineno=8,  i18n.t('signup:headerText') )), '</div>\n        <div class="a0-emailPassword">\n            <div class="a0-inputs">\n              <div class="a0-email">\n                  <label for="a0-signup_easy_email" class="a0-sad-placeholder">\n                    ', escape((__stack.lineno=13,  i18n.t('signup:emailPlaceholder') )), '\n                  </label>\n                  <div class="a0-input-box">\n                    <i class="a0-icon-budicon-1"></i>\n                    <input name="email" id="a0-signup_easy_email"\n                         type="email" value=""\n                         placeholder="', escape((__stack.lineno=19,  i18n.t('signup:emailPlaceholder') )), '"\n                         title="', escape((__stack.lineno=20,  i18n.t('signup:emailPlaceholder') )), '">\n                  </div>\n              </div>\n              <div class="a0-password">\n                  <label for="a0-signup_easy_password" class="a0-sad-placeholder">\n                    ', escape((__stack.lineno=25,  i18n.t('signup:passwordPlaceholder') )), '\n                  </label>\n\n                  <div class="a0-input-box">\n                    \n                    <i class="a0-icon-budicon"></i>\n                    <input name="password" id="a0-signup_easy_password"\n                           type="password" value=""\n                           placeholder="', escape((__stack.lineno=33,  i18n.t('signup:passwordPlaceholder') )), '"\n                           title="', escape((__stack.lineno=34,  i18n.t('signup:passwordPlaceholder') )), '">\n\n                  </div>\n\n              </div>\n            </div>\n            <div class="a0-action">\n                <button type="submit" class="a0-primary a0-next">', escape((__stack.lineno=41,  i18n.t('signup:action') )), '</button>\n                <div class="a0-options">\n                    <a href="javascript: {}" class="a0-centered a0-cancel">', escape((__stack.lineno=43,  i18n.t('signup:cancelAction') )), '</a>\n                </div>\n            </div>\n            <div class="a0-signup-footer">\n            ', (__stack.lineno=47,  i18n.t('signup:footerText') ), '\n            </div>\n        </div>\n    </form>\n</div>');
return buf.join('');})() + '\n    ' + (function(){var buf = [];
 buf.push('<div class="a0-reset a0-mode a0-hide">\n    <form id="a0-change_password" class="form-reset-password" novalidate>\n        <div class="a0-collapse-reset">\n            <div class="a0-header a0-instructions">', escape((__stack.lineno=4,  i18n.t('reset:headerText') )), '</div>\n        </div>\n        <div class="a0-emailPassword">\n            <div class="a0-inputs">\n\n                <div class="a0-email">\n                    <label for="a0-reset_easy_email" class="a0-sad-placeholder">\n                      ', escape((__stack.lineno=11,  i18n.t('reset:emailPlaceholder') )), '\n                    </label>\n                    <div class="a0-input-box">\n                      <i class="a0-icon-budicon-1"></i>\n                      <input name="email"\n                           id="a0-reset_easy_email"\n                           type="email"\n                           value=""\n                           placeholder="', escape((__stack.lineno=19,  i18n.t('reset:emailPlaceholder') )), '"\n                           title="', escape((__stack.lineno=20,  i18n.t('reset:emailPlaceholder') )), '">\n                    </div>\n                </div>\n                <div class="a0-password">\n                    <label for="a0-reset_easy_password" class="a0-sad-placeholder">\n                      ', escape((__stack.lineno=25,  i18n.t('reset:passwordPlaceholder') )), '\n                    </label>\n                    <div class="a0-input-box">\n                      <i class="a0-icon-budicon"></i>\n                      <input name="password"\n                           id="a0-reset_easy_password"\n                           type="password"\n                           value=""\n                           placeholder="', escape((__stack.lineno=33,  i18n.t('reset:passwordPlaceholder') )), '"\n                           title="', escape((__stack.lineno=34,  i18n.t('reset:passwordPlaceholder') )), '">\n                    </div>\n                </div>\n                <div class="a0-repeatPassword">\n                    <label for="a0-reset_easy_repeat_password" class="a0-sad-placeholder">\n                      ', escape((__stack.lineno=39,  i18n.t('reset:repeatPasswordPlaceholder') )), '\n                    </label>\n                    <div class="a0-input-box">\n                      <i class="a0-icon-budicon"></i>\n                      <input name="repeat_password"\n                           id="a0-reset_easy_repeat_password"\n                           type="password" value=""\n                           placeholder="', escape((__stack.lineno=46,  i18n.t('reset:repeatPasswordPlaceholder') )), '"\n                           title="', escape((__stack.lineno=47,  i18n.t('reset:repeatPasswordPlaceholder') )), '">\n                    </div>\n                </div>\n\n            </div>\n\n            <div class="a0-action">\n                <button type="submit" class="a0-primary a0-next" style="width: 100%;">', escape((__stack.lineno=54,  i18n.t('reset:action') )), '</button>\n                <div class="a0-options">\n                    <a href="javascript: {}" class="a0-centered a0-cancel">', escape((__stack.lineno=56,  i18n.t('reset:cancelAction') )), '</a>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>');
return buf.join('');})() + '\n\n    <div class=\'a0-footer\'>\n\n        <a href="http://auth0.com" target="_new" class="a0-logo">\n            <i class="a0-icon-badge"></i>\n        </a>\n    </div>\n</div>');
return buf.join('');})() + '\n    </div>\n</div>\n'); })();
} 
return buf.join('');
} catch (err) {
  rethrow(err, __stack.input, __stack.filename, __stack.lineno);
}
})
},{}],50:[function(require,module,exports){
var global=typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};require('../lib/insert-css');

var Auth0       = require('auth0-js');
var _           = require('underscore');
var strategies  = require('./js/strategies');
var mainTmpl    = require('./html/main.ejs');
var embTmpl     = require('./html/main_embedded.ejs');
var buttonTmpl  = require('./html/button.ejs');

var EventEmitter = require('events').EventEmitter;

var loggedinBtnTmpl      = require('./html/loggedin_button.ejs');
var loginActionsTmpl     = require('./html/login_actions.ejs');
var i18n                 = require('../i18n');

var email_parser = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

var signup = require('./modes/signup');
var reset = require('./modes/reset');

var $ = require('./js/bonzo_qwery');
var is_small_screen = require('./js/is_small_screen');
var get_viewport = require('./js/get_viewport');

//browser incompatibilities fixes
var placeholderSupported = require('./pf/placeholderSupported');
var object_create = require('./pf/Object.create');
var transition_end = require('./pf/transition_end');
var utils = require('./pf/utils');
var has_animations = require('./pf/has_animations');

function hasTransitions (el) {
  //defer this. prevent errors if the script is placed on the <head>
  return require('has-transitions')(el);
}

function setfocus (el) {
  if (is_small_screen()) return;
  try{ el.focus(); } catch(er) {}
}

function animation_shake() {
  $('.a0-panel')
    .removeClass('a0-swing')
    .addClass('a0-errors')
    .addClass('a0-animated a0-shake');
}

function animation_shake_reset() {
  $('.a0-animated').removeClass('a0-animated');
  $('.a0-shake').removeClass('a0-shake');
}

function Auth0Widget (options) {
  if (!(this instanceof Auth0Widget)) {
    return new Auth0Widget(options);
  }

  this._dict = i18n.getDict(options.dict);

  this._options = options;
  this._strategies = strategies;
  this._auth0 = new Auth0({
    clientID:     this._options.clientID,
    callbackURL:  this._options.callbackURL,
    domain:       this._options.domain,
    callbackOnLocationHash: this._options.callbackOnLocationHash
  });

  if (!this._options.assetsUrl) {
    // use domain as assetsUrl if domain is not *.auth0.com
    this._options.assetsUrl = this._isAuth0Domain() ?
      'https://s3.amazonaws.com/assets.auth0.com/' :
      'https://' + this._options.domain + '/';
  }

  if (!this._options.cdn) {
    // use domain as cdn if domain is not *.auth0.com
    this._options.cdn = this._isAuth0Domain() ?
      'https://d19p4zemcycm7a.cloudfront.net/w2/' :
      'https://' + this._options.domain + '/w2/';
  }

  this._getApp();

  EventEmitter.call(this);
  var self = this;
}

Auth0Widget.prototype = object_create(EventEmitter.prototype);

// helper methods
Auth0Widget.prototype._getApp = function () {
  var self = this;
  global.window.Auth0 = global.window.Auth0 || {};
  global.window.Auth0.setClient = function (client) {
    self._client = client;
    self.emit('client_initialized', client);
  };

  var script = document.createElement('script');
  script.src = this._options.assetsUrl +
               'client/' + this._options.clientID + '.js' +
               '?t' + (+new Date); //Date.now() doesnt work on ie.

  var firstScript = document.getElementsByTagName('script')[0];
  firstScript.parentNode.insertBefore(script, firstScript);
};

Auth0Widget.prototype._isAuth0Domain = function () {
  var domainUrl = utils.parseUrl('https://' + this._options.domain);
  return utils.endsWith(domainUrl.hostname, '.auth0.com');
};

Auth0Widget.prototype._ignoreEmailValidations = function (input) {
  return input.attr('type') !== 'email';
};

Auth0Widget.prototype._setCustomValidity = function (input, message) {
  if (!input) return;
  if (input.setCustomValidity) {
    input.setCustomValidity(message);
  }
  // TODO: support setCustomValidity in IE9
};

Auth0Widget.prototype._showError = function (error) {

  // if no error, clean
  if (!error) {
    // reset errors
    $('.a0-error').html('').addClass('a0-hide');
    $('.a0-errors').removeClass('a0-errors');
    // reset animations
    return animation_shake_reset();
  }

  // else, show and render error message
  setTimeout(animation_shake, 0);

  $('.a0-success').addClass('a0-hide');
  $('.a0-error').html(error).removeClass('a0-hide');
  this.emit('_error', error);
};

Auth0Widget.prototype._showSuccess = function (message) {
  // if no message, clean success span
  if (!message) return $('.a0-success').html('').addClass('a0-hide');
  // else, show and render success message
  $('.a0-error').addClass('a0-hide');
  $('.a0-success').html(message).removeClass('a0-hide');
};

Auth0Widget.prototype._focusError = function(input, message) {
  // remove all `_focusError` resources
  if (!arguments.length) {
    // reset errors
    $('.a0-errors').removeClass('a0-errors');
    $('.a0-error-input').removeClass('a0-error-input');
    $('.a0-error-message').remove();
    // reset animations
    return animation_shake_reset();;
  }

  // animation
  setTimeout(animation_shake, 0);

  input
    .parent()
    .addClass('a0-error-input')

  if (!message) return;
  input.parent()
    .append($.create('<span class="a0-error-message">' + message + '</span>'));
};

Auth0Widget.prototype._setTitle = function(title) {
  // $('.a0-error').css('display', 'none');
  // $('.a0-success').css('display', 'none');
  $('h1').html(title).css('display', '');
};

Auth0Widget.prototype._areThereAnySocialConn = function () {
  return !!_.findWhere(this._client.strategies, {social: true});
};

Auth0Widget.prototype._areThereAnyEnterpriseOrDbConn = function() {
  return !!_.findWhere(this._client.strategies, {social: false});
};

Auth0Widget.prototype._areThereAnyDbConn = function() {
  return !!_.findWhere(this._client.strategies, {userAndPass: true});
};

Auth0Widget.prototype._isEnterpriseConnection = function (email, output) {
  var emailM = email_parser.exec(email.toLowerCase());

  if (!emailM) return false;

  var email_domain = emailM.slice(-2)[0];

  var conn = _.chain(this._client.strategies)
              .where({userAndPass: undefined})
              .pluck('connections')
              .flatten()
              .findWhere({domain: email_domain})
              .value();

  if (conn && output) {
    output.domain = conn.domain;
  }

  return !!conn;
};

Auth0Widget.prototype._getConfiguredStrategy = function (name) {
  return _.findWhere(this._client.strategies, {name: name});
};

Auth0Widget.prototype._getStrategy = function (connName) {
  return _.chain(this._client.strategies)
          .filter(function (s) {
            return _.findWhere(s.connections, {name: connName});
          }).value()[0];
};

Auth0Widget.prototype._getAuth0Connection = function(userName) {
  // if specified, use it, otherwise return first
  if (this._signinOptions['userPwdConnectionName']) {
    return _.chain(this._auth0Strategies)
            .pluck('connections')
            .flatten()
            .findWhere({name: this._signinOptions['userPwdConnectionName']})
            .value();
  }

  var domain = userName && ~userName.indexOf('@') ? userName.split('@')[1] : '';

  if (userName && domain && this._client.strategies) {
    //there is still a chance that the connection might be
    //adldap and with domain
    var conn = _.chain(this._client.strategies)
                .pluck('connections')
                .flatten()
                .findWhere({domain: domain})
                .value();
    if (conn) {
      return conn;
    }
  }

  // By default, if exists, return auth0 connection (db-conn) or first
  var defaultStrategy = _.findWhere(this._auth0Strategies, { name: 'auth0' });
  defaultStrategy = defaultStrategy || (this._auth0Strategies.length > 0 ? this._auth0Strategies[0] : null);

  return defaultStrategy && defaultStrategy.connections.length > 0 ?
         defaultStrategy.connections[0] : null;
};

Auth0Widget.prototype._showOrHidePassword = function () {
  var mailField = $('.a0-notloggedin .a0-email input');
  var pwdField  = $('.a0-notloggedin .a0-password input').first();

  var isEnterpriseConnection = this._isEnterpriseConnection(mailField.val() || '');

  if (isEnterpriseConnection) {
    pwdField.attr('disabled', true);
    // pwdField.removeAttr('required');
  } else {
    pwdField.removeAttr('disabled');
    // pwdField.attr('required', true);
  }
};

Auth0Widget.prototype._hideSignIn = function (cb) {
  var self = this;
  this._currentPane = null;
  this._node = null;

  $('div.a0-overlay').removeClass('a0-active');

  setTimeout(function () {
    $().removeClass('a0-mode-signin');
    $().css('display', 'none');
    if (cb) cb();
    self.emit('closed');
  }, 500);

  return self;
};

Auth0Widget.prototype._getActiveLoginView = function() {
  var container = this._currentPane.hasClass('a0-loggedin') ?
                    $('.a0-loggedin') :
                    $('.a0-notloggedin');
  return container;
};

Auth0Widget.prototype._showSignUpExperience = function() {
  signup.bind(this);
  this._setLoginView({ mode: 'signup' });
};

Auth0Widget.prototype._showResetExperience = function() {
  reset.bind(this);
  this._setLoginView({ mode: 'reset' });
};

Auth0Widget.prototype._showLoadingExperience = function() {
  if (this._openWith) {
    return this._setLoginView({ mode: 'loading', title: this._openWith.toLowerCase() });
  }
  this._setLoginView({ mode: 'loading' });
};

Auth0Widget.prototype._transitionMode = function(options, callback) {
  var self = this;
  $('.a0-loading').removeClass('a0-with-message');

  if((!self._currentPane || self._currentPane.hasClass('a0-loading')) && options.mode === 'loading') {
    self._setTitle(options.title ? this._dict.t(options.title + ':title') : this._dict.t('signin:title'));
    self._currentPane = $('.a0-loading');
    self.emit('transition_mode', 'loading');
    self.emit('loading_ready');
    return callback(null, self._currentPane);
  }

  self._currentPane = self._currentPane || $('.a0-loading');
  options = options || {};

  var currentEmail = $('.a0-email input', self._currentPane).val();
  var mode = options.mode || null;
  var newPane, title;

  switch (mode) {
    case null:
      title = this._dict.t('signin:title');
      newPane = $(options.isReturningUser ? '.a0-loggedin' : '.a0-notloggedin');
      if (self._currentPane.hasClass('a0-reset') || self._currentPane.hasClass('a0-loading')) {
        // reset password field
        $('.a0-password input', newPane).val('');
      }
      break;
   case 'loading':
      title = options.title ? this._dict.t(options.title + ':title') : this._dict.t('signin:title');
      newPane = $('.a0-loading').first();

      // set loading message
      if (options.message) {
        newPane.addClass('a0-with-message');
        $('.a0-spin-message span', newPane).html(options.message.replace('-', ' '));
      }
      break;
    case 'signup':
    case 'reset':
      title = this._dict.t(options.mode + ':title');
      newPane = $('.a0-' + options.mode).first();
      $('.a0-email input', newPane).val(currentEmail || '');
      break;
  }

  if (!hasTransitions() || !hasTransitions($('#a0-onestep')[0])){
    self._setTitle(title);
    self._currentPane.toggleClass('a0-hide', true);
    self._currentPane = newPane.toggleClass('a0-hide', false);
    setTimeout(function () {
      self.emit('transition_mode', mode || 'signin');
      self.emit((mode || 'signin') + '_ready');
    }, 0);
    return callback(null, self._currentPane);
  }

  var pane_container = $('.a0-onestep');
  var original_height = pane_container
                          .addClass('a0-disable-transition')
                          .css('height', 'auto')
                          .dim().height;

  pane_container.css('min-height', original_height.toString() + 'px');

  //do not hide yet
  self._currentPane
      .css('position', 'absolute')
      .css('left', '-1000px');

  newPane
    .toggleClass('a0-hide', false)
    .css('visibility', 'hidden');

  pane_container.css('min-height', '');

  var new_height = pane_container.dim().height;

  pane_container.css('min-height', original_height.toString() + 'px');

  newPane.css('visibility', '').toggleClass('a0-hide', true);

  self._currentPane
      .css('position', '')
      .css('left', '')
      .toggleClass('a0-hide', false);

  pane_container
    .css('height', original_height.toString() + 'px')
    .css('min-height', '');

  setTimeout(function () {
    pane_container.removeClass('a0-disable-transition');
    setTimeout(function () {
      if (!pane_container[0]) return;
      transition_end.on(pane_container[0], function () {
        if (!pane_container[0]) return;
        transition_end.off(pane_container[0]);
        self._setTitle(title);
        self._currentPane.toggleClass('a0-hide', true);
        self._currentPane = newPane.toggleClass('a0-hide', false);
        setTimeout(function () {
          self.emit('transition_mode', mode || 'signin');
          self.emit((mode || 'signin') + '_ready');
          callback(null, self._currentPane);
        }, 10);
      });
      pane_container.css('height', new_height.toString() + 'px');
      if (new_height >= get_viewport().height) pane_container.addClass('a0-equal-viewport');
    }, 10);
  }, 10);
};

Auth0Widget.prototype._setLoginView = function(options, callback) {
  var self = this;
  this._transitionMode(options, function (err, currentPane) {
    if (!self._signinOptions._avoidInitialFocus) setfocus($('input', currentPane).first());
    if (callback) callback();
  });
};

Auth0Widget.prototype._getLoggedInAuthParams = function (strategy, ssoData) {
  switch (strategy) {
    case 'google-oauth2':
      return {login_hint:ssoData.lastUsedUsername};
    default:
      return {};
  }
};

Auth0Widget.prototype._showLoggedInExperience = function() {
  var self = this;
  var strategy_name = this._ssoData.lastUsedConnection.strategy;
  var strategy = this._strategies[strategy_name];

  if (!strategy) return;

  var loginView = $('.a0-loggedin');

  $('form', loginView).a0_on('submit', function (e) {
    self._signInEnterprise(e);
  });

  var button = $.create(loggedinBtnTmpl({
    name: strategy_name,
    title: strategy.title,
    css: strategy.css,
    imageicon: strategy.imageicon,
    username: this._ssoData.lastUsedUsername
  }));

  $('.a0-last-time').html(this._dict.t('signin:returnUserLabel'));

  $('.a0-strategy div', loginView).remove();

  $('.a0-strategy', loginView)
    .append(button);

  $('.a0-strategy .a0-zocial[data-strategy]', loginView).a0_on('click', function (e) {
    e.preventDefault();
    self._signInSocial(
      strategy_name,
      self._ssoData.lastUsedConnection && self._ssoData.lastUsedConnection.name,
      self._getLoggedInAuthParams(strategy_name, self._ssoData));
  });

  $('.a0-all', loginView).a0_on('click', function () {
    self._setLoginView();
  });

  this._setLoginView({ isReturningUser: !!strategy });
};

Auth0Widget.prototype._showAdInDomainExperience = function() {
  var self = this;
  var connection = this._ssoData.connection;
  //this could be ad or auth0-adldap
  var strategy_name = this._ssoData.strategy;
  var strategy = this._strategies[strategy_name];

  if (!strategy) return;

  var loginView = $('.a0-loggedin');

  $('form', loginView).a0_on('submit', function (e) {
    self._signInEnterprise(e);
  });

  var button = $.create(buttonTmpl({
    use_big_buttons: true,
    name: strategy_name,
    title: this._dict.t('windowsAuthTitle').replace('{connection}', connection),
    css: strategy.css,
    imageicon: strategy.imageicon,
  }));

  $('.a0-last-time').html(this._dict.t('signin:domainUserLabel'));

  $('.a0-strategy div', loginView).remove();

  $('.a0-strategy', loginView)
    .append(button);

  $('.a0-strategy .a0-zocial[data-strategy]', loginView).a0_on('click', function (e) {
    e.preventDefault();
    self._signInSocial(strategy_name, connection);
  });

  $('.a0-all', loginView).a0_on('click', function () {
    self._setLoginView();
  });

  this._setLoginView({ isReturningUser: !!strategy });
};

// sign in methods
Auth0Widget.prototype._signInSocial = function (e, connection, extraParams) {
  var target = e.currentTarget || e.delegateTarget || e.target || e;
  var self = this;
  var strategyName = typeof target === 'string' ? target : target.getAttribute('data-strategy');
  var strategy = this._getConfiguredStrategy(strategyName);

  var connection_name = connection || strategy.connections[0].name;
  if (strategy) {
    var loginOptions = _.extend({}, {
      connection: connection_name,
      popup: self._signinOptions.popup,
      popupOptions: self._signinOptions.popupOptions
    }, self._signinOptions.extraParameters, extraParams);
    this._auth0.login(loginOptions);
  }
};

Auth0Widget.prototype._signInEnterprise = function (e) {
  e.preventDefault();
  e.stopPropagation();


  var self = this;
  var container = this._getActiveLoginView();
  var form = $('form', container);
  var valid = true;

  var emailD = $('.a0-email', form);
  var password_input = $('input[name=password]', form);
  var password_empty = /^\s*$/.test(password_input.val());
  var password_disabled = password_input.attr('disabled');
  var password_required = self._signinOptions.showEmail && self._signinOptions.showPassword && self._areThereAnyDbConn();
  var email_input = $('input[name=email]', form);
  var email_parsed = email_parser.exec(email_input.val().toLowerCase());
  var email_empty = /^\s*$/.test(email_input.val());
  var email = null, domain, connection, has_errors = false;

  // Clean error container
  this._showError();
  this._focusError();

  if (!this._ignoreEmailValidations(email_input)) {

    if (email_empty) {
      this._focusError(email_input);
      has_errors = true;
    }

    if (!email_parsed && !email_empty) {
      this._focusError(email_input, this._dict.t('invalid'));
      has_errors = true;
    }
  }

  if (password_empty && password_required && !password_disabled) {
    this._focusError(password_input);
    has_errors = true;
  };

  if (has_errors) return;

  var input_email_domain = email_parsed ? email_parsed.slice(-2)[0] : undefined;

  var conn_obj = _.chain(this._client.strategies)
    .where({userAndPass: undefined})
    .pluck('connections')
    .flatten()
    .findWhere({domain: input_email_domain})
    .value();

  if (conn_obj) {
    domain = conn_obj.domain;
    email = email_input.val();
    connection = conn_obj.name;
  } else {
    if (this._auth0Strategies.length > 0) {
      return this._signInWithAuth0(email_input.val());
    }

    if (input_email_domain === 'gmail.com') {
      return this._signInSocial('google-oauth2');
    }

    this._showError(
      this._dict.t('signin:strategyDomainInvalid')
          .replace('{domain}', input_email_domain));
    this._focusError(email_input);
  }

  valid &= (!domain && !emailD.addClass('a0-invalid')) || (!!domain && !!emailD.removeClass('a0-invalid'));

  if (valid) {
    var loadingMessage = self._dict.t('signin:loadingMessage').replace('{connection}', connection);
    this._setLoginView({ mode: 'loading', message: loadingMessage }, function () {
      var loginOptions = _.extend({}, {
        connection: connection,
        popup: self._signinOptions.popup,
        popupOptions: self._signinOptions.popupOptions
      }, self._signinOptions.extraParameters);
      self._auth0.login(loginOptions);
    });
  }
};

Auth0Widget.prototype._signInWithAuth0 = function (userName, signInPassword) {
  var self = this;
  var container = this._getActiveLoginView();
  var connection  = this._getAuth0Connection(userName);
  var email_input = $('input[name=email]', container);
  var password_input = $('input[name=password]', container);

  var loginOptions = {
    connection: connection.name,
    username: connection.domain ?
                userName.replace('@' + connection.domain, '') :
                userName,
    password: signInPassword || $('.a0-password input', container).val(),
    popup: self._signinOptions.popup,
    popupOptions: self._signinOptions.popupOptions
  };

  loginOptions = _.extend({}, loginOptions, self._signinOptions.extraParameters);

  var strategy = self._getStrategy(connection.name) || {};
  var loadingMessage = strategy.name !== 'auth0' ? // dont show loading message for dbConnections
    self._dict.t('signin:loadingMessage').replace('{connection}', connection.name) : '';

  // Clean error container
  self._showError();
  self._focusError();
  if (self._signinOptions.popup) {
    return self._auth0.login(loginOptions, function (err) {
      if (err) {
        if (err.status !== 401) return self._showError(self._dict.t('signin:serverErrorText'));

        // self._showError(self._dict.t('signin:wrongEmailPasswordErrorText'));
        self._focusError(email_input);
        self._focusError(password_input);
      }
    });
  }

  this._setLoginView({ mode: 'loading', message: loadingMessage }, function (){
    self._auth0.login(loginOptions, function (err) {
      if (err) {
        self._setLoginView({}, function () {
          if (err.status !== 401) return self._showError(self._dict.t('signin:serverErrorText'));

          // self._showError(self._dict.t('signin:wrongEmailPasswordErrorText'));
          self._focusError(email_input);
          self._focusError(password_input);
        });
      }
    });
  });
};

// initialize
Auth0Widget.prototype._initialize = function (cb) {
  var self = this;
  $().addClass('a0-mode-signin');

  // wait for setClient()
  if (!self._client) {
    var args  = arguments;
    var setClient = global.window.Auth0.setClient;

    global.window.Auth0.setClient = function () {
      setClient.apply(this, arguments);
      self._initialize.apply(self, args);
    };

    return;
  }

  // buttons actions
  $('.a0-onestep a.a0-close').a0_on('click', function () { self._hideSignIn(); });
  $('.a0-notloggedin form').a0_on('submit', function (e) { self._signInEnterprise(e); });
  $('').a0_on('keyup', function (e) {
    if ((e.which == 27 || e.keycode == 27) && !self._signinOptions.standalone) {
      self._hideSignIn(); // close popup with ESC key
    }
  });

  if (self._client.subscription && !~['free', 'dev'].indexOf(self._client.subscription)) {
    // hide footer for non free/dev subscriptions
    $('.a0-footer').toggleClass('a0-hide', true);
    $('.a0-free-subscription').removeClass('a0-free-subscription');
  }

  // images from cdn
  // $('.a0-header a.a0-close').css('background-image', 'url(' + self._signinOptions.cdn + 'img/close.png)');

  // labels text
  var options = _.extend({}, this._signinOptions, this._signinOptions.resources);
  options['showEmail'] = typeof options['showEmail'] !== 'undefined' ? options['showEmail'] : true;
  options['showPassword'] = typeof options['showPassword'] !== 'undefined' ? options['showPassword'] : true;
  options['enableReturnUserExperience'] = typeof options['enableReturnUserExperience'] !== 'undefined' ? options['enableReturnUserExperience'] : true;
  options['enableADRealmDiscovery'] = typeof options['enableADRealmDiscovery'] !== 'undefined' ? options['enableADRealmDiscovery'] : true;

  this._signinOptions = options;

  // activate panel
  $('div.a0-panel').removeClass('a0-active');
  $('div.a0-overlay').addClass('a0-active');
  $('div.a0-panel.a0-onestep').addClass('a0-active');

  if (self._signinOptions.container) {
    $('div.a0-active').removeClass('a0-overlay');
  }

  $('.a0-popup h1').html(this._dict.t('signin:title'));
  $('.a0-popup .a0-invalid').removeClass('a0-invalid');

  $('div.a0-panel.a0-onestep h1').html(this._signinOptions['title']);

  if (self._signinOptions.connections) {
    self._client.strategies = _.chain(self._client.strategies)
                                .map(function (s) {
                                  s.connections = _.filter(s.connections, function (c) {
                                    return _.contains(self._signinOptions.connections, c.name);
                                  });
                                  return s;
                                }).filter(function (s) {
                                  return s.connections.length > 0;
                                }).value();
  }


  // merge strategies info
  for (var s = 0; s < self._client.strategies.length; s++) {
    var strategy_name = self._client.strategies[s].name;
    self._client.strategies[s] = _.extend({}, self._client.strategies[s], self._strategies[strategy_name]);
  }

  self._auth0Strategies = _.chain(self._client.strategies)
                            .filter(function (s) { return s.userAndPass && s.connections.length > 0; })
                            .value();

  var auth0Conn = this._getAuth0Connection() || {};
  if (self._openWith === 'SignUp' && !auth0Conn.showSignup && !self._signinOptions.signupLink) self._openWith = null;
  if (self._openWith === 'Reset' && !auth0Conn.showForgot && !self._signinOptions.forgotLink) self._openWith = null;

  // show loading
  self._showLoadingExperience();

  function finish(err, ssoData){
    self._ssoData = ssoData;
    if (self._openWith) {
      return self['_show' + self._openWith + 'Experience']();
    }
    self._resolveLoginView();
    if (cb && typeof cb === 'function') cb();
  }

  var is_any_ad = _.some(self._client.strategies, function (s) {
    return (s.name === 'ad' || s.name === 'auth0-adldap') &&
            s.connections.length > 0;
  });

  // get SSO data
  if (this._signinOptions.enableReturnUserExperience === false && (!is_any_ad || self._openWith || this._signinOptions.enableADRealmDiscovery === false)) {
    finish(null, {});
  } else {
    self._auth0.getSSOData(is_any_ad, finish);
  }
};

Auth0Widget.prototype._resolveLoginView = function () {
  var self = this;

  var use_big_buttons = this._signinOptions['socialBigButtons'] || !this._areThereAnyEnterpriseOrDbConn();

  // load social buttons
  var list = $('.a0-notloggedin .a0-iconlist');
  var socialStrategies = _.chain(self._client.strategies).where({social: true});

  if (self._signinOptions.connections) {
    // sort social strategies based on options.connections array order
    var connections = self._signinOptions.connections;
    socialStrategies = socialStrategies.map(function (s) {
      var n = connections.indexOf(s.connections[0].name);
      connections[n] = '';
      return [n, s];
    }).sort().map(function (x) { return x[1]; });
  }

  socialStrategies
    .map(function (s) { return  _.extend({}, s, {use_big_buttons: use_big_buttons}); })
    .each(function (s) { return list.append(buttonTmpl(s)); });

  if (_.where(self._client.strategies, {social: true}).length > 0) {
    $('.a0-notloggedin .a0-separator, .a0-notloggedin .a0-iconlist').toggleClass('a0-hide', false);
  }

  $('.a0-notloggedin .a0-email input').a0_on('input', function (e) {
    self._showOrHidePassword(e);
  });

  $('.a0-zocial[data-strategy]', list).a0_on('click', function (e) {
    self._signInSocial(e);
  });

  // show signup/forgot links
  var auth0Conn = this._getAuth0Connection() || {};
  var actions = $.create(loginActionsTmpl({
    showSignup: (this._signinOptions.showSignup !== false) && ((auth0Conn && auth0Conn.showSignup) || this._signinOptions.signupLink),
    showForgot: (this._signinOptions.showForgot !== false) && ((auth0Conn && auth0Conn.showForgot) || this._signinOptions.forgotLink),
    i18n: this._dict,
    signupLink: this._signinOptions.signupLink,
    forgotLink: this._signinOptions.forgotLink
  }));

  // username_style
  var auth0ConnStrategy = this._getStrategy(auth0Conn.name) || {};

  if (!this._signinOptions.username_style &&
      (auth0ConnStrategy.name === 'ad' || auth0ConnStrategy.name === 'auth0-adldap')) {
    this._signinOptions.username_style = 'username';
  }

  if (this._signinOptions.username_style === 'username') {
    // set username mode
    var placeholder = this._dict.t('signin:usernamePlaceholder');
    $('.a0-notloggedin .a0-email input')
      .attr('type', 'text')
      .attr('title', placeholder)
      .attr('placeholder', placeholder);

    $('.a0-notloggedin .a0-email label').text(placeholder);
  }

  $('.a0-db-actions').append(actions);

  var signup_btn = $('.a0-sign-up');
  if (!this._signinOptions.signupLink && signup_btn.length > 0) {
    signup_btn.a0_on('click', function (e) {
      self._showSignUpExperience(e);
    });
  }

  if (!this._signinOptions.forgotLink) {
    $('.a0-forgot-pass').a0_on('click', function (e) {
      self._showResetExperience(e);
    });
  }

  $('.a0-panel input').val('');

  $('.a0-panel .a0-signup .a0-email input').a0_on('input', function() {
    var output = {};
    if (self._isEnterpriseConnection(this.value, output)) {
      var warningText = self._dict.t('signup:enterpriseEmailWarningText').replace(/{domain}/g, output.domain);
      // self._setCustomValidity(this, warningText);
    } else {
      // self._setCustomValidity(this, '');
    }
  });

  $('.a0-panel .a0-options .a0-cancel').a0_on('click', function () {
    self._setLoginView();
  });

  // show email, password, separator and button if there are enterprise/db connections
  var anyEnterpriseOrDbConnection = self._areThereAnyEnterpriseOrDbConn();
  var anySocialConnection = self._areThereAnySocialConn();
  var anyDbConnection = self._areThereAnyDbConn();

  $('.a0-panel .a0-email input').toggleClass('a0-hide', !(self._signinOptions.showEmail && anyEnterpriseOrDbConnection));
  $('.a0-panel .a0-zocial.a0-primary').toggleClass('a0-hide', !(self._signinOptions.showEmail && anyEnterpriseOrDbConnection));
  $('.a0-panel .a0-password').toggleClass('a0-hide', !(self._signinOptions.showEmail && self._signinOptions.showPassword && anyDbConnection));
  $('.a0-panel .a0-separator').toggleClass('a0-hide', !(self._signinOptions.showEmail && anyEnterpriseOrDbConnection && anySocialConnection));

  $('.a0-panel .a0-inputs').toggleClass('a0-hide', !anyEnterpriseOrDbConnection);
  $('.a0-panel .a0-action').toggleClass('a0-hide', !anyEnterpriseOrDbConnection);

  if (is_small_screen()) {
    var collapse_onfocus = require('./js/collapse_onfocus');
    collapse_onfocus.hook($('.a0-notloggedin form input'), $('.a0-collapse-social'));
  }

  // if user in AD ip range
  if (self._ssoData && self._ssoData.connection) {
    self._showAdInDomainExperience();
    return;
  } else {
    // if user logged in show logged in experience
    if (self._ssoData.sso && self._signinOptions['enableReturnUserExperience']) {
      self._showLoggedInExperience();
      return;
    }
  }


  self._setLoginView({ isReturningUser: self._ssoData.sso && self._signinOptions['enableReturnUserExperience'] !== false});
};

Auth0Widget.prototype._getEmbededTemplate = function (signinOptions) {
  return signinOptions.chrome ?
    mainTmpl({
      expand:       true, // cover the entire container
      i18n:         this._dict,
      options:      signinOptions,
      alt_spinner:  !has_animations() ? (signinOptions.cdn + 'img/ajax-loader.gif') : null
    }) :
    embTmpl({
      embedded:     true,
      i18n:         this._dict,
      options:      signinOptions,
      alt_spinner:  !has_animations() ? (signinOptions.cdn + 'img/ajax-loader.gif') : null
    });
};

Auth0Widget.prototype.getClient = function () {
  return this._auth0;
};

Auth0Widget.prototype.parseHash = function (hash) {
  return this._auth0.parseHash(hash);
};

Auth0Widget.prototype.getProfile = function (token, callback) {
  this._auth0.getProfile(token, callback);
};

Auth0Widget.prototype.reset = function (signinOptions, callback) {
  this._openWith = 'Reset';
  var self = this;
  $(function () {
    self._show(signinOptions, callback);
  });
  return self;
};

Auth0Widget.prototype.signup = function (signinOptions, callback) {
  this._openWith = 'SignUp';
  var self = this;
  $(function () {
    self._show(signinOptions, callback);
  });
  return self;
};

Auth0Widget.prototype.show = Auth0Widget.prototype.signin = function (signinOptions, callback) {
  this._openWith = null;
  var self = this;
  $(function () {
    self._show(signinOptions, callback);
  });
  return self;
};

Auth0Widget.prototype._show = function (signinOptions, callback) {
  if (typeof signinOptions === 'function') {
    callback = signinOptions;
    signinOptions = {};
  }

  var self = this;

  self._signinOptions = _.extend({}, self._options, signinOptions);

  var extra = utils.extract(self._signinOptions,
                            [ 'state', 'access_token',
                              'scope', 'protocol',
                              'request_id' ]);

  self._signinOptions.extraParameters = _.extend({}, extra, self._signinOptions.extraParameters);

  // widget container
  if (self._signinOptions.container) {
    self._signinOptions.theme = 'static';
    self._signinOptions.standalone = true;
    self._signinOptions.top = true;

    var specifiedContainer = document.getElementById(self._signinOptions.container);
    specifiedContainer.innerHTML = self._getEmbededTemplate(self._signinOptions);
  } else {
    // remove widget container (if exist)
    $().parent().remove();

    var div = document.createElement('div');
    div.innerHTML = mainTmpl({
      i18n:    this._dict,
      options: self._signinOptions,
      alt_spinner: !has_animations() ? (self._signinOptions.cdn + 'img/ajax-loader.gif') : null
    });
    document.body.appendChild(div);

    if (!~$('.a0-overlay').css('background-image').indexOf("radial") &&
          !~navigator.appVersion.indexOf("MSIE 10")) {
      $('.a0-overlay').addClass('a0-ie8-overlay');
    }
  }

  self._node = $()[0];

  if (!placeholderSupported) {
    $('.a0-overlay').addClass('a0-no-placeholder-support');
  }

  self._initialize(callback);

  return self;
};

Auth0Widget.prototype.logout = function (query) {
  this._auth0.logout(query);
};

module.exports = Auth0Widget;

},{"../i18n":7,"../lib/insert-css":16,"./html/button.ejs":45,"./html/loggedin_button.ejs":46,"./html/login_actions.ejs":47,"./html/main.ejs":48,"./html/main_embedded.ejs":49,"./js/bonzo_qwery":51,"./js/collapse_onfocus":52,"./js/get_viewport":53,"./js/is_small_screen":54,"./js/strategies":56,"./modes/reset":57,"./modes/signup":58,"./pf/Object.create":59,"./pf/has_animations":60,"./pf/placeholderSupported":61,"./pf/transition_end":62,"./pf/utils":63,"auth0-js":20,"events":37,"has-transitions":41,"underscore":43}],51:[function(require,module,exports){
var qwery       = require('qwery');
var bonzo       = require('bonzo');
var domready = require('domready');
var bean        = require('bean');

bonzo.aug({
  a0_on: function (event, handler) {
    return this.each(function (el) {
      bean.on(el, event, handler);
    });
  },
  a0_off: function (event, handler) {
    return this.each(function (el) {
      bean.off(el, event, handler);
    });
  }
});

module.exports = function (selector, root) {
  if (typeof selector === 'function') {
    return domready(selector);
  }
  return bonzo(qwery('#a0-widget ' + (selector || ''), root));
};

module.exports.create = function (html) {
  return bonzo.create(html);
};
},{"bean":34,"bonzo":35,"domready":40,"qwery":42}],52:[function(require,module,exports){
var $ = require('./bonzo_qwery');

module.exports.hook = function (inputs, collapsible) {
  var timeoutId;

  function on_blur() {
    timeoutId = setTimeout(function () {
      collapsible.show();
      $('.a0-header').show();
    }, 5);
  }

  function on_focus () {
    clearTimeout(timeoutId);
    collapsible.hide();
    $('.a0-header').hide();
  }

  inputs
    .a0_off('blur.collapse_onfocus')
    .a0_on('blur.collapse_onfocus', on_blur)
    .a0_off('focus.collapse_onfocus')
    .a0_on('focus.collapse_onfocus', on_focus)
    .a0_off('touchstart.ts_collapse_onfocus')
    .a0_on('touchstart.ts_collapse_onfocus', function (e) {
      setTimeout(function () {
        e.target.focus();
      }, 500);
    });
};
},{"./bonzo_qwery":51}],53:[function(require,module,exports){
/**
 * Expose `get_viewport`
 */

module.exports = get_viewport;

/**
 * Get window viewport `height` and `width`
 *
 * @return {Object} `width` and `height` properties
 * @api public
 */

function get_viewport() {
  return {
    width: Math.max(document.body.clientWidth, window.innerWidth || 0),
    height: Math.max(document.body.clientHeight, window.innerHeight || 0)
  }
}
},{}],54:[function(require,module,exports){
module.exports = function () {
  return window.matchMedia && !window.matchMedia( "(min-width: 340px)" ).matches;
};
},{}],55:[function(require,module,exports){
/**
 * Module dependencies.
 */

var r = module.exports;

// Check for a valid email address
r.email_parser = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

// check for an empty form value
r.empty = /^\s*$/;

},{}],56:[function(require,module,exports){
module.exports = {
    'google-openid': {
        css: 'google',
        title: 'Google OpenId',
        social: true
    },
    'google-apps': {
        css: 'google',
        title: 'Google Apps',
        social: false
    },
    'google-oauth2': {
        css: 'googleplus',
        title: 'Google',
        social: true
    },
    'facebook': {
        css: 'facebook',
        title: 'Facebook',
        social: true
    },
    'windowslive': {
        css: 'windows',
        title: 'Microsoft Account',
        social: true
    },
    'linkedin': {
        css: 'linkedin',
        title: 'LinkedIn',
        social: true
    },
    'github': {
        css: 'github',
        title: 'GitHub',
        social: true
    },
    'paypal': {
        css: 'paypal',
        title: 'PayPal',
        social: true
    },
    'twitter': {
        css: 'twitter',
        title: 'Twitter',
        social: true
    },
    'amazon': {
        css: 'amazon',
        title: 'Amazon',
        social: true
    },
    'vkontakte': {
        css: 'vk',
        title: 'vKontakte',
        social: true
    },
    'yandex': {
        css: 'yandex',
        title: 'Yandex',
        social: true
    },
    'office365': {
        css: 'office365',
        title: 'Office365',
        social: false
    },
    'waad': {
        css: 'waad',
        title: 'Windows Azure AD',
        social: false
    },
    'adfs': {
        css: 'windows',
        title: 'ADFS',
        social: false
    },
    'samlp': {
        css: 'guest',
        title: 'SAML',
        social: false
    },
    'pingfederate': {
        css: 'guest',
        title: 'Ping Federate',
        social: false
    },
    'ip': {
        css: 'guest',
        title: 'IP Address',
        social: false
    },
    'mscrm': {
        css: 'guest',
        title: 'Dynamics CRM',
        social: false
    },
    'ad': {
        css: 'windows',
        title: 'AD / LDAP',
        social: false,
        userAndPass: true
    },
    'custom': {
        css: 'guest',
        title: 'Custom Auth',
        social: false
    },
    'auth0': {
        css: 'guest',
        title: 'Auth0',
        social: false,
        userAndPass: true
    },
    'auth0-adldap': {
        css: 'guest',
        title: 'AD/LDAP',
        social: false,
        userAndPass: true
    },
    'thirtysevensignals': {
        css: 'thirtysevensignals',
        title: '37 Signals',
        social: true
    },
    'box': {
        css: 'box',
        title: 'Box',
        social: true,
        imageicon: true
    },
    'salesforce': {
        css: 'salesforce',
        title: 'Salesforce',
        social: true
    },
    'salesforce-sandbox': {
        css: 'salesforce',
        title: 'Salesforce (sandbox)',
        social: true
    },
    'fitbit': {
        css: 'fitbit',
        title: 'Fitbit',
        social: true
    },
    'baidu': {
        css: 'baidu',
        title: 'Baidu',
        social: true
    },
    'renren': {
        css: 'renren',
        title: 'RenRen',
        social: true
    },
    'yahoo': {
        css: 'yahoo',
        title: 'Yahoo!',
        social: true
    },
    'aol': {
        css: 'aol',
        title: 'Aol',
        social: true
    },
    'yammer': {
        css: 'yammer',
        title: 'Yammer',
        social: true
    },
    'wordpress': {
        css: 'wordpress',
        title: 'Wordpress',
        social: true
    },
    'dwolla': {
        css: 'dwolla',
        title: 'Dwolla',
        social: true
    },
    'shopify': {
        css: 'shopify',
        title: 'Shopify',
        social: true
    },
    'miicard': {
        css: 'miicard',
        title: 'miiCard',
        social: true
    },
    'soundcloud': {
        css: 'soundcloud',
        title: 'Soundcloud',
        social: true
    },
    'ebay': {
        css: 'ebay',
        title: 'ebay',
        social: true
    },
    'evernote': {
        css: 'evernote',
        title: 'Evernote',
        social: true
    },
    'sharepoint': {
        css: 'sharepoint',
        title: 'SharePoint Apps',
        social: false
    },
    'weibo': {
        css: 'weibo',
        title: 'Weibo',
        social: true
    },
    'instagram': {
        css: 'instagram',
        title: 'Instagram',
        social: true
    }
};
},{}],57:[function(require,module,exports){
var $ = require('../js/bonzo_qwery');
var reset = module.exports;

var is_small_screen = require('../js/is_small_screen');
var collapse_onfocus = require('../js/collapse_onfocus');
var regex = require('../js/regex');
var email_parser = regex.email_parser;
var empty = regex.empty;

reset.submit = function (widget, connectionName, username, password) {
  var container = $('.a0-reset form');

  widget._setLoginView({ mode: 'loading', title: 'reset' }, function () {
    widget._auth0.changePassword({
      connection: connectionName,
      username:   username,
      password:   password
    }, function (err) {

      if ( $()[0] !== widget._node ) {
        return console.log && console.log('this password reset was triggered from another node instance', arguments);
      }

      $('.a0-password input', container).val('');
      $('.a0-repeatPassword input', container).val('');

      if (err) {
        return widget._setLoginView({ mode: 'reset' }, function () {
          if (400 === err.status) return widget._showError(widget._dict.t('reset:userDoesNotExistErrorText'));
          widget._showError(widget._dict.t('reset:serverErrorText'));
        });
      }

      $('.a0-email input', container).val('');

      widget._setLoginView({}, function () {
        widget._showSuccess(widget._dict.t('reset:successText'));
      });
    });
  });
};

reset.bind = function (widget) {
  $('.a0-reset .a0-options').show(widget._openWith ? 'none' : 'block');

  var form = $('.a0-reset form')
    .a0_off('submit')
    .a0_on('submit', function (e) {
      e.preventDefault();
      var username = $('.a0-email input', form).val();
      var password = $('.a0-password input', form).val();
      var connection  = widget._getAuth0Connection();

      if (!valid(form, widget)) return;
      reset.submit(widget, connection.name, username, password);
    });

  if (is_small_screen()) {
    collapse_onfocus.hook($('.a0-reset form input'), $('.a0-collapse-reset'));
  }

  $('.a0-repeatPassword input', form)
    .a0_off('input')
    .a0_on('input', function() {
      if ($('.a0-password input', form).val() != this.value) {
        widget._setCustomValidity(this, widget._dict.t('reset:enterSamePasswordText'));
      } else {
        widget._setCustomValidity(this, '');
      }
    });
};

function valid(form, widget) {
  var ok = true;
  var email_input = $('input[name=email]', form);
  var email_empty = empty.test(email_input.val());
  var email_parsed = email_parser.exec(email_input.val().toLowerCase());
  var password_input = $('input[name=password]', form);
  var password_empty = empty.test(password_input.val());
  var repeat_password_input = $('input[name=repeat_password]', form);
  var repeat_password_empty = empty.test(repeat_password_input.val());

  // asume valid by default
  // and reset errors
  widget._showError();
  widget._focusError();

  if (email_empty) {
    widget._focusError(email_input);
    ok = false;
  }

  if (!email_parsed && !email_empty) {
    widget._focusError(email_input, widget._dict.t('invalid'));
    ok = false;
  }

  if (password_empty) {
    widget._focusError(password_input);
    ok = false;
  };

  if (repeat_password_empty) {
    widget._focusError(repeat_password_input);
    ok = false;
  };

  if (repeat_password_input.val() !== password_input.val()) {
    widget._focusError(repeat_password_input, widget._dict.t('mustMatch'));
    ok = false;
  };

  return ok;
}
},{"../js/bonzo_qwery":51,"../js/collapse_onfocus":52,"../js/is_small_screen":54,"../js/regex":55}],58:[function(require,module,exports){
var _ = require('underscore');
var $ = require('../js/bonzo_qwery');

var buttonTmpl = require('../html/button.ejs');
var collapse_onfocus = require('../js/collapse_onfocus');
var is_small_screen = require('../js/is_small_screen');
var regex = require('../js/regex');
var empty = regex.empty;
var email_parser = regex.email_parser;
var signup = module.exports;


signup.submit = function (widget, connectionName, email, password) {
  widget._setLoginView({mode: 'loading', title: 'signup'}, function () {
    widget._auth0.signup({
      connection: connectionName,
      username:   email,
      password:   password,
      auto_login: false
    }, function (err) {

      if ( $()[0] !== widget._node ) {
        return console.log && console.log('this signup was triggered from another node instance', arguments);
      }

      if (err) {
        return widget._setLoginView({mode: 'signup'}, function () {
          if (400 === err.status) return widget._showError(widget._dict.t('signup:userExistsErrorText'));
          widget._showError(widget._dict.t('signup:serverErrorText'));
        });
      }
      return widget._signInWithAuth0(email, password);
    });
  });
};

signup.bind = function (widget) {
  var list = $('.a0-signup .a0-iconlist').html('');

  $('.a0-signup .a0-options').show(widget._openWith ? 'none' : 'block');

  _.chain(widget._client.strategies)
     .where({social: true})
     .map(function (s) { return  _.extend({}, s, {use_big_buttons: false}); })
     .each(function (s) { return list.append(buttonTmpl(s)); });

  if (_.where(widget._client.strategies, {social: true}).length > 0) {
    $('.a0-signup .a0-separator, .a0-signup .a0-iconlist').show();
  }

  $('.a0-zocial[data-strategy]', list).a0_on('click', function (e) {
    widget._signInSocial(e);
  });

  var form = $('.a0-signup form')
    .a0_off('submit')
    .a0_on('submit', function (e) {
      e.preventDefault();
      var connection  = widget._getAuth0Connection();
      var email = $('.a0-email input', form).val();
      var password = $('.a0-password input', form).val();

      if (!valid(form, widget)) return;
      signup.submit(widget, connection.name, email, password);
    });

  if (is_small_screen()) {
    collapse_onfocus.hook($('.a0-signup form input'), $('.a0-collapse-social-signup'));
  }

  return signup;
};

function valid(form, widget) {
  var ok = true;
  var email_input = $('input[name=email]', form);
  var email_empty = empty.test(email_input.val());
  var email_parsed = email_parser.exec(email_input.val().toLowerCase());
  var password_input = $('input[name=password]', form);
  var password_empty = empty.test(password_input.val());

  // asume valid by default
  // and reset errors
  widget._showError();
  widget._focusError();

  if (email_empty) {
    widget._focusError(email_input);
    ok = false;
  }

  if (!email_parsed && !email_empty) {
    widget._focusError(email_input, widget._dict.t('invalid'));
    ok = false;
  }

  if (password_empty) {
    widget._focusError(password_input);
    ok = false;
  };

  return ok;
}
},{"../html/button.ejs":45,"../js/bonzo_qwery":51,"../js/collapse_onfocus":52,"../js/is_small_screen":54,"../js/regex":55,"underscore":43}],59:[function(require,module,exports){
//ie9 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill
module.exports = Object.create || (function(){
  function F(){}

  return function(o){
    if (arguments.length != 1) {
        throw new Error('Object.create implementation only accepts one parameter.');
    }
    F.prototype = o;
    return new F();
  };
})();
},{}],60:[function(require,module,exports){
var _ = require('underscore');

module.exports = function () {
  return _.chain(['Webkit', 'Moz', 'O', 'ms', 'Khtml', ''])
          .map(function (prefix) {
            return prefix + 'Animation';
          })
          .some(function (s) {
            return typeof document.body.style[s] !== 'undefined';
          });
};
},{"underscore":43}],61:[function(require,module,exports){
function placeholderIsSupported() {
  var test = document.createElement('input');
  return ('placeholder' in test);
}

module.exports = placeholderIsSupported();
},{}],62:[function(require,module,exports){
var transitionendNames = [
    'transitionend',
    'webkitTransitionEnd',
    'MozTransitionEnd',
    'oTransitionEnd'
];

var bean = require('bean');

module.exports.on = function (el, callback) {
  function subscribe(name) {
    bean.on(el, name, function (e) {
      callback(e);
    });
  }
  for (var i = 0; i < transitionendNames.length; i++) {
    subscribe(transitionendNames[i]);
  }
};

module.exports.off = function (el) {
  function subscribe(name) {
    bean.off(el, name);
  }
  for (var i = 0; i < transitionendNames.length; i++) {
    subscribe(transitionendNames[i]);
  }
};
},{"bean":34}],63:[function(require,module,exports){
var _ = require('underscore');

module.exports = {
  parseUrl: function (url) {
    var parser = document.createElement('a');
    parser.href = url;
    return parser;
  },

  endsWith: function (str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  },

  extract: function (obj, props) {
    var pre = _.pick(obj, props);

    return _.chain(_.pairs(pre))
            .filter(function (pair) {
              return typeof pair[1] !== 'undefined';
            }).reduce(function (r, current) {
              r[current[0]] = current[1];
              return r;
            }, {}).value();
  }
};

},{"underscore":43}]},{},[44])
//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC9pMThuL2FyLmpzb24iLCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC9pMThuL2RlLmpzb24iLCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC9pMThuL2VuLmpzb24iLCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC9pMThuL2VzLmpzb24iLCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC9pMThuL2ZyLUZSLmpzb24iLCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC9pMThuL2hlLmpzb24iLCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC9pMThuL2luZGV4LmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvaTE4bi9pdC5qc29uIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvaTE4bi9qYS5qc29uIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvaTE4bi9ubC1OTC5qc29uIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvaTE4bi9wdC1CUi5qc29uIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvaTE4bi9wdC5qc29uIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvaTE4bi9ydS5qc29uIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvaTE4bi90bGguanNvbiIsIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L2kxOG4vemguanNvbiIsIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L2xpYi9pbnNlcnQtY3NzLmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvbm9kZV9tb2R1bGVzL2F1dGgwLWpzL2xpYi9Mb2dpbkVycm9yLmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvbm9kZV9tb2R1bGVzL2F1dGgwLWpzL2xpYi9hc3NlcnRfcmVxdWlyZWQuanMiLCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC9ub2RlX21vZHVsZXMvYXV0aDAtanMvbGliL2Jhc2U2NF91cmxfZGVjb2RlLmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvbm9kZV9tb2R1bGVzL2F1dGgwLWpzL2xpYi9pbmRleC5qcyIsIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L25vZGVfbW9kdWxlcy9hdXRoMC1qcy9saWIvanNvbl9wYXJzZS5qcyIsIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L25vZGVfbW9kdWxlcy9hdXRoMC1qcy9saWIvdXNlX2pzb25wLmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvbm9kZV9tb2R1bGVzL2F1dGgwLWpzL25vZGVfbW9kdWxlcy9CYXNlNjQvYmFzZTY0LmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvbm9kZV9tb2R1bGVzL2F1dGgwLWpzL25vZGVfbW9kdWxlcy9kZWJ1Zy9kZWJ1Zy5qcyIsIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L25vZGVfbW9kdWxlcy9hdXRoMC1qcy9ub2RlX21vZHVsZXMvanNvbnAvaW5kZXguanMiLCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC9ub2RlX21vZHVsZXMvYXV0aDAtanMvbm9kZV9tb2R1bGVzL3FzL2luZGV4LmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvbm9kZV9tb2R1bGVzL2F1dGgwLWpzL25vZGVfbW9kdWxlcy9yZXF3ZXN0L3JlcXdlc3QuanMiLCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC9ub2RlX21vZHVsZXMvYXV0aDAtanMvbm9kZV9tb2R1bGVzL3h0ZW5kL2hhcy1rZXlzLmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvbm9kZV9tb2R1bGVzL2F1dGgwLWpzL25vZGVfbW9kdWxlcy94dGVuZC9pbmRleC5qcyIsIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L25vZGVfbW9kdWxlcy9hdXRoMC1qcy9ub2RlX21vZHVsZXMveHRlbmQvbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2ZvcmVhY2guanMiLCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC9ub2RlX21vZHVsZXMvYXV0aDAtanMvbm9kZV9tb2R1bGVzL3h0ZW5kL25vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pbmRleC5qcyIsIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L25vZGVfbW9kdWxlcy9hdXRoMC1qcy9ub2RlX21vZHVsZXMveHRlbmQvbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2lzQXJndW1lbnRzLmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvbm9kZV9tb2R1bGVzL2F1dGgwLWpzL25vZGVfbW9kdWxlcy94dGVuZC9ub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvc2hpbS5qcyIsIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L25vZGVfbW9kdWxlcy9iZWFuL2JlYW4uanMiLCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC9ub2RlX21vZHVsZXMvYm9uem8vYm9uem8uanMiLCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1idWlsdGlucy9idWlsdGluL19zaGltcy5qcyIsIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLWJ1aWx0aW5zL2J1aWx0aW4vZXZlbnRzLmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItYnVpbHRpbnMvYnVpbHRpbi9mcy5qcyIsIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLWJ1aWx0aW5zL2J1aWx0aW4vdXRpbC5qcyIsIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L25vZGVfbW9kdWxlcy9kb21yZWFkeS9yZWFkeS5qcyIsIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L25vZGVfbW9kdWxlcy9oYXMtdHJhbnNpdGlvbnMvaW5kZXguanMiLCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC9ub2RlX21vZHVsZXMvcXdlcnkvcXdlcnkuanMiLCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS91bmRlcnNjb3JlLmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvc3RhbmRhbG9uZS5qcyIsIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L3dpZGdldC9odG1sL2J1dHRvbi5lanMiLCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC93aWRnZXQvaHRtbC9sb2dnZWRpbl9idXR0b24uZWpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvd2lkZ2V0L2h0bWwvbG9naW5fYWN0aW9ucy5lanMiLCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC93aWRnZXQvaHRtbC9tYWluLmVqcyIsIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L3dpZGdldC9odG1sL21haW5fZW1iZWRkZWQuZWpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvd2lkZ2V0L2luZGV4LmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvd2lkZ2V0L2pzL2JvbnpvX3F3ZXJ5LmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvd2lkZ2V0L2pzL2NvbGxhcHNlX29uZm9jdXMuanMiLCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC93aWRnZXQvanMvZ2V0X3ZpZXdwb3J0LmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvd2lkZ2V0L2pzL2lzX3NtYWxsX3NjcmVlbi5qcyIsIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L3dpZGdldC9qcy9yZWdleC5qcyIsIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L3dpZGdldC9qcy9zdHJhdGVnaWVzLmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvd2lkZ2V0L21vZGVzL3Jlc2V0LmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvd2lkZ2V0L21vZGVzL3NpZ251cC5qcyIsIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L3dpZGdldC9wZi9PYmplY3QuY3JlYXRlLmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvd2lkZ2V0L3BmL2hhc19hbmltYXRpb25zLmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvd2lkZ2V0L3BmL3BsYWNlaG9sZGVyU3VwcG9ydGVkLmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvd2lkZ2V0L3BmL3RyYW5zaXRpb25fZW5kLmpzIiwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvd2lkZ2V0L3BmL3V0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsbkJBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4WkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hDQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcHVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeE5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9oQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzV2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNU5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzPXtcbiAgXCIvL1wiOiBcIlRoaXMgaXMgYW4gYXV0b21hdGljIHRyYW5zbGF0aW9uLiBIZWxwIHVzIHRvIGltcHJvdmUgaXQuXCIsXG4gIFwibG9hZGluZ1RpdGxlXCI6IFwi2KfZhNix2KzYp9ihINin2YTYp9mG2KrYuNin2LEuLi5cIixcbiAgXCJjbG9zZVwiOiBcItmC2YUg2KjYpdi62YTYp9mCXCIsXG4gIFwic2lnbmluXCI6IHtcbiAgICBcInRpdGxlXCI6IFwi2KrYs9is2YrZhCDYp9mE2K/YrtmI2YRcIixcbiAgICBcImFjdGlvblwiOiBcItiq2LPYrNmK2YQg2KfZhNiv2K7ZiNmEXCIsXG4gICAgXCJhbGxcIjogXCLYpdi42YfYp9ixINin2YTZg9mEXCIsXG4gICAgXCJzdHJhdGVneUVtYWlsRW1wdHlcIjogXCLYsdiz2KfZhNipINin2YTYqNix2YrYryDYp9mE2KXZhNmD2KrYsdmI2YbZiiDZgdin2LHYutin2YsuXCIsXG4gICAgXCJzdHJhdGVneUVtYWlsSW52YWxpZFwiOiBcItin2YTYqNix2YrYryDYp9mE2KXZhNmD2KrYsdmI2YbZiiDYutmK2LEg2LXYp9mE2K0uXCIsXG4gICAgXCJzdHJhdGVneURvbWFpbkludmFsaWRcIjogXCJ72KfZhNmF2KzYp9mEfSDZhNmFINmK2YPZhiDYp9mE2KXYudiv2KfYry5cIixcbiAgICBcInNpZ251cFRleHRcIjogXCLYp9mE2KrYs9is2YrZhFwiLFxuICAgIFwiZm9yZ290VGV4dFwiOiBcItmH2YQg2YbYs9mK2Kog2YPZhNmF2Kkg2KfZhNmF2LHZiNixINin2YTYrtin2LXYqSDYqNmD2J9cIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCLYp9mE2KjYsdmK2K8g2KfZhNil2YTZg9iq2LHZiNmG2YpcIixcbiAgICBcInVzZXJuYW1lUGxhY2Vob2xkZXJcIjogXCLYp9iz2YUg2KfZhNmF2LPYqtiu2K/ZhVwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcItmD2YTZhdipINin2YTZhdix2YjYsVwiLFxuICAgIFwic2VwYXJhdG9yVGV4dFwiOiBcItij2YhcIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcItit2K/YqyDYrti32KMg2KPYq9mG2KfYoSDZhdi52KfZhNis2Kkg2KrYs9is2YrZhCDYp9mE2K/YrtmI2YQuXCIsXG4gICAgXCJyZXR1cm5Vc2VyTGFiZWxcIjogXCLYotiu2LEg2YXYsdipINmC2YXYqiDYqNiq2LPYrNmK2YQg2KfZhNiv2K7ZiNmEINio2KfYs9iq2K7Yr9in2YUuLi5cIixcbiAgICBcIndyb25nRW1haWxQYXNzd29yZEVycm9yVGV4dFwiOiBcItin2YTYqNix2YrYryDYp9mE2KXZhNmD2KrYsdmI2YbZiiDYutmK2LEg2LXYrdmK2K0g2KPZiCDZg9mE2YXYqSDYp9mE2YXYsdmI2LEuXCIsXG4gICAgXCJvclwiOiBcIi4uINij2Ygg2YLZhSDYqNiq2LPYrNmK2YQg2KfZhNiv2K7ZiNmEINio2KfYs9iq2K7Yr9in2YVcIixcbiAgICBcImxvYWRpbmdNZXNzYWdlXCI6IFwi2KfZhNiq2YjZgtmK2Lkg2YHZiiDZhdi5IHtjb25uZWN0aW9ufS4uLlwiXG4gIH0sXG4gIFwic2lnbnVwXCI6IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgXCJ0aXRsZVwiOiBcItin2YTYqtiz2KzZitmEXCIsXG4gICAgXCJhY3Rpb25cIjogXCLYp9mE2KrYs9is2YrZhFwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcItin2YTYqNix2YrYryDYp9mE2KXZhNmD2KrYsdmI2YbZilwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcItil2YbYtNin2KEg2YPZhNmF2Kkg2YXYsdmI2LFcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcItil2YTYutin2KEg2KfZhNij2YXYsVwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcItin2YTYsdis2KfYoSDYpdiv2K7Yp9mEINin2YTYqNix2YrYryDYp9mE2KXZhNmD2KrYsdmI2YbZiiDZiNmD2YTZhdipINin2YTZhdix2YjYsSDYp9mE2K7Yp9i12Kkg2KjZg1wiLFxuICAgIFwiZm9vdGVyVGV4dFwiOiBcIlwiLFxuICAgIFwiZW50ZXJwcmlzZUVtYWlsV2FybmluZ1RleHRcIjogXCLZh9iw2Kcg2KfZhNmF2KzYp9mEIHvYp9mE2YXYrNin2YR9INmC2K8g2KrZhSDYqtmD2YjZitmG2Ycg2YTYqtiz2KzZitmEINin2YTYr9iu2YjZhNiMINmI2YTYpyDZitmF2YPZhiDYo9mGINiq2YLZiNmFINio2KXZhti02KfYoSDYrdiz2KfYqC4g2K3Yp9mI2YQg2KrYs9is2YrZhCDYp9mE2K/YrtmI2YQg2KjYr9mE2KfZiyDZhdmGINiw2YTZgy5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcItit2K/YqyDYrti32KMg2KPYq9mG2KfYoSDZhdi52KfZhNis2Kkg2KfZhNi52YTYp9mF2Kkg2KfZhNiq2LPYrNmK2YQuXCJcbiAgfSxcbiAgXCJyZXNldFwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcItil2LnYp9iv2Kkg2KrYudmK2YrZhiDZg9mE2YXYqSDYp9mE2YXYsdmI2LFcIixcbiAgICBcImFjdGlvblwiOiBcItil2LHYs9in2YRcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCLYp9mE2KjYsdmK2K8g2KfZhNil2YTZg9iq2LHZiNmG2YpcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCLZg9mE2YXYqSDYp9mE2YXYsdmI2LEg2KfZhNis2K/Zitiv2KlcIixcbiAgICBcInJlcGVhdFBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCLYqtij2YPZitivINmD2YTZhdipINin2YTZhdix2YjYsSDYp9mE2KzYr9mK2K/YqVwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6IFwi2KXZhNi62KfYoSDYp9mE2KPZhdixXCIsXG4gICAgXCJzdWNjZXNzVGV4dFwiOiBcItmE2YLYryDYo9ix2LPZhNmG2Kcg2YHZgti3INmE2YMg2LHYs9in2YTYqSDYqNix2YrYryDYpdmE2YPYqtix2YjZhtmKINil2LnYp9iv2Kkg2KrYudmK2YrZhiDZg9mE2YXYqSDYp9mE2YXYsdmI2LEg2KfZhNiu2KfYtdipINio2YMuXCIsXG4gICAgXCJlbnRlclNhbWVQYXNzd29yZFRleHRcIjogXCLYp9mE2LHYrNin2KEg2KXYr9iu2KfZhCDZg9mE2YXYqSDYp9mE2YXYsdmI2LEg2YbZgdiz2YfYpy5cIixcbiAgICBcImhlYWRlclRleHRcIjogXCLYp9mE2LHYrNin2KEg2KXYr9iu2KfZhCDYp9mE2KjYsdmK2K8g2KfZhNil2YTZg9iq2LHZiNmG2Yog2KfZhNiu2KfYtSDYqNmDINmI2YPZhNmF2Kkg2KfZhNmF2LHZiNixINin2YTYrNiv2YrYr9ipLiDZiNiz2YjZgSDZhtix2LPZhCDZhNmDINix2LPYp9mE2Kkg2KjYp9mE2KjYsdmK2K8g2KXZhNmD2KrYsdmI2YbZiiDZhNiq2KPZg9mK2K8g2KrYutmK2YrYsSDZg9mE2YXYqSDYp9mE2YXYsdmI2LEuXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCLYrdiv2Ksg2K7Yt9ijINij2KvZhtin2KEg2YXYudin2YTYrNipINil2LnYp9iv2Kkg2KrYudmK2YrZhiDZg9mE2YXYqSDYp9mE2YXYsdmI2LEuXCJcbiAgfVxufSIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCIvL1wiOiBcIlRoaXMgaXMgYW4gYXV0b21hdGljIHRyYW5zbGF0aW9uLiBIZWxwIHVzIHRvIGltcHJvdmUgaXQuXCIsXG4gIFwibG9hZGluZ1RpdGxlXCI6IFwiQml0dGUgd2FydGVuLi4uXCIsXG4gIFwiY2xvc2VcIjogXCJTY2hsaWXDn2VuXCIsXG4gIFwic2lnbmluXCI6IHtcbiAgICBcInRpdGxlXCI6IFwiQW5tZWxkZW5cIixcbiAgICBcImFjdGlvblwiOiBcIkFubWVsZGVuXCIsXG4gICAgXCJhbGxcIjogXCJBbGxlIGFuemVpZ2VuXCIsXG4gICAgXCJzdHJhdGVneUVtYWlsRW1wdHlcIjogXCJEaWUgZS1NYWlsIGlzdCBsZWVyLlwiLFxuICAgIFwic3RyYXRlZ3lFbWFpbEludmFsaWRcIjogXCJEaWUgZS1NYWlsIGlzdCB1bmfDvGx0aWcuXCIsXG4gICAgXCJzdHJhdGVneURvbWFpbkludmFsaWRcIjogXCJ7ZG9tYWlufSB3dXJkZSBuaWNodCBlaW5nZXJpY2h0ZXQuXCIsXG4gICAgXCJzaWdudXBUZXh0XCI6IFwiQW5tZWxkZW5cIixcbiAgICBcImZvcmdvdFRleHRcIjogXCJQYXNzd29ydCB2ZXJnZXNzZW4/XCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwiRS1NYWlsXCIsXG4gICAgXCJ1c2VybmFtZVBsYWNlaG9sZGVyXCI6IFwiQmVudXR6ZXJuYW1lXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwiUGFzc3dvcnRcIixcbiAgICBcInNlcGFyYXRvclRleHRcIjogXCJvZGVyXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCJHYWIgZXMgRmVobGVyIGJlaW0gVmVyYXJiZWl0ZW4gZGVyIGFubWVsZGVuLlwiLFxuICAgIFwicmV0dXJuVXNlckxhYmVsXCI6IFwiTGV0enRlIE1hbCB1bnRlcnNjaHJpZWJlbiBTaWUgYmVpIGRlciBWZXJ3ZW5kdW5nLi4uXCIsXG4gICAgXCJ3cm9uZ0VtYWlsUGFzc3dvcmRFcnJvclRleHRcIjogXCJGYWxzY2hlIGUtTWFpbCBvZGVyIFBhc3N3b3J0LlwiLFxuICAgIFwib3JcIjogXCIuLi4gb2RlciBtZWxkZW4gU2llIHNpY2ggbWl0XCIsXG4gICAgXCJsb2FkaW5nTWVzc2FnZVwiOiBcIkJlaSBkZXIgQW5tZWxkdW5nIG1pdCB7Y29ubmVjdGlvbn0uLi5cIlxuICB9LFxuICBcInNpZ251cFwiOiB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgIFwidGl0bGVcIjogXCJBbm1lbGRlblwiLFxuICAgIFwiYWN0aW9uXCI6IFwiQW5tZWxkZW5cIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCJFLU1haWxcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCJFcnN0ZWxsZW4gU2llIGVpbiBLZW5ud29ydFwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6IFwiQWJicmVjaGVuXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6IFwiQml0dGUgZ2ViZW4gU2llIElocmUgZS1NYWlsIHVuZCBQYXNzd29ydFwiLFxuICAgIFwiZm9vdGVyVGV4dFwiOiBcIkR1cmNoIEtsaWNrZW4gYXVmIFxcXCJBbm1lbGRlblxcXCIsIHN0aW1tZW4gU2llIHVuc2VyZW4gTnV0enVuZ3NiZWRpbmd1bmdlbiBvZGVyIERhdGVuc2NodXR6cmljaHRsaW5pZW4uXCIsXG4gICAgXCJlbnRlcnByaXNlRW1haWxXYXJuaW5nVGV4dFwiOiBcIkRpZXNlIERvbcOkbmUge2RvbWFpbn0gZsO8ciBTaW5nbGUgU2lnbiBPbiBrb25maWd1cmllcnQgd3VyZGUgdW5kIFNpZSBrw7ZubmVuIGVpbiBLb250byBlcnN0ZWxsZW4uIFZlcnN1Y2hlbiBTaWUgc3RhdHRkZXNzZW4gc2ljaCBhbnp1bWVsZGVuLlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwiR2FiIGVzIEZlaGxlciBiZWltIFZlcmFyYmVpdGVuIGRlciBaZWljaGVucyBhdWYuXCJcbiAgfSxcbiAgXCJyZXNldFwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcIlBhc3N3b3J0IHp1csO8Y2tzZXR6ZW5cIixcbiAgICBcImFjdGlvblwiOiBcIlNlbmRlblwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIkUtTWFpbFwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIk5ldWVzIFBhc3N3b3J0XCIsXG4gICAgXCJyZXBlYXRQYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwiTmV1ZXMgS2VubndvcnQgYmVzdMOkdGlnZW5cIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcIkFiYnJlY2hlblwiLFxuICAgIFwic3VjY2Vzc1RleHRcIjogXCJXaXIgaGFiZW4gU2llIG51ciBlaW5lIGUtTWFpbCB6dW0gWnVyw7xja3NldHplbiBJaHJlcyBQYXNzd29ydHMgZ2VzY2hpY2t0LlwiLFxuICAgIFwiZW50ZXJTYW1lUGFzc3dvcmRUZXh0XCI6IFwiQml0dGUgZ2ViZW4gU2llIGRhcyBnbGVpY2hlIEtlbm53b3J0LlwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcIkJpdHRlIGdlYmVuIFNpZSBJaHJlIGUtTWFpbCB1bmQgZGFzIG5ldWUgS2VubndvcnQuIFdpciBzZW5kZW4gSWhuZW4gZWluZSBlLU1haWwgenVyIEJlc3TDpHRpZ3VuZyBkZXIgUGFzc3dvcnTDpG5kZXJ1bmcuXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCJHYWIgZXMgRmVobGVyIGJlaW0gVmVyYXJiZWl0ZW4gZGVzIEtlbm53b3J0cyB6dXLDvGNrc2V0emVuLlwiXG4gIH1cbn0iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwibG9hZGluZ1RpdGxlXCI6ICAgICAgICAgICAgICAgICAgXCJQbGVhc2Ugd2FpdC4uLlwiLFxuICBcImNsb3NlXCI6ICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2xvc2VcIixcbiAgXCJ3aW5kb3dzQXV0aFRpdGxlXCI6ICAgICAgICAgICAgICBcIldpbmRvd3MgQXV0aGVudGljYXRpb25cIixcbiAgXCJpbnZhbGlkXCI6ICAgICAgICAgICAgICAgICAgICAgICBcIkludmFsaWRcIixcbiAgXCJtdXN0TWF0Y2hcIjogICAgICAgICAgICAgICAgICAgICBcIk11c3QgbWF0Y2hcIixcbiAgXCJzaWduaW5cIjoge1xuICAgIFwidGl0bGVcIjogICAgICAgICAgICAgICAgICAgICAgIFwiTG9naW5cIixcbiAgICBcImFjdGlvblwiOiAgICAgICAgICAgICAgICAgICAgICBcIkFjY2Vzc1wiLFxuICAgIFwiYWxsXCI6ICAgICAgICAgICAgICAgICAgICAgICAgIFwiU2hvdyBhbGxcIixcbiAgICBcInN0cmF0ZWd5RW1haWxFbXB0eVwiOiAgICAgICAgICBcIlRoZSBlbWFpbCBpcyBlbXB0eS5cIixcbiAgICBcInN0cmF0ZWd5RW1haWxJbnZhbGlkXCI6ICAgICAgICBcIlRoZSBlbWFpbCBpcyBpbnZhbGlkLlwiLFxuICAgIFwic3RyYXRlZ3lEb21haW5JbnZhbGlkXCI6ICAgICAgIFwiVGhlIGRvbWFpbiB7ZG9tYWlufSBoYXMgbm90IGJlZW4gc2V0dXAuXCIsXG4gICAgXCJzaWdudXBUZXh0XCI6ICAgICAgICAgICAgICAgICAgXCJTaWduIFVwXCIsXG4gICAgXCJmb3Jnb3RUZXh0XCI6ICAgICAgICAgICAgICAgICAgXCJGb3Jnb3QgeW91ciBwYXNzd29yZD9cIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogICAgICAgICAgICBcIkVtYWlsXCIsXG4gICAgXCJ1c2VybmFtZVBsYWNlaG9sZGVyXCI6ICAgICAgICAgXCJVc2VybmFtZVwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiAgICAgICAgIFwiUGFzc3dvcmRcIixcbiAgICBcInNlcGFyYXRvclRleHRcIjogICAgICAgICAgICAgICBcIm9yXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogICAgICAgICAgICAgXCJUaGVyZSB3YXMgYW4gZXJyb3IgcHJvY2Vzc2luZyB0aGUgc2lnbiBpbi5cIixcbiAgICBcInJldHVyblVzZXJMYWJlbFwiOiAgICAgICAgICAgICBcIkxhc3QgdGltZSB5b3Ugc2lnbmVkIGluIHVzaW5nLi4uXCIsXG4gICAgXCJkb21haW5Vc2VyTGFiZWxcIjogICAgICAgICAgICAgXCJZb3UgYXJlIGNvbm5lY3RlZCBmcm9tIHlvdXIgY29ycG9yYXRlIG5ldHdvcmsuLi5cIixcbiAgICBcIndyb25nRW1haWxQYXNzd29yZEVycm9yVGV4dFwiOiBcIldyb25nIGVtYWlsIG9yIHBhc3N3b3JkLlwiLFxuICAgIFwib3JcIjogICAgICAgICAgICAgICAgICAgICAgICAgIFwiLi4uIG9yIHNpZ24gaW4gdXNpbmdcIixcbiAgICBcImxvYWRpbmdNZXNzYWdlXCI6ICAgICAgICAgICAgICBcIlNpZ25pbmcgSW4gd2l0aCB7Y29ubmVjdGlvbn0uLi5cIixcbiAgICBcInVzZVwiOiAgICAgICAgICAgICAgICAgICAgICAgICBcIlVzZVwiLFxuICB9LFxuICBcInNpZ251cFwiOiB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiAgICAgICAgICAgICAgICAgXCJcIixcbiAgICBcInRpdGxlXCI6ICAgICAgICAgICAgICAgICAgICAgICBcIlNpZ24gVXBcIixcbiAgICBcImFjdGlvblwiOiAgICAgICAgICAgICAgICAgICAgICBcIlNpZ24gVXBcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogICAgICAgICAgICBcIkVtYWlsXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6ICAgICAgICAgXCJDcmVhdGUgYSBQYXNzd29yZFwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6ICAgICAgICAgICAgICAgIFwiQ2FuY2VsXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6ICAgICAgICAgICAgICAgICAgXCJQbGVhc2UgZW50ZXIgeW91ciBlbWFpbCBhbmQgcGFzc3dvcmRcIixcbiAgICBcImZvb3RlclRleHRcIjogICAgICAgICAgICAgICAgICBcIlwiLFxuICAgIFwiZW50ZXJwcmlzZUVtYWlsV2FybmluZ1RleHRcIjogIFwiVGhpcyBkb21haW4ge2RvbWFpbn0gaGFzIGJlZW4gY29uZmlndXJlZCBmb3IgU2luZ2xlIFNpZ24gT24gYW5kIHlvdSBjYW4ndCBjcmVhdGUgYW4gYWNjb3VudC4gVHJ5IHNpZ25pbmcgaW4gaW5zdGVhZC5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiAgICAgICAgICAgICBcIlRoZXJlIHdhcyBhbiBlcnJvciBwcm9jZXNzaW5nIHRoZSBzaWduIHVwLlwiLFxuICAgIFwidXNlckV4aXN0c0Vycm9yVGV4dFwiOiAgICAgICAgIFwiVGhlIHVzZXIgYWxyZWFkeSBleGlzdHMuXCIsXG4gIH0sXG4gIFwicmVzZXRcIjoge1xuICAgIFwidGl0bGVcIjogICAgICAgICAgICAgICAgICAgICAgIFwiUmVzZXQgUGFzc3dvcmRcIixcbiAgICBcImFjdGlvblwiOiAgICAgICAgICAgICAgICAgICAgICBcIlNlbmRcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogICAgICAgICAgICBcIkVtYWlsXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6ICAgICAgICAgXCJOZXcgUGFzc3dvcmRcIixcbiAgICBcInJlcGVhdFBhc3N3b3JkUGxhY2Vob2xkZXJcIjogICBcIkNvbmZpcm0gTmV3IFBhc3N3b3JkXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogICAgICAgICAgICAgICAgXCJDYW5jZWxcIixcbiAgICBcInN1Y2Nlc3NUZXh0XCI6ICAgICAgICAgICAgICAgICBcIldlJ3ZlIGp1c3Qgc2VudCB5b3UgYW4gZW1haWwgdG8gcmVzZXQgeW91ciBwYXNzd29yZC5cIixcbiAgICBcImVudGVyU2FtZVBhc3N3b3JkVGV4dFwiOiAgICAgICBcIlBsZWFzZSBlbnRlciB0aGUgc2FtZSBwYXNzd29yZC5cIixcbiAgICBcImhlYWRlclRleHRcIjogICAgICAgICAgICAgICAgICBcIlBsZWFzZSBlbnRlciB5b3VyIGVtYWlsIGFuZCB0aGUgbmV3IHBhc3N3b3JkLiBXZSB3aWxsIHNlbmQgeW91IGFuIGVtYWlsIHRvIGNvbmZpcm0gdGhlIHBhc3N3b3JkIGNoYW5nZS5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiAgICAgICAgICAgICBcIlRoZXJlIHdhcyBhbiBlcnJvciBwcm9jZXNzaW5nIHRoZSByZXNldCBwYXNzd29yZC5cIixcbiAgICBcInVzZXJEb2VzTm90RXhpc3RFcnJvclRleHRcIjogICBcIlVzZXIgZG9lcyBub3QgZXhpc3QuXCIsXG4gIH1cbn0iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwibG9hZGluZ1RpdGxlXCI6ICAgICAgICAgICAgICAgICAgXCJQb3IgZmF2b3IgZXNwZXJlLi4uXCIsXG4gIFwiY2xvc2VcIjogICAgICAgICAgICAgICAgICAgICAgICAgXCJDZXJyYXJcIixcbiAgXCJzaWduaW5cIjoge1xuICAgIFwidGl0bGVcIjogICAgICAgICAgICAgICAgICAgICAgIFwiSW5pY2lhciBzZXNpw7NuXCIsXG4gICAgXCJhY3Rpb25cIjogICAgICAgICAgICAgICAgICAgICAgXCJJbmdyZXNhclwiLFxuICAgIFwiYWxsXCI6ICAgICAgICAgICAgICAgICAgICAgICAgIFwiTW9zdHJhciB0b2Rhc1wiLFxuICAgIFwic3RyYXRlZ3lFbWFpbEVtcHR5XCI6ICAgICAgICAgIFwiRWwgZW1haWwgZXN0YSB2YWPDrW8uXCIsXG4gICAgXCJzdHJhdGVneUVtYWlsSW52YWxpZFwiOiAgICAgICAgXCJFbCBlbWFpbCBubyBlcyB2w6FsaWRvLlwiLFxuICAgIFwic3RyYXRlZ3lEb21haW5JbnZhbGlkXCI6ICAgICAgIFwiRWwgZG9taW5pbyB7ZG9tYWlufSBubyBlc3RhIGNvbmZpZ3VyYWRvLlwiLFxuICAgIFwic2lnbnVwVGV4dFwiOiAgICAgICAgICAgICAgICAgIFwiUmVnaXN0cmFyc2VcIixcbiAgICBcImZvcmdvdFRleHRcIjogICAgICAgICAgICAgICAgICBcIk9sdmlkw6kgbWkgY29udHJhc2XDsWFcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogICAgICAgICAgICBcIkVtYWlsXCIsXG4gICAgXCJ1c2VybmFtZVBsYWNlaG9sZGVyXCI6ICAgICAgICAgXCJOb21icmUgZGUgdXN1YXJpb1wiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiAgICAgICAgIFwiQ29udHJhc2XDsWFcIixcbiAgICBcInNlcGFyYXRvclRleHRcIjogICAgICAgICAgICAgICBcIm9cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiAgICAgICAgICAgICBcIkh1Ym8gdW4gZXJyb3IgYWwgaW5pY2lhciBzZXNpw7NuLlwiLFxuICAgIFwicmV0dXJuVXNlckxhYmVsXCI6ICAgICAgICAgICAgIFwiTGEgw7psdGltYSB2ZXogaW5pY2nDsyBzZXNpw7NuIGNvbi4uLlwiLFxuICAgIFwiZG9tYWluVXNlckxhYmVsXCI6ICAgICAgICAgICAgIFwiVXN0ZWQgc2UgZW5jdWVudHJhIGNvbmVjdGFkbyBkZXNkZSBzdSByZWQgY29ycG9yYXRpdmEuLi5cIixcbiAgICBcIndyb25nRW1haWxQYXNzd29yZEVycm9yVGV4dFwiOiBcIkVtYWlsIG8gY2xhdmUgaW5jb3JyZWN0YS5cIixcbiAgICBcIm9yXCI6ICAgICAgICAgICAgICAgICAgICAgICAgICBcIi4uLiBvIGluaWNpZSBzZXNpw7NuIHVzYW5kb1wiLFxuICAgIFwibG9hZGluZ01lc3NhZ2VcIjogICAgICAgICAgICAgIFwiSW5pY2lhbmRvIHNlc2nDs24gY29uIHtjb25uZWN0aW9ufS4uLlwiXG4gIH0sXG4gIFwic2lnbnVwXCI6IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6ICAgICAgICAgICAgICAgICBcIlwiLFxuICAgIFwidGl0bGVcIjogICAgICAgICAgICAgICAgICAgICAgIFwiUmVnaXN0cmFyc2VcIixcbiAgICBcImFjdGlvblwiOiAgICAgICAgICAgICAgICAgICAgICBcIlJlZ2lzdHJhclwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiAgICAgICAgICAgIFwiRW1haWxcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogICAgICAgICBcIkNvbnRyYXNlw7FhXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogICAgICAgICAgICAgICAgXCJDYW5jZWxhclwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiAgICAgICAgICAgICAgICAgIFwiUG9yIGZhdm9yIGluZ3Jlc2UgZW1haWwgeSBjb250cmFzZcOxYVwiLFxuICAgIFwiZm9vdGVyVGV4dFwiOiAgICAgICAgICAgICAgICAgIFwiXCIsXG4gICAgXCJlbnRlcnByaXNlRW1haWxXYXJuaW5nVGV4dFwiOiAgXCJFbCBkb21pbmlvIHtkb21haW59IGhhIHNpZG8gY29uZmlndXJhZG8gcGFyYSBTaW5nbGUgU2lnbiBPbiB5IG5vIHB1ZWRlIGNyZWFyIHVuYSBjdWVudGEuIEludGVudGUgaW5pY2lhciBzZXNpw7NuIGRpcmVjdGFtZW50ZS5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiAgICAgICAgICAgICBcIkh1Ym8gdW4gZXJyb3IgYWwgcHJvY2VzYXIgc3UgcmVnaXN0cm8uXCIsXG4gICAgXCJ1c2VyRXhpc3RzRXJyb3JUZXh0XCI6ICAgICAgICAgXCJFbCB1c3VhcmlvIHlhIGV4aXN0ZS5cIixcbiAgfSxcbiAgXCJyZXNldFwiOiB7XG4gICAgXCJ0aXRsZVwiOiAgICAgICAgICAgICAgICAgICAgICAgXCJSZXNldGVhciBDb250cmFzZcOxYVwiLFxuICAgIFwiYWN0aW9uXCI6ICAgICAgICAgICAgICAgICAgICAgIFwiRW52aWFyXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6ICAgICAgICAgICAgXCJFbWFpbFwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiAgICAgICAgIFwiTnVldmEgQ29udHJhc2XDsWFcIixcbiAgICBcInJlcGVhdFBhc3N3b3JkUGxhY2Vob2xkZXJcIjogICBcIkNvbmZpcm1lIG51ZXZhIGNvbnRyYXNlw7FhXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogICAgICAgICAgICAgICAgXCJDYW5jZWxhclwiLFxuICAgIFwic3VjY2Vzc1RleHRcIjogICAgICAgICAgICAgICAgIFwiSGVtb3MgZW52aWFkbyB1biBlbWFpbCBwYXJhIGNvbXBsZXRhciBlbCByZXNldGVvIGRlIHN1IGNvbnRyYXNlw7FhLlwiLFxuICAgIFwiZW50ZXJTYW1lUGFzc3dvcmRUZXh0XCI6ICAgICAgIFwiUG9yIGZhdm9yIGluZ3Jlc2UgbGEgbWlzbWEgY29udHJhc2XDsWEuXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6ICAgICAgICAgICAgICAgICAgXCJQb3IgZmF2b3IgaW5ncmVzZSBzdSBlbWFpbCB5IGxhIG51ZXZhIGNvbnRyYXNlw7FhLiBFbnZpYXJlbW9zIHVuIGVtYWlsIHBhcmEgY29uZmlybWFyIGVsIGNhbWJpby5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiAgICAgICAgICAgICBcIkh1Ym8gdW4gZXJyb3IgYWwgcmVzZXRlYXIgc3UgY29udHJhc2XDsWEuXCIsXG4gICAgXCJ1c2VyRG9lc05vdEV4aXN0RXJyb3JUZXh0XCI6ICAgXCJVc3VhcmlvIGludsOhbGlkby5cIixcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHM9e1xuICBcImxvYWRpbmdUaXRsZVwiOiBcIlZldWlsbGV6IHBhdGllbnRlci4uLlwiLFxuICBcImNsb3NlXCI6IFwiRmVybWVyXCIsXG4gIFwid2luZG93c0F1dGhUaXRsZVwiOiBcIkNvbm5leGlvbiBXaW5kb3dzXCIsXG4gIFwic2lnbmluXCI6IHtcbiAgICBcInRpdGxlXCI6IFwiQ29ubmV4aW9uXCIsXG4gICAgXCJhY3Rpb25cIjogXCJDb25uZXhpb25cIixcbiAgICBcImFsbFwiOiBcIkFmZmljaGVyIHRvdXRcIixcbiAgICBcInN0cmF0ZWd5RW1haWxFbXB0eVwiOiBcIkxlIGNvdXJyaWVsIGVzdCB2aWRlLlwiLFxuICAgIFwic3RyYXRlZ3lFbWFpbEludmFsaWRcIjogXCJMZSBjb3VycmllbCBuJ2VzdCBwYXMgdmFsaWRlLlwiLFxuICAgIFwic3RyYXRlZ3lEb21haW5JbnZhbGlkXCI6IFwiTGUgZG9tYWluZSB7ZG9tYWlufSBuJ2EgcGFzIMOpdMOpIGNvbmZpZ3Vyw6kuXCIsXG4gICAgXCJzaWdudXBUZXh0XCI6IFwiSW5zY3JpdmV6LXZvdXNcIixcbiAgICBcImZvcmdvdFRleHRcIjogXCJWb3VzIGF2ZXogb3VibGnDqSB2b3RyZSBtb3QgZGUgcGFzc2UgP1wiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIkNvdXJyaWVsXCIsXG4gICAgXCJ1c2VybmFtZVBsYWNlaG9sZGVyXCI6IFwiTm9tIGQndXRpbGlzYXRldXJcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCJNb3QgZGUgcGFzc2VcIixcbiAgICBcInNlcGFyYXRvclRleHRcIjogXCJvdVwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwiRXJyZXVyIGxvcnMgZGUgbGEgY29ubmV4aW9uLlwiLFxuICAgIFwicmV0dXJuVXNlckxhYmVsXCI6IFwiTG9ycyBkZSB2b3RyZSBkZXJuacOocmUgY29ubmV4aW9uIHZvdXMgYXZleiB1dGlsaXPDqS4uLlwiLFxuICAgIFwiZG9tYWluVXNlckxhYmVsXCI6IFwiVm91cyDDqnRlcyBjb25uZWN0w6kgZGVwdWlzIGxlIHLDqXNlYXUgZGUgdm90cmUgZW50cmVwcmlzZS4uLlwiLFxuICAgIFwid3JvbmdFbWFpbFBhc3N3b3JkRXJyb3JUZXh0XCI6IFwiQ291cnJpZWwgb3UgbW90IGRlIHBhc3NlIGluY29ycmVjdC5cIixcbiAgICBcIm9yXCI6IFwiLi4uIG91IGNvbm5lY3Rlei12b3VzIMOgIGwnYWlkZSBkZVwiLFxuICAgIFwibG9hZGluZ01lc3NhZ2VcIjogXCJDb25uZXhpb24gw6AgbCdhaWRlIGRlIHtjb25uZWN0aW9ufS4uLlwiXG4gIH0sXG4gIFwic2lnbnVwXCI6IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgXCJ0aXRsZVwiOiBcIkluc2NyaXZlei12b3VzXCIsXG4gICAgXCJhY3Rpb25cIjogXCJJbnNjcml2ZXotdm91c1wiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIkNvdXJyaWVsXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwiQ3LDqWVyIHVuIG1vdCBkZSBwYXNzZVwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6IFwiQW5udWxlclwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcIlZldWlsbGV6IGVudHJlciB2b3RyZSBjb3VycmllbCBldCBtb3QgZGUgcGFzc2VcIixcbiAgICBcImZvb3RlclRleHRcIjogXCJcIixcbiAgICBcImVudGVycHJpc2VFbWFpbFdhcm5pbmdUZXh0XCI6IFwiQ2UgZG9tYWluZSB7ZG9tYWlufSBhIMOpdMOpIGNvbmZpZ3Vyw6kgcG91ciBsZSBTaW5nbGUgU2lnbiBPbiBldCB2b3VzIG5lIHBvdXZleiBwYXMgY3LDqWVyIGRlIGNvbXB0ZS4gRXNzYXlleiBkZSB2b3VzIGNvbm5lY3RlciDDoCB1biBjb21wdGUgZXhpc3RhbnQuXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCJFcnJldXIgbG9ycyBkZSBsJ2luc2NyaXB0aW9uLlwiLFxuICAgIFwidXNlckV4aXN0c0Vycm9yVGV4dFwiOiBcIkNldCB1dGlsaXNhdGV1ciBleGlzdGUgZMOpasOgLlwiXG4gIH0sXG4gIFwicmVzZXRcIjoge1xuICAgIFwidGl0bGVcIjogXCJSw6lpbml0aWFsaXNlciB2b3RyZSBtb3QgZGUgcGFzc2VcIixcbiAgICBcImFjdGlvblwiOiBcIkVudm95ZXJcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCJDb3VycmllbFwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIk5vdXZlYXUgbW90IGRlIHBhc3NlXCIsXG4gICAgXCJyZXBlYXRQYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwiQ29uZmlybWVyIGxlIG5vdXZlYXUgbW90IGRlIHBhc3NlXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogXCJBbm51bGVyXCIsXG4gICAgXCJzdWNjZXNzVGV4dFwiOiBcIlZvdXMgYWxsZXogcmVjZXZvaXIgc291cyBxdWVscXVlcyBtaW51dGVzIHVuIGNvdXJyaWVsIHZvdXMgaW5kaXF1YW50IGNvbW1lbnQgcsOpaW5pdGlhbGlzZXIgdm90cmUgbW90IGRlIHBhc3NlLlwiLFxuICAgIFwiZW50ZXJTYW1lUGFzc3dvcmRUZXh0XCI6IFwiUydpbCB2b3VzIHBsYcOudCBlbnRyZXogbGUgbcOqbWUgbW90IGRlIHBhc3NlLlwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcIlZldWlsbGV6IHNhaXNpciB2b3RyZSBjb3VycmllbCBldCBtb3QgZGUgcGFzc2UuIE5vdXMgdm91cyBlbnZlcnJvbnMgdW4gY291cnJpZWwgcG91ciBjb25maXJtZXIgbGUgY2hhbmdlbWVudCBkZSBtb3QgZGUgcGFzc2UuXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCJFcnJldXIgZGUgdHJhaXRlbWVudCBsb3MgZGUgcsOpaW5pdGlhbGlzYXRpb24gZHUgbW90IGRlIHBhc3NlLlwiLFxuICAgIFwidXNlckRvZXNOb3RFeGlzdEVycm9yVGV4dFwiOiBcIlV0aWxpc2F0ZXVyIGludHJvdXZhYmxlLlwiXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCIvL1wiOiBcIlRoaXMgaXMgYW4gYXV0b21hdGljIHRyYW5zbGF0aW9uLiBIZWxwIHVzIHRvIGltcHJvdmUgaXQuXCIsXG4gIFwibG9hZGluZ1RpdGxlXCI6IFwi15fXm9eUINeR15HXp9ep15QuLi5cIixcbiAgXCJjbG9zZVwiOiBcIteh15LXldeoXCIsXG4gIFwic2lnbmluXCI6IHtcbiAgICBcInRpdGxlXCI6IFwi15TXmdeo16nXnVwiLFxuICAgIFwiYWN0aW9uXCI6IFwi15TXmdeo16nXnVwiLFxuICAgIFwiYWxsXCI6IFwi15TXpteSINeU15vXnFwiLFxuICAgIFwic3RyYXRlZ3lFbWFpbEVtcHR5XCI6IFwi15TXk9eV15Ag15wg15TXldeQINeo15nXpy5cIixcbiAgICBcInN0cmF0ZWd5RW1haWxJbnZhbGlkXCI6IFwi15TXk9eV15Ag15wg15DXmdeg15Ug15fXlden15kuXCIsXG4gICAgXCJzdHJhdGVneURvbWFpbkludmFsaWRcIjogXCLXlNeq15fXldedIHtkb21haW59INec15Ag15TXmdeq15Qg16rXldeb16DXmdeqINeU15TXqten16DXlC5cIixcbiAgICBcInNpZ251cFRleHRcIjogXCLXlNeZ16jXqdedXCIsXG4gICAgXCJmb3Jnb3RUZXh0XCI6IFwi16nXm9eX16og15TXodeZ16HXnteQP1wiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIteT15XXkFwiLFxuICAgIFwidXNlcm5hbWVQbGFjZWhvbGRlclwiOiBcItep150g157Xqdeq157XqVwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIteh15nXodee15RcIixcbiAgICBcInNlcGFyYXRvclRleHRcIjogXCLXkNeVXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCLXkNeZ16jXoteUINep15LXmdeQ15Qg15HXoteZ15HXldeTINeU15vXoNeZ16HXlC5cIixcbiAgICBcInJldHVyblVzZXJMYWJlbFwiOiBcIteR16TXotedINeU15DXl9eo15XXoNeUINeg15vXoNeh16og15HXkNee16bXoteV16ouLi5cIixcbiAgICBcIndyb25nRW1haWxQYXNzd29yZEVycm9yVGV4dFwiOiBcIteU15PXldeQXFxcItecINeY15XXoteUINeQ15Ug16HXmdeh157XlC5cIixcbiAgICBcIm9yXCI6IFwiLiDXkNeVINeb16DXmdeh15Qg15HXkNee16bXoteV16pcIixcbiAgICBcImxvYWRpbmdNZXNzYWdlXCI6IFwi15vXoNeZ16HXlCDXotedIHtjb25uZWN0aW9ufS4uLlwiXG4gIH0sXG4gIFwic2lnbnVwXCI6IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgXCJ0aXRsZVwiOiBcIteU15nXqNep151cIixcbiAgICBcImFjdGlvblwiOiBcIteU15nXqNep151cIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCLXk9eV15BcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCLXpteV16gg16HXmdeh157XlFwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6IFwi15HXmdeY15XXnFwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcIteU15bXmdeg15Ug15DXqiDXm9eq15XXkdeqINeU157XmdeZ15wg15XXlNeh15nXodee15BcIixcbiAgICBcImZvb3RlclRleHRcIjogXCJcIixcbiAgICBcImVudGVycHJpc2VFbWFpbFdhcm5pbmdUZXh0XCI6IFwi16rXl9eV150g15bXlCwge2RvbWFpbn0g16DXp9eR16LXlCDXoteR15XXqCDXm9eg15nXodeUINeZ15fXmdeT15QsINeQ15nXnyDXkdeQ16TXqdeo15XXqteaINec15nXpteV16gg15fXqdeR15XXny4g16DXodeUINec15TXmdeb16DXoSDXkdee16fXldedLlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwi15DXmdeo16LXlCDXqdeS15nXkNeUINeR16LXmdeR15XXkyDXkNeqINeU16nXnNeYINec157Xotec15QuXCJcbiAgfSxcbiAgXCJyZXNldFwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcIteQ15nXpNeV16Eg16HXmdeh157XlFwiLFxuICAgIFwiYWN0aW9uXCI6IFwi16nXnNeXXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwi15PXldeQXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwi16HXmdeh157XlCDXl9eT16nXlFwiLFxuICAgIFwicmVwZWF0UGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIteQ16nXqCDXodeZ16HXnteUINeX15PXqdeUXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogXCLXkdeZ15jXldecXCIsXG4gICAgXCJzdWNjZXNzVGV4dFwiOiBcIteQ16DXl9eg15Ug16TXqdeV15gg15zXqdec15XXlyDXnNeaINeT15XXkNeoINeQ15zXp9eY16jXldeg15kg15vXk9eZINec15DXpNehINeQ16og15TXodeZ16HXnteUINep15zXmi5cIixcbiAgICBcImVudGVyU2FtZVBhc3N3b3JkVGV4dFwiOiBcIteU15bXmdeg15Ug15HXkden16nXlCDXkNeqINeQ15XXqteUINeh15nXodee15QuXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6IFwi15DXoNeQINeU15bXnyDXkNeqINeU15PXldeQ16gg15TXkNec16fXmNeo15XXoNeZINep15zXmiDXldeQ16og15TXodeZ16HXnteUINeU15fXk9ep15QuINeQ16DXlSDXoNep15zXlyDXnNeaINeU15XXk9ei16og15PXldeQ16gg15DXnNen15jXqNeV16DXmSDXm9eT15kg15zXkNep16gg16nXmdeg15XXmSDXlNeh15nXodee15QuXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCLXkNeZ16jXoteUINep15LXmdeQ15Qg15HXoteZ15HXldeTINeQ15nXpNeV16Eg15TXodeZ16HXnteULlwiXG4gIH1cbn0iLCJ2YXIgZGljc19kYXRhID0ge1xuICAnYXInOiByZXF1aXJlKCcuL2FyLmpzb24nKSxcbiAgJ2RlJzogcmVxdWlyZSgnLi9kZS5qc29uJyksXG4gICdlbic6IHJlcXVpcmUoJy4vZW4uanNvbicpLFxuICAnZXMnOiByZXF1aXJlKCcuL2VzLmpzb24nKSxcbiAgJ2ZyJzogcmVxdWlyZSgnLi9mci1GUi5qc29uJyksXG4gICdmci1GUic6IHJlcXVpcmUoJy4vZnItRlIuanNvbicpLFxuICAnaGUnOiByZXF1aXJlKCcuL2hlLmpzb24nKSxcbiAgJ2l0JzogcmVxdWlyZSgnLi9pdC5qc29uJyksXG4gICdqYSc6IHJlcXVpcmUoJy4vamEuanNvbicpLFxuICAnbmwnOiByZXF1aXJlKCcuL25sLU5MLmpzb24nKSxcbiAgJ25sLU5MJzogcmVxdWlyZSgnLi9ubC1OTC5qc29uJyksXG4gICdwdCc6IHJlcXVpcmUoJy4vcHQuanNvbicpLFxuICAncHQtQlInOiByZXF1aXJlKCcuL3B0LUJSLmpzb24nKSxcbiAgJ3J1JzogcmVxdWlyZSgnLi9ydS5qc29uJyksXG4gICd0bGgnOiByZXF1aXJlKCcuL3RsaC5qc29uJyksXG4gICd6aCc6IHJlcXVpcmUoJy4vemguanNvbicpXG59O1xuXG52YXIgZGVmYXVsdF9kaWN0ID0gZGljc19kYXRhWydlbiddO1xuXG5mdW5jdGlvbiBmaW5kUHJvcChvLCBzKSB7XG4gICAgcyA9IHMucmVwbGFjZSgvXFxbKFxcdyspXFxdL2csICc6JDEnKTsgLy8gY29udmVydCBpbmRleGVzIHRvIHByb3BlcnRpZXNcbiAgICBzID0gcy5yZXBsYWNlKC9eXFw6LywgJycpOyAgICAgICAgICAgLy8gc3RyaXAgYSBsZWFkaW5nIGRvdFxuICAgIHZhciBhID0gcy5zcGxpdCgnOicpO1xuICAgIHdoaWxlIChhLmxlbmd0aCkge1xuICAgICAgICB2YXIgbiA9IGEuc2hpZnQoKTtcbiAgICAgICAgaWYgKG4gaW4gbykge1xuICAgICAgICAgICAgbyA9IG9bbl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG87XG59XG5cbmZ1bmN0aW9uIERpY3Rpb25hcnkgKGRhdGEpIHtcbiAgdGhpcy5fZGF0YSA9IGRhdGE7XG59XG5cbkRpY3Rpb25hcnkucHJvdG90eXBlLnQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBmaW5kUHJvcCh0aGlzLl9kYXRhLCBrZXkpIHx8IGZpbmRQcm9wKGRlZmF1bHRfZGljdCwga2V5KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLmdldERpY3QgPSBmdW5jdGlvbiAoIGxhbmdPckRpY3QgKSB7XG5cbiAgaWYgKCFsYW5nT3JEaWN0KSB7XG4gICAgcmV0dXJuIG5ldyBEaWN0aW9uYXJ5KGRlZmF1bHRfZGljdCk7XG4gIH1cblxuICBpZiAoIHR5cGVvZiBsYW5nT3JEaWN0ID09PSAnc3RyaW5nJyApIHtcbiAgICB2YXIgZGljdCA9IGRpY3NfZGF0YVtsYW5nT3JEaWN0XSB8fCBkaWNzX2RhdGFbbGFuZ09yRGljdC5zcGxpdCgnLScpWzBdXTtcbiAgICByZXR1cm4gbmV3IERpY3Rpb25hcnkoZGljdCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBEaWN0aW9uYXJ5KGxhbmdPckRpY3QpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHM9e1xuICBcIi8vXCI6IFwiVGhpcyBpcyBhbiBhdXRvbWF0aWMgdHJhbnNsYXRpb24uIEhlbHAgdXMgdG8gaW1wcm92ZSBpdC5cIixcbiAgXCJsb2FkaW5nVGl0bGVcIjogXCJBdHRlbmRlcmUgcHJlZ28uLi5cIixcbiAgXCJjbG9zZVwiOiBcIkNoaXVkZXJlXCIsXG4gIFwic2lnbmluXCI6IHtcbiAgICBcInRpdGxlXCI6IFwiQWNjZWRpXCIsXG4gICAgXCJhY3Rpb25cIjogXCJBY2NlZGlcIixcbiAgICBcImFsbFwiOiBcIlZpc3VhbGl6emEgdHV0dGlcIixcbiAgICBcInN0cmF0ZWd5RW1haWxFbXB0eVwiOiBcIkwnZW1haWwgw6ggdnVvdGEuXCIsXG4gICAgXCJzdHJhdGVneUVtYWlsSW52YWxpZFwiOiBcIkwnZW1haWwgbm9uIMOoIHZhbGlkby5cIixcbiAgICBcInN0cmF0ZWd5RG9tYWluSW52YWxpZFwiOiBcIklsIGRvbWluaW8ge2RvbWFpbn0gbm9uIMOoIHN0YXRhIGwnaW5zdGFsbGF6aW9uZS5cIixcbiAgICBcInNpZ251cFRleHRcIjogXCJSZWdpc3RyYXRpXCIsXG4gICAgXCJmb3Jnb3RUZXh0XCI6IFwiSGFpIGRpbWVudGljYXRvIGxhIHBhc3N3b3JkP1wiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIlBvc3RhIGVsZXR0cm9uaWNhXCIsXG4gICAgXCJ1c2VybmFtZVBsYWNlaG9sZGVyXCI6IFwiTm9tZSB1dGVudGVcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCJQYXNzd29yZFwiLFxuICAgIFwic2VwYXJhdG9yVGV4dFwiOiBcIm9cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIkMnw6ggc3RhdG8gdW4gZXJyb3JlIGR1cmFudGUgbCdlbGFib3JhemlvbmUgaWwgc2Vnbm8gaW4uXCIsXG4gICAgXCJyZXR1cm5Vc2VyTGFiZWxcIjogXCJVbHRpbWEgdm9sdGEgY2hlIGhhaSBlc2VndWl0byB1dGlsaXp6YW5kby4uLlwiLFxuICAgIFwid3JvbmdFbWFpbFBhc3N3b3JkRXJyb3JUZXh0XCI6IFwiRW1haWwgZXJyYXRvIG8gcGFzc3dvcmQuXCIsXG4gICAgXCJvclwiOiBcIi4uLiBvcHB1cmUgYWNjZWRpIHVzYW5kb1wiLFxuICAgIFwibG9hZGluZ01lc3NhZ2VcIjogXCJBY2NlZGkgY29uIHtjb25uZWN0aW9ufS4uLlwiXG4gIH0sXG4gIFwic2lnbnVwXCI6IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgXCJ0aXRsZVwiOiBcIlJlZ2lzdHJhdGlcIixcbiAgICBcImFjdGlvblwiOiBcIlJlZ2lzdHJhdGlcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCJQb3N0YSBlbGV0dHJvbmljYVwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIkNyZWFyZSB1bmEgUGFzc3dvcmRcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcIkFubnVsbGFcIixcbiAgICBcImhlYWRlclRleHRcIjogXCJJbnNlcmlzY2kgbGEgdHVhIGVtYWlsIGUgbGEgcGFzc3dvcmRcIixcbiAgICBcImZvb3RlclRleHRcIjogXCJcIixcbiAgICBcImVudGVycHJpc2VFbWFpbFdhcm5pbmdUZXh0XCI6IFwiUXVlc3RvIGRvbWluaW8ge2RvbWFpbn0gw6ggc3RhdG8gY29uZmlndXJhdG8gcGVyIGlsIFNpbmdsZSBTaWduIE9uIGUgbm9uIMOoIHBvc3NpYmlsZSBjcmVhcmUgdW4gYWNjb3VudC4gUHJvdmEgYWQgYWNjZWRlcmUgaW52ZWNlLlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwiQyfDqCBzdGF0byB1biBlcnJvcmUgZHVyYW50ZSBsJ2VsYWJvcmF6aW9uZSBpbCBzZWdubyBmaW5vLlwiXG4gIH0sXG4gIFwicmVzZXRcIjoge1xuICAgIFwidGl0bGVcIjogXCJSZWltcG9zdGFyZSBsYSBQYXNzd29yZFwiLFxuICAgIFwiYWN0aW9uXCI6IFwiSW52aWFcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCJQb3N0YSBlbGV0dHJvbmljYVwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIk51b3ZhIFBhc3N3b3JkXCIsXG4gICAgXCJyZXBlYXRQYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwiQ29uZmVybWEgbnVvdmEgUGFzc3dvcmRcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcIkFubnVsbGFcIixcbiAgICBcInN1Y2Nlc3NUZXh0XCI6IFwiTm9pIGFiYmlhbW8gYXBwZW5hIGludmlhdG8gdW4nZS1tYWlsIHBlciByZWltcG9zdGFyZSBsYSBwYXNzd29yZC5cIixcbiAgICBcImVudGVyU2FtZVBhc3N3b3JkVGV4dFwiOiBcIkluc2VyaXNjaSBsYSBzdGVzc2EgcGFzc3dvcmQuXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6IFwiSW5zZXJpc2NpIGlsIHR1byBpbmRpcml6em8gZW1haWwgZSBsYSBwYXNzd29yZCBudW92YS4gVGkgaW52aWVyZW1vIHVuJ2VtYWlsIHBlciBjb25mZXJtYXJlIGxhIG1vZGlmaWNhIGRlbGxhIHBhc3N3b3JkLlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwiQyfDqCBzdGF0byB1biBlcnJvcmUgZHVyYW50ZSBsJ2VsYWJvcmF6aW9uZSBpbCBwYXNzd29yZCByZXNldC5cIlxuICB9XG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcIi8vXCI6IFwiVGhpcyBpcyBhbiBhdXRvbWF0aWMgdHJhbnNsYXRpb24uIEhlbHAgdXMgdG8gaW1wcm92ZSBpdC5cIixcbiAgXCJsb2FkaW5nVGl0bGVcIjogXCLjgYrlvoXjgaHjgY/jgaDjgZXjgYTjgILjgILjgIJcIixcbiAgXCJjbG9zZVwiOiBcIumWieOBmOOCi1wiLFxuICBcInNpZ25pblwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcIuOCteOCpOODs+OCpOODs1wiLFxuICAgIFwiYWN0aW9uXCI6IFwi44K144Kk44Oz44Kk44OzXCIsXG4gICAgXCJhbGxcIjogXCLjgZnjgbnjgabooajnpLrjgZfjgb7jgZnjgIJcIixcbiAgICBcInN0cmF0ZWd5RW1haWxFbXB0eVwiOiBcIumbu+WtkOODoeODvOODq+OBjOepuuOBp+OBmeOAglwiLFxuICAgIFwic3RyYXRlZ3lFbWFpbEludmFsaWRcIjogXCLpm7vlrZDjg6Hjg7zjg6vjga/mnInlirnjgafjgZnjgIJcIixcbiAgICBcInN0cmF0ZWd5RG9tYWluSW52YWxpZFwiOiBcInvjg4njg6HjgqTjg7N9IOOCu+ODg+ODiOOCouODg+ODl+OBleOCjOOBpuOBhOOBvuOBm+OCk+OAglwiLFxuICAgIFwic2lnbnVwVGV4dFwiOiBcIuOCteOCpOODs+OCouODg+ODl1wiLFxuICAgIFwiZm9yZ290VGV4dFwiOiBcIuODkeOCueODr+ODvOODieOCkuOBiuW/mOOCjOOBp+OBmeOBi++8n1wiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIumbu+WtkOODoeODvOODq1wiLFxuICAgIFwidXNlcm5hbWVQbGFjZWhvbGRlclwiOiBcIuODpuODvOOCtuWQjVwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIuODkeOCueODr+ODvOODiVwiLFxuICAgIFwic2VwYXJhdG9yVGV4dFwiOiBcIuOBvuOBn+OBr1wiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwi44K144Kk44Oz44Kk44Oz44KS5Yem55CG5Lit44Gr44Ko44Op44O844GM44GC44KK44G+44GX44Gf44CCXCIsXG4gICAgXCJyZXR1cm5Vc2VyTGFiZWxcIjogXCLmnIDlvozjga7mmYLplpPjgpLkvb/nlKjjgZfjgabjgpLjgrXjgqTjg7PjgqTjg7PjgZfjgaYuXCIsXG4gICAgXCJ3cm9uZ0VtYWlsUGFzc3dvcmRFcnJvclRleHRcIjogXCLplpPpgZXjgaPjgZ/jg6Hjg7zjg6sg44Ki44OJ44Os44K544G+44Gf44Gv44OR44K544Ov44O844OJ44Gn44GZ44CCXCIsXG4gICAgXCJvclwiOiBcIi4uLiDjgb7jgZ/jga/jgpLkvb/nlKjjgZfjgabjgrXjgqTjg7PjgqTjg7NcIixcbiAgICBcImxvYWRpbmdNZXNzYWdlXCI6IFwi44Gn44K144Kk44Oz44Kk44OzIHtjb25uZWN0aW9ufS4uLlwiXG4gIH0sXG4gIFwic2lnbnVwXCI6IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgXCJ0aXRsZVwiOiBcIuOCteOCpOODs+OCouODg+ODl1wiLFxuICAgIFwiYWN0aW9uXCI6IFwi44K144Kk44Oz44Ki44OD44OXXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwi6Zu75a2Q44Oh44O844OrXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwi44OR44K544Ov44O844OJ44KS5L2c5oiQ44GX44G+44GZ44CCXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogXCLjgq3jg6Pjg7Pjgrvjg6tcIixcbiAgICBcImhlYWRlclRleHRcIjogXCLjgYLjgarjgZ/jga7jg6Hjg7zjg6sg44Ki44OJ44Os44K544Go44OR44K544Ov44O844OJ44KS5YWl5Yqb44GX44Gm44GP44Gg44GV44GE44CCXCIsXG4gICAgXCJmb290ZXJUZXh0XCI6IFwiXCIsXG4gICAgXCJlbnRlcnByaXNlRW1haWxXYXJuaW5nVGV4dFwiOiBcIuOBk+OBruODieODoeOCpOODsyB7fSDjgYzmp4vmiJDjgZXjgozjgabjgYTjgovjgrfjg7PjgrDjg6sg44K144Kk44Oz44Kq44OzIOODuyDjgqLjgqvjgqbjg7Pjg4jjgpLkvZzmiJDjgZnjgovjgZPjgajjga/jgafjgY3jgb7jgZvjgpPjgILku6Pjgo/jgorjgavjgrXjgqTjg7PjgqTjg7PjgZfjgabjgY/jgaDjgZXjgYTjgIJcIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIuespuWPt+OCkuWHpueQhuS4reOBq+OCqOODqeODvOOBjOOBguOCiuOBvuOBl+OBn+OAglwiXG4gIH0sXG4gIFwicmVzZXRcIjoge1xuICAgIFwidGl0bGVcIjogXCLjg5Hjgrnjg6/jg7zjg4njga7jg6rjgrvjg4Pjg4hcIixcbiAgICBcImFjdGlvblwiOiBcIumAgeS/oVwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIumbu+WtkOODoeODvOODq1wiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIuaWsOOBl+OBhOODkeOCueODr+ODvOODiVwiLFxuICAgIFwicmVwZWF0UGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIuaWsOOBl+OBhOODkeOCueODr+ODvOODieOCkueiuuiqjeOBl+OBvuOBmeOAglwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6IFwi44Kt44Oj44Oz44K744OrXCIsXG4gICAgXCJzdWNjZXNzVGV4dFwiOiBcIuaIkeOAhSDjga/jgaHjgofjgYbjganjgYLjgarjgZ/jga7jg5Hjgrnjg6/jg7zjg4njgpLjg6rjgrvjg4Pjg4jjgZnjgovjg6Hjg7zjg6vjgpLpgIHkv6HjgZfjgb7jgZfjgZ/jgIJcIixcbiAgICBcImVudGVyU2FtZVBhc3N3b3JkVGV4dFwiOiBcIuWQjOOBmOODkeOCueODr+ODvOODieOCkuWFpeWKm+OBl+OBpuOBj+OBoOOBleOBhOOAglwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcIuOBguOBquOBn+OBruODoeODvOODqyDjgqLjg4njg6zjgrnjgajmlrDjgZfjgYTjg5Hjgrnjg6/jg7zjg4njgpLlhaXlipvjgZfjgabjgY/jgaDjgZXjgYTjgILmiJHjgIUg44Gv44CB44OR44K544Ov44O844OJ44Gu5aSJ5pu044KS56K66KqN44GZ44KL44Gf44KB44Gr44Oh44O844Or44GM6YCB5L+h44GV44KM44G+44GZ44CCXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCLjg5Hjgrnjg6/jg7zjg4njga7jg6rjgrvjg4Pjg4jjgpLlh6bnkIbkuK3jgavjgqjjg6njg7zjgYzjgYLjgorjgb7jgZfjgZ/jgIJcIlxuICB9XG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcIi8vXCI6IFwiVGhpcyBpcyBhbiBhdXRvbWF0aWMgdHJhbnNsYXRpb24uIEhlbHAgdXMgdG8gaW1wcm92ZSBpdC5cIixcbiAgXCJsb2FkaW5nVGl0bGVcIjogXCJFZW4gb2dlbmJsaWsgZ2VkdWxkLi4uXCIsXG4gIFwiY2xvc2VcIjogXCJTbHVpdGVuXCIsXG4gIFwic2lnbmluXCI6IHtcbiAgICBcInRpdGxlXCI6IFwiQWFubWVsZGVuXCIsXG4gICAgXCJhY3Rpb25cIjogXCJBYW5tZWxkZW5cIixcbiAgICBcImFsbFwiOiBcIlRvb24gYWxsZXNcIixcbiAgICBcInN0cmF0ZWd5RW1haWxFbXB0eVwiOiBcIkhldCB2ZWxkIGUtbWFpbCBpcyBsZWVnLlwiLFxuICAgIFwic3RyYXRlZ3lFbWFpbEludmFsaWRcIjogXCJIZXQgdmVsZCBlLW1haWwgaXMgb25nZWxkaWcuXCIsXG4gICAgXCJzdHJhdGVneURvbWFpbkludmFsaWRcIjogXCJIZXQgZG9tZWluIHtkb21haW59IGlzIG5pZXQgZ2VhY3RpdmVlcmQuXCIsXG4gICAgXCJzaWdudXBUZXh0XCI6IFwiQWFubWVsZGVuXCIsXG4gICAgXCJmb3Jnb3RUZXh0XCI6IFwiV2FjaHR3b29yZCB2ZXJnZXRlbj9cIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCJFLW1haWxcIixcbiAgICBcInVzZXJuYW1lUGxhY2Vob2xkZXJcIjogXCJVc2VybmFtZWFcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCJXYWNodHdvb3JkXCIsXG4gICAgXCJzZXBhcmF0b3JUZXh0XCI6IFwib2ZcIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIkVyIGlzIGVlbiBmb3V0IG9wZ2V0cmVkZW4gdGlqZGVucyBoZXQgaW5sb2dnZW4uXCIsXG4gICAgXCJyZXR1cm5Vc2VyTGFiZWxcIjogXCJEZSBsYWF0c3RlIGtlZXIgbG9nZGUgamUgaW4gbWV0Li4uXCIsXG4gICAgXCJ3cm9uZ0VtYWlsUGFzc3dvcmRFcnJvclRleHRcIjogXCJWZXJrZWVyZCBlLW1haWwgb2Ygd2FjaHR3b29yZC5cIixcbiAgICBcIm9yXCI6IFwiLi4uIG9mIG1lbGQgdSBhYW4gbWV0XCIsXG4gICAgXCJsb2FkaW5nTWVzc2FnZVwiOiBcIkFhbm1lbGRlbiBtZXQge2Nvbm5lY3Rpb259Li4uXCJcbiAgfSxcbiAgXCJzaWdudXBcIjoge1xuICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICBcInRpdGxlXCI6IFwiQWFubWVsZGVuXCIsXG4gICAgXCJhY3Rpb25cIjogXCJBYW5tZWxkZW5cIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCJFLW1haWxcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCJFZW4gd2FjaHR3b29yZCBtYWtlblwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6IFwiQW5udWxlcmVuXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6IFwiVm9lciBqZSBlbWFpbCBlbiB3YWNodHdvb3JkIGluXCIsXG4gICAgXCJmb290ZXJUZXh0XCI6IFwiXCIsXG4gICAgXCJlbnRlcnByaXNlRW1haWxXYXJuaW5nVGV4dFwiOiBcIkRpdCBkb21laW4ge2RvbWFpbn0gaXMgZ2Vjb25maWd1cmVlcmQgdm9vciBlZW5tYWxpZ2UgYWFubWVsZGluZyBlbiB1IGt1bnQgZ2VlbiBhY2NvdW50IGFhbm1ha2VuLiBQcm9iZWVyIHUgYWFuIHRlIG1lbGRlbiBpbiBwbGFhdHMgZGFhcnZhbi5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIkVyIGlzIGVlbiBmb3V0IG9wZ2V0cmVkZW4gYmlqIGRlIHZlcndlcmtpbmcgdmFuIHV3IGFhbm1lbGRpbmcuXCJcbiAgfSxcbiAgXCJyZXNldFwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcIldhY2h0d29vcmQgcmVzZXR0ZW5cIixcbiAgICBcImFjdGlvblwiOiBcIlZlcnplbmRlblwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIkUtbWFpbFwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIk5pZXV3IHdhY2h0d29vcmRcIixcbiAgICBcInJlcGVhdFBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCJCZXZlc3RpZyBoZXQgbmlldXdlIHdhY2h0d29vcmRcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcIkFubnVsZXJlblwiLFxuICAgIFwic3VjY2Vzc1RleHRcIjogXCJXZSBoZWJiZW4gdSB6b2p1aXN0IGVlbiBlLW1haWwgZ2VzdHV1cmQgb20gdXcgd2FjaHR3b29yZCB0ZSByZXNldHRlbi5cIixcbiAgICBcImVudGVyU2FtZVBhc3N3b3JkVGV4dFwiOiBcIlZvZXIgaGV0emVsZmRlIHdhY2h0d29vcmQgaW4uXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6IFwiVm9lciB1dyBlLW1haWxhZHJlcyBlbiBoZXQgbmlldXdlIHdhY2h0d29vcmQgaW4uIFdpaiBzdHVyZW4gdSBlZW4gZS1tYWlsIHRlciBiZXZlc3RpZ2luZyB2YW4gZGUgd2FjaHR3b29yZHN3aWp6aWdpbmcuXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCJFciBpcyBlZW4gZm91dCBvcGdldHJlZGVuIGJpaiBkZSB2ZXJ3ZXJraW5nIHZhbiBoZXQgbmlldXdlIHdhY2h0d29vcmQuXCJcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHM9e1xuICBcImxvYWRpbmdUaXRsZVwiOiBcIkNhcnJlZ2FuZG8uLi5cIixcbiAgXCJjbG9zZVwiOiBcIkZlY2hhclwiLFxuICBcInNpZ25pblwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcIkVudHJhclwiLFxuICAgIFwiYWN0aW9uXCI6IFwiRW50cmFyXCIsXG4gICAgXCJhbGxcIjogXCJNb3N0cmFyIHRvZG9zXCIsXG4gICAgXCJzdHJhdGVneUVtYWlsRW1wdHlcIjogXCJPIGUtbWFpbCBkZXZlIHNlciBwcmVlbmNoaWRvLlwiLFxuICAgIFwic3RyYXRlZ3lFbWFpbEludmFsaWRcIjogXCJPIGVtYWlsIMOpIGludsOhbGlkby5cIixcbiAgICBcInN0cmF0ZWd5RG9tYWluSW52YWxpZFwiOiBcIk8gZG9tw61uaW8ge2RvbWFpbn0gbsOjbyBmb2kgaW5mb3JtYWRvLlwiLFxuICAgIFwic2lnbnVwVGV4dFwiOiBcIlJlZ2lzdGUtc2VcIixcbiAgICBcImZvcmdvdFRleHRcIjogXCJFc3F1ZWNldSBzdWEgc2VuaGE/XCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwiRS1tYWlsXCIsXG4gICAgXCJ1c2VybmFtZVBsYWNlaG9sZGVyXCI6IFwiTm9tZSBkZSBVc3XDoXJpb1wiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIlNlbmhhXCIsXG4gICAgXCJzZXBhcmF0b3JUZXh0XCI6IFwib3VcIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIkhvdXZlIHVtIGVycm8gYW8gZWZldHVhciBvIGxvZ2luLlwiLFxuICAgIFwicmV0dXJuVXNlckxhYmVsXCI6IFwiRGEgw7psdGltYSB2ZXogcXVlIHZvY8OqIGZleiBsb2dpbiB1c2FuZG8uLi5cIixcbiAgICBcIndyb25nRW1haWxQYXNzd29yZEVycm9yVGV4dFwiOiBcIkUtbWFpbCBvdSBzZW5oYSBpbnbDoWxpZG9zLlwiLFxuICAgIFwib3JcIjogXCIuLi4gb3UgZW50cmUgdXNhbmRvXCIsXG4gICAgXCJsb2FkaW5nTWVzc2FnZVwiOiBcIkVudHJhciBjb20ge2Nvbm5lY3Rpb259Li4uXCJcbiAgfSxcbiAgXCJzaWdudXBcIjoge1xuICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICBcInRpdGxlXCI6IFwiQ2FkYXN0cmUtc2VcIixcbiAgICBcImFjdGlvblwiOiBcIkNhZGFzdHJlLXNlXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwiRS1tYWlsXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwiQ3JpZSB1bWEgc2VuaGFcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcIkNhbmNlbGFyXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6IFwiUG9yIGZhdm9yLCBkaWdpdGUgc2V1IGUtbWFpbCBlIHNlbmhhXCIsXG4gICAgXCJmb290ZXJUZXh0XCI6IFwiXCIsXG4gICAgXCJlbnRlcnByaXNlRW1haWxXYXJuaW5nVGV4dFwiOiBcIkVzdGUgZG9tw61uaW8ge2RvbWFpbn0gZm9pIGNvbmZpZ3VyYWRvIHBhcmEgU2lnbi1PbiDDum5pY28gZSB2b2PDqiBuw6NvIHBvZGUgY3JpYXIgdW1hIGNvbnRhLiBUZW50ZSBmYXplciBvIGxvZ2luIGVtIHZleiBkaXNzby5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIkhvdXZlIHVtIGVycm8gYW8gZWZldHVhciBvIGxvZ2luLlwiXG4gIH0sXG4gIFwicmVzZXRcIjoge1xuICAgIFwidGl0bGVcIjogXCJSZWRlZmluaXIgc2VuaGFcIixcbiAgICBcImFjdGlvblwiOiBcIkVudmlhclwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIkUtbWFpbFwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIk5vdmEgc2VuaGFcIixcbiAgICBcInJlcGVhdFBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCJDb25maXJtYXIgbm92YSBzZW5oYVwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6IFwiQ2FuY2VsYXJcIixcbiAgICBcInN1Y2Nlc3NUZXh0XCI6IFwiSsOhIGVudmlhbW9zIHVtIGUtbWFpbCBwYXJhIHJlZGVmaW5pciBzdWEgc2VuaGEuXCIsXG4gICAgXCJlbnRlclNhbWVQYXNzd29yZFRleHRcIjogXCJQb3IgZmF2b3IgZGlnaXRlIGEgbWVzbWEgc2VuaGEuXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6IFwiUG9yIGZhdm9yLCBkaWdpdGUgc2V1IGUtbWFpbCBlIGEgc2VuaGEgbm92YS4gTsOzcyBsaGUgZW52aWFyZW1vcyB1bSBlLW1haWwgcGFyYSBjb25maXJtYXIgYSBhbHRlcmHDp8OjbyBkZSBzZW5oYS5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIkhvdXZlIHVtIGVycm8gYW8gcmVkZWZpbmlyIGEgc2VuaGEuXCJcbiAgfVxufSIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCIvL1wiOiBcIlRoaXMgaXMgYW4gYXV0b21hdGljIHRyYW5zbGF0aW9uLiBIZWxwIHVzIHRvIGltcHJvdmUgaXQuXCIsXG4gIFwibG9hZGluZ1RpdGxlXCI6IFwiQWd1YXJkZS4uLlwiLFxuICBcImNsb3NlXCI6IFwiRmVjaGFyXCIsXG4gIFwic2lnbmluXCI6IHtcbiAgICBcInRpdGxlXCI6IFwiRW50cmFyXCIsXG4gICAgXCJhY3Rpb25cIjogXCJFbnRyYXJcIixcbiAgICBcImFsbFwiOiBcIk1vc3RyYXIgdG9kb3NcIixcbiAgICBcInN0cmF0ZWd5RW1haWxFbXB0eVwiOiBcIk8gZS1tYWlsIMOpIHZhemlvLlwiLFxuICAgIFwic3RyYXRlZ3lFbWFpbEludmFsaWRcIjogXCJPIGVtYWlsIMOpIGludsOhbGlkby5cIixcbiAgICBcInN0cmF0ZWd5RG9tYWluSW52YWxpZFwiOiBcIk8gZG9tw61uaW8ge2RvbWFpbn0gbsOjbyBmb2kgYSBpbnN0YWxhw6fDo28uXCIsXG4gICAgXCJzaWdudXBUZXh0XCI6IFwiSW5zY3Jpw6fDo29cIixcbiAgICBcImZvcmdvdFRleHRcIjogXCJFc3F1ZWNldSBzdWEgc2VuaGE/XCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwiRW1haWxcIixcbiAgICBcInVzZXJuYW1lUGxhY2Vob2xkZXJcIjogXCJOb21lIGRlIFVzdcOhcmlvXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwiU2VuaGFcIixcbiAgICBcInNlcGFyYXRvclRleHRcIjogXCJvdVwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwiSG91dmUgdW0gZXJybyBhbyBwcm9jZXNzYXIgbyBzaW5hbCBlbS5cIixcbiAgICBcInJldHVyblVzZXJMYWJlbFwiOiBcIkRhIMO6bHRpbWEgdmV6IHF1ZSB2b2PDqiBhc3Npbm91IHVzYW5kby4uLlwiLFxuICAgIFwid3JvbmdFbWFpbFBhc3N3b3JkRXJyb3JUZXh0XCI6IFwiU2VuaGEgb3UgZS1tYWlsIGVycmFkby5cIixcbiAgICBcIm9yXCI6IFwiLi4uIG91IENhZGFzdHJlLXNlIG5vIHVzbyBkZVwiLFxuICAgIFwibG9hZGluZ01lc3NhZ2VcIjogXCJFbnRyYXIgY29tIHtjb25uZWN0aW9ufS4uLlwiXG4gIH0sXG4gIFwic2lnbnVwXCI6IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgXCJ0aXRsZVwiOiBcIkluc2NyacOnw6NvXCIsXG4gICAgXCJhY3Rpb25cIjogXCJJbnNjcmnDp8Ojb1wiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIkVtYWlsXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwiQ3JpZSB1bWEgc2VuaGFcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcIkNhbmNlbGFyXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6IFwiUG9yIGZhdm9yLCBkaWdpdGUgc2V1IGUtbWFpbCBlIHNlbmhhXCIsXG4gICAgXCJmb290ZXJUZXh0XCI6IFwiXCIsXG4gICAgXCJlbnRlcnByaXNlRW1haWxXYXJuaW5nVGV4dFwiOiBcIkVzdGUgZG9tw61uaW8ge2RvbWFpbn0gdGl2ZXIgc2lkbyBjb25maWd1cmFkbyBwYXJhIFNpZ24tT24gw7puaWNvIGUgdm9jw6ogbsOjbyBwb2RlIGNyaWFyIHVtYSBjb250YS4gVGVudGUgZW50cmFyIGVtIHZleiBkaXNzby5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIkhvdXZlIHVtIGVycm8gYW8gcHJvY2Vzc2FyIG8gc2luYWwgZGUgY2ltYS5cIlxuICB9LFxuICBcInJlc2V0XCI6IHtcbiAgICBcInRpdGxlXCI6IFwiUmVkZWZpbmlyIHNlbmhhXCIsXG4gICAgXCJhY3Rpb25cIjogXCJFbnZpYXJcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCJFbWFpbFwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIk5vdmEgc2VuaGFcIixcbiAgICBcInJlcGVhdFBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCJDb25maXJtYXIgbm92YSBzZW5oYVwiLFxuICAgIFwiY2FuY2VsQWN0aW9uXCI6IFwiQ2FuY2VsYXJcIixcbiAgICBcInN1Y2Nlc3NUZXh0XCI6IFwiU8OzIHRlIGVudmlhbW9zIHVtIGUtbWFpbCBwYXJhIHJlZGVmaW5pciBzdWEgc2VuaGEuXCIsXG4gICAgXCJlbnRlclNhbWVQYXNzd29yZFRleHRcIjogXCJQb3IgZmF2b3IgZGlnaXRlIGEgbWVzbWEgc2VuaGEuXCIsXG4gICAgXCJoZWFkZXJUZXh0XCI6IFwiUG9yIGZhdm9yLCBkaWdpdGUgc2V1IGUtbWFpbCBlIGEgc2VuaGEgbm92YS4gTsOzcyBsaGUgZW52aWFyZW1vcyB1bSBlLW1haWwgcGFyYSBjb25maXJtYXIgYSBhbHRlcmHDp8OjbyBkZSBzZW5oYS5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIkhvdXZlIHVtIGVycm8gYW8gcHJvY2Vzc2FyIGEgcmVkZWZpbmlyIGEgc2VuaGEuXCJcbiAgfVxufSIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCIvL1wiOiBcIlRoaXMgaXMgYW4gYXV0b21hdGljIHRyYW5zbGF0aW9uLiBIZWxwIHVzIHRvIGltcHJvdmUgaXQuXCIsXG4gIFwibG9hZGluZ1RpdGxlXCI6IFwi0J/QvtC00L7QttC00LjRgtC1Li4uXCIsXG4gIFwiY2xvc2VcIjogXCLQl9Cw0LrRgNGL0YLRjFwiLFxuICBcInNpZ25pblwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcItCS0L7QudGC0LhcIixcbiAgICBcImFjdGlvblwiOiBcItCS0L7QudGC0LhcIixcbiAgICBcImFsbFwiOiBcItCf0L7QutCw0LfQsNGC0Ywg0LLRgdC1XCIsXG4gICAgXCJzdHJhdGVneUVtYWlsRW1wdHlcIjogXCLQrdC70LXQutGC0YDQvtC90L3QsNGPINC/0L7Rh9GC0LAg0Y/QstC70Y/QtdGC0YHRjyDQv9GD0YHRgtGL0LwuXCIsXG4gICAgXCJzdHJhdGVneUVtYWlsSW52YWxpZFwiOiBcItCt0LvQtdC60YLRgNC+0L3QvdC+0Lkg0L/QvtGH0YLRiyDRj9Cy0LvRj9C10YLRgdGPINC90LXQtNC10LnRgdGC0LLQuNGC0LXQu9GM0L3Ri9C8LlwiLFxuICAgIFwic3RyYXRlZ3lEb21haW5JbnZhbGlkXCI6IFwie2RvbWFpbn0g0L3QtSDQsdGL0LvQviDRg9GB0YLQsNC90L7QstC60LguXCIsXG4gICAgXCJzaWdudXBUZXh0XCI6IFwi0KDQtdCz0LjRgdGC0YDQsNGG0LjRj1wiLFxuICAgIFwiZm9yZ290VGV4dFwiOiBcItCX0LDQsdGL0LvQuCDQstCw0Ygg0L/QsNGA0L7Qu9GMP1wiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcIkUtbWFpbFwiLFxuICAgIFwidXNlcm5hbWVQbGFjZWhvbGRlclwiOiBcItCY0LzRjyDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCLQn9Cw0YDQvtC70YxcIixcbiAgICBcInNlcGFyYXRvclRleHRcIjogXCLQuNC70LhcIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcItCf0YDQvtC40LfQvtGI0LvQsCDQvtGI0LjQsdC60LAg0L/RgNC4INC+0LHRgNCw0LHQvtGC0LrQtSDQstGF0L7QtNCwLlwiLFxuICAgIFwicmV0dXJuVXNlckxhYmVsXCI6IFwi0J/QvtGB0LvQtdC00L3QuNC5INGA0LDQtyDQstGLINC/0L7QtNC/0LjRgdCw0LvQuCDQsiDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjQuC4uLlwiLFxuICAgIFwid3JvbmdFbWFpbFBhc3N3b3JkRXJyb3JUZXh0XCI6IFwi0J3QtdC/0YDQsNCy0LjQu9GM0L3Ri9C5INCw0LTRgNC10YEg0LjQu9C4INC/0LDRgNC+0LvRjC5cIixcbiAgICBcIm9yXCI6IFwiLi4uINC40LvQuCDQstC+0LnQtNC40YLQtSDRgSDQv9C+0LzQvtGJ0YzRjlwiLFxuICAgIFwibG9hZGluZ01lc3NhZ2VcIjogXCLQn9C+0LTQv9C40YHQsNC90LjQtSDQkiDRgSB7Y29ubmVjdGlvbn0uLi5cIlxuICB9LFxuICBcInNpZ251cFwiOiB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgIFwidGl0bGVcIjogXCLQoNC10LPQuNGB0YLRgNCw0YbQuNGPXCIsXG4gICAgXCJhY3Rpb25cIjogXCLQoNC10LPQuNGB0YLRgNCw0YbQuNGPXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwiRS1tYWlsXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwi0KHQvtC30LTQsNC50YLQtSDQv9Cw0YDQvtC70YxcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcItCe0YLQvNC10L3QsFwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcItCf0L7QttCw0LvRg9C50YHRgtCwLCDQstCy0LXQtNC40YLQtSDRgdCy0L7QuSBlbWFpbCDQuCDQv9Cw0YDQvtC70YxcIixcbiAgICBcImZvb3RlclRleHRcIjogXCJcIixcbiAgICBcImVudGVycHJpc2VFbWFpbFdhcm5pbmdUZXh0XCI6IFwi0K3RgtC+0YIg0LTQvtC80LXQvSB7ZG9tYWlufSDQsdGL0Lsg0L3QsNGB0YLRgNC+0LXQvSDQtNC70Y8g0LXQtNC40L3QvtCz0L4g0LLRhdC+0LTQsCDQuCDQvdC10LvRjNC30Y8g0YHQvtC30LTQsNGC0Ywg0YPRh9C10YLQvdGD0Y4g0LfQsNC/0LjRgdGMLiDQn9C+0L/RgNC+0LHRg9C50YLQtSDQstC+0LnRgtC4INCyINCy0LzQtdGB0YLQviDRjdGC0L7Qs9C+LlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwi0J/RgNC+0LjQt9C+0YjQu9CwINC+0YjQuNCx0LrQsCDQv9GA0Lgg0L7QsdGA0LDQsdC+0YLQutC1INC30L3QsNC6INCy0LLQtdGA0YUuXCJcbiAgfSxcbiAgXCJyZXNldFwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcItCh0LHRgNC+0YEg0L/QsNGA0L7Qu9GPXCIsXG4gICAgXCJhY3Rpb25cIjogXCLQntGC0L/RgNCw0LLQuNGC0YxcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCJFLW1haWxcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCLQndC+0LLRi9C5INC/0LDRgNC+0LvRjFwiLFxuICAgIFwicmVwZWF0UGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcItCf0L7QtNGC0LLQtdGA0LTQuNGC0LUg0L3QvtCy0YvQuSDQv9Cw0YDQvtC70YxcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcItCe0YLQvNC10L3QsFwiLFxuICAgIFwic3VjY2Vzc1RleHRcIjogXCLQnNGLINGC0L7Qu9GM0LrQviDRh9GC0L4g0L7RgtC/0YDQsNCy0LjQuyDQstCw0Lwg0L/QviDRjdC70LXQutGC0YDQvtC90L3QvtC5INC/0L7Rh9GC0LUsINGH0YLQvtCx0Ysg0YHQsdGA0L7RgdC40YLRjCDQstCw0Ygg0L/QsNGA0L7Qu9GMLlwiLFxuICAgIFwiZW50ZXJTYW1lUGFzc3dvcmRUZXh0XCI6IFwi0J/QvtC20LDQu9GD0LnRgdGC0LAsINCy0LLQtdC00LjRgtC1INGC0L7RgiDQttC1INC/0LDRgNC+0LvRjC5cIixcbiAgICBcImhlYWRlclRleHRcIjogXCLQn9C+0LbQsNC70YPQudGB0YLQsCwg0LLQstC10LTQuNGC0LUg0LLQsNGIINCw0LTRgNC10YEg0Y3Qu9C10LrRgtGA0L7QvdC90L7QuSDQv9C+0YfRgtGLINC4INC90L7QstGL0Lkg0L/QsNGA0L7Qu9GMLiDQnNGLINCy0YvRiNC70LXQvCDQstCw0Lwg0L/QviDRjdC70LXQutGC0YDQvtC90L3QvtC5INC/0L7Rh9GC0LUg0LTQu9GPINC/0L7QtNGC0LLQtdGA0LbQtNC10L3QuNGPINC40LfQvNC10L3QtdC90LjRjyDQv9Cw0YDQvtC70Y8uXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCLQn9GA0L7QuNC30L7RiNC70LAg0L7RiNC40LHQutCwINC/0YDQuCDQvtCx0YDQsNCx0L7RgtC60LUg0YHQsdGA0L7RgdCwINC/0LDRgNC+0LvRjy5cIlxuICB9XG59IiwibW9kdWxlLmV4cG9ydHM9e1xuICBcIi8vXCI6IFwiVGhpcyBpcyBhbiBhdXRvbWF0aWMgdHJhbnNsYXRpb24uIEhlbHAgdXMgdG8gaW1wcm92ZSBpdC5cIixcbiAgXCJsb2FkaW5nVGl0bGVcIjogXCJEdWJlbG1vSGNodWdoIGxvUy5cIixcbiAgXCJjbG9zZVwiOiBcIlNvUW1vSFwiLFxuICBcInNpZ25pblwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcInFJJ1wiLFxuICAgIFwiYWN0aW9uXCI6IFwicUknXCIsXG4gICAgXCJhbGxcIjogXCJjaGEnIEhvY2hcIixcbiAgICBcInN0cmF0ZWd5RW1haWxFbXB0eVwiOiBcImNoSW0gZW1haWwuXCIsXG4gICAgXCJzdHJhdGVneUVtYWlsSW52YWxpZFwiOiBcImVtYWlsIGludmFsaWQuXCIsXG4gICAgXCJzdHJhdGVneURvbWFpbkludmFsaWRcIjogXCJ7ZG9tYWlufSB5ZXIgd2VqIHNldHVwLlwiLFxuICAgIFwic2lnbnVwVGV4dFwiOiBcInFJJ1wiLFxuICAgIFwiZm9yZ290VGV4dFwiOiBcIm11J3dJaiBsSWo/XCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwiZW1haWxcIixcbiAgICBcInVzZXJuYW1lUGxhY2Vob2xkZXJcIjogXCJ0dXMgbmVlZyBzaXYgbHViIG5wZVwiLFxuICAgIFwicGFzc3dvcmRQbGFjZWhvbGRlclwiOiBcIm11J3dJalwiLFxuICAgIFwic2VwYXJhdG9yVGV4dFwiOiBcImdoYXBcIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIlFhZ2ggcWFTdGFIdklTIHFJJyBtSXcgdHUnbHUnLlwiLFxuICAgIFwicmV0dXJuVXNlckxhYmVsXCI6IFwiUWF2IHBvSCBxSScgU29IIHFhU3RhSHZJUyBsbycuXCIsXG4gICAgXCJ3cm9uZ0VtYWlsUGFzc3dvcmRFcnJvclRleHRcIjogXCJRSUggZW1haWwgcGFnaCBtdSd3SWouXCIsXG4gICAgXCJvclwiOiBcIi4uLiBwYWdoIHFJJyBxYVN0YUh2SVMgeUlsbydcIixcbiAgICBcImxvYWRpbmdNZXNzYWdlXCI6IFwiVWt1YmhhbGlzZWxhIEluIG5nZSB7Y29ubmVjdGlvbn0uLi5cIlxuICB9LFxuICBcInNpZ251cFwiOiB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgIFwidGl0bGVcIjogXCJxSSdcIixcbiAgICBcImFjdGlvblwiOiBcInFJJ1wiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcImVtYWlsXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwibXUnd0lqIGNoZW5tb0hcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcInFJbFwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcIm51cW5lSCBlbWFpbCBtdSd3SWogamVcIixcbiAgICBcImZvb3RlclRleHRcIjogXCJcIixcbiAgICBcImVudGVycHJpc2VFbWFpbFdhcm5pbmdUZXh0XCI6IFwiY29uZmlndXJlZCB7ZG9tYWlufSB5ZXIgVmFzIHFJJyAnZWogYWNjb3VudCBwYWdoIGNoZW5tb0ggU29ILiBuSUQsIHFJJyBpbnN0ZWFkLlwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwiUWFnaCBxSScgbUl3IEhhJyB0dSdsdScuXCJcbiAgfSxcbiAgXCJyZXNldFwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcIm11J3dJaiByZXNldFwiLFxuICAgIFwiYWN0aW9uXCI6IFwibmdlSFwiLFxuICAgIFwiZW1haWxQbGFjZWhvbGRlclwiOiBcImVtYWlsXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwibXUnd0lqIGNodSdcIixcbiAgICBcInJlcGVhdFBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCJtdSd3SWogY2h1JyBjb25maXJtXCIsXG4gICAgXCJjYW5jZWxBY3Rpb25cIjogXCJxSWxcIixcbiAgICBcInN1Y2Nlc3NUZXh0XCI6IFwiaklib1FxYW5nIHJlc2V0IG11J3dJaiBuZUggbmdlSCBTb0ggbWFILlwiLFxuICAgIFwiZW50ZXJTYW1lUGFzc3dvcmRUZXh0XCI6IFwiRHViZWxtb0hjaHVnaCBtdSd3SWogcmFwICdlbC5cIixcbiAgICBcImhlYWRlclRleHRcIjogXCJudXFuZUggZW1haWwgY2h1JyBtdSd3SWogamUuIGpJYm9RcWFuZyBtdSd3SWogY2hvSCBjb25maXJtIG5nZUggU29IIG1hSC5cIixcbiAgICBcInNlcnZlckVycm9yVGV4dFwiOiBcIlFhZ2ggcmVzZXQgbXUnd0lqIG1JdyB0dSdsdScuXCJcbiAgfVxufSIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCIvL1wiOiBcIlRoaXMgaXMgYW4gYXV0b21hdGljIHRyYW5zbGF0aW9uLiBIZWxwIHVzIHRvIGltcHJvdmUgaXQuXCIsXG4gIFwibG9hZGluZ1RpdGxlXCI6IFwi6K+356iN5YCZ44CC44CC44CCXCIsXG4gIFwiY2xvc2VcIjogXCLlhbPpl61cIixcbiAgXCJzaWduaW5cIjoge1xuICAgIFwidGl0bGVcIjogXCLnmbvlvZVcIixcbiAgICBcImFjdGlvblwiOiBcIueZu+W9lVwiLFxuICAgIFwiYWxsXCI6IFwi5YWo6YOo5pi+56S6XCIsXG4gICAgXCJzdHJhdGVneUVtYWlsRW1wdHlcIjogXCLnlLXlrZDpgq7ku7bmmK/nqbrnmoTjgIJcIixcbiAgICBcInN0cmF0ZWd5RW1haWxJbnZhbGlkXCI6IFwi55S15a2Q6YKu5Lu25piv5peg5pWI55qE44CCXCIsXG4gICAgXCJzdHJhdGVneURvbWFpbkludmFsaWRcIjogXCLmjIflrprln58ge2RvbWFpbn0g5bCa5pyq5a6J6KOF44CCXCIsXG4gICAgXCJzaWdudXBUZXh0XCI6IFwi55m76K6wXCIsXG4gICAgXCJmb3Jnb3RUZXh0XCI6IFwi5b+Y6K6w5LqG5oKo55qE5a+G56CB5ZCX77yfXCIsXG4gICAgXCJlbWFpbFBsYWNlaG9sZGVyXCI6IFwi55S15a2Q6YKu5Lu2XCIsXG4gICAgXCJ1c2VybmFtZVBsYWNlaG9sZGVyXCI6IFwi55So5oi35ZCNXCIsXG4gICAgXCJwYXNzd29yZFBsYWNlaG9sZGVyXCI6IFwi5a+G56CBXCIsXG4gICAgXCJzZXBhcmF0b3JUZXh0XCI6IFwi5oiWXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCLlpITnkIbmiYDnpLrnmoTmoIflv5fml7blh7rplJnjgIJcIixcbiAgICBcInJldHVyblVzZXJMYWJlbFwiOiBcIuacgOWQjuS4gOasoeS9oOWcqOS9v+eUqOetvue9si4uLlwiLFxuICAgIFwid3JvbmdFbWFpbFBhc3N3b3JkRXJyb3JUZXh0XCI6IFwi6ZSZ6K+v55qE55S15a2Q6YKu5Lu25oiW5a+G56CB44CCXCIsXG4gICAgXCJvclwiOiBcIi4uLuaIluS9v+eUqOeZu+W9lVwiLFxuICAgIFwibG9hZGluZ01lc3NhZ2VcIjogXCLnrb7nuqbkuI4ge2Nvbm5lY3Rpb259Li4uXCJcbiAgfSxcbiAgXCJzaWdudXBcIjoge1xuICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICBcInRpdGxlXCI6IFwi55m76K6wXCIsXG4gICAgXCJhY3Rpb25cIjogXCLnmbvorrBcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCLnlLXlrZDpgq7ku7ZcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCLliJvlu7rkuIDkuKrlr4bnoIFcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcIuWPlua2iFwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcIuivt+i+k+WFpeaCqOeahOeUteWtkOmCruS7tuWSjOWvhueggVwiLFxuICAgIFwiZm9vdGVyVGV4dFwiOiBcIlwiLFxuICAgIFwiZW50ZXJwcmlzZUVtYWlsV2FybmluZ1RleHRcIjogXCLmjIflrprmraTln58ge2RvbWFpbn0g5bey6YWN572u5Li65Y2V5LiA55m75b2V5ZKM5oKo5LiN6IO95Yib5bu65LiA5Liq5biQ5oi344CC6K+35bCd6K+V55m75b2V55u45Y+N44CCXCIsXG4gICAgXCJzZXJ2ZXJFcnJvclRleHRcIjogXCLlpITnkIbmoIflv5flkJHkuIrml7blh7rplJnjgIJcIlxuICB9LFxuICBcInJlc2V0XCI6IHtcbiAgICBcInRpdGxlXCI6IFwi6YeN572u5a+G56CBXCIsXG4gICAgXCJhY3Rpb25cIjogXCLlj5HpgIFcIixcbiAgICBcImVtYWlsUGxhY2Vob2xkZXJcIjogXCLnlLXlrZDpgq7ku7ZcIixcbiAgICBcInBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCLmlrDlr4bnoIFcIixcbiAgICBcInJlcGVhdFBhc3N3b3JkUGxhY2Vob2xkZXJcIjogXCLnoa7orqTmlrDlr4bnoIFcIixcbiAgICBcImNhbmNlbEFjdGlvblwiOiBcIuWPlua2iFwiLFxuICAgIFwic3VjY2Vzc1RleHRcIjogXCLmiJHku6zliJrliJrlt7Lnu4/lkJHmgqjlj5HpgIHkuIDlsIHnlLXlrZDpgq7ku7bvvIzph43nva7mgqjnmoTlr4bnoIHjgIJcIixcbiAgICBcImVudGVyU2FtZVBhc3N3b3JkVGV4dFwiOiBcIuivt+i+k+WFpeebuOWQjOeahOWvhueggeOAglwiLFxuICAgIFwiaGVhZGVyVGV4dFwiOiBcIuivt+i+k+WFpeaCqOeahOeUteWtkOmCruS7tuWSjOaWsOeahOWvhueggeOAguaIkeS7rOWwhuWQkeaCqOWPkemAgemCruS7tuS7peehruiupOWvhueggeabtOaUueOAglwiLFxuICAgIFwic2VydmVyRXJyb3JUZXh0XCI6IFwi5aSE55CG6YeN572u5a+G56CB5pe25Ye66ZSZ44CCXCJcbiAgfVxufSIsImZ1bmN0aW9uIGluc2VydCAoY3NzKSB7XG4gICAgdmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG5cbiAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcblxuICAgIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICAgIH1cbn07XG5cbnZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG52YXIgc3R5bGUgPSBcIi5hMC13aWRnZXQgYXJ0aWNsZSwuYTAtd2lkZ2V0IGFzaWRlLC5hMC13aWRnZXQgZGV0YWlscywuYTAtd2lkZ2V0IGZpZ2NhcHRpb24sLmEwLXdpZGdldCBmaWd1cmUsLmEwLXdpZGdldCBmb290ZXIsLmEwLXdpZGdldCBoZWFkZXIsLmEwLXdpZGdldCBoZ3JvdXAsLmEwLXdpZGdldCBuYXYsLmEwLXdpZGdldCBzZWN0aW9uLC5hMC13aWRnZXQgc3VtbWFyeXtkaXNwbGF5OmJsb2NrfS5hMC13aWRnZXQgYXVkaW8sLmEwLXdpZGdldCBjYW52YXMsLmEwLXdpZGdldCB2aWRlb3tkaXNwbGF5OmlubGluZS1ibG9jazsqZGlzcGxheTppbmxpbmU7Knpvb206MX0uYTAtd2lkZ2V0IGF1ZGlvOm5vdChbY29udHJvbHNdKXtkaXNwbGF5Om5vbmU7aGVpZ2h0OjB9LmEwLXdpZGdldCBbaGlkZGVuXXtkaXNwbGF5Om5vbmV9LmEwLXdpZGdldCBodG1se2ZvbnQtc2l6ZToxMDAlOy13ZWJraXQtdGV4dC1zaXplLWFkanVzdDoxMDAlOy1tcy10ZXh0LXNpemUtYWRqdXN0OjEwMCV9LmEwLXdpZGdldCBhLC5hMC13aWRnZXQgYnV0dG9uLC5hMC13aWRnZXQgZGl2LC5hMC13aWRnZXQgaDEsLmEwLXdpZGdldCBoMiwuYTAtd2lkZ2V0IGh0bWwsLmEwLXdpZGdldCBpbnB1dCwuYTAtd2lkZ2V0IHNlbGVjdCwuYTAtd2lkZ2V0IHNwYW4sLmEwLXdpZGdldCB0ZXh0YXJlYXtmb250LWZhbWlseTpzYW5zLXNlcmlmfS5hMC13aWRnZXQgYm9keXttYXJnaW46MH0uYTAtd2lkZ2V0IGE6Zm9jdXN7b3V0bGluZTp0aGluIGRvdHRlZH0uYTAtd2lkZ2V0IGE6YWN0aXZlLC5hMC13aWRnZXQgYTpob3ZlcntvdXRsaW5lOjB9LmEwLXdpZGdldCBoNHtmb250LXNpemU6MWVtO21hcmdpbjoxLjMzZW0gMH0uYTAtd2lkZ2V0IGg1e2ZvbnQtc2l6ZTouODNlbTttYXJnaW46MS42N2VtIDB9LmEwLXdpZGdldCBoNntmb250LXNpemU6Ljc1ZW07bWFyZ2luOjIuMzNlbSAwfS5hMC13aWRnZXQgYWJiclt0aXRsZV17Ym9yZGVyLWJvdHRvbToxcHggZG90dGVkfS5hMC13aWRnZXQgYiwuYTAtd2lkZ2V0IHN0cm9uZ3tmb250LXdlaWdodDo3MDB9LmEwLXdpZGdldCBibG9ja3F1b3Rle21hcmdpbjoxZW0gNDBweH0uYTAtd2lkZ2V0IGRmbntmb250LXN0eWxlOml0YWxpY30uYTAtd2lkZ2V0IG1hcmt7YmFja2dyb3VuZDojZmYwO2NvbG9yOiMwMDB9LmEwLXdpZGdldCBwLC5hMC13aWRnZXQgcHJle21hcmdpbjoxZW0gMH0uYTAtd2lkZ2V0IGNvZGUsLmEwLXdpZGdldCBrYmQsLmEwLXdpZGdldCBwcmUsLmEwLXdpZGdldCBzYW1we2ZvbnQtZmFtaWx5Om1vbm9zcGFjZSxzZXJpZjtfZm9udC1mYW1pbHk6J2NvdXJpZXIgbmV3Jyxtb25vc3BhY2U7Zm9udC1zaXplOjFlbX0uYTAtd2lkZ2V0IHByZXt3aGl0ZS1zcGFjZTpwcmU7d2hpdGUtc3BhY2U6cHJlLXdyYXA7d29yZC13cmFwOmJyZWFrLXdvcmR9LmEwLXdpZGdldCBxe3F1b3Rlczpub25lfS5hMC13aWRnZXQgcTphZnRlciwuYTAtd2lkZ2V0IHE6YmVmb3Jle2NvbnRlbnQ6Jyc7Y29udGVudDpub25lfS5hMC13aWRnZXQgc21hbGx7Zm9udC1zaXplOjgwJX0uYTAtd2lkZ2V0IHN1YiwuYTAtd2lkZ2V0IHN1cHtmb250LXNpemU6NzUlO2xpbmUtaGVpZ2h0OjA7cG9zaXRpb246cmVsYXRpdmU7dmVydGljYWwtYWxpZ246YmFzZWxpbmV9LmEwLXdpZGdldCBzdXB7dG9wOi0uNWVtfS5hMC13aWRnZXQgc3Vie2JvdHRvbTotLjI1ZW19LmEwLXdpZGdldCBkbCwuYTAtd2lkZ2V0IG1lbnUsLmEwLXdpZGdldCBvbCwuYTAtd2lkZ2V0IHVse21hcmdpbjoxZW0gMH0uYTAtd2lkZ2V0IGRke21hcmdpbjowIDAgMCA0MHB4fS5hMC13aWRnZXQgbWVudSwuYTAtd2lkZ2V0IG9sLC5hMC13aWRnZXQgdWx7cGFkZGluZzowIDAgMCA0MHB4fS5hMC13aWRnZXQgbmF2IG9sLC5hMC13aWRnZXQgbmF2IHVse2xpc3Qtc3R5bGU6bm9uZTtsaXN0LXN0eWxlLWltYWdlOm5vbmV9LmEwLXdpZGdldCBpbWd7Ym9yZGVyOjA7LW1zLWludGVycG9sYXRpb24tbW9kZTpiaWN1YmljfS5hMC13aWRnZXQgc3ZnOm5vdCg6cm9vdCl7b3ZlcmZsb3c6aGlkZGVufS5hMC13aWRnZXQgZmlndXJlLC5hMC13aWRnZXQgZm9ybXttYXJnaW46MH0uYTAtd2lkZ2V0IGZpZWxkc2V0e2JvcmRlcjoxcHggc29saWQgc2lsdmVyO21hcmdpbjowIDJweDtwYWRkaW5nOi4zNWVtIC42MjVlbSAuNzVlbX0uYTAtd2lkZ2V0IGxlZ2VuZHtib3JkZXI6MDtwYWRkaW5nOjA7d2hpdGUtc3BhY2U6bm9ybWFsOyptYXJnaW4tbGVmdDotN3B4fS5hMC13aWRnZXQgYnV0dG9uLC5hMC13aWRnZXQgaW5wdXQsLmEwLXdpZGdldCBzZWxlY3QsLmEwLXdpZGdldCB0ZXh0YXJlYXtmb250LXNpemU6MTAwJTttYXJnaW46MDt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZTsqdmVydGljYWwtYWxpZ246bWlkZGxlfS5hMC13aWRnZXQgYnV0dG9uLC5hMC13aWRnZXQgaW5wdXR7bGluZS1oZWlnaHQ6bm9ybWFsfS5hMC13aWRnZXQgYnV0dG9uLC5hMC13aWRnZXQgaHRtbCBpbnB1dFt0eXBlPWJ1dHRvbl0sLmEwLXdpZGdldCBpbnB1dFt0eXBlPXJlc2V0XSwuYTAtd2lkZ2V0IGlucHV0W3R5cGU9c3VibWl0XXstd2Via2l0LWFwcGVhcmFuY2U6YnV0dG9uO2N1cnNvcjpwb2ludGVyOypvdmVyZmxvdzp2aXNpYmxlfS5hMC13aWRnZXQgYnV0dG9uW2Rpc2FibGVkXSwuYTAtd2lkZ2V0IGlucHV0W2Rpc2FibGVkXXtjdXJzb3I6ZGVmYXVsdH0uYTAtd2lkZ2V0IGlucHV0W3R5cGU9Y2hlY2tib3hdLC5hMC13aWRnZXQgaW5wdXRbdHlwZT1yYWRpb117LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7LW1vei1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O3BhZGRpbmc6MDsqaGVpZ2h0OjEzcHg7KndpZHRoOjEzcHh9LmEwLXdpZGdldCBpbnB1dFt0eXBlPXNlYXJjaF17LXdlYmtpdC1hcHBlYXJhbmNlOnRleHRmaWVsZDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7LXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O2JveC1zaXppbmc6Y29udGVudC1ib3h9LmEwLXdpZGdldCBpbnB1dFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sLmEwLXdpZGdldCBpbnB1dFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb257LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmV9LmEwLXdpZGdldCBidXR0b246Oi1tb3otZm9jdXMtaW5uZXIsLmEwLXdpZGdldCBpbnB1dDo6LW1vei1mb2N1cy1pbm5lcntib3JkZXI6MDtwYWRkaW5nOjB9LmEwLXdpZGdldCB0ZXh0YXJlYXtvdmVyZmxvdzphdXRvO3ZlcnRpY2FsLWFsaWduOnRvcH0uYTAtd2lkZ2V0IHRhYmxle2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZTtib3JkZXItc3BhY2luZzowfS5hMC13aWRnZXQgYSwuYTAtd2lkZ2V0IGJ1dHRvbiwuYTAtd2lkZ2V0IGZvb3RlciwuYTAtd2lkZ2V0IGZvcm0sLmEwLXdpZGdldCBmb3JtIGxhYmVsLC5hMC13aWRnZXQgaDEsLmEwLXdpZGdldCBoMiwuYTAtd2lkZ2V0IGgzLC5hMC13aWRnZXQgaGVhZGVyLC5hMC13aWRnZXQgaW5wdXRbdHlwZT1idXR0b25dLC5hMC13aWRnZXQgaW5wdXRbdHlwZT1lbWFpbF0sLmEwLXdpZGdldCBpbnB1dFt0eXBlPXBhc3N3b3JkXSwuYTAtd2lkZ2V0IGlucHV0W3R5cGU9dGV4dF0sLmEwLXdpZGdldCBzcGFue2ZvbnQtc21vb3RoOm5ldmVyOy13ZWJraXQtZm9udC1zbW9vdGhpbmc6YXV0bzthbGlnbm1lbnQtYmFzZWxpbmU6YmFzZWxpbmU7LXdlYmtpdC1hbmltYXRpb246bm9uZSAwIGVhc2UgMCAxIG5vcm1hbDstbW96LWFuaW1hdGlvbjpub25lIDAgZWFzZSAwIDEgbm9ybWFsO2FuaW1hdGlvbjpub25lIDAgZWFzZSAwIDEgbm9ybWFsOy13ZWJraXQtYW5pbWF0aW9uLXBsYXktc3RhdGU6cnVubmluZzstbW96LWFuaW1hdGlvbi1wbGF5LXN0YXRlOnJ1bm5pbmc7YW5pbWF0aW9uLXBsYXktc3RhdGU6cnVubmluZzthcHBlYXJhbmNlOm5vcm1hbDstd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6dmlzaWJsZTstbW96LWJhY2tmYWNlLXZpc2liaWxpdHk6dmlzaWJsZTstbXMtYmFja2ZhY2UtdmlzaWJpbGl0eTp2aXNpYmxlO2JhY2tmYWNlLXZpc2liaWxpdHk6dmlzaWJsZTtiYWNrZ3JvdW5kOm5vbmUgMCAwIGF1dG8gcmVwZWF0IHNjcm9sbCBwYWRkaW5nLWJveCB0cmFuc3BhcmVudDtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JhY2tncm91bmQtaW1hZ2U6bm9uZTtiYXNlbGluZS1zaGlmdDpiYXNlbGluZTtiaW5kaW5nOm5vbmU7YmxlZWQ6NnB0O2Jvb2ttYXJrLWxhYmVsOmNvbnRlbnQoKTtib29rbWFyay1sZXZlbDpub25lO2Jvb2ttYXJrLXN0YXRlOm9wZW47Ym9va21hcmstdGFyZ2V0Om5vbmU7Ym9yZGVyOjAgbm9uZSB0cmFuc3BhcmVudDtib3JkZXItcmFkaXVzOjA7Ym90dG9tOmF1dG87LXdlYmtpdC1ib3gtYWxpZ246c3RyZXRjaDstd2Via2l0LWFsaWduLWl0ZW1zOnN0cmV0Y2g7LW1vei1ib3gtYWxpZ246c3RyZXRjaDstbXMtZmxleC1hbGlnbjpzdHJldGNoO2JveC1hbGlnbjpzdHJldGNoO2JveC1kZWNvcmF0aW9uLWJyZWFrOnNsaWNlOy13ZWJraXQtYm94LW9yaWVudDp2ZXJ0aWNhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsOy13ZWJraXQtZmxleC1kaXJlY3Rpb246bm9ybWFsOy1tb3otYm94LW9yaWVudDp2ZXJ0aWNhbDstbW96LWJveC1kaXJlY3Rpb246bm9ybWFsOy1tcy1mbGV4LWRpcmVjdGlvbjpub3JtYWw7Ym94LWRpcmVjdGlvbjpub3JtYWw7LXdlYmtpdC1ib3gtZmxleDowOy13ZWJraXQtZmxleDowOy1tb3otYm94LWZsZXg6MDstbXMtZmxleDowO2JveC1mbGV4OjA7Ym94LWZsZXgtZ3JvdXA6MTtib3gtbGluZXM6c2luZ2xlOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6Mjstd2Via2l0LW9yZGVyOjE7LW1vei1ib3gtb3JkaW5hbC1ncm91cDoyOy1tcy1mbGV4LW9yZGVyOjE7Ym94LW9yZGluYWwtZ3JvdXA6MTtib3gtb3JpZW50OmlubGluZS1heGlzOy13ZWJraXQtYm94LXBhY2s6c3RhcnQ7LXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6c3RhcnQ7LW1vei1ib3gtcGFjazpzdGFydDstbXMtZmxleC1wYWNrOnN0YXJ0O2JveC1wYWNrOnN0YXJ0Oy13ZWJraXQtYm94LXNoYWRvdzpub25lO2JveC1zaGFkb3c6bm9uZTstd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7LW1vei1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O2JveC1zaXppbmc6Y29udGVudC1ib3g7LXdlYmtpdC1icmVhay1hZnRlcjphdXRvOy1tb3otYnJlYWstYWZ0ZXI6YXV0bzticmVhay1hZnRlcjphdXRvOy13ZWJraXQtYnJlYWstYmVmb3JlOmF1dG87LW1vei1icmVhay1iZWZvcmU6YXV0bzticmVhay1iZWZvcmU6YXV0bzstd2Via2l0LWJyZWFrLWluc2lkZTphdXRvOy1tb3otYnJlYWstaW5zaWRlOmF1dG87YnJlYWstaW5zaWRlOmF1dG87Y2FwdGlvbi1zaWRlOnRvcDtjbGVhcjpub25lO2NsaXA6YXV0bztjb2xvcjppbmhlcml0O2NvbG9yLXByb2ZpbGU6YXV0bzstd2Via2l0LWNvbHVtbi1jb3VudDphdXRvOy1tb3otY29sdW1uLWNvdW50OmF1dG87Y29sdW1uLWNvdW50OmF1dG87LXdlYmtpdC1jb2x1bW4tZmlsbDpiYWxhbmNlOy1tb3otY29sdW1uLWZpbGw6YmFsYW5jZTtjb2x1bW4tZmlsbDpiYWxhbmNlOy13ZWJraXQtY29sdW1uLWdhcDpub3JtYWw7LW1vei1jb2x1bW4tZ2FwOm5vcm1hbDtjb2x1bW4tZ2FwOm5vcm1hbDstd2Via2l0LWNvbHVtbi1ydWxlOm1lZGl1bSBtZWRpdW0gIzFmMWYxZjstbW96LWNvbHVtbi1ydWxlOm1lZGl1bSBtZWRpdW0gIzFmMWYxZjtjb2x1bW4tcnVsZTptZWRpdW0gbWVkaXVtICMxZjFmMWY7LXdlYmtpdC1jb2x1bW4tc3BhbjoxOy1tb3otY29sdW1uLXNwYW46MTtjb2x1bW4tc3BhbjoxOy13ZWJraXQtY29sdW1uLXdpZHRoOmF1dG87LW1vei1jb2x1bW4td2lkdGg6YXV0bztjb2x1bW4td2lkdGg6YXV0bzstd2Via2l0LWNvbHVtbnM6YXV0byBhdXRvOy1tb3otY29sdW1uczphdXRvIGF1dG87Y29sdW1uczphdXRvIGF1dG87Y29udGVudDpub3JtYWw7Y291bnRlci1pbmNyZW1lbnQ6bm9uZTtjb3VudGVyLXJlc2V0Om5vbmU7Y3JvcDphdXRvO2N1cnNvcjphdXRvO2RpcmVjdGlvbjphdXRvO2Rpc3BsYXk6YXV0bztkb21pbmFudC1iYXNlbGluZTphdXRvO2Ryb3AtaW5pdGlhbC1hZnRlci1hZGp1c3Q6dGV4dC1hZnRlci1lZGdlO2Ryb3AtaW5pdGlhbC1hZnRlci1hbGlnbjpiYXNlbGluZTtkcm9wLWluaXRpYWwtYmVmb3JlLWFkanVzdDp0ZXh0LWJlZm9yZS1lZGdlO2Ryb3AtaW5pdGlhbC1iZWZvcmUtYWxpZ246Y2Fwcy1oZWlnaHQ7ZHJvcC1pbml0aWFsLXNpemU6YXV0bztkcm9wLWluaXRpYWwtdmFsdWU6aW5pdGlhbDtlbGV2YXRpb246bGV2ZWw7ZW1wdHktY2VsbHM6c2hvdztmaXQ6ZmlsbDtmaXQtcG9zaXRpb246MCAwO2Zsb2F0Om5vbmU7ZmxvYXQtb2Zmc2V0OjAgMDtmb250LXNpemUtYWRqdXN0Om5vbmU7Zm9udC1zdHJldGNoOm5vcm1hbDtmb250Om5vcm1hbCBub3JtYWwgMTAwJSBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLEFyaWFsLHNhbnMtc2VyaWY7Z3JpZC1jb2x1bW5zOm5vbmU7Z3JpZC1yb3dzOm5vbmU7aGFuZ2luZy1wdW5jdHVhdGlvbjpub25lO2hlaWdodDphdXRvO2h5cGhlbmF0ZS1hZnRlcjphdXRvO2h5cGhlbmF0ZS1iZWZvcmU6YXV0bztoeXBoZW5hdGUtY2hhcmFjdGVyOmF1dG87aHlwaGVuYXRlLWxpbmVzOm5vLWxpbWl0O2h5cGhlbmF0ZS1yZXNvdXJjZTpub25lOy13ZWJraXQtaHlwaGVuczptYW51YWw7LW1vei1oeXBoZW5zOm1hbnVhbDstbXMtaHlwaGVuczptYW51YWw7aHlwaGVuczptYW51YWw7aWNvbjphdXRvO2ltYWdlLW9yaWVudGF0aW9uOmF1dG87aW1hZ2UtcmVuZGVyaW5nOmF1dG87aW1hZ2UtcmVzb2x1dGlvbjpub3JtYWw7aW5saW5lLWJveC1hbGlnbjpsYXN0O2xlZnQ6YXV0bztsZXR0ZXItc3BhY2luZzpub3JtYWw7bGluZS1oZWlnaHQ6bm9ybWFsO2xpbmUtc3RhY2tpbmc6aW5saW5lLWxpbmUtaGVpZ2h0IGV4Y2x1ZGUtcnVieSBjb25zaWRlci1zaGlmdHM7bGlzdC1zdHlsZTpkaXNjIG91dHNpZGUgbm9uZTttYXJnaW46MDttYXJrczpub25lO21hcnF1ZWUtZGlyZWN0aW9uOmZvcndhcmQ7bWFycXVlZS1sb29wOjE7bWFycXVlZS1wbGF5LWNvdW50OjE7bWFycXVlZS1zcGVlZDpub3JtYWw7bWFycXVlZS1zdHlsZTpzY3JvbGw7bWF4LWhlaWdodDpub25lO21heC13aWR0aDpub25lO21pbi1oZWlnaHQ6MDttaW4td2lkdGg6MDttb3ZlLXRvOm5vcm1hbDtuYXYtZG93bjphdXRvO25hdi1pbmRleDphdXRvO25hdi1sZWZ0OmF1dG87bmF2LXJpZ2h0OmF1dG87bmF2LXVwOmF1dG87b3BhY2l0eToxO29ycGhhbnM6MjtvdXRsaW5lOmludmVydCBub25lIG1lZGl1bSFpbXBvcnRhbnQ7b3V0bGluZS1vZmZzZXQ6MDtvdmVyZmxvdzp2aXNpYmxlO292ZXJmbG93LXN0eWxlOmF1dG87cGFkZGluZzowO3BhZ2U6YXV0bztwYWdlLWJyZWFrLWFmdGVyOmF1dG87cGFnZS1icmVhay1iZWZvcmU6YXV0bztwYWdlLWJyZWFrLWluc2lkZTphdXRvO3BhZ2UtcG9saWN5OnN0YXJ0Oy13ZWJraXQtcGVyc3BlY3RpdmU6bm9uZTstbW96LXBlcnNwZWN0aXZlOm5vbmU7LW1zLXBlcnNwZWN0aXZlOm5vbmU7cGVyc3BlY3RpdmU6bm9uZTstd2Via2l0LXBlcnNwZWN0aXZlLW9yaWdpbjo1MCUgNTAlOy1tb3otcGVyc3BlY3RpdmUtb3JpZ2luOjUwJSA1MCU7LW1zLXBlcnNwZWN0aXZlLW9yaWdpbjo1MCUgNTAlO3BlcnNwZWN0aXZlLW9yaWdpbjo1MCUgNTAlO3Bvc2l0aW9uOnN0YXRpYztwcmVzZW50YXRpb24tbGV2ZWw6MDtwdW5jdHVhdGlvbi10cmltOm5vbmU7cXVvdGVzOm5vbmU7cmVuZGVyaW5nLWludGVudDphdXRvO3Jlc2l6ZTpub25lO3JpZ2h0OmF1dG87cm90YXRpb246MDtyb3RhdGlvbi1wb2ludDo1MCUgNTAlO3J1YnktYWxpZ246YXV0bztydWJ5LW92ZXJoYW5nOm5vbmU7cnVieS1wb3NpdGlvbjpiZWZvcmU7cnVieS1zcGFuOm5vbmU7c2l6ZTphdXRvO3N0cmluZy1zZXQ6bm9uZTt0YWJsZS1sYXlvdXQ6YXV0bzt0ZXh0LWFsaWduOmF1dG87dGV4dC1hbGlnbi1sYXN0OnN0YXJ0O3RleHQtZGVjb3JhdGlvbjpub25lO3RleHQtZW1waGFzaXM6bm9uZTt0ZXh0LWhlaWdodDphdXRvO3RleHQtaW5kZW50OjA7dGV4dC1qdXN0aWZ5OmF1dG87dGV4dC1vdXRsaW5lOjA7dGV4dC1zaGFkb3c6bm9uZTt0ZXh0LXRyYW5zZm9ybTpub25lO3RleHQtd3JhcDpub3JtYWw7dG9wOmF1dG87LXdlYmtpdC10cmFuc2Zvcm06bm9uZTstbW96LXRyYW5zZm9ybTpub25lOy1tcy10cmFuc2Zvcm06bm9uZTt0cmFuc2Zvcm06bm9uZTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46NTAlIDUwJSAwOy1tb3otdHJhbnNmb3JtLW9yaWdpbjo1MCUgNTAlIDA7LW1zLXRyYW5zZm9ybS1vcmlnaW46NTAlIDUwJSAwO3RyYW5zZm9ybS1vcmlnaW46NTAlIDUwJSAwOy13ZWJraXQtdHJhbnNmb3JtLXN0eWxlOmZsYXQ7LW1vei10cmFuc2Zvcm0tc3R5bGU6ZmxhdDstbXMtdHJhbnNmb3JtLXN0eWxlOmZsYXQ7dHJhbnNmb3JtLXN0eWxlOmZsYXQ7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAwIGVhc2UgMDstbW96LXRyYW5zaXRpb246YWxsIDAgZWFzZSAwO3RyYW5zaXRpb246YWxsIDAgZWFzZSAwO3VuaWNvZGUtYmlkaTpub3JtYWw7dmVydGljYWwtYWxpZ246YmFzZWxpbmU7dmlzaWJpbGl0eTp2aXNpYmxlO3doaXRlLXNwYWNlOm5vcm1hbDt3aGl0ZS1zcGFjZS1jb2xsYXBzZTpjb2xsYXBzZTt3aWRvd3M6Mjt3aWR0aDphdXRvO3dvcmQtYnJlYWs6bm9ybWFsO3dvcmQtc3BhY2luZzpub3JtYWw7d29yZC13cmFwOm5vcm1hbDt6LWluZGV4OmF1dG87ZmlsdGVyOnByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5ncmFkaWVudChlbmFibGVkPWZhbHNlKX1AZm9udC1mYWNle2ZvbnQtZmFtaWx5OmF1dGgwO3NyYzp1cmwoZGF0YTphcHBsaWNhdGlvbi94LWZvbnQtd29mZjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxkMDlHUmdBQkFBQUFBQXNnQUJFQUFBQUFEMFFBQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQkdSbFJOQUFBQmdBQUFBQndBQUFBY2F5bWhyMGRFUlVZQUFBR2NBQUFBSFFBQUFDQUFRd0FFVDFNdk1nQUFBYndBQUFCRUFBQUFWbUxoa3FSamJXRndBQUFDQUFBQUFGOEFBQUZ5Uk1GUTBXTjJkQ0FBQUFKZ0FBQUFFQUFBQUJBRFp3SXdabkJuYlFBQUFuQUFBQUd4QUFBQ1pWTzBMNmRuWVhOd0FBQUVKQUFBQUFnQUFBQUlBQUFBRUdkc2VXWUFBQVFzQUFBRW1nQUFCZEQwQWo4N2FHVmhaQUFBQ01nQUFBQXFBQUFBTmdZZlVCTm9hR1ZoQUFBSTlBQUFBQjBBQUFBa0VBUUg3bWh0ZEhnQUFBa1VBQUFBTkFBQUFGaGx4d0ptYkc5allRQUFDVWdBQUFBWEFBQUFMaGp5RjVodFlYaHdBQUFKWUFBQUFDQUFBQUFnQVRJQlFXNWhiV1VBQUFtQUFBQUF1UUFBQVhRYmJ6YmpjRzl6ZEFBQUNqd0FBQUJzQUFBQXpUSVJPUU53Y21Wd0FBQUtxQUFBQUhBQUFBQis2MmxCYUhkbFltWUFBQXNZQUFBQUJnQUFBQVpSRFZOUUFBQUFBUUFBQUFETVBhTFBBQUFBQU05MS9WUUFBQUFBejNZQmkzamFZMkJrWUdEZ0EySUpCaEJnWW1BRVFsRWdaZ0h6R0FBRk1RQklBQUFBZU5wallHVFp3RGlCZ1pXQmhkV0FkUVlEQTZNTWhHYSt3cERDSk1EQXdNVEF5c2tBQTR3TVNDQWd6VFdGd1lHQlYvVVBlOFAvQmdZR0RnWUdEWmdhQUpwSENYTjQybU5nWUdCbWdHQVpCa1lHRU1nQjhoakJmQmFHQUNBdEFJVE1ZQmxlaGxRRkxnVjloWGpWUC8vL1EwVVNGUmdRSXYrLy9sLzBnT1Aray90YmIwbENUVU1Cakd3TWNHRkdKaURCaEs2QWdYTEF6TUxLeHM0d2FBRUFWZHdUR2dBQUFBQzZBSUFBaEFKNEFJQUFid0J5ZU5wZFVidE9XMEVRM1EwUEE0SEUyQ0E1MmhTem1aREdlNkVGQ2NUVmpXSmtPNFhsQ0drM2NwR0xjUUVmUUlGRURkcXZHYUNocEVpYkJpRVhTSHhDUGlFU00ydUlvalE3TzdOenpwa3pTOHFScW5mcGE4OVQ1eVNRd3QwR3pUYjlUa2kxc3dEM3BPdnJqWXkwZ3dkYWJHYjB5blg3L2dzR205R1VPMm9BNVQxdktROFpUVHVCV3JTbi90SDhDb2I3L0Ivek94aTBOTlAwMURvSjZTRUU1cHR4UzRQdkdjMjZ5dy82Z3RYaFlqQXdwSmltNGk0L3BsTCt0elRuYXN1d3RaSFJ2SU16RWZuSk5FQlRhMjBFbXY3VUlkWHpjUlJMa011bXNUYVltTEwrSkJQQmhjbDBWVk8xelBqYXdWMnlzK2hnZ3lyTmdRZll3MVo1REI0T0R5WVUwcmNreWl3TkVmWmlxOFFJRVpNY0NqbmwzTW4rcEVENVNCTEd2RWxLTytPR3RRYkdrZGZBb0RaUHMvODhtMDF0YngzQytGa2N3WGUvR1VzNitNaUcyaGdSWWp0aUtZQUpSRUpHVmZtR0dzKzlMQWJrVXZ2UFFKU0E1ZkdQZjUwSXRPN1lSRHlYdFhVT01WWUllbjdiM1BMTGlydFd1YzZMUW5kdnFtcW8waW5OKzE3T3ZzY0RuaDRMdzBGandadlArLzVLZ2ZvOExLNDBhQTRFUTNvM2V2K2l0ZXFJcTd3WFBySW4wNyt4V2dBQUFBQUJBQUgvL3dBUGVOcHRsTTlyRzBjVXg5OWJyWFlsUjlpNzhtcTFWdVJrSmV0WExEdVNyZFd2eElrM2pnMm1sS0ttRGhZaEJHR1MxaVE1R0JLS0NUbm9VTXJTSHlTVVVIVG9NWWNjZk5pUlN6RWxCeDE4eU1FSFE4SDREeWpGQWgxNnlNR2wwcVp2azdUT29YdVkrY3lieHpEdiszMDc0SUY3QU9Jekg4QXBHSUhUY0JYYXB3Q3l0bFJnUHI1clIyYnQ0UnphMFJ6ak1QdXo0Z1dSejdKeHpES0ZrNFBiUTRGaEtSR3VBdk1OMDRvVEFpTzB5cytNQ2lFbEhBeVBZbXcwTnVybjVOaW9HbEpFVHZSZ3JEVTkwK2p0RFk2NDF0NWd2Y2xwbk9ieS90VDVHNi8zdU9qZ3R0ZjYvdHNmbmpwL2JIR2JhSEdiZjFrT3pXanhmdzZzYjc1NzhzVDUzWFkzQUlCSEdzUW0zWHNFemtJYWN2QUEyZ0c2T2ZQcWhRSmRyOXYydTZzRUFTREJPTmRGTzUrejRZQkozcTR0U1N4QVplaUV1c1F5aEZuQ3JNVFNoRjVDcjhUR0NOSGJaVE0wWjNRNXlQd1QxU3BMWjRrU3Ztb1Y4alBuVURaU0UwVURkQmpIdUJBYWxZMVNJVGFyaG1SRm1JakZVL2grQzVYWm9tekVRd2hDczdYdWJEa1paMnU5MVZ5dThNM0s4bkxsYnhvUjBJY2I2SE9nMmVSaHZkWHA0WXF6MWV1MDFnZmdBVGRyNEk1OHBiTkRTY2M3blg3SE5MRnBtZ0FjTkFGOFNGcm9jSVc0cmJtVlQxUGxnbHY1WmJmeWhaek5IVEJUN05xbXhDSlUwQ1RWT0NteEhHR0lNQ1N4QzRRQm9jdXUwaHd4NWFCOXVjcHlrM0xROUF0aGJUeVpDczRhWkMrN0VLTDZ5M05VUDdzc0VQSkQxYW85TFc5em9Vand4SDQxcGlmbXNWUTIwcWwwS2xrS0ZpVk81MlFsR09aRklWd3FsNUxsWW9vckdrRTlHRkk0TVJUbXcyclk3Wkp6bUNvYVgvR1ZUWStDRGV3WStRcDZsWm81NkR6ZlBSNXNITzgrSDd5Y3E5MVNQNTdqZU0xNjBlR2c4OEtLY29xNTdNTlArOGNEM3ljNGRmYk12Wlc4RmdoY3Yzdm03Tk5sYzdPTzFpRWFXSGRlT0h1SHptYWR4UDd4eTBUMFdkTll4TnBPSHhXbjE5OXg3RVhEc3ZURW82R2h1NG4wZFlXNmkyUkhhSXB2eENaRVlRNCtod05vVjExbEJWSldjWCtTaFFMTEVOOXhnL01lVXZtTHR5cGZKRDB2U2t3bEhaT0VTWWxORXNxRXNzU0toSDVDdjhTV0NOY0kxeVJXSTd6aDdiWnJONGF5MjJidHVqL0wxaW1rWGlRYnFPY21rNjRObzhwWUxENHluYnZrMmxDVTZaY3J6eS9jb1lYdGw3ZkY1WThhYm54dGlUejViSlU4cWNuMk5US3ArdFlra1FJWitSYy9wOHBMcTJ0dTRoMkZ6cjUwNGxleVZIeHZsdncvWGxGajYrcUpWY283cThvcFZNT3pwUUoxdkNKOHNEWGhXdm5CZ1FZWGkvT2VYSjU3enUzbFBOS2k3dHpmNnpqUXVkOXdIdWNYTnlTemdWT1NiZUdHMWFoSitEQXpKeXdNWGc1ZXpTTjZIbGcxbng3WU9kbllwWGRreFQwazd6UmZkZDVBQ3g5cTJ1cFNKck8wR2g1N2FHb2J1MWpIQUdhY1ErZjFUODdoelViQzNLanJtUldqM3NMSy90SFJ2dVgwRit1VjIwcjBwaWpXSXBFcnc5N2ZBZ1ovdVB2NHRibENZZTJXS0Y2THhGTmpweFB2VHN6YzdPQmNINlBVRFkvZ1YvRnJjWmRlbkRQUTV0MFdVT2gxMUhNc2hsbGdDazlLQjZKVjByU3N6cGI5cUJiS0pTUHRSeHBTY2RHUE5BaEsySStDOGxRN3Izb1VqNktxVTVyVzczazBWYVZJdjlmdnFlZUpQVnIvU04xL1A2di81azZwYjNNVlRTTjhsd3Z1TS9qZk53UC9BTTB2amxBQUFIamFZMkJrWUdBQVlxYUdkdjE0ZnB1dkRQSWNEQ0J3dm95eEc1bm1ZQVNMY3pBd2dTZ0EyRDBHdmdBQWVOcGpZR1JnNEdENGZ3TkVNakQ4LzgvQnlBQVVRUUZpQUdRZ0JBY0FBQUI0MnVOZ2dBQU9DTTdtWUdBRTBRMUF6QWpFVlN4UU9Sak50QXFJZ1RSaktCU0QyRE9CUkNHRUJzbXhYMkJnQUFDNDVRV1JlTnBqWUlDQ0dJWkhqSDFNMDVnZTRJRXZBQmdSRDZ3QUFBRUFBQUFXQUdjQUJBQUFBQUFBQWdBQkFBSUFGZ0FBQVFBQTFnQUFBQUI0Mm5XUU93N0NNQkJFWDBoQUlGRWp5aFNJRHBSRWlGOUhRMDJCb0FieGJRQUZJdTdDS1RoR3VBUm5ZUkliS1UwS3I5K09aOWRyQTNVT3VEaGVBNGMyV0s3UVZHYllaVUhIc2tlWGgrVXFMVjZXYTNLL0xhZlNVOHNmQXI1c1NGUjFFdmQ0Y21iSGtiMlVJcys1Y3JGN25HcytFWDNWK0V5MXlucVkwNUNSOUlGV0pFY29LdmNYczVWaXpGMUtkbnZXSjd1eHJIYXR1TlYvbVVuLzdxV2NpYklaTi9VeXMyUnhyTWtDSm9vaHcvdzErV1EvbkJBeWN3QUFBSGphZmNZeERvSkFBRVRSR1ZCQVVOVEdjeXlMaTFvYVlQVW1TbUlNRFlXM1Y3SlQrNXYzRWVGL0I0QVJZM1RvNFhIRG5Rc3VtVEJseGhWekZseHp3NUpiN3JoUEhxL1ArS3pTNlQwWVk3cForeHRaU1N0cmVaUk9Odklrei9JaXIwSHJneTdvZlBzRjY2a2tabmphMjhINHYzVURZeStEOXdhT2dJaU5qSXg5a1J2ZDJMUWpGRGNJUkhwdkVBa0NNaG9pWlRld2FjZEVNR3hnVW5EZHdLenRzb0Zad1hVWEF4T2pPZ09UTnBqUG91QzZpWmtkd21IY3dBcFZ4UTRVWmZWZzB0N0k3RllHNUxLQk5MRXppVFBBUkNJM2lHZ0RBR1RGSXVVQUFWTlFVUXdBQUE9PSkgZm9ybWF0KCd3b2ZmJyk7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc3R5bGU6bm9ybWFsfUBmb250LWZhY2V7Zm9udC1mYW1pbHk6cHJveGltYV9ub3ZhO3NyYzp1cmwoZGF0YTphcHBsaWNhdGlvbi94LWZvbnQtd29mZjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxkMDlHUmdBQkFBQUFBR1JvQUJNQUFBQUF4OWdBQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQkdSbFJOQUFBQnFBQUFBQndBQUFBY1lhdHRBVWRFUlVZQUFBSEVBQUFBTFFBQUFESURBd0h5UjFCUFV3QUFBZlFBQUFrb0FBQWVocFNDZkxkSFUxVkNBQUFMSEFBQUFnY0FBQVlVVEo1MVRVOVRMeklBQUEwa0FBQUFXUUFBQUdCOFZNSzBZMjFoY0FBQURZQUFBQUdOQUFBQjZybmxSSjVqZG5RZ0FBQVBFQUFBQUNvQUFBQXFETlVHS1dad1oyMEFBQTg4QUFBQnNRQUFBbVZUdEMrbloyRnpjQUFBRVBBQUFBQUlBQUFBQ0FBQUFCQm5iSGxtQUFBUStBQUFTdWNBQUk5Y1dkSlBFMmhsWVdRQUFGdmdBQUFBTVFBQUFEWUYxUXR4YUdobFlRQUFYQlFBQUFBZ0FBQUFKQTYvQjdCb2JYUjRBQUJjTkFBQUFqRUFBQU9paHFwU3ZXeHZZMkVBQUY1b0FBQUJ4d0FBQWRRcWNrNDhiV0Y0Y0FBQVlEQUFBQUFnQUFBQUlBSUdBYU51WVcxbEFBQmdVQUFBQVhNQUFBT0FWYWw5TUhCdmMzUUFBR0hFQUFBQjZRQUFBdHVNRDN0b2NISmxjQUFBWTdBQUFBQ3ZBQUFCRWNkUnNIVjNaV0ptQUFCa1lBQUFBQVlBQUFBR01BUlRVQUFBQUFFQUFBQUF6RDJpendBQUFBREY5K211QUFBQUFNOTE0SU40Mm1OZ1pHQmc0QU5pTFFZUVlHSmdZV0JrcUFIaVdvWjZJSytCNFFtUS9aVGhCVmdHSk04QUFGN3JCUFlBQUFCNDJyV1p5NDhqVnhuRlA5dmw4clBhajI1M3ArZGhUN3JiVEY0TUVQTUtoTkVzd3NnQkVVR0hKQVFjQkZMSUJvUml4QUlwbXdRd2hOVUl3a094QkdTQmxJaUZSWGF3U1FMK0R4RGdrSVFGaXBCWTlJTFZMRmlNT2ZkWDVXNjNIOTEyZCtNamw4dmxxdnY0N2ozbmZQZmFZbWFXdGFyZFk3RnZmUFhiMzdTMGVicGl3Nkc1WDJKZi85cTMzRFVMdittM3VENTlLeWV2WitMQnBkV1h6dnNXVDNydW1jVHZQYzhDMjlHemV4YTlSbWZEZ1RzZjl1MklsMzRmVEYwYlRGODc3alhzRDd1Q2pnZWxjT3lOM2RPYXZESmU1N0UxREJhL2x6NzBYTjhPZWovc2pOb3diQXhyK25Vd2JPdmRIWGE0ejZIQjFmQTUxNXZlTW5FNGlQK0M5dytpK1BmM3g2c2Z0dnVZT0xzbmVwTmpORjU3T0FiTGptRVVuNTZMa1NMajJ0SndaWVhYdzlnUnBUQSt2VkdMRDgybDJXUGJQSDRlem5pcUc4NUVqYzlnckp6K3NEMFpFYTcyUnpPWCtBd1dtMG5Majlka3Z5WmpjT3dyYm5teGRVZmNmWStRdE11Q2IzY0tNYnRYOE8yRGdtL1AyUTkwei9OQzBuNHMrUGFDL1VMSEZ3WGZmaTFJQSt3dS9aclVXVmJ3cFFPQnBhd2dWSzBrVkcxTDhLaXZSbjFwUFhHWGp1OFZMbEZmbXZyUzltRWhZeDhSc3ZaUklXZjNDVEg3bUpDM2p3dEp1MThJN0JQQzdmWUZZY1VlRndyMlJhRm9MYUZrVHd1dTlUOVVqYTcxYWRxZHB0MXA2OW92VmZLdmhNQmVFMHIyaGxDeVB3cHA2d3VCL2MwR0t1Rk5vV3AvdDdkMC9yWlF0WGVFTGZ1SFVMVjNCVit0VzFmUDZ1clhaY1h2WHZYak9mdXVmYysrYngxRjczbEY3UVg3cWYzTWZxNFd2S2lJeFJPL2M1b1p2eFovVkhHNmcvblNqMmJ5WUZuK1JuT2dJVmE0ZC9OZzNtckc5dUhKZ004T1p4MDNqeU5WNlloZkxjZWp4VFJGZDJaREpSdVY1OWdLUDFyb2Jtdll1bldUNzdWYk4zUnZRMWVidzQ2dTFlYVUrTzY0TXM2YTM0ZjBaTzhvZGFOM2U3T3U3MnZjWkUzZFVHK24rYjVmWW0yVzhrVUswSEc2RkNsNWJaaDFSOGFoWi8rSFY2ZzJMc1p3TjJGWGhKaTlUNGpiaDRTRVB1K0RoWnZpVDBhL09TNXV3c1Z6Y0hGTDNDanFQc2ZJTFhBZVJtN0RTQTlHZWpCeUIwWjZNTktEaXhmZzRrVzRXSVdMTlZpWXRBY0UzNjViVXpQNVFTRnRueEpTdGl1azdQTkN5aDRUTWpBMUMxTnpNRFZ2WHhJQytMb0NYemZ0TzBJQzFtN0RXZy9XZXJEV2c3VVhZVzNTWGhaOGUwVkkyYXRDeXY0Z3BHRHpDbXhlZ2MyZS9VbEl3ZW1rL2NYK3F2SWRzemRoOWhiTTNvVFpXekQ3TXN6ZWd0bWI5aS83dDNya01wOHJpblJEY1k1NzVFangzOGIvckQ3VlE4WkdqR282ajJLV2hwN1JqTmpXMy9lRkx0OGJaRVJUY3pLOHlyRk5DWHY3WHV4WTNBczlPaXFKREdmZVhCdlBObzV6bVlqUjdWbStOK0g0ZzFQUDRyMTloOTQ3cWRMUkorbWNvdGpRc2IwZlY1ZjF0YVE4TnhXcEJtaEY5K2txT3RlSzd1dE85bTB4M1oxOWg4dEd6b2pqemRIYzJlOVQ3OWhzdHpkejdIcW9oQStiRTNocXlPTWtQRTdBNEJoOGNyclJpQlREcVlTUFN1UlFDVjlzcTBaNVFncVZDRkNKZ0hKWFVJa0FsUWdvZlJ0OTJFRVowaWhEQVdVb29nd2xsS0ZvbjdYUFdSbDlLTnJEUWhtVktOb2pRdGtlRlZiSEZHTU54WWlqR0JVVUk0RmlyTnNUUWhuRnlLRVlLUlFqUURFQ0ZDTkFLOUpvUlFHdEtLSVZSYlNpaUZhc294WHJhRVdBVmhUUmlqUmFrVU1sUXVmM1VRWWZUU2lod1M0S3B0aU9ZcWxNeU45MTZ1QTk3YjJsK056QktQYWlXU0svRUsvM3BrZHI2V3kwZzg4TVJsN3ZadlpKUFdYMFpPaDBsTncrZzVtOE44NndTTmY2MDZ5YnAxckgzRmNUMnFIN25pcU8zVE56NTg2RVB0VjROL1ZtOVhickpxclVERWNOVjJqemRzN1FPTWpaVHBiL1Q0N3ErQWlPV3Fac2JHWTJzK2lxZXJJODE1OWJOeGRmZVI1V3NvT2NjMVN5b2pJNEhNV3pqTW55cStLcDNMSTdNWGVjeDdTWG1jK0haOXZKK3pxeGlpdVI0WGtvZGJneThsa1pwZERmdEgxU3lFaUZyeXYzK3JTUVJuL1RVdCtIZGYxSklZdEtocmxVRm1YTTJPdENCaDMweVlweXF1a3EyV1Vkci9ESUx1czRSZ0hIS09JWUJkb1I1cGM3SUlkdmxQR05Nb3FaeHpmSytFWVpiMXFOdk9sZ3BlZXowa3ZRbnhUOXVVeC8xdkNUQ242eWpwOVU2TThHZmxMQlR6Yndrd3Arc29HZjNJYWZiT0luNS9DVDgvakpCZnprSW41U3hVODJ5RVBydUVvUlY4bmhLbVZjcFl5cmxJbFhDbGRaSTJvVlhLVkM3Q3E0U2hWWHFlSXFaVnlsUWpSVHVFcVJETFNPdHhUSVFPczRUQUdIS1pCNzF2R1pkY1dqb25nSHhQVit4ZUVCamVkMWphUHJ0UnZESjlXV1YxVHY2eXI5SFl1bmR2Q2YveVpmMGlqVXc3MFF0NzgwbmJVc1B3dkpuTTZncEhtOFlmM1VXVTROMGJzYTY4L0J5Vnh3ZkE5bGJJWFhabjJzMXJpZEhwZVpxZWU3N05WMTk5ZlE3Vm05SGpuK25IeXRzYVJIN2MySjB4RnFQcjJtdG1mVTl2RlczWWcrSFd1ZXNhZm1OdUdHZTlKK1kzZnFlS1JIczBmWGo2SzR1NGhHejlOczF0WUxla0c0cmlLL2FNM2RTZXd1by9PejIzaW9kMHM5T1RQbldtb1BjcUdJbjluK1lteGg5cDNPVWNkR3NBVm4yck5XbjR1d0pYb3lMazEzL3BUQW1STDRrb2N2SlhFbVQ3N1JsSzg0NTBqaEhHbDdTTWpnRm1uY0lvdGI1SENMUEc0UjRCTXh2Q0hBRlpMMnJMQVM3VDg0M1MrZzd6N0tua1RaRXlpN2g3SW5VSFlQWlhmL24xd3o5MzlKamJabWFHdEdkZVh0RWo1K2tYWW5hUGMyN1U3SUhWZDExNXFRazRkdDZ2eWNrTWRqcTlFZWJsMm9zZnRZczd2dEhoMmQweWJ0aW4xQTV3Mmh4aTVSRGIrOUhiOE5XQXV1akxsdUFkZU40N3BGWEhkTDdiMm10am5YTFJHN01yRXIyV2VFVmZTalJBUkx4TTRuZHVHYXJVTHMxbkhYRGZ1S2NBbDN6UkRIYmR6VnN4L1pUOVFxdDNwYXdWZUxPR3FKeUpadzFCS091b0dqYmhEckVsNWFKT0xiUkR4RHhCTkVQRVBFRStRdE84UTlnYU5tY05TeSt1cWlueVZ2S2FsZkQ2by9ENmtIajZqOWoybk1IMWVybjFBTG45VUl2NnJhWEMydWpqY3AvVzJWRjArNDliVEYvaE4vdjhxNUxjd1BKeFZMMTlqM3dVZGF5L0tUZkxnOTVTUzdKMWl6UExYOHl1aDAyVGQ2ZkhRcC8xdytBMTkyUC93MEs3aG9WN2NUL1E4VzF5am5CQjh1cHVCZld0bmpCWjFmRlh6eXlCZ3pQV05mRm56bWJJWTVtOUh6ZDVNMXAyRjNkbXlISlF0LzE4bVI4K1RJWVhhY0p6dk93OU15RFBWZzZDb00zWUNoNDdsd0VPWENqcFdaS0JjT3MyREh4L0Qva1JoOGpOUEt3dGkreVRvWmJwNE1OMCtHbTRlSjgzTGJBcjBxa052bXgzTGJ0YkVka3l3Y3pNSytMTHdMVkwrTDRhcGlkMEY5dUtxSXRSU3AxK3lOL3dGQTJkYWtlTnFObE05S0hFRVF4ci9xN3QwWUNTRlpkMmFYaWNnUUpJaUVKWGp5QVJZV1VSQ1hSSFBkSkpnRWxvMzRCOFNnWGp6NEJKNTlBUEVKZkFDUEhrSU80a2t3NWhFa0YxTmQwN3ZwbWV6SUhLYTdwL2pWMTEvMVZBOEl3Q2dtOFI3VTdXejJNQUxERWR6ZnkweFEwRENyNjUyUGlMcGZQM2Z3OHR2NnB4Nm1OcmJXTnRCZ1FnbGxuNFRYTHVzUm5tRUtiekNMTDFqRE5zb2NmOHlySTV6aG1rYW9RVzlwaDQ0bFRuU2FhTkM1dkFmMGsrNVVwSnFxcDQ3VmhmcWpZOTNVcS9wQW4rb2YrczVFWnRaOE1JZm14RndsdTVyTFpDNlZFNTNTalBqUXFDSkM3QnlXZUNTTzJMRWlZMUNJcXVWU1lTSEsxd3B6cWFBUTVXdTlLT1FybjZvWG9xSU1sYWhYSEZNZWZQc0tkckdIZmY3eVQ1amF3U2EycEJ1cVhGa29lZlZNSHFISk5HRU00N0wzTUtLZElwUzRzNmVRVnJIajh3SmtleWc1amxldXF0Y2V1K0pSLzA1K25qTTB4MkpNUzQ2dlBpL3JiSmJkb1k0SmQ0YVRMcjdzYVZiZGZ0cWR0bjJQUGQzbERHVnJtL2l2dGhYM0pmcDdodXlCK0E3Q1JWdGVsMVZ6VHJzMXVCWERQQytsRkJJK3o3UFB0bkk5dHdhZWd3Yzhod1U4aHptZTM2VVVIdmJzczBVOGh5bWw2VXp2S082Q01ZN1VwS1orN3d6WDdIZE9OcWZCai8wZmozSk50cDkvczhJY0ZuRXI4d0orY2NZaWJuaGNFSDVPZWxneEgvTll4bE8ra1pwekE3NmJkcTdKVGQwZnJCWDdDSVZYNk9LN1JKcG8vd1hoQzBocEFIamFZMkJpVG1INHhjREt3TUk2aTlXWWdZRlJIa0l6WDJSSVkxckZ3TURFd01yR0RLSllHaGdZMWdjd1BQak5BQVc1T2NYRlFJcjNOd3RiMEw4Z0JnWjJOc1lEQ2d5TXMzMkJnc3gzV2NPQWxBSURDd0QxMnhBNkFBQUFlTnBqWUdCZ1pvQmdHUVpHQmhCNEF1UXhndmtzRENlQXRCNkRBcERGQjJUeE10UXhiR0g0enhqTVdNRjBqT21PQXBlQ2lJS1VncHlDa29LYWdyNkNsVUs4d2hwRkpkVS92MW4rL3dlYnhBdlV1WUJoRzJNUVZEMkRnb0NDaElJTVZMMGxYRDBqVUQzai82Ly9ILzgvOVAvZy8vei8zbi8vL1gzNTROaURndy8yUGRqN1lOZUQ3US9XUDFqMm9PbUIyZjJEdDE2d1BvRzZrd1RBeU1ZQTE4VElCQ1NZMEJVQWc0Q0ZsWTJkZzVPTG00ZVhqMTlBVUVoWVJGUk1YRUpTU2xwR1ZrNWVRVkZKV1VWVlRWMURVMHRiUjFkUDM4RFF5TmpFMU16Y3d0TEsyc2JXenQ3QjBjblp4ZFhOM2NQVHk5dkgxODgvSURBb09DUTBMRHdpTWlvNkpqWXVQaUdSb2JXdG8ydlM5TG1MRmk1ZXVtVFppbFVyVjY5WnQzYjloazFiTm0vZHZtMzNyajE3R1lwU1VqUHZsQzhveUg1Y2xzWFFQcE9obUlFaEhlSzZuR3FHNVRzYmt2TkE3TnlhdTBtTkxkTU9IcnB5OWVhdGE5ZDNNQnc0elBEby9vT256eGdxYnR4bWFPNXU2dW5zNjUvUU8yVXF3K1RaYzJZeEhEbGFDTlJVQ2NRQWJneU5Gd0FBQUFBQUE5MEZWZ0E5QURjQU9BQStBRWdBZHdCQ0FIY0FRUUJDQUVNQVJBQkdBRWNBU0FBK0FEc0ZFUUFBZU5wZFVidE9XMEVRM1EwUEE0SEUyQ0E1MmhTem1aREdlNkVGQ2NUVmpXSmtPNFhsQ0drM2NwR0xjUUVmUUlGRURkcXZHYUNocEVpYkJpRVhTSHhDUGlFU00ydUlvalE3TzdOenpwa3pTOHFScW5mcGE4OVQ1eVNRd3QwR3pUYjlUa2kxc3dEM3BPdnJqWXkwZ3dkYWJHYjB5blg3L2dzR205R1VPMm9BNVQxdktROFpUVHVCV3JTbi90SDhDb2I3L0Ivek94aTBOTlAwMURvSjZTRUU1cHR4UzRQdkdjMjZ5dy82Z3RYaFlqQXdwSmltNGk0L3BsTCt0elRuYXN1d3RaSFJ2SU16RWZuSk5FQlRhMjBFbXY3VUlkWHpjUlJMa011bXNUYVltTEwrSkJQQmhjbDBWVk8xelBqYXdWMnlzK2hnZ3lyTmdRZll3MVo1REI0T0R5WVUwcmNreWl3TkVmWmlxOFFJRVpNY0NqbmwzTW4rcEVENVNCTEd2RWxLTytPR3RRYkdrZGZBb0RaUHMvODhtMDF0YngzQytGa2N3WGUvR1VzNitNaUcyaGdSWWp0aUtZQUpSRUpHVmZtR0dzKzlMQWJrVXZ2UFFKU0E1ZkdQZjUwSXRPN1lSRHlYdFhVT01WWUllbjdiM1BMTGlydFd1YzZMUW5kdnFtcW8waW5OKzE3T3ZzY0RuaDRMdzBGandadlArLzVLZ2ZvOExLNDBhQTRFUTNvM2V2K2l0ZXFJcTd3WFBySW4wNyt4V2dBQUFBQUJBQUgvL3dBUGVOck52UXRnRk9YVk1EelB6T3c5dTlsck52ZGtzMGsyeVpKc3Nwdk5aaE0ya0lScnVJZ0J1WWtJaUZ6bExpQ0NVZ1JFUUZCRUZCRXZWYXNXcWM1c0ZrSHJCYlZlYUtYYXR5MjJMN1hXdG40MHJhK3Z0ZFlxSk1OM3p2UE1KcHNRd0g2KzMvLzl5bVptWjNkbm5uT2U4NXo3T1EvSGM4TTRqcCtydVlvVE9CMVhKUk11TURpdUU4My9GWlMxbXQ4TmpnczhuSEt5Z0pjMWVEbXUwenE3QnNjSlhnL1pQTFlTajgwempDOVVpc2wrWllIbXFyUFBEQk5QY25CTGJzLzV6MGlXWmpKbjRNemNVaTZ1NXpoL1F0QnpCYUkvYnVRNVA1RXNBWWs3bGRBWXVYelJyeDQ2MGpTYzNwOHcyem12NkpmTWdVUWFQZXZ3bW8wV2Y4Sms0NnBGdjV4Ty9MTFphTFBMZWo0YWxVMXBjS1lUb2xGT05nbzJ1NVFXcmE2SjFOWUZNMXhPYlZHcEl5UjQ5NVRWbDhHL3JNbnVzcHJzc3JMc1hKOVAwM3p1U3h6alJtRW4rYVZtRWFmbmJGeVFBMkE1djJRS0pYUjZ6Z0RQVHc4U3lVNEhhVEZ5YWZCa0J6elp3c0h6TkFaNFhuV05nejVIOFBLUjVNbkcvS3I4L01xQ3pvS3EvSUxLQWswNG82QWdRNWxNOXJxVEp4ekZUWmpqeEVtQW14eXVnQnZCeGJNQk41SXJGTmVweitkSXRzN3NsMjI1b1pETUNaMnl3eDBNSmpRaXZaaWVEeGMxY05GZ0RzTDRDZ095aC9oeExKR1F3d3V2a0VCZk9pOTllUjBlZU9GSFljZC9IZnpjOW85Tnd6WXBtNFp0K2RUeStjTmYyYi9hUEd6cmVXNXo2K2FwWFE4cFpOdGc4djVnc2sxWmg2L0JTdlZnZGthdkEzVXNPUjhTODdRbDNDQ3VqbXNsNDdsNEJZN2FGNUpGYmFjVUNjWXJSS08vWTJoRnVjRWZ0eUljanBCY0M1OWtCdVBXV3Z6RWFqUEFwQThMU09aVGNxVzFVNnEweXVYRUg5ZFlROEZnVUM0emRNYnRXYTF3S3BWWjVSZ2cybVBybEljVHYxU1gvZUovL2ZUMUgzQXV2OUVpNmF4UzgzRzV4dktObEhOY2hIY2RHbDJ6dy8vaXAxKytmZ2ErWU9yUTRsdFJxckYyWk5Ya3BINlFqVzg3Z3ZoWDdBajErUXh2MDBKLzE5R0toemg4cTNCSDRRNnYxbUt6UjZYc2FCenVpbWN0VVc1b21pWXIxS3JWWmVmVUJKdGJxbEwrSTBmN1g1V0daaE81MGd3MFNhSnlyQXlPR1ZISlk1TmNRS3Exb3MxK2hDTm1WNGFuMkEwVU80VGtFN2V0U2h1dXJZdUVRNjRNdDY3VVo4dlh1cHdXUWVmeWhxdUl3NWt2dUcwV1FwckVjRzJWNEZzU0h2YnVwa2pybk1iaEpkbi9mYmpsM083UWh2OE1qNW5WUEt3ODJ4MmJzWDlXeXoxL0xmTkY1azVvdWZzbjVMNEp0NDRMT3NvYXI1L1MvRnBnNGtvdHZ6UGRWZXdOeDlwckhueFpjK3pIRmlud3FMWDdXSHBXV2RuZzRUUHFBdGZNSGxPcmVUNGhyaEdlQzE0WnJzbDE4QkhOWStjZTBneHFhaDliMW5qdGtJakh3WEVhcnUzOEdjMGNXRHNtemcxMFhNSUZ1UHU0ZUNiUVJMd1kvc2psbXM1NEZ0QUJYVlN5Uyt4TVZCVVVDMERBVlhDYWJxQ242V0lua2FweGhjbHA1azRwelNyYlllSzFjS3ExeXJsd1dncW5wVmJaaitSZzdwUnI0R2lIOWQ1aEVESnpBRyt5dnhUUW1KVmY0QzNPaHJlY1hKVUppelBYQTJ6QmxRNW5XaTRhcGFzMFJObUJ0NmcwNHN3SUJldkN0YVhlSXEyRGhBeWt0cTRRUHlyRVQrZ0hSZG8yK1k3dGtyVDlEcm4xemtXTGQrNjRZZkhPdGNMQ01WMzNrY2RrWXBWbDVYTzVkY2R2ZHNBL01XZlBLNi9zdWV2bGwrOWE4Y1RqSzFjLy9zUzVGWnJKWncrUjBKNVhYMldYSDM5OHhlb25uc0ExTDNDenpwOFJYd1I4VlhORHVRbmNQTForNGxXSXF6cHRaOXlFYUJvdkFFS3VwQWlwc1hVQ0djdDZBTGtaVmt1elZSNkQzQWNXUlRzY3h3QkJQbS9LMEZiVkRjNEV5Q1dMVGFvSCtNZlh3V1ZPYi9FTkd0eEs2Y3BSMnlSRVNzTXFCaXdhblZhWDRjNXcxMFhjRmp6emx2b1lWdkw1VURCUzZpdjFXUVNIMDkya1pSaWE1YTJiTXFGdWJYempodDJ1d2tob1hNTWdzNjV0elEyenA0MXVGdkxNZVJuNUh0djNicjloM0UxUC9PTkhuNHlxdTJaMXk0a0hEemJlZEVWc1NudkZLNHRyL0pQS0dySmRpNmZNM2s0bUQxM1dma1c0NElVdFc1L2RkRk41VzJOalJiQW9VeWZlc1BHbTJkcyt5TktQS3hoVjJSVEp2bVZWeTQzdnZmWnMyNW8yMzA4ZUdYbjdjbS9MdEdYOEk2dC9rSjBaOHRUWE5CZGZQWHNuUjVCbmM1MlVaM3NaeDFiWk5aRU1BWmtqVkpUY0RzemF5TmhpUDg3Y3k1STV1TmNzWlFIWnJGa1BOT3pnaUpSR0VhOEZGSnZaYjYzRXJlVnRUcnRieDgwaXZHZnBraVZMUFlwQ3ZpQi9KRSs1LzZLc09jK2RWMVo5a2tXZXdudDU0VjRqVXU4bG5KSU52ZmVxczl1c3ZDL0MyYXpFUzI5RWVFVlJObjFDZG5IbkNVZDIvTVd0VEZQeWxUeGxHdHhya2pDQ253QXcyb0RYeGpVSVk3cWUweU9NSUkvU1Q4bEVBeXpUWXUrVXRVWTRvV0lKNkwxRDFKbXR1QTVRR3ZnaWJsOUlGM0hyM0RxZjJ4dlJUZnJ0Ynd2ZVRXc3lueXlBazVQbXByUjNoYzVseThKYi8vR1ByV0gxaUhSS3VFYnVwSEJNM0Fsd3RITVNGNUIwSVprQUg5Y0U0eHhCUHM0WmdjTVREaytKZ0N3ZFFEV2VrdmlnYkRCMFNtSXdiakRpWndZZGZNMW93Rk1qWi9BbjBSRDIyRUJyY0hsc1hsc2plYmlGUEtSYzE4THZiU0l2S2lPYWxBYnlGaHZEMnZNVzR1VldNYW1zUWMzQlJEVUhDai9nMVdMcWpBc1d1RGNuNkExVUxuT3lTUU1jMWdJMDcyNGlZYVRxSk5WcmRXdHJHdFBFdkpLU3ZLS3FNYlVuaXhjRmVGOXVqcThoTkhwSENYdGVqUHlDTCtjdHNFcUxFR2FaZ0h3bHVCWkZSbEtDRVNsTTFpUmhjTVhJcCtRWHNSaitsdW81TUZZRFNQVStXazdLT1pHTUZ5bzdzb25lcmxkWlVSV1ZwSklDOStiT2Y4Q1hhRGJDdURJNEhBemVnemNpSmFoamNaRVFJWjhNVmJMTE5VK2ZuVXAxaXdYQVo4TGlSczdKbGFOdVlVTUdrd01UV0JxUXRRaFNSVUFpcCtRTVlDOFpWdFFkWkpPMWszSFlESnM5YnJWcG82aExsZWJBRzQ2WW9zaEI3Y0JGUXNGOEhzVlJVUlZ2QjFrVUNqWUpJSWVLTFB5Q29uSExucHk3NGZqeWFOSFlwVDk0NThsbDQwcHpoOHk4YStxVTNUT0g1T1lNbWJsYnVtdm1FUEs3WjU5OFlPV3crYys4dTNUS0R4NVlPWHo0eWdmSW1JZjNicDhYaTgzYnZ2Zmh2VHZ3WkFmT0Jka01RSndRNTNGYXJwQ0xpeHhxaXJxQUpKNlNCVU1uWlllQ1NFVXFRRzhnSWFBakhkbE05RTB0SHdoalNmYTVBNkwrYjJ4T0R3RFQvUUx3NE9aaVhOeU1XREFLblpJbEtEa0Rzb0NJeUF4SXRsT3lEdTZhQlhmVjJVQmdtTklRZGljb2x4MmN6dVptTExTSkFPekU1ZVEwUUxmaFlvN3hSdDJCSWYrOGUvSHpxNVJibE5mNXcxM3ZrWnZKanJkMmIvb2dMRWd6VjB6NTRaSjNsRTI3WTQweVdYcHM4NC9tVFlUeDdGZk9pRnB4RVZmTFRlZGcvWUNHRkF4UTNja1VrSzB3c3N5QVhJRERDc09TT3lVSFRKMVN3Q3A1QzAvWlpCZXNLMWRBOXNKSTY1RFNDU0tBaThyV0lCekxvMUttTFo2VDY2VXo1WTdrRXlyZ3FvaTNTQmNHWWRmRXErUDFKZUVBbFNKZlpPSndmN1QrSjFzUG5WanhvNlV6bmM2WmJac1hEM24zbnJYUFhSRWE5WiszTDNseFhYbXNmWlMzZU1KVnJmNi92UHZBbVpEbjZxWFAzcjk0VHhQZnpCY05YelhtamtlbXp5eWZzZnlLSjVjTldUeThObHNyNU5hUFc5bjZ6Rzl1QXhyY2ZONHFac0VjR2tIM1oxeEVHNUpOQW1VUG5JbHlFUU93QnhQbElpYmV3S3dCd3lrcExTanJBVm9oR05kVDFxSFh3dGNNZXNwUWtJdWtzeVVUaG9rUHVid3crV0IrYk9aWFRIN3Z2WmJ1Ti9qWW82M0M1cTYxTVdVNXVUc21ER1YwY0VqNVduVERXQXE1T1p5VUR5aUhZUmdEc2dzT3RvQnNRWlI3cUZKcVJ4WFVqSSt5V3cxK3lXNlZkVUFYMllEMUl0UTdRSkdUQ2RDSHBMTjFpRVpYUGxVNGpFeVBTelBic3lteDlPQWZVSzd6VVVaSDBZNUxCMmFrOUZCNCtBdmJIdnJWTHg1OTdmNEkzOWs5TGZyc3ZNa1AzanhxdzA5V2ZmK1hYdCtDK2I5OCtORFBkbnY0WTdIdXcvVmo2aGM5dmVCNzc4eGJ3MnlHdTJCZGUwRW1sSElSYmhZWDl5QkZWNExpb0VYRndTeDBKckxDSGkwb1ZWa0lVVDBWWlE1QXBjTXFCMkg0dVFCR0ZJNUJoODJlMEJxeVBENDYvbkFsa3JvajE0WGFsRGtMUURRWW82cmVBTXpUclVNNnNnZ3UwQWw0cGtMdzNxSXF3WjB2OWxMV1hmbWpseHhhOUwybm0ycnFkeSs3NXQ2WlRWbDh3WXJFak5mK3UrR0daeGJNZjJMeHlQeXgyb0toVXpaUG1ISHYxTUNKcDliOW5qKzA0UFVYdDArOGRwcC93dVFydmljZHVhNG1xM2JSVmIvN2p3bjMzZHgyeFpaajc3UTBiN2oxbXNiV0piY01TYnk4ajg3aEUrZXR3bG5LRTNLUy9CbTVBcklEV0E1Z2tVbENsREZtNGlWUENKTzduMmpqcDRybHNjcXpIMml5Z0h2dUI5eHBBWGRld0YwYnQwakZYaGxnTHgyeE53cHZOd2JGbUZ3UEtPTncwUlhEQXF5M29nVWlPK0dhMHlybDQyVS9YUFlINUh4VHB6d1dQaHBlRC9PZm51VXBDMm9vUGtlVklUMFluZm5CSVVuOWk0OVVDZUZhUkIrbEFsNlhMeVIxMGVSYUZYMFdFUlI4MFkzS1BhSjAvK0Q1Tnc5dlhqa3JPbXJkUFZlTTMzUHo2T2lzbGMzRGI3NSs4TDllZmYycjVzVS92TzYrai93akowNXBjZWRQWERwdGlOczNmUFRVU0s1M3hKSXJHdCs5OTc2Zmt2WlJ0MHh2c3FkSEpxeHNuYng5NHFCQkU3ZFBibDA1SVpKdWI1cCt5NmlIVC83czBhdDNqbnh5Vy8zYzRmVmVoeUJtUmthdjR0ZldUbXNLNUZzMU9rZDEwL3ltTFE4OVJHbHV2ZElsV29DSCtyaDZiaW9Id2hlcFN5b0p5SDQ0MUFiUURpVlNsTkphR1NBR0xMY0NGQ2lBbkFZNEZnQXlFbmFOcTZTSzRxWUV5Y3VWQWNwNXJSK296bFRBZVhwd0JNZ0JyRmhFUUl1UExxRW13SmtQaVUxVjJTTlY4Sm1GWDkrd1dLV3BqTXJ4QysrZE5nRFZOZjhVU0d5SXRuRElsQzJVNHZoZkorbHErZVRIdjc5MWZvTktkektqdThtLyt3K2dzaldVNUlZdHVZWHI5VjBJbjRKTWQ0QSsxRWVxbXdtYzIxV3A3a1RRSldOUWxlaFNldkpNZHZXVDdiYitVcjZ2ckJmMjVwYVY1Y0liOW55cS84RHpiVUR2Vi9mUmdPSXVmSDYyK3Z6Y2dLUS9KZG1ENktESWhlZTdnNUxGS2dzd0ZVSkF6a05acVVkTTI1elp6RWlRWFZrbzRDNmhLZ2s5NCt5ak5EblljUHZxVHVLQjNrR2ozbmdNOU1ZbllJMXlqakJ4R1lpclViaWw2d09obk4vdkp4KzNLZTNLNURhRXJaRzhJUndUN3FQK3B1emtha1pGUzZNRll0SUhaRU9QbGtYZ2hUZlpMTnhDM29qRnlMNm1KcTcvc3lKaEF3bmpzOHJoV2JjY2F5T0h5TE50U29HZitWbk9meVlzZ0hYdjRRWnhDN200SC9GWXd2REk0OExQUi9xdERFaU9VN0xaM2lrVndRcFBsQm54Yzhsc2xYTUFnUnBRanFyUTRWUUVLUE5IcFRMYkVkNXF5eStwUUlUbTJHV2pHeEdhWDRKc1ZHTlRDYnJPdzZ3dGx4TU5lVmo4R2xVR2t5U2VBZVVQa1B3ZnZWY3pidWJNY1RYRmhiN3BnYkV6Wm93TlBMSG56dWRIa0lLeTNKd3lYMzJaZU5mcG83Y05YVHArK0pBaEU2cXltaklDcmRQcXJ4MDJkT2pJMlEyTDk4eTc3dHpKN0RKZkRtcUtDT3VvOHlzMFp6VTVYQXRZbDE5eDBwQ0EzQUI0QlFvMWgrUVJZcWZrQzByakFuSXVuTldvdUdhR1poMEFYbWVWM1FCa3E2VlRhclhLVmpndEJwNVhiSlVMVVMrRUwzaXNjaVdjR3UzVS9FU2ZUSlAwanh6MHlZaFNZWlZGR24xY2xEMk9ieXhTMFhGcHRMV2pZSFNodzkvUmhuL2o4RGZGbTFJUTVZNFVGSHFLUnJlcGJwT09BdldjdWt1c3JUYjdVWTB6dDZaaHlJaHhLSk1LaTRGcERJNUYwWE1pbTMxVVBXdFFMOG5qUmxCdTY3WlYxcW1jeEY1WHpQZ3NVbldNVUpuTG1HK0dPeElTdEM1a0pzaGIrR0p2a2FpRkw5cEJra1hjOFBWaXZvUnhHZ2VWZVdUVXRvOUl4VU83dm5qcTJ2am1LK1kwL25qQnpzTlQ3a3hjUFhkSGZsNXNJOTljbFRONFJLVGtYdVh2aCs5VlBqMnhiait4SDNyN1JjODdmenlxbkhxYXJOKzBjdFVyUTBlNE44MWRkV0lsK2ZKeFV2bkI5eFlrL3JYek4vOWExR1p1WHliZGU4TmJPOXF2SDdlcis4bTByTHJtak1hcCsyWThRNXlQM1BLdTh2bnVKNVF2RDZ3T2JEcEVTdVcxOTkwK2t6U1BYblBIYjJGK2dYakZUeldUWWRVWWdacmpIR3FRUWloTzBEclU2amtDb3AvcTk2Qk9wbEd4Q0V0Zk1nSldRbUFqZUFXUDRBQmxuNCtPNXh2Rzd1L1czaS94SjVRSHFidGltYktISEJabW9vOGlBYzhZQWMrd2dOWmN5RjNIbmlLbkM1MzBNWEloYUJtWmJ2cW9URlZ2QWdKS042Q1hUMHEzVWtQVUJJWkZMa3BLalkwcFRybGdtVXA2bURjM25waFFYWVczVXFGZDB1RGdiQjdHZUZBejFYcExQRXg1OG9TVEp3bWVmL3JrM1hPV1BQckxJMG85ZWVlK1F6KzhINDdIOXh4ODZHNWxxR2J5MFIvYy9JelQ5czdhSC8wazlvTmR0M2JFSHIxbHcrT01SMnc5ZjBhVHBsbkM1WVBHSGM5Qk9Gd2c3OUdZbGsxSS9RWFVEckxDS0F1cCtlZ0NXaUtjVHArWlJXbkpicldENWxhb2FrQkFLT2dpcVFOSzhSUlZrYTJMajU3YlJRcC9IQnI5OGEwYlAzNzgybXNmLzNqanJSK1BEcit1ZkxMcjNGSGVTbXFKOGVpQ0Q2cG1MSjc1MUJlNzcvemk2V3NYei9ELzU0S2p1RTRSeDE4QWp0T0ErOVdyR0RZbk1aeU5hTTJoYURVRFdzME1wem9ZWkM0T01odTlpVG9WYlNKVjVvbUlTRU5kckVvQWJKSDdIaVRDTTlkZSs0elMvYUJ5bUV6YS9aZjk3YUg1ZTk1WXFSeldURjcyMHRmYmQvN3J4MHRpczUvKzQyM3pYenk0Y2lqZ0NjWWpmQTNqTVhFajFkRVlrcU1CVlRtaFlhUkZKVDF6a0NUTmZLcThHMHlnS3ZOQlp1K3JSajR6OE5rcklRenJVdmgvZEpzRlhqTTUxdjJUV1BkRE1UWS95ZWNhdUtIc3VRTS8wempBTXdXRDZtQlFUZWplQi9ZOFRuM1lyQ1F0ZktMeEFpMTR1UnU0SGhKQTN6bVFoSlFka0hQd1NjVkpncENzVmprVDBKNEhEOVVGNDVsNStORE1iSGhjQ1Z6TnRJSmxiTklVZ3IwbDVka29aV2NEN2NoY0hrWWp3R3p1SURxOTlWSTBaQVBxdG1sQm4wa1NrdStrZjhMZjcwZ1MwdlkvanV3K3lhKytXdW5hbDBKTXY2eThlajRscG44OFBXdkpHQUpHVG5EZW1vVkhlM0FwbnFaek9FVGxERHJHR1NSTkNKMFhpRTJoZHdaTkFCZ2ZsRXpVdlFoNGxYV216cDY1dzZBT210V0F6QmJoaWVibXJobWF5ZDNiK0hWbkQvR1BKdkVKeitPK2d1Y0pJRmw3NTA3MVVGQkRIVithbmpzbVdwRFRzTjk2enA4UlJQaXRGVGhhM0lMMEpzQzYxTkhmMjhCUWhNbUcwZGlSM0hVQzRwVkVxWU9jT203aFh0UUVLZlZFYm56dXZuanprQ1c3Sml4LytrRE5reTgvSUp6dUtybnVvZG1oS1NvKzJpaytxdnZoUXd6MVJRSUZtNW9RTU9Sb2xBMFhIY05lb29OaDgyOU43WDZPdjJ0cTk2TlBhQ1ozZlNvNHUxZDFSL2hINDRxZHdySVhhSGd6UEVlVDVNaUlaUlVYMmlRdTRnS2xXa0VEQktUclJiSnJid3YvTEtEbFRPOTYwS3ltZkdHRWVpK3RJWlF5YWpQemt4dW9ueHd0VXkyZzJJTGNBU05ndklpaUVlR0lDM3JtdFlHbk1BY0p3R0pMTENUL0lsOHZiT24rMU5VTlV1UmNWSHo3N0NHTi91elgrT3Fob1YvUTlhZytIMnoyM3FmM0xrTURLSmpxMDJIMXlRYTB2dmlvSk5pQU1TVXhxVmVmVDVDU0NCTFNBeTB0WGZQaHVSN3hvN09IeEUvUE9hbk9nang2UDZ4TE01ZUgzTWVFVU51QkdrVEtDNUZMNTlORmFZRkZDWXB0Qmp4UEQ3d1FqWXdNQy9wcktOVFpkbHgwbkY2WFhIU2dBNGgyS3c4cnJGaWdBcjdZcmtwOGZ1dERwT0wxMTRqLzRZZVZYNy8ydW5McXFwMUUvK3hob3QrOVcvbjY4TFBLMXp2Sm44bWRaT2pMTHl1dkttdVVWMTkrbWRlK29QenU2YWRKOFFzL0pzVlBQcW44THNuRDh5aDlPVURmU3VGZUR1QmV4alM2M295NDNwdzlwSlpHMXh1cVZpZ1kwVHlRSFRCeHFVSVF0QlZQRmdIQlowVzVSMzU3N0RjelgxaW5MQ1Q3OWgwNXNrOVpySm44aDhjWFBidTRXK0ozSFNYNVJ4bitma0h4WitkS3VjbGMzSXI0Y3dQKzBuQkFGSWxlUktLUEl0RmhvOTZBQWhXSlpXaWhPZEJyYkxhYVVKdlYyNlEwd0tiWERWWWI0VXg2U3g5MHVwdzh1cEsxUFRoRkR6T1lELzN4T24vV3dhcEhEdjBsaWRxVDkvMHg4T2RKMHkvRTdwc1BLWi9QUGhoNGRJZUs0WFYvQ253eTVaOTdrMGhtT0s2aDY4R0pIak5La1hwR2tiSVQwR3d5VXpTalYwa1hKSktyWjNtWWc3aENiQ3Fta1dac3VFS01PbURZR3B0a1FCVVNuVG1pSnByRXZWWHJoVVdTaXZ3UGZuVG16SS9JazVPVVdjb0xNQUZIajlJSitMbHkzL3ZkY1g0OHZIYStRT2VBY0V2T253RmFXTUlGdUJlNGVDWE9nQWd6NE1aaDVtcFpmQXZNaXdKcnAxUmdSZHRHOXRsb0pJc0dOdE5mL3owTGJLWmJKZk54dWNqd2pWUjhITjUwV05MTkRyOVVaTzBBZklNU0RYOTdsZWc0ZkFnSDdvalprbDdrTFZZVjZUN3ZxREtOc3l1UnFHU3dkWWp1N0VxY1k1OWR5Z0w0YzVuYnlwR1Y3ZXNKUHpLSFRwVU8xR1VxczlCZ0FZbWxRWWNoTU53bDRWRy91V1A1NHhOTG9yTTI3TmkrWVZaMDNXc3JTZjdCMEhibC9wL1B1RWVXNzVtUjFUcnZxVVVQZlBWYVlNcU5qYlBtMW8xYU9xelc1NnNidVhMTTRzY212QmFJUDNiTEZVdWFnb1BiOTgwUHpycCtiUFZheE4xNG1HTS8xV2tidUxpMlp4VnhBcm9BMFJoRWNhQXhnZHFtUlJhcUFjRWYxMnJ3Vkl2ZXdGNUxFZU1KNDRVUGxacG1UVllzZHZhTUpvdnhOSmdiMEh1NGRDNnF5aHF0bHZGbnlRQk16WnBrMFpMQUltMndVQ25oNkZId21DMHN5STh5SjZPUXloNHJhTVdKbGorVHczOXVVYzRxVHVVc3J4VW1kRW1mZEhWOWdrZmx2UEpIVWdEUFRlcnFXcFNQRkM1VTRFRmQ3L1ZhY1ZyS04rSCt5S1dKMXorV2QvS3VzZDF2alFlWjhKWEdDT0tTY0NHTzB6NU0xOENiSEZ2VWVvTXBCRklCYjVjZ2dxZ0ZudGNqR3dnc2NHS1Z0YXJHYUdFMDl2cWN6enFReGlUT0txVWR0OEEzSlA3NGk3RjdQOXVEVnpXU1VDVVRYZy9YTExMUjlJMUdNaDEvOGZVYjJJZVNvVW8yR2ZXU0VUN1Q0R2NpL1BCaGRqdFlQbnBKYTVVMHh6VVlsZGNmRjdnNHJ6RWlKUTQxOENEaDlRYWpLYTBxSlJqT3FiQlNjRUhBaGthUnVXVCtjREtmekIybHJCK3ZQS1E4RExDZlN4Ty94QmRJaWRQblNoZ094RE9VMTViMmNnR2U2VFlveTVrRTUxSHVpTlIzcVQ3RGdBOEo4ZUh1djA0bGZ5Si9udHJkeVljbmQzZDFkL0V2OFFlNkQvSnp1eGQwdC9BN3UxZXI4L1U4UEVPUCtvS3V6M3dacUR0ZUN5cUpFYVdlanM0YVRKK3V6L1FCK2ZrbmtTL0kzeWQxbjI0R2ZhbVJmN1ByTEhEcUNVeTJMNEg3aDZoc1Rlb0pPa0dWY2dKVGNxa21LK3M0dG1KQm1Hb1JrakR4b0J2RTQxb2lMT3E2VHpqV3RWZFlIeE4vRjR1ZEs2YXhweEhLZW5JWDhCNGRWOE9wNmpNb3RKenFtTk5UcXREWVlmbHd5ZVVqYVlQSlphTXF6U1BJYU9WTGtxYXMxMzdSOU0zMkdCM3ZaZU5PSU5xOVE4ai9HcXJaZUhZcWpYMnVKMHVTNDJCZ3dUaUExRGwxSENCK3REQU9vazJHRFNXdVp4d2VxZzk3dkRDR0wwbWI4cnh5VEx1MjZSc0xqc1BISHhKaWRCM1pPRld0VXRjUC9JNlJrWStzQ0pQbHc1VVhsUi96aC9qRDNaUDQxZDA3NGJmbno1NWZJVzQvL3l6QTRPYlFIWWFKTkp3YTAyTkE2QUFCV3ZHdWN5dmFZd2l6dUlvOG9Ua0EzeS9EN3llSW5yT0kvaFRvalNyME1oRm8vSVZoWVFZWjFhUTVvUHlXNmpNYlFiZGRJbnpGNVhBKzlESzdrSkl3SlVJdTBIVEdyUVJ0SzAxblFpak50S0pDanRrUFpYU084aXlkVXA0VnRRSlpVeFFNeWs1N0p5Ykh5SGxJRCthbzVMSjFDR25XVE9wR0ZUREhRWk1SUmI0dXA1bDdNaHpjcVhHZURKZk5pNTY5S2xMSG5CcGhORUUyL3Z6TzkyOS9aTzJjL2NNQ1kzNjQ3b0VmTjkzKy9yUUg1dzE3Yk10MXo5VFhQM1BkRmxKemY4YzlmN2h4MCtqMjhxbnREOXpUSFY1M3o1Z0Rwejg5T0s3dHE3YnhDSjhFL0RTTjZ1NjUzRldxM29Oc1NYWnFHRnVOYXhISUxBMUFsa2Noc3dJa3ZDMFlSSnNLWFV3R2M2ZWNEMGUzRmZNemFMZ3R5d2xLcXlGZFNDcXROR0tDK2dZNmcxMWhsRXlnekNGb1VsUHN4emU4L1k4djNsbjJTcVQ2eldYUzIyOUxTOStxaHVYMjRmU0Z5aC8vK2pmbHowdmFuL3hUKzBxaUlmY1M3ZXFKbEpiWHc1dzhDbk9Talg0QU9obDJHS3lJNHpScG1MVU4xSmx1Vmsxc2sxMzFBemhkcXY1RDhhbmFjR0J4MjlGZlJCMUw2NWQvY09lcUI0ZFZOdXlhdnVHRmEwKy9rRmhTT2V6QlZYZCtRR2FUL0wvdWFwOVVjc1d3RGUvZjlvN3lyMzIrU2UyN3FUOGR4dkpCTC82TWlEOUxFbjg2bWkyRDQ4cnB4Wi9kM0ltUktNcDczRUFaQmp2RG45R09lalpLS0RrSDhjZVp0RkZHQ25ZY0xlcmRZUndrRC9vYnRUbHgrT3YvOGZZTkw4VmlzYnJqeTk3NW92VnRhZGxiMWRWdkxaUElaMzhsK1F1bjg5NnpoNTVzWDBKeXlSSGxCdVhjeW5iZU1YRTE4MGZEdUVVMzRORE5GV1BzeVVXOVFra3NBbTBuTWswdUViMUNTTklsVE9kTnAxNGgwSGt4dWdxR2cxd0t4eXdUakZXMHVhS1VmQ1U3T3FNeFV3ZlVHZW9ZNGxnOGdJYk04b2lIcHFWUVpITU9Eem80aWl6Qytwcyt1RzFwZkhsajF5Rmg3aXMzdjN0bnlSWFAzM1JLK2ZzSXdaay9kUHJXOFcwYnIyN3hrTTkzLzlmT1NYdGVXT0M2K1oyYjkvbmFKNUZTb21sWXUzeHl1UGFxNVdzWlR5NEh3SlpvRmdHSG02eXVWQnBKU3hPQmtnRXN5UnFTT1JHUUQzcUlPeUM1YUlZRHJFc3BQUmgzdXBDTk9lMmdqYmljZU9wQ2JTUVR5U2VOOU1iUXdpSG1WMmU2VkI1aEVjdnlKemF2RG82dUxHa1lmYzNNRXlkaXdwT1JoVHNPWkJYWFJOYXZYQmpwbWk0OFNlTXV5NFFQQU4rNVhBVzNBQ1FTU1ZLR1Q5T0pJczhoVXJkRklkS0puM0VRTStVZ3FPMXF2U3FkREVweWtQU29sRUU1Q011U3lnYTlVRTYzUnFPeUx3MUpSK3RPSlowd3FEdmFuamhNSFhPaThoRm5MeGxaaUVwSWZ6eCsyNU1USzRjK3NQcmh0eU92TG52N0h6MGt0ZWJ3VmVUVHY1TENoZE1QZGVYOTlMWFkxTkFWTFQ5ODV2REU1U1QvYno5VnZsazlFVW5yMXZmcFBFaGdRMitITmVGSStwOGtZeWlGbDZScmVzd29oNTI2TGNDR01hbSthR1NZSnRSeXRRQldlaklPbU9RaHlBUnRqQ25hcEtiQkoyWS9jREMyK1pZNWIwYUFZM3c2ZXZIOVAreHU0NS9mdTNySnVLNHV3RGttQkJsRmhlYXJ0cXByMDRTRW9BK0FRZHRKSTlRb3hveVlkZFBaWWRZU1BSMEVDbTh6aktVM0xWV2dlcU9kemoyaVVvRHg3QzNPekNvcXlzclVOWW5QVkh1TGd0NXo2NFFQdTd3Y2Z6Nm1MS1BQTmNQcUdzL21HcWNZcElPVUVaQnRlcGFwZ0c0Uk94cmZIZFVHcHdYUVlnUktETWhPSTh0ZU1HaHhFV1VnTzBoeG1naVJIcWNKRElQckdkQWJ2cFpKN1hPYnZuZmpJaUtvNDFKZXFtMmJPVXRjZDI3YmhuWGF3WFNFNnR6OGpPcGV3YjUrRkxyeWV6d3A5bDVQaWppd0owVnE0cmRPVmZMSjc2WXE0OTdWVE82cTVLY3JMZDBma3k5ZVZuN0duc045ZG5GL0VtQVhYNzMrSkttcDE1OEV2OVdzZzdWU2dDdUYrYXZkNkRjaEtnVkphU0ZrcUpLRFpzdmkvUW9ZSFJVd0w1OGIzcm1aWlo0T0Q4R01tTXdDU2xLU0c2MUZ5V3FuZG5GT0g4aGNUQ3FncVpSRmdNb29rU1dQVWxQcDBWbExick5WSHB0TjlFMi9idStvaXYzNnl1ZEN3b2NQRHI1cDJmaTJWY292dXlQOGlYL2VNTGJyTEJ3by9hbnJBT0RvdXc3SWQxc0hyb3V0Z3kwYllCM0FnRVl2UG5Db2V6d2YzN3VPRGtQbDlVNFloeGt3MnVPVFNmTDZYQnhGSWZQSm1LbFBCb1c2M3N6dzV1NzF5ZVRhbVNPVVN4R2krY1JLNWFiZzdMRTJlY3BOVnZ6cWp1Mi9XcmJzVjl2ditGWFY5S1ByWnV5ZlhWczdlLytNZFVlbmsydEowZDkyN1BpcjhydFBkKzRrdDY3L3hkWnh0ejA1NCtvZmJCcTM1WDNVUjVSdFlocU1GZVhwMVZ5dktwSkd1WElhaDVscTVMdG9KVUk2WTQwcUpwTmFTUmJwbzVWRVhnRjVDaXp4eDdIcXQ1YWlWckxzeldwbG0yWXlTRlBsazcvOVZmbDQ0ZlR1RC9sWkUxY1RIU2dtNHNwMnhQTXFaWnZ3WHUvWWU5UUFDeDI3QmJQc2V2bisvNGxHb0RYMVkrdGUyd1Vhd1NxcVN6VXh2YXFWcWxPb1dKSFAvMFp5UUpjNmU0ajNUbDlJQ2tnQ05BTEt0dHRYcW11T2J4RStCN3UwSnJsZWNhZ2FIS3BlMTluanJHU013WUtNUVo5S2xYVWhWNUljNzN2RlhqaTJ3eXQ4bUhpN2pkOHdzanNIN3o4ZDlDUWY0S1ljZlNvKzZsTUJ6Tmp4OXBrYWxzT1dma3JPZ2R2bk1GOW9zWjNtc0ZHZnlqZXYzODk4S21sV3NGemxmTU0zVXVGeGVOTmhTak02L0ZLK3RhTWdId09UOERmRnB3SWZVcDhLR0szNUJZVkpuMHJxTytwVHlVbG5GaG9tQWRsZDZEMlJpdTJTRTVDZXlYd3E2YUEzcHZoVU1MMURROVVBcGtHaVMwWEx3cFBUYTJvZW0zLzd3eU9XYjl1MmZFVGl3WTlYVlE1NllNNnQ5MGFtclZ5N2NscmsrY05yRG0rdGJMbHkwOXpZNUtyaXNycnJScXpZZDEvNWtGRTNUcThaNVN2T3JveGUzN3Irc1RiQVZkYjVNMFFSUCtWYzNKVnF0bCthUmxWaE5FeUZRZmRZUmtCeXNpUk5PNHVrT0h1U05KMDAwOHFKS295YmVpYlFXMlpKVjFVWUc4dTBRaXVDaGtsTHc3YXN4NXRPbkFpSFIxYVZORStiTkFrVUdKS3UvRDNTclc4WkZ3NDBMYmlXWi81a3NCV0FuMzNJK0JubTM3SEJhWk9ETTRhUy9BeDRPenBnUUg1SWhpQVNEZVZuWnJTeWJPaFMxcXJaQ3N3VFEyazNxZDZXU2syYmI3bnV6YnBZYk5ocmN4NDRTSHo4ODkxdGUxY3ZHQ3NZdTd6N3gxNS9QNU1SYnVDdHo4SllVdnd4NURMK0dQZElzcFZzSHFWTUhRVnllckd3cnd2bFlTWDY2T0UrYWR4R3htM1FGNEczNmlCQ1gxZU1wZGNWWStseHhieGgvblQ5aGE2WXdaOTl1cGdSYkY5M2lzeHJNRDdPYS9ScFNROEtuUnNhMU8zalNha2NCclJXWGtQS1NjRXc1VmlOOG12bDF6VXc2czBzZGFMTEsyenEya2p4QU9NWERzRDQrL3BTeUxmenBWU1NlNVhOVjVBSlpNSUVaVE81ZDRMeWdIS0FkSkdQbFRieXZGS2dpT1NYU2lYaUduUlh4RFdONzZob1JpeW5vVzFnQzdESVRocTZUMEMyY2phWlo4b3lCUWJveTBkMWxpRkV4WC8zbDIxM1JRYVpTMnBxUjNpbXM1azQxL0MwSldwdEdIZVN6ZTE2Z0drSVBDL0Z0eUtxMG9wYTJKZjFyYXhIandIL1V2YzJmbE5FV0JhSmRPMko0SDB0eW5yeWhtWUpWOGlONHVMNlpNd1F0RzYzME5tVGcrWUpTSG1uTUlLR2xvRWxpQUZ2bUNRMzRNK1JCeFlOc1FFRlN5YXcxOVhsaE5wWWJWMGpjU0Vuc0RsMUlKcWRHZlF0ckt2YVVrdW9mc01WR3pjMlRKb3hZMUxEeG8xWGJLZ252NDVOaVpHUDVtNXBtak5LOGV6MCtYWXFoU092aTIyZVMvNFFtNno2T0QvZ3ZxQytHamMzc01hRTFtQ2lpV1VJTTEvTkIwbTRhUHFiaGNWQ09aYUU2bGJoRWsvaGFzeTFvK2JFNE1xa3BVKzVVYW9ZNmFLU0JTd2RCNXM4Q2xlRXd1QW5ZYXB5d0VwMVVTQzFmdUxkMkRCeHhveUpGS1JJS0JRQklKVmoxNDBrZjBDQXlFZWo1alJ0bWF0NG1pYkhybXBTQ3VkdXBuQkZoVlhDSzZBVEZxQldiR0grUHZTb0k5TW9vTm1rcWZvY0tIT1dGQTNPVW9CRGRkSmtKeWYxMWtpNU50bVFSVWRMazVrRkdzMUgxM2FWQmtWUjFPaHRuRDEwK0l6cWloR2h5Yk5jTVdOUjQ2em00TGlxNHNMaWFDbGNFRzZaZDNCNzIrU2JiNTc4L3ErMDh3L3VIRk0xYXRyVVVWWHYvUWZORjFPMmtTeVFoMmc3ek9hb3lFN28xUnl0aTVlNW1WaVptNm0zek0yRVpXN20zakkzVTArWm03bW56QzFaMDRCSlJEa2s1RWlXdDduTDNNSmhOU0hyN0QvRk5LeHdZL3BjU0hoVTNNcGx3b3d2NXVKT1hQWHVrR3dCbFRnUFRGa0xaZjRaQmxWWkZrS3lHVDdKRDhhMU5CVldLMkp5cm9kcWZGbWdlV1F4RzFQSUE4M0RoUlJtRHFyVVliWlF4NG5CYUxVbEEwZFl5cFJQVVBENWJOU094MW9tcXY1aEtkUDZQNzRVVzNiL3NNcUduVk9sSlpYRDdsOFdlK21SS3g5Wi9QMFhTVEhaVDRxY2UrOGlFOXRMeGczanUyYURDVCtSSkY1d2tzOXZlbXV6UlhqQXBiQzE3ejMvSitFMDJQQXg3akFYaDFYcjd3aEZxc0U2cXRCMnhzMXFvRWdPUjZ5Rnh3TnlxZENaNEVqRWJQWkx1YlNzRG9Ba1VoTm0wSUhpMmhuWHUybkNNWWhCTkFjYVdlSlQzTk9JVnozNUlCeUhvSUtJU1RXUnFOUm9lMTdrYzR0THd6SFVBRHgyekd1Q0I0SGFWUldxUitkR3FVMHVyb1FqWjVjOWpUQi9UZ0tmNmEwMnBwS0ZQVlZpTWkycFJ5M2czUjZYaCtiQzFLR3V6TEpOZ0R4NVRDWEdTSnZQUzByczQ2cnJjcHFXUEhiTnlyY0M0WUtuRjkvN0h6WFIyUm1rWHZsN0FiQ01TT09LUmVIbTlWa2xjdzRPbVZWN3plQUpUK1E5K0ZBSjc0MjV4a2ZhcjJ0bzI3bTRlZlcxSmFOWFBiZHYyTTBqRnViR1dvZk8yem5VV1ZOVFh4aTV0cUNrWUZKcnk4czNEQnZDNkthTisxRDRrN2lXMW5iZHpBRm5TQlRvdVJqUWEzRWdZYVJuUkNyRmFveEVycEZyaCt1NXRKd2dZYVB2WkIrbS9xQXBxc3VoeVZ0SFFZeWxPekt5Q1NJTW95c3VYSndGNk14MGN2Q05ZdHRSb29GdjZMTXo4QnRHME1NdEZGZFl2b1N4UmxTaEltN2dtRTQxRHVuVE9XaGNwcmEwVU51MmN0NjhsZEhWTnozMTJJWlZqWGpldUdyRFk0OXZXQjMrT1NrNmVWTDUvYzlKMXNxTmp6Nis0Y2FHVmZQbXJXcTRjY1BqajI1Y09YajF3b1dyeWNrOUowL3V1ZWZkZDdtVU9FQUdWcXhTbnhBdHlUUmlTYVpMWjJaT0lTMDZoUktpQmkvSWhyUlFpS2FVVy9yNGlVejkvRVNTT1pqaUtrS0JnYWFuMDBXbG9Gb1hBK0tJaWZSa01vdlg1dWRMdWsrVHJ4VTlpeTBvV25LMit6UmVhd2E3a2hoai9BbU1OSFJIWXNwWFRjclhSRTlqMHozeVFNZmxjV29VQUorSWFwYVdIbFRQTzhvRmdjcUdwcVp5Zmx2M09zR0RmK0VlMDg5UEYzeXdycUxjT05MSTBUbyt1UkEweVhDQXlkVHhBY2w2U3NvSXlnMXdUMjlRYXFDcWpqUThLQWZoUW1WUXZvSXBQSitkZm4wS1UyMGNWbW4wY1ZpRDMwamx4MS84dk9xMUxxb0hNUTI5U2Z1TjFKS2lvWmRhTzN5bDVRNS9SeG4rbFpxc0hVT2FXdUR0VVB3TGQrcG9jNHlHdDJQd2J4eSttWkplV0JhTncyVThhNHZHNFZkNE5yUkh1UithN2hqYU1nWjArbEpmV1huVGtHUU9ZbThONStXK1FFMkFCaXRUSkxTMmhKQ1ZGd2dqdVFidFVpNlFjNkZBYllDTTNMeWdXZzdBeWcweHFsb1hxU0pKZjJCeXlldUFtRm5pR3l4eld1S1pRV1BxVllMUFFxYlhMUHZacHNmOWJkY3VYSGh0bTMvUHVzM2JubnQwOWVGUVpmRGd0SnNPd09WRmVQbmt2UG12Zlgva3lzbU5OYVZWMXc5dHpVdGZlRU54OVpUQm9lL2ZwcSs4OTlZRjFhT3Jpbkp6eStxdWlpemVtbE84OVBxbCt5YzFsdzl2V1QxelVFdDVmbmF1djNGbTA1RXJTbGRkdTNWL1puV1EzMUU2dUxUVVp0T0pWYXV1S20rdDhOa3RGZXVRRjV3L0s5N0ZHelU4VUZRNkYrQ3dIc2NTUXFlWVpBd3kzNWlWQ2dpTnNWUFNzQ0MzMlVnanFVQmxQRW9yRUZiRjZsRmJWT1gxVnBFTlJWVkZSVlZpSFAvQ2Uvekw2aVNubisvVWZLUlp4dG1BN3d6aFZxaVdjU1pRWHl3Z1IrQVFDTWpsY1BBRVpCRnBjU2lWcjNZbVM4RXdSamN6VW1HUWxwQW1EUFFEdVJuWlVkQm1QMnJKRkQzbC9zWVk5WVFHZ0dNUE5SanN1YVYrYmxCRFl6S0pGQk1lTXREV3h5U3RZajVDNjUwd2g0VDZLM2gzWDNPT1QzSnFmdm9yWk1TcmR4UHRTOHVYdjZTY3ZmdFY1Y1ZYd3EzcnZ2LzJJcGxVUHJmZ3ViOXYzZktGdE9EUFg4ZVBMaS8zN1I1OTcrbll2SzBqMjNiNXlsY2VpWC9OSHo1T1JyeTgvR1g0M1YzSzJWZVc0NjBXdmYzb3pTMFNxWlMyL3YyNUJRdWUrK0o3TDNadExnOFAvYzBQMisrNXZxRzVybndyR0ZLVVY4L2pkL0pMTkFFdUMvVDZaUnp3b1VTZXlFMWl2RnBnWjRZQUs3ZjFVWlVwR3hDVWJRV3A1SmMxaFZoQ2FHY0pJZGtjTGFHWG5MWU93WlR1cGtqS1EzWFc2YUE4T3M2NU5DRENaSU9nVmt2MUNUNzFqVDBsTS9kcDZFazdiOGZNTzY5ZTJyYmxpcExRbWlzWGJxMi8rczVyZGc1ZWVOWFFGY1hGSzRaZXRWQ1ljOTNLbVR0SFhqbXZ0TEYrL2x5bGZ0ek1OYlBiWmdVcjkxWFd6R0l3eHJoTi9HRmhCcWNCNjZVd1dhMlowQnM1blVnVEQ2bUhRZWExVEVXaU5vdEEvOGJJcUFuS01maXpJbmtDekhTUmNwOXlGMW5Caml5blhNMUwxM0RWTENzZGRBaTE0cEhxUUZwV2hHWUMyMExBcXlMWGs4K0YzTnRyYXhSdWFSYW1OaW1WWk45M3F5a1V1Vkc4VmpnTS9EY05KRkV4V0cyUGNEMWwxR2pQV09IZ3BWcHdDVmpUM2hJY2p0Y05jcVV3S0ZVR1dCU21pcUluMlVtQnVibUtZZFpMZ3BqWGpjRkZWTzNoQjdtMDZqcWhZK3NrZ0YvRENYZUJ4U0tWMnpxTWdxY0FPVnl1WGJaU2ZickVhN04zNk9ER2VMWFNCbnhQcFFHVmtlRzBxMUlaREhaV2VPMzIrcnl1TUN1TThwTlJTbUx0TzZ1Nmp5U1U4RWRrOEVlL1YxNy8vVzkvTm5US0RPL1dNWnRtMysySjFoZmRMUnc3MHIzcW5iVUpSVWs4OUljL1BQVEk3Myt2ekNkZlRCdzJhdXpiYjc2cDFKZVUxYk00dGZnaWYwYjhnc1Y0RWNlYVRueWx4SGh0Z0ZqNHlvdjE5YlFlUUhpU25BVzg2amc3NkRjTXB6YWhrL3I1TVNSUEpBZGxaSHBBalo1WkZCcFlHYmhNTEZoSndXdDFBbDBUTmhNbS9Jc2F3bFJkbGJYNWt0WGxSZHJ3bHBlMmJuMXB4T3pXWWJQbjNENWJMTWQzbXo5dW5RMFg1c3loOU53SXpBN3JiQVhncWJOVnk1VlZRa2ltRUNib2cva1ZGMm15aTJnQjlWeEQreXRvZEVpTHdHNHRwMUNZWTVLd1BoZzNVeTNlekhKeDR4YXF1VnRFRm1WblhEakV5aWw2aTIvUk41QXN3STNGK3BUZ0VtNlpNSk0vb0gyWXkrZGFLRjZ4YXNCQTZZN21UV3RQeVJsMmFqNW9NM3FTY1dnV2RTN1hrM0trVFRObk1JWWF4b1Q3bEJwRWdkWWdlbHpMVmo5eTk4aWJKNDViN3lrdjN6dTFaT1NJY0dGby9LWTFWNUZmQ0ROcnJ0cDA5K2FtNlZNYmEwb2FXdE85dFJPcTYxZlBXM3ROVTVqTyt6eGhBbjhReGxmSmplT3dIRXRrNndJWUhCWks1cWowcjhQU0dMa00vYVB3Q3VENHNGNFBWblVacXVqcE50bGJERWVYUFo2WmxjOFU4OVR5dlhCdnF3Q2RUeTJnNzYzZW1sZGVjc3VFZVd0dlgxaHZUMnVhcytubWFXMUxxbjN6ZjdqOFlFbERRMTVlYzFQNS9zMXo5Z2tmZU1ORFowMmFQazJvNTlzbmpaa2FpcFNzdi9HNndCaC9wc2puQkNiVXpMOXRyRXJIeWR5RFFzVDN4WE1QZ0tDeDRuZlVET1VCK0ltUHBoM0E3eVBuUS94cG1pZlVvbEsxSHFoYVQvbVUzZ2gwb0FsU3o1UXhHVVZLRUhwUGlRUXduMU9yMHJtRlBzRnVyUXNoaWVEL1JaSDM3aUd0c1JPeGU0UzVwUGpuMzN5bytWOW5zNFhyYU4wemlaTXNQZ0kyYnhVSFNxWmFIL1V0Q3A0ZC9VdWh5RmZaUGw5MnJscEh4Q21ieURaWXoxbGNQVW95R2dnekJCSTJLc2FJbEUzSkR4TWtjbkJDVVJDQmNtNUtjMUs3d2lhbFkxNUdKS08zQ0RNUzB2WDJmOGhydWJaeFltVmx0S0J5U0N4Y0VCZzhldFhrK3ZuS2kvVU5rYXJ5Z0MvN3VkMVpvMkxEcG5wb2ZGaVlTU3phUGJUbXNLY0UyZDYvQk5rUm9TWEk1YzlHWXBzMHA1L3ZPc2wvdkl2SnF6a2drMCtEVERaeExtNG9wOHBmV255TTVKbkJjdnp0Tk1lZmRyMkFXN3VUZGFZRzJzL0dPWEFQQ3p2bE1namNISG5uN3VlZTI3MVRidHErZXUzT25XdFhDeC9lL2ZwcmUrNSsvUTJpL2V3SFAvanNpZjV5c3lRcE40Rk5KSXk5b3RPSWVjTkVwS1hmMVRXUnBOTVAvb0h3Vkk1TndEL2JlczQySmVWbWl2d1VNWjZ1bVU1emRZd0FjU2EzazJWU1NRNDFpMWdmU3BneWRBU01xUFNRYkFKVTJJTHhERm9MbkdGR25wYVZ4REQ2Z29IalNtNnFsb0JoRlhkUXk4bGhRMmUxZzVwVXdPbmtiSFVpWkdLTVVvMUZiNkFjaDVNelRFeUxJVFpaeUdUcm1zNFNwZ3lWcUxYRExtKzR4R09qOHpaZFdEQzI2ejQrbTl3eVllUEdSdVZaMGk0K3ltYnkzSGFNTTU2cDR6TzYvMXAzNWt3ZE9jMTBWSVQxZ0FwckdmYzlGaVhEVGdtbFltY1B0RGxPRXlhb1VtNVVuZ29jWmhnVzJyRWlLMjRyUkhCc0NFNUZIM0JzdG9UZWtKbFRTdUVwTlNXMXNpT2lUWEJuRm1KbEZNbEJGNWUySDNpZS9zeVdWNWx0S3FUcit6RGV3TlFKMVNyZjdRdDNLZzl1eWFxZE1iaVhCY044eitNNDdRek5IT0RCTmR4ZzBOUmY0R2d6RTZraEZNOUJEQVJDcUs3RTAxRzBHc1hPUkRCV2xRNlRYeGVTZ3pENTljRjRMSWl3eDJvTi9vVG94ODk2OVBrK2pCdXJTaHVCSEpxWXRSa094aHVvVDZhaEhzaWhzUUZQRzRNR3B1RTNsb0ZZRGxUWE11MCtodlh4b1NobCtoM0E5TEVrOXp0eWZjTUZGTlFqQjVyUytzbUJ4bWlQSENCRkY1QVlmN0FvUEFSRXcxUStncUpoV2loU2pLS2hyVWMwYkI3WC9jaUYxTWR6azVRbHdqYmhjODdEK2JrMVhMd0VmWTBWbE9tQ2FHYlYzNE1vYzFGYlBDQy9zdUE2c2tvK3JHOHNZdldOUllHRWo1N1J3cjZpRENRbVRNTFIyNDZZMHJJS2lpdFl1ckJjVW82c3FDSUxVWmlXbThmTVdsYlI2SXNrcXh5VGxWR2xwSWUzVDJLbGpkN1Uwc1lqSXdJUEtIOTY5ajB5czZ6ZTU2c3ZtMzd4MmtiLzZhUGlIU2sxc1FMTHFkV2VwZlZ2bGt0V3dLVUhNSm8vWUFVY1M3WHRWd1dubktCSmZDbTFjT1J6bEt6L1E4OGtQamp0Lzh4RlpPUTF5Z09wenp4QnhYbmZaOW91K1V4N2dIVStHZkNaanBERDY5UDFmK3gvdmRQMlh2VEhpUXVlKzlWWEtUaitqRDY3bUZ0NTBXZExPUUhaeVd4d2k0YWxmSmxPSllxWnNWRk1qWTFFSmpNbzBCeDNGMk5KQVc4eDV0QjFxWTVYZGlJSE14V3oyazU3UWJRdkJDWFVwa0EzZlRoRUhTUUNtdHNYek4zSldaTUdEZlVWMVJUV3RkYk43amxOQmZBWE56NVNQV3hZOVpLbE56NWMzWXBIeHI4WXJLeWUwczVsYzFNdURxMDlJR1dGd0FJQTdUSklFd2JUVHNsV0k2MFRROU1nMDBoekIyVW5Wb1lSakdkRkI1NlU0bjZ1a0F1QU9kdmpHNEZES2d4ZHFXNFNkZXc2clRyMlhHNzFwY2FleUJDNU5UQXYyWUdFaFo3UlRJSzBVd2tIbXk4SHpZTkpXTmw4WVNwQnBzTm1mNTd3Nk5FMzlwbXhiR0FUSFducHRGNmtEMlNsdlJZUVUwMjAvV0Y3YWZuQlpjc09EcGw0WTN0N1EyTjdLbXlmSDF5Ky9PQ0tWeHNuVGx6VFBwSHBUZ0NmOWxPYXQyL0hmRU1hYWVWQ2ZRc1RMZFkwaE5GQzZ3WFRldW9GSFFnYTZCWllSVVlEM1duSlFIZFBzU0pPR2llTFdBUnZwMkQwbGl2Q1N5QWVtMStZSjF6ZDFjMS8yWjBtQ0YwdmRUOS9oaGg1WDA4QlkyL0pMTllXS3R0cG5Xazl0eUdsenJRV25jYzlsWWJGQWJsQzB5bFZCeEw1cWhyTG1pYW94WWFWTE5oQW15WlVBaEVOTlpvMHJwemMvR0pmcUpiaXY3b0NGcERQVXhZTUlWZk9SNk9iRnF3bWRGeXlYdFZSZTVGNlZVMksrdXZyb3hoWDhmekZDbGxmVlQ0dExLZ2EzQWJxOFlLQ3ZPYlpqZTFVYWZaditjc1A1L0NIRGd4UTNmcUJNSm5wemxtUmFCMHEwemszR1pZOXIvcW5hSzBuOERRVHpPaGxxMHl0bDZzeXRWMVFaWXFFbUZKcDJsM0NHTG82WGRxenpFNzZ2ejhPRkMrcDQvZzdXbW9IZWdhaStTWGw4YW5qc0Y5K0hJN0xqY041SVQ0WTkwOGR5cUlUYmU4MXZKam9OeGFWNzdQeHNIcTJITXhjdjlTSWNFRFpJVGtkMkdGR2tQYWd1T1R3ME1CRUc4TUdETlBHY3R5emdHSG1YVEJvcmg5M1RCMTlPL1VXay9XVUEvWk9yTGFQOTVnLy96QXN5QmJBSzR0OTBPNVJkQkhTS0lqSW1qMngySWVBck1zV3NzMUJTcG5RZ2lSeXRsSk5LdVFCQXh4ditWYjNRWjBiODFJVzBabE9hMkZvN2JrVmpPa01qT2tFM0F0dGhSSzF1a1JQNzJXaXBTVkd1RmNhMm1BNldnMklZMk96aDdmTllyTzJ0eVU1WGNrN0MrZFB3bjAvcFBJTFoyMG82MUlTTjZEcURjYXFuZm5uTVNybFRQWE5xMVZPbUpldFRvcmFxaVRwcHNlbkp2MVpJWXIxTjF0dXBCaFdzWDAyRDBlZ3ZnRmNaWUV0VkVOejJvdTQrVnc4blZOOWFvTGFZQ05CdUhRQkZIOFA2eU5YQUNQeVl2b1dNbUtiaVlhYWJlblVDdktBUXA5dXc5TjBESkxaMU53OFc2ZGMzRk9rYTNBbjg1SlNDdUE5TmtkdkNUeFNVOVpwc2krbERuNXhjNTlDZUxKSjJjanZhdUozSnV2aCtWM2RVazlKZkhlOEtja3J4RitBTG1UZ3ZOalpzbDlGTENhQ1lCWjJZUURqNWJSNHZMYysxZ2ppMU11RXE1Zkd5eE51OXM3ZFd6dUxwZVJHQTgwNWtqTzhHQkROamtabHdVMEwvRlBxYUdWSE5oWXZla0ZMS3JUSk5yQllKTE5kem5EM3JiQjFES2dzSmV0dTk0R08xRnpxQmNXb3BWZEhha210eHRXY0hrQkpFbGg5THRBdTF1ZDYwR002UUlWdTBVQVZ1bDYxUXJmREpPWVhzcVR6ZjZOSUY5bjU1UXQxN2JCMFk1Y3QxeFgyVWViLy93d1dGQW1YaCtXMzFLVjNXV0Q0cFVtZlgxOTRpaThDVDhsQThKU213T1A1OStlR01hZkxnelNKbVJyZkVpWVVSRW1ZUHFNd1JiZzdCb0JKcWdySVBwRTJuL0pvV0tPelhnaEJkMDFFMkVxTFdOR2hrdkN6ZC81ZTZMRUpXa1hFWmo5aXNtZDd4S29MNEpkOVZiRGU4aU93em1wdGNra3dlbm1NRExqMkxvOGd5MENyc3ZYeStGb3pzRDNEY0RlWjRxNkVxK1NXRElROUlJaEJJZGtEa3FFc1NIM2t2Y2pEdW5BdkNBbmdXSmk3NFlmVEZMUmhYTWlIa1I5QW0vaHZFMDEvMFg1NTVJUlRvOFNYeDhuM1V4VUI5RTBQRSthSVRwQ01uTU5BSWdiaU5oQ2RnZXdoVGNycmZ0SkVZbjdsRGZwSGVaMHNJN0dVOTIvNFNVeDVvNGNXUWE5M1UwL0xESlk1eFVyc2k5V0dGUXl2K2RvZWwwc21vRExUU2lPcGFZQTAxT3ZMTW0zMm82TGU2blFaY29zbzR2TEJHajdLR2RMc0xtMk9QeVhrN0k2RWREVHFMR0p1aXpkU2lrVTNibEpLYVN4RFJhZVBvaTZ4MzlmV2RPc3V4TjVMZTByYUdtL2RNV3IxRGZ6T0xVOVIzRG0zL0JCeHVmWUcvdEJiZ0xacExmTm1LajkvL2szQTNOUWhjNjRsTmNlZVZ2NTdpamg4QWlDdTJ6b0IwZmdVc1U5aHVTTm54TVBBVTlKQm94ZzhVTVcwYzZDS2FaZGFNZDFodGdBVnVBY3FtbmFnZ3A1YU9QMDI2bDBEVlU5cnZsUnJLZit2allVcTZhbGpJYnZKU0ZEZUJocU5lRkpsdUtuanlSaDRQTzZCeHBPWk1oN0h3T05KS3V0OWh1UmczUFBpWXdLR0thaGpRanZaelJWZ1QrbitvOEpCNVlka0J5ejQ3Sjc2RjNXSTZJWjJ3U3Azc1JLOVBDT3RJRXNPSExNb1hkZ1QxYUlCSlNRUGUvZVp0UU1XeE52NzYrMnBnSHladW80SG5HK3VydzdQY3JBQXozb3U3Y0pxYkhOUE5iYmwwdFhZQXZyY2VpcXlXMVE3ckxjdVc5ak1KcmEzbDRlWmMzRmpVcXFQRW1rV2F2R2tnUW9ydUZnTEhXMXY1QVpReEZ1Q3dXVDRCbmtrelo1M1dXaTdLN1hKaXhvVVQra3MwVUx1WC8vQ2pQOThQcld2aC9MMURjOHRldXdqNVJqWmVvVGtIK09TK2ZOaW0yWVIwTm9INnFoeUtlL1JxT3k4SHAzbE1UcVl3ZlpPYWJDVjh1aDByRkMweW1GTVBJZFRIV1BtYm51bjNNUlNzdjU3L2V0K2xwSTF5Q3BWSEFmeDhJM2tQTjdoc0RzZGZyalU0UjlVNGZESDRXMUtiUVJjbzdVUmRvZXp3ajhvV1J1UitvNG1SZ1VHQStnZWRMRkxSVkVwYk85SUUwUDE2TERRMmVUY1luU0sxUmRqN29EYlU4VDhSN2FldnVScW93bHNMc29ublJSWU41RU1acmhzMHBHN2JwVkxHMGVQYml3ZHNYemJIY3RIbEYyNWU4YklsWk1iUERYTFQremF6NjZObUR0M3hMNFpTL2VMdmgwdmJMaCswT2hncGI5NmVIbjkySEpQV2NNTlkrdXVtMWlUV1Iwc3J0eDcrN1hKb29vaGM1c2J4MWFObjdGMzNUbFZyNkkxM0pvRHRJYmJqLzJpdmtVVjk2Q0xWbkZYOXFuaVBvSlYzR1VWMzdXT0c0M1h5OVZ5YjZIYThhVUt1b1hKMU4vY0Y5NVYvNlB3UGsvaExVY3BKem50VXNWM0F4dHQ3Y3VCUFp3cDBwZUNtdytvUEwwdjdGWGZjcTRERjRXOWVvQzU5bi9udVdiUzRYSndONXdZL1Y3MHhTUGZBdkIvL2pPVnpuZFIySnVCQy9hRHZRbDVqRjhjRUFtSitocUQzNnl5b0paVWZJRG1rMmhtT25kelgreEl0Umg4Q2pNbmN5c3FSbmswcUNuWE5vTTZKRmd6QzByOWhub1c3blJoa2dhaVMwMDBRNHpKTmZWd1Z0WU1PR3l5QWF2NXQzQTRvSVorT1pUZTFxdVVoM3RWOVV0ak9KTFV5ZnZxNWd6WFBNVjFBQ3liZmQrQzBwRFE2a0t5SDBRM2J2UlNuNHBtVE4rcU5OSTlWSEJQakRDY2h2c1JJOW81NVNxS2F5ckIzcUVvTmx3Y3dkOGVuZjB6T2krSHlHbGU1cnhqcXNBbDhiZTBiNXlENGExVHhWdjBRaW9kR0crSkVJdDQxQWNTZmpYaTBkQVBmWWthUnFVMVZ1eXBucWhrN3lyN0liRXhCWWwxTmVpWXAxaXM4RmNGTG9GSnVUNEVZcTU4VUdXWnF0My9lMmd0N2NudnVCeGl6U3NPTGwxNmNPakV4b1lycjJ4b3ZEUm1IOEFveS9LdmI1ell2cVk5dWY2MWJ3aGZBZDlyNUVZaFpnZWhoNnNzSkFjMW5WSlJNRzRqckZERUNHOWJnNG5CK1lOc2dPREJzUHJGQm5wS28vV2pxUWxaRFhpdHRzb1JRdnZMWU5CK2NGREtaL3Y0WU9meE5qaFdFMXJHSjBWc0NkRnNHeFNra1F4NzNPR3N4V1NzbUszRFhVd2xvNVJybDByUVRBcGlFSW9yTHFrSVJQRHlZS3piWWdsY1pvdVRCdTdyYUtlSXZxaDFYOWc4b3RDSG9XbWVsakJXRVlwclRiS2J4TWJySDV6K0gxdDZjTHp2T1VQZCszZjJieStoZkwzbkR1V3phUThXUGJibHkvWHAyZldINTJ6aDlhbjlKbjcrMHdmYWRwMVdVYjl0MDZwOXFiMG4vdnpuc2VUR1R3OStuRCtyWXN5VndaUXVGSVJicjJ5bHZVbHFNWGJVMDV1a2hsTUw3TEZCQ2NaWTBlRlJHVWprcUxHak1HdTdhcWFhSHFhTllIcGJIZm8xMG1uc1NMUm5adVY0aXF0cktJbFcrbXoyUkhGK1NhQ2F0aXkyU1ZsUjJ1UUVZMGRxanhQV2NlUENIaWZwNU9LaG93R2Fud3pkdXpBbGFOUXlTdzBhVmQ3MjFqenkrVjM5T3FKTWFCZW5zNEJScHBwOWxiUEJzT2ZQVERiUmZpTWdsN0hmU0JrMzUzSWRSOG92MG5Ha1F1MDRraEJ0cmhKYXEvdC8ySE1FemRkdjAzZGswZ3d5TW5icDVpUENXRlgzK1A4YmpHZzRmYXZlS3ZuVW1MbzBsSHhKajQ2VkNxZi84bkFPdWdpY2xhbHdsbjBIT0xGbURoU3Fid1BxUXl6NjhtMUFSYTFLVkdIbEtheURZRlhmZm1sb0VkaFFTQzRERVI4SUp0ZDFMK2pvcUswQTBWNWhwUzNJZzBaYTFKQkVDQzc0S3JETE90SmRCZWlSazdPQ2FzSDB2NHVSL2diOHQwSE41dFNBM0dVUU5MZGZqUWQvL2o1Z2ZsR2E3NW9TWHlNcDhUVjcvempkSWx4WlkybW5yWE83YU9jVXROM253aC85dDdwUE1rNDNseEt2cFlsbHovYmNDc2IwRVl6cE5iaFhuemdkU1luVDJTOFJwL013U3JsZnZlOC8vNW04czNEK2JianZCN1IycGsrY2pueUxPSjM5VzhicG9uUXkzbTVhNDAycHFUbTNBa2VndmtuMjlkQnM0bkpCNGwvTDloeEVGM3Jjbm16bkl2czF6THdoUGUyRWFLakF6Q3liVXRDRGpvZ21uU1BiU2VXSzMwUDl2eG5VYVc0SHNad3dHQzAyWjUrbVdhVStqYThFUlFkVzduRTI1MFhiZjh4OGFOaW1ueWwvY0JOKzdMeVN6UlArNUg2YjdMdDRQNUFycnYzcGdZM2hWWFZESWxjT25odWVxc1NWVmZjTTNCK0U5aGJhQlhpdjVIYjNkbFdwUU52R3JUWjY2bW12a2lqT1MzZkR3aXp1S1o5UU82MTBPQjFZcmx2Wmt5Nmp0bDNwOEJoTmNMMlFYUzhNSkR5OU5SU0Z1TEdLMXAxZXpFcG9zSXU5RSt0QksyeHlUbG4wSXMxWkJyWlQrclJzMGZRMVN0VFRDeHE1aU9zSE1FUUVsUVlPME40dTN0NllVWi91THNVRGRYY3BVYnU3ZEpqRVF1YkYvbmNhdkZEeGVmRW1MKzNYb05TOFJLY1hvVHBGbHZ3L0dEOFZqWmRvVWxQQUpPSWxJT0FOZmVSaEVvYlNpOERnR3dpR3NoUVl2UDgyREVteGQzRXdEcDVvK3ptNkVDNExCc3E2SkJ5N0tCeFJYRjA5Y05UUnhzTmlMMENKNnZKY0w2eXNhbHhaRGFtd0ZZTHRGV1hySjJyRmhtVXBsbGdTYmpUQ0JrVnB4QzdYSzFaZkFMbGNYZzJyaS9aanI3UEp2dHJvNWVseHdIVjJDZFJNSG5EVlhSSlR0Z3NYb0tqaWpLYzRRNHQyeVFDemo1TmZGWks5SUJVcWdyUjljQys2MENsZkFnS2lwSThMSUlrb2RBV1VsOUFZWGE3NGJ4UElCVnJBeGRHeHlac3EvQytGaFZHcG9sK2dld3VlcGpWUFdCVVI0YkQzZ1k3bExyT0tPeENDdU5VaHJTREp3RjI1SkRHSUZlWDREWDJRZXRoWnNWd3lvc2lyQ2NmZW9rYmgwZTdQZkZoUWdxbkZaYms1L042bUptVTJ2U0RNcmk4cHpjbXQ2S0Zic0xreVlBNHFVQi90amVzVllSZEdraFNIdWIzZDlkeG0yaU1NWGVscFp0Wll6NDJPUG1kVTh0a3d1dWR3R2JKWmJrQnVFWXZ1YVYzMnJJb1U2d3FqZXl4ZlJZM3VSWncwdGdmVW1OeWx6WWNvZjNCMXpiQ3hJOGNDMmgrL09UcGk4cmJXeGJ4eDdqWkErdDF6NzhNcGlOV1R6L2Y4YmNmMDVua2pmN29HcE43MVkxZmQyL25tWnY3MVNWdmVWeHd6RWZkejRrTlpyMDZRZlFkQTlybTU5b3QyNE1tOFNBY2UxRElGRlVTenJjUG15bURGb0pkc3hvTjh2bTlEbmlobDdSZDA1ZEhrc3RqTGR4OGpkZ25xc0RsZE9Eb3B6U1psWEc2TXlNdjdOUTBTR2Z1K1lKVENQNU14b3Q1eFptT002Q0xqekxuSU9IUFZjY1p0VGpmTERiN1VBRlZHM1hlTTYxWDM3a1hHbVBUcHNuSHlOSXVQN25VeDRFaHhvRVVoMmExbkxUQ0tVNGV0cHVkaG53L2NQOHBqcEh2L3BBQ0RrcFJHQTNHanlNdUEwcCtsOUlWcFNSOFQ0Z0xJeE5wVTNzR3p2a0l3QjFiT09WQm5JVmNBY3hXK1RXY2hEQTBPMUYySWhRNzY5UmdTMS9YUUFQYWFVM3UzWHF6WEhQOC8wMnZPOW0vM210TysxLzN4Ulp2TkNTcnVlQmc3ZG9HWjFCOTd1TUlLUXJJVENDSW5TTHU5MkUvSkdVWmFQb0pWVnZsR3RwVVBwbi9MdkJXSGZIazA5L2NTRDRUeVA2WG11L2ZIL0xHKzg3LzEvQm45T3MwaW9PeHliaGZqMmpUUGtMck5DcldkTlBVUm83VXM3ZG9uZENiTTFreU5tZTZ1UTF2R3dXVGs0dTVFekxweVlwdFUzQy9BR295bjBSMG0weHdHV0I1Qk9FazMrT21XcVBwY2pOdGtJc0JXaklXN01BM1BiSk01YklLVVpwZjF4ZEdlMU91ZzZMYWxKcEluZXdmUVRKaUlyYlRZVzhodG5mSGtQKzk1anBSTjZFMXQ3WHBwZ3ZLYjUxNVhUajAwQ3BOZ1hpWGU0Y09WM3g5WHppcHY4b2YyRXVIbEpmSVBTRXN5OGJ6bHlTTXZrNkZ2dmFqODdxbjNUNUQvZk9la2NrQ1ZhVHJzTzEzTnRYQlhjUGVxbFZpd3hzTXd1YmxCS3M4a1cwZ2VBdXBGV3pEUm1sbUZIb2hXWERjVHFINVJZNmE3VFdNQ2VtWTYrbnN4aldVWVduK0dUdmxLT0RiVUFQaFZJdlVweUNhd1lLUmh3TS95aTFEcnlyRFI5amVaWWF3UnlpK2d6cGxXbTF6VEFKOE5zY3U0aVd5UDhvRjdIRjdnaXNCMkYrSUFLa21QbHhZRlkrdE5VMFpVNStsTTVXM1hiQnZiM3ozUnZudjIyQXBUV3NtbzZkc25YS0N1Q05QNitLK292dUtKRGg4L3JNQTM2WnBSMWFtT2k2b1IxMXhWVVQ1aDFzaHFVR1UyL09MMjhiYzlwYW95VTNzZHQ0S2FvNEQ5NG5GRlRleWJwWUNKNCs2UW5LWm5QVWV6YU5tdHhVZ1ZPTHB2aTRudWI0NVpBN0RHNkFLN1JDSkQvMlhVbTlUd1VkK2M2SlRjaHVmN09seFlmZkhIMUxmaHA3dXhDcUdlRW1NZHJkTlZteEgwN3FlSjI1TFltSCtEaVo2a1kwTzkzekorQWVqK1dkeFVMcDdCczFackFMZHNRSkxLcHJmTVlvbzhDSkkwVU90Wkl3SzZwVjRhU2crQmNoRUQ4a0F1aTlLUXJIUENVVWdHbzJ3RDZ1aXpCdExEQnpKMlUvc3ZjSDI2SzN6SHo4Uk45RFAzQlQwZFVobzVpTVBvVCtqM3RVc3UvMzF0dGZyOUZhS1c1TkY5dnh0WkhiZVVIa2dZZXJlKzVxaExDNmdOdDc3V3BTVzN2amFrc3habmdrMFNXY0FKMTVXcjEzbS9vaTFjV1RQWUxPWVZsK1FXVlltclJtOHZLZTdaeWhIMzI0Ym5ldWx6Z3h6ZGlSN1QvYi90ZnR1T1MrKzNMZnFMRndaNDBNZExHNEpzdyszL3IvZjM1cmx0b3BZUFVQaTgzRXdWczY0UUlGZnloRlQ4U2xrOXFwRE9sSXBpektHeFUrZHpaenpMamxlejh0bFdZQXp4TW9lZVZzRW1peG5SQVpFZnVlREtOcHlPbmlGM0pkOE5ORG1odmxPRmU0TUNMQVVxTEJQWWJFbDVJWFhDYUlGYThRQTRST2FEdWwwaFhIVmgwVEhueWs1Q2daaVZMWVhSQWVjeWNtbHN2M2VKcVM3cE4vRjBYMU8rZ000N0hUdk9QTXlET3ZsUzNuY2J1L3M3amIwdjJaVDBKeUxDUFUzSytTaC9MTFhmZ1luMU96RDE2WGRnWXYwT1RBUDBPM2g2elpPclZ6KzVobncrY2ZYcWllMnJWMU9kZmMvNXo4UWxkUDk0QjVlSHVwbWVhalk1b1pEYVMwRk95d2dHKys0bW41L1NYQUc5eFZod2tLNXVRVXRyRWhOWnJPTkNRYjl0YUVzR09FdDJZVGpVOTVqY21qYTMzNUh5UVc0VCtUWHRLWUQ3ZzJoVHUxVG9rdTcyMU00N3lZWTdmWC9yU2Y0V3V4R0lQVCtuUGNSWmQ0Vkl2eDRFUFowSDRENFR6cC9SaERWTFFLSnQ0K0psMUh6SG5hOTRsdktjNEVoWldtcXJ2NFJlUnkrQVpOWUxySkJ6RUcxeXFRM0syWmkyRzR4bjB3NHIyYkM2cFF6UW1iS1RYWDRrWFpDR243S3hPdC9nUjhIRmdaVXZsNVJHbzdKZG45b3RGM3ZWZWNPaE9pNVppU2ZTVFVaY1R0cmJqMHZXU1hPK0NmUDArbmtySW1UcEYycjEzVytVVjJyNUU5MSt2WjcvZFhja1JGcC9vMjRvK2FXeXQ0NmNqZFcwbEkrUGZVWThXSGJYL2F0WWJXdDVXK3pYNXpuY1Y1SjRQNGUxNVJYMkN0UHBYa3BPdFB4bzRSYnRUb2N0Z0lWZ3NwY1JicWl1dDRBOXd2Yk0wcW9ieEF5MHYxSXlEb0haTzA0cmJVaHBzYk1kdGRLZFdKU1NGbFY3MTlHTkRZZ3RsRVAzbXhPOGdzMUxJaHVqaEorNmVmUFU2QUhyQVkwbkhGWldrdDN3ZWdNcFFvbVIxY3BPZkRGOUFoYkM3NFhmdzJyd3BmU1RUdlkvRVdpakN2V2d5czBhbThlR1Ara3FVdnN4Q0R6d1JCZjFDKzlWdTF3V2h0aVdEaWJWMHkrbmUxUjAySUtKckh5TzdwYXVaeTVqMWh6NW92MG1FQnNPdGgydTE5N1pVVjNvdHZqbFhLUHFXTWI5RkxSWXErTXR4Tm9CdHNkeUZqT1F0RGFhRFpyY0RLTHZYaEJjbnowQ2NHZUlrWlhaL2dEZEdJSzhrdHd5UU4waklqdWNtZHdpZ21qNjdDRkE5N0w0aE1LZnhhMVZvYzhJMFUzSStxSUFlMjh3QkZBMTdkdEJqUk9leFJxdXlCbEpXQUZDd2lCMFh3cENjaUZjcHkrRXAydDZzbDZPOWhFUno5SjlPUVp4RWRDRFRxc3gxSXI2RUp0UGtIYlVhQzBLVXBBNnJKbWwwV0kzaFN0dWQ1Y0JaU2VxdzNSeXEzRnlCMytielR1UXZyRi9lRlpRcnFCTnN1SVZmdnlzb2d5KzVxL0FVejgyMktxd3l2WFlad0pwb0w0U2FDQUVOSUJaTG41Y0VGb0QwRUJsQlp6bEZjQlpDRFBXcXNPSXEyb1hMYUNXMG15eUFZU1ZwTVdPb1JmZElzUXpNQ3A3aUtYVW9XSTFaUjhSTXVtSjIxYVBBaXhYejJEVTQ4M004bnF6TXIxNUEyd3gwcCtjOGpLUm5Mem5KbE42b3V0Si9GQ2RnMnJ1cGVRTVZNSU1WQ1ZwcXQ4MHhHRWFRcUhVV1NCU3pmOHc2cEVKVndNaEJnZEdPTnQ5Slc0dzBsaEFsZTMvQU1XWHgrdnB5Nk5UcGViL0RjYnBSdmNBZU5wallHUmdZQURpZzQ4cWVlUDViYjR5eUhNd2dNRDUwZ2ZOTVBxLzdiOE1qa3AyTmlDWGc0RUpKQW9BWGlrTWVnQUFBSGphWTJCa1lHQm4rK2ZBd01EeDk3L3QveTZPU2dhZ0NBcDRBUUNKblFhQmVOcHRrOHRyRTFFWXhjL2N4NlFVY1NIU2gzU2hqS0JES1M1S2tGQm1WWkhTaFNnVUJWZEZTd3hDTlNMWVFxQlpoQkM2a0JDS1Q0Z1Nhc0NJaXlDektFVUVRWFJUd1gvQVJ4Y1NCRjJJaTJLaHhQTmRteHBMRnovT25ibjMrKzY5NTh5bzd6alZBMEJRQndHdmdZbzZoN3haUk5JOHdLeDlqa2s3Z0drdmc3eFhwOVlScUdWTTZWOFk0OW81bFVia2FvNENwb3FNcVhvRjZrTnluOGo0R1NtVEo5dnZjckplYXFYSERpK1I5TWN4WWZzd2JOWVEyL01vMm5uRTVoWVo1M09EejJYRXJJdjFDbzZZQ25VTlMvNXh6aFVSKzBNb211eTIxbGpEczV0NW5MSFRuR2RQL3dORzdTR01tblgyZjR4Wjd3Vk95NW1wZ1o3Qk1WTm9iM3JMdk1NUTcxNUNVLzlFanByalBqbHZBNkVicDlEMHFsanlxdTFJYjdoeGsvczM1YjBwYzM2QnVvQ2I2aHJyYTdpbzltRlE1dlFiOU5zYVJ2UmJ3ckZlWmMrdjJFOHZZMnJBWHFtTzk3S3Yvb0hBakdCU3ppcHJYQy9UM3ZSVDFOOUlxMitJeERQeG5qcWhXc3p1QkpMT3gxNWNKMm01aTc2SGs4N3JFbnN2SXRRUkxrbXRYVUhvOTVKVnBQVmhUSWsvZTVISVVwbUR5NkFMcjlGK3hMNVhxUzN5bnYwR094bnNobWVxaUxvY3VuQTVaRjIvcHZOOER4SVI4aTZIeXYvUS83djBmb2I2bWJ4ejNuY3kyRTBmeG5ibXU1QWNKQy9SbmkwVUV5MnVFYi9YNldXRzNoV0FoUDlQMVFWNitKb00vd1ZmcUZlb2x6bkhIRHFZVjRqOGh2c25ic2czN3Y2Uk9rcGt6dkVSVDgwV00yR3RPc0FhSW4zNXJaOWx6b0greEQzdk1DdGlieU5FK0FmY1c5eG9BQUFBZU5wallHRFFnY0k2aGwyTUlrd3lURnVZSTVqcm1KY3duMkxoWVBGaWFXSlp3SEtPNVFXckIyc082eFkyTGJZQ3RpdnNRZXhGSEh3Y1hSeW5PRlU0TFRpak9QTTRuM0JkNFdianp1SGV3Y1BBWThOVHhQT0lWNHJYZ2plTGR4N3ZFVDRXUGp1K1dYejMrSDM0RndqWUNlUUpyQkk0SnhnZzJDUzRTZkNlRUplUWtwQ2ZVSTVRaTlBeVlUSGhBdUZ0SWtJaU5TS25SQjFFVzBRUGlQR0pPWWtsaUIwUjV4Q1BFOThqSVNYaEpmRkFVa2V5U0hLYTVEY3BEYWtFcVI2cEIxSS9wSDJrRndIaEI1azRXUjdaTnRrWGNsenlRdkllOG84VVFoUmFGTllvbkZLTVV5eFQzS1BFcFJTbGRFanBrYktNc29keWovSWE1UThxS2lxelZHVlViNmlGcVBXcG5WQm5VNjlSdjZYaHBiRkEwMGl6VEhPWEZwTldtbGFYMWdhdE85b0syajA2ZkRvbE9uZDAzWFNmNkdYcDllaXo2ZnZvVDlHL1orQmgwR0J3eHJERGlNR296dWlQOFNZVFA1TS9wdnZNdk16Mm1CdVlMN093c29pemFMSFlZUEhGTXMveW0xV1kxUTVyR2V0dE5tWTJGVFp2Yk8xc0o5aytzd3V4bTJMM3lUN0UvcEhETElkUGpsS09PVGhnbFdPSDR6VEhkWTdIbkppY3JKeUtuRzQ0bXpsUGNUN2dJZ1dFRmk0eFFQakUxY2sxeWZXUm00YzdsL3M2QURoVGpxa0FBQUVBQUFEcEFGRUFCUUFBQUFBQUFnQUJBQUlBRmdBQUFRQUJUZ0FBQUFCNDJwMVN6UzREVVJnOWQxby9EZkczRUxHUVdTS01LVzB4Vm1JbjBZZ0tpWldpMmdudE5HWTZhdWNCckMwOGlpZmdGYXc5Z2dkdzdwMDdrMmFrczVBdmMrKzUzM2UrL3dFd2pYZmtJUElGQUIxK0VSWlk0aXZDQnFid29uRU9oM2pUT0E4TDN4cVBvQ3JtTkI2RktTNDFIc09GZU5hNGdFWHhwZkVFS3VKSDQwbFVqRldOWjdCZ3hMNnpHRGY2R245ZzNvampmTUkyWG5FQUQxMDg0UUV1bW1naGdJbGxYR09GOXhIcTFOOFIxV2h0azltQnI4NDE2alpoVThxczNzUSs3aW5tUUJSZnZScThHN3hEbmpka0hoTjc2S3RvZFRLcWZJVUtuZExyaEt3bWVvd2s4OGJaMDdrZHNyUGp1Sm9WVjVqTk5sTjV6MVRGUHRreW00a2k2N2FWN0RGU2pScUpCN1V0TWdQT1RQTER4TVBDRm5aU3VlUE02MG1kdzJ0ejFRd2xDc2lwYzM0TnhZazI0dUUyYzBOV2hrM3VKK0RXSFd4UUhwVllTV3ovVHlUWldmdWZYc1A2aS9zL1oxZFg3RVg2Qk1uc3BMV24vcXN1L2FWMlc1MWxaaTl4cWc3eHJ0NXdFYVZmTGY2SUpRQjQybTNRUld6VGNSVEE4ZS9iS2x2bjdodnUwdisvN1FSdnQvMXhkMmV3clMyTWJYUVVHRTRZTG9HUWNJTmdGeUM0QmdJY2dPQVdKTUNCTXg0T3dCVzYvWC9jZUpkUDNrdWU1QkZGVy95eDBvMy94U2VRS0lrbUdndFdiTmlKSVJZSGNjU1RRQ0pKSkpOQ0ttbWtrMEVtV1dTVFF5NTU1Rk5BSVVXMG96MGQ2RWduT3RPRnJwRTkzZWxCVDNyUm16NzB4WW1HamdzM0hvb3BvWlF5K3RHZkFReGtFSU1aZ2hjZjVWUlFpY0ZRaGpHY0VZeGtGS01adzFqR01aNEpUR1FTazVuQ1ZLWXhuUm5NWkJhem1jTmM1bEVsRm83U3dpWnVzSitQYkdZM096akFjWTZKbGUyOFp5UDd4Q1oyZHJHVjIzeVFHQTV5Z2wvODVEZEhPTVVEN25HYStTeGdEOVU4b29iN1BPUVpqM25DMDhpUGFubkpjMTV3Qmo4LzJNc2JYdkdhQUYvNHhqWVdFbVFSaTZtam5rTTBzSVJHUWpRUlppbkxXTTVuVnJDU1psYXhodFZjNVREcldNdDZOdkNWNzF6akxPZTR6bHZlU2F3NEpFN2lKVUVTSlVtU0pVVlNKVTNTSlVNeU9jOEZMbk9GTzF6a0VuZlp3a25KNGlhM0pGdHkyQ201a2lmNVVpQ0ZObjlkYzJOQXM0ZnJnMDZuczhMVTYxU3EzS2NyWGNxeVZ2VklnMUpUNmtxWDBxMzBLSXVWSmNwUzViOTVYbE5OemRVMFIyM1FIdzdWVkZjMUJjeVNicGg2REV0bE9OVFFsbmlNOGxZTm4zbEhSRjNwVXJyL0F2Wm9tL2dBQUFCNDJrWE1PeEtDTUJDQTRZUkFlRU5RV21kZ0xGUG9JWVNHeHJGd3lJeW5jTlRheGxKUDRRRVdLL1VhZGw1R0Y0MngyKy9mMmIzUzF3SG9rVFRnemR1TzBwUHFhaTdiRW9ScUlGL2dzRmNqNEhMVkVtQkZCVXpPd0NtcUMzdGE4Z01iNGR3MGVGSGRDYk5Mb3UzaWtxODFQSVE3L29LQ3I1OEZXSDJzSGF0M3lCQVpUQTJqL21Gb1RZZ3BjVjhpT3Z5WEJFL2loMkdLVExhR0FwbHVERE9rV0JvT2tObjVSd1c1ZkFNaVgwMElBQUFCVTFBd0F3QUEpIGZvcm1hdCgnd29mZicpLHVybChodHRwczovL2Nkbi5hdXRoMC5jb20vZm9udHMvcHJveGltYS1ub3ZhL3Byb3hpbWFfbm92YV90aGluLXdlYmZvbnQtd2ViZm9udC5lb3QpLHVybChodHRwczovL2Nkbi5hdXRoMC5jb20vZm9udHMvcHJveGltYS1ub3ZhL3Byb3hpbWFfbm92YV90aGluLXdlYmZvbnQtd2ViZm9udC53b2ZmKSBmb3JtYXQoJ3dvZmYnKTtmb250LXdlaWdodDoxMDA7Zm9udC1zdHlsZTpub3JtYWx9QGZvbnQtZmFjZXtmb250LWZhbWlseTpwcm94aW1hX25vdmE7c3JjOnVybChkYXRhOmFwcGxpY2F0aW9uL3gtZm9udC13b2ZmO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGQwOUdSZ0FCQUFBQUFHZ0VBQk1BQUFBQXlnd0FBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCR1JsUk5BQUFCcUFBQUFCd0FBQUFjVzNLNFFrZEVSVVlBQUFIRUFBQUFMUUFBQURJREF3SHlSMUJQVXdBQUFmUUFBQXFFQUFBZnZvdTJoQ0pIVTFWQ0FBQU1lQUFBQWdjQUFBWVVUSjUxVFU5VEx6SUFBQTZBQUFBQVdnQUFBR0I4NnNNcFkyMWhjQUFBRHR3QUFBR05BQUFCNnJubFJKNWpkblFnQUFBUWJBQUFBRElBQUFBeUVDb0taV1p3WjIwQUFCQ2dBQUFCc1FBQUFtVlR0QytuWjJGemNBQUFFbFFBQUFBSUFBQUFDQUFBQUJCbmJIbG1BQUFTWEFBQVRQd0FBSkFnSVNjRE1HaGxZV1FBQUY5WUFBQUFNZ0FBQURZRnZpVWthR2hsWVFBQVg0d0FBQUFnQUFBQUpBN0JCNUZvYlhSNEFBQmZyQUFBQWxNQUFBT2lvYjFEWm14dlkyRUFBR0lBQUFBQnl3QUFBZFFiK2tBV2JXRjRjQUFBWTh3QUFBQWdBQUFBSUFJR0FZRnVZVzFsQUFCajdBQUFBWUFBQUFQR1h4V0d5bkJ2YzNRQUFHVnNBQUFCNlFBQUF0dU1EM3RvY0hKbGNBQUFaMWdBQUFDaEFBQUEraDkvdUhoM1pXSm1BQUJuL0FBQUFBWUFBQUFHTUFSVFVBQUFBQUVBQUFBQXpEMml6d0FBQUFDL3Z6VHZBQUFBQU05MTRJTjQybU5nWkdCZzRBTmlMUVlRWUdKZ1lXQmtxQUhpV29aNklLK0I0UW1RL1pUaEJWZ0dKTThBQUY3ckJQWUFBQUI0MnIyWmIyd2NSeG5HMy8zanZUKyt2YnYxblgzeDJUNEgyMG1VdHFFNGdSSTNCRkRVUmk2RnFMakZoR0NpRUptcUNoVUNBcmdXcWtJQVU2SW9IOUpBb1NZRUswTEJzcEJsS2l0S1VSVklENFNpZkFCTEJMZTBwd2hGVmtHeS9NR3krR0JWR1o1NTlteWY3VHY3N0p6d3E5dmQyNXVkbVoyWjkvYys3MWdNRVFsTFJoNFM0L2t2Zit0ckVoUWJkMFFwMGI4WVgvM0tOL1U5OGIvaE54Tm5SMnFzMldDdnV6WGVYZmNuTWEzWDlEUG1NWE1JSmJmaDl4cDFWL1dwY1hVTG4vTnFTSjFTeDFVN3JvZFVCNDRkYWtiOVI3Mm5KbFdPbjJrY0o5V2dsUGhUZTlRd25zaWlwa0YxRXRjdjh1NXhQTk96ckp5dUtZdTdveExCMVhDUm1uTDU4NVF1dWV5WDZSSnQ1NHIvcXM3bHo1UDRqQlpyYTBYNWlYVkx2Sy9tMVIwMWo2dDVOU2ZyL3FIVS9Jbzd6K2JQTTNpL01UVlQ4TXZjZXM4dlhmT05iaTVjNjlGVWQ4b1lKNWJCNkkvem1GdXM0WWcvenBpNXJPcFYxd3VlbUZ4Vng2UzZpVkpUK2JuTXFRbDFIbGUzc2VMQ1dGWGJjTjRPczJVSHpKSGRNRWMrREhQa3h6QmJ6c01jdVNBL3cvRlZtQ08vZ2psNGJwZFV3ZUtvSjR5akM2dVdHS3hOUEZpYnRNRENPTGZKVnJiaHlBTXdCOC90d3BvdmJPa1JtQ2tmaFZteUYxWWxIYkNBUEFvTHlqNVlpM3dNRnBMOXNGWjVBdWJKNTJFMWNoaVdrQy9Ba25JRVZpczlzRHI1T2l3dXArVWx0SzdmWlBrN0RNb3YwY29sV0VpdXcrcmtqN0E2dVFGekpBc0x5VDlrRWpXOEJXdVR0K1dmdUg0SDFpYnZ3cG9rQjJ1VHU3QzRUTW0vMFI4RGJiZGhSTGRqSkhmanZVN0w5K1VIOGtNWmtCK2gvZk5vL3lmeVUza0Z2WGdWSTJqYXo5Sy9aeTBIYmUzRW5OeVZpditwcStvbE5ZZDFNcWJPZ1I0VDkxMGY2bEJYNmVzVDZqTFgrMzNXV2NUajRLbjR6SlRqcjBWcnZGS3k3Mit2YnEyc0drOFZ1VGVKdXQ3WVRHM0YvSHloSHZpbFBnNkF5cytwYjhCYmZ3L2FqNkd0QVJEakZvNkQ2aXkrWGNCNUdFUXVyT05hMFQ3bThnd1pXMDJHZkpseHpkbEZoaytxb2FVSXdlUHNzdEtkcWwvWktxVWM5UlQ2RmtXOHVLdjdqSkc0aTU1cFRwM0Y1N2VNSkg5RlA0YzBzKzVkdlBkZjFRNy8yQW1mTnVEai9wOEQzemJoNFpvaU1maEFDUDZnV1JJalM3YVRKWm92Y1hpYkprb1ZpUklsVVh4cWVTU0tSNkpZSklwSG9uaGtpVUdXdEpFbDFXUkpoQ3dKa3lXdVBBWkx5a0hwaE45cW90VEpwMkMxMGdXcmxXZGd0V1JNaW96WlFzYlVrekZwK1NLc2dhUnBKR2xpOGdLc2lid3h5UnVQdlBISUc0KzhhU052WFBrTkxDbkRzRnI1SGF4V1hvZlZra09ONUZBak9lVEptN0JhMHNpVnY4dHQxSytaRkNPVHFzaWtHSmxVUlNadEk1T3F5S1FZbVZSSGJiRVRZL1JCZVJqRStiVW1qbVZidXpIV0QyQ080dW8yWm5FYnRNTmxWYU9hMVNHc3VnRi8zaXV5cmd0ajRYSDFBZmowTGZVSnJMRXB0TnFqOW1tU1ZLU2RNL256a0RxK2dhZHlPdkxxMkZ2Z2Z3Vm45RE5ib0d6S3BwRmZrdlZxam1uOU1WMjZEeXd6dFY3dFVHaDNLaG9Yaml4b0NYNzdpN3BHNjFQZDJvUFZBYlZmSmZWSzRObzRyQTVxYlFicngyY2U3QmxVTjFRWElzdDM4ZjJhR2xGZHZrNWhUU3RwUHU0eldRM2t2dytyRTB1TTJXVHZiNm4zTnZtb0NRSnBXZ1JsRDh5UWo4QXM2ZytiekhESWpDRDlWZE5wUCtrVUpKMThwUk1rblF6U3lTT2RrcVNUQisvTVFHdG9Pcm1razBVNldXd3ZTanBacEpQZlhqUGJzMG1uS3RMSklaMWlwRk9BZEtvaG5SS2tVd3ZwbEpDbjVMTlFRSnBSQ1hrYTFrcFNKZVJ6c0ZicGh0V1RXbWxTYXllcDFVQnFOWkphVGFSV1JyNEVheVc3Z21SWGt1eHl5UzZMN0xMSUxvdlVDcEJhTmFSV2d0UktrRm9KVWl0RGFtVklMWXZVU3BCYUFWSXJTV29GU1MyUDFBcVNXaDU1NVpGWFFmS3FCZU1heG1qdHdhdzhndEhaaTNuNGhWekVYSmhXbzJhWDhUZGpGclZ1cFI2ZTJmUXE4TlhBTlAzL1hLbkl1TTd6bllqUkhWcExreFFIMUovUkk1MlREVUFaalNEZVR1RUl2OGEzT2NiclNWek42OWlkZjM0RTVVL2dlejV1TDgrY1ZrZnlWWGY2VU9kbDM1TlF5MnZVSXpxdkdFV3JXU2dkZmRRVW02Qk95YTd5eXlHVUhpdG9mMnJOOW04V2VmK1RpQmxVUm1pekh1L2RnZmdSdlBlK3VvamY5c0JITzNGdkFPODRnSEs5Nk1QWW9zYlFNZExYK0NaWHZzMDE3M0NsK2VwYjV4ZnQ5TG9RUGMyZ3A2WG9ad1k5clptZVp0UFRBdlMwQmMvV25oYWdwd1hvYVJsNm10K2VRNytLMEs5YytsV1VmdVhTcjJMMEs1ZCtGYU5mdWZTckdQMHFUci95NkZjMTlLc0UvU3BKdjFySU83UmYrV29nUlkreTZWRUJlbFNBSHVYN1VvUys1TktYWFBxU3V5b1RDZENYL05pZm92OFk5QnlEbm1QUVo2STRWK085OStMdEhzVW9MbmpNSll5aTZYeEllNDM5ZkpXREhqY3pZN3lHMmNwQ1czYUF4QmZ1azhNNWRjYmZOeWl6L01oOXRkWmFOTCtaZzI3cEwyT3Y0TGtTOXc5aVRDNnBGMkdqYThUcDlyWHF4Yk1EYTdUY3JrdndhdGVhUGF3cGNUOVpSSWRmQnJsTW5SV3NqTFJGbnAvZTlJaVBxOE1sZmptaytiSDRyWWM1eTVuVktxUFluZzE0ZEFyenR2N2VUWW05SzlDam5MNjNGeG0xcTJpN0dUUWVMYldIdGVMdTdDWUh6dGREdzh1eTIyL0xHVGtKSXB4ZVViSUw5MytPNDhQK1UzaW1xL2hPRjNnNnNtYVVPRXFxbHhxMWpzSVlvUHFveU12MlhXajNDK3FOWlhlR1Z5bXIrbndPcC9XUlExNzdtcWlhdXpZR3lXdko0N0FBK0hzUWtiNFRGaW1nY0V5ZWhGbGtzWVh4ZUJvbE5ZVmowZ3NMazZwZUFUM0RCZlFNeUI5Z1BqRWpKS2JIckNqSVNHTERHcWpsWFBZeVFDM25vbVFFU2tuM3VENmZieTVsbWhGR0dJTzdaQTJNTXlIWkFVWFZ3R2dUa2dmbElWenJtRk9ML0tvZDF6cnloS2dzR3hoL1F0U1hEWXhDall4Q0p2VmxFMk5SakxFdlR0V1hZZ1NNY3FTMnlDZGhhZmtNTE1QWVVpZkhZR21xTlpkUnhXQlVDV0h0dkl6NmRXd0pNYmFFcUZ5YkdFbWpqQ0VoeHRNb05aaGJrRG02K2N4eEtXZDBHVmxET01jNWIvc3hYNDh6VWo2QnVYbVNzNkxuNUJuTXhRdVlnMkdNL2VzWTh6YzUydStLR2RUN2hlSjhKOUNDRWRuQjFYOFQxZytsTUZHQnZhZlp2TzQ0QVByMFlUWGYxclhpNmdveWxtUElTUHJCb0JIb3VpRkV0MTdwcW1TK1pIU1cxY01ENmtIb25WTVYzOFZiUjZHaTFYbmswMW4xR042N0pFMFI1U1kydHFlbXVndjN1MWU4NmFlaEg4WTIxbS8wc21pY2hqWjhCWHB4cWtLajFZbmNkRzFTYnVDL0NWaFQ1NkNsNXpjeVMvcS9OQ1hLNk5yS21vT2xpSVQxZldXdDJqYll0N09JNmtXZUtKd1paRFpaL1Y4SHRGenFQYklyK2xGazMyVXhzNWlvL0lvdnE0NGJGZlhCam1MNmlNY1RJRThGK0xiQnYzLzlYMXJwck9nWURsYVlpNE9JdlNZaXE0N3IvdDZ4RGJWUmpRanU1NHgrdHBpQVJSRTkwN2pYQ0lzeTRrYms0ekNQK1YwVjh6dUgrVjJBK1YyUStWMkkrVjJZTVRqTy9LNmErVjBRV3Vzb252MGV6R1RXVnMyc3JacFIxczVuYWpySzJzdnlOUlB0NnI2bXFFRmEyZU1VKzVxaFhyTFk0d3g3clBlVmt2aWxIaFpuN3oycUVuK0hxWjU2SkUwbGtxWUdhYUw2U0ZOM3BQTVpyNytYNWVlOVdtc0UrT2JOMUJvMkk3dEI5UldtK2pLb09MWlFreHJVWFFiSHBaSGpVczBSaVhCRVhJNUZsSG9rUlZWbVVaWFVVNVdrcVVmUzFDUHAvRTZhMWlNMk5adEJ6V1pRc3hrY3V5akh6bGNyYWVvM2c1ckZwcTZ3T0taKzlwdmhtS1k0cGhtcU81TWptNkYrU1RFZkR1UHBacng3bVArTjlEQ1NhYnpCUHN6MUljeDBOOTdrTU43akNHYTBCek41RkRONEhhM3JOdDVpN2U5STduOS9oV1R3ZU5xTmxNOUtIRUVReHIvcTd0MFlDU0ZaZDJhWGljZ1FKSWlFSlhqeUFSWVdVUkNYUkhQZEpKZ0VsbzM0QjhTZ1hqejRCSjU5QVBFSmZBQ1BIa0lPNGtrdzVoRWtGMU5kMDd2cG1leklIS2E3cC9qVjExLzFWQThJd0NnbThSN1U3V3oyTUFMREVkemZ5MHhRMERDcjY1MlBpTHBmUDNmdzh0djZweDZtTnJiV050QmdRZ2xsbjRUWEx1c1JubUVLYnpDTEwxakROc29jZjh5ckk1emhta2FvUVc5cGg0NGxUblNhYU5DNXZBZjBrKzVVcEpxcXA0N1ZoZnFqWTkzVXEvcEFuK29mK3M1RVp0WjhNSWZteEZ3bHU1ckxaQzZWRTUzU2pQalFxQ0pDN0J5V2VDU08yTEVpWTFDSXF1VlNZU0hLMXdwenFhQVE1V3U5S09Rcm42b1hvcUlNbGFoWEhGTWVmUHNLZHJHSGZmN3lUNWphd1NhMnBCdXFYRmtvZWZWTUhxSEpOR0VNNDdMM01LS2RJcFM0czZlUVZySGo4d0prZXlnNWpsZXVxdGNldStKUi8wNStuak0weDJKTVM0NnZQaS9yYkpiZG9ZNEpkNGFUTHI3c2FWYmRmdHFkdG4yUFBkM2xER1ZybS9pdnRoWDNKZnA3aHV5QitBN0NSVnRlbDFWelRyczF1QlhEUEMrbEZCSSt6N1BQdG5JOXR3YWVnd2M4aHdVOGh6bWUzNlVVSHZic3MwVThoeW1sNlV6dktPNkNNWTdVcEtaKzd3elg3SGRPTnFmQmovMGZqM0pOdHA5L3M4SWNGbkVyOHdKK2NjWWlibmhjRUg1T2VsZ3hIL05ZeGxPK2tacHpBNzZiZHE3SlRkMGZyQlg3Q0lWWDZPSzdSSnBvL3dYaEMwaHBBSGphWTJCaWJtQ2N3TURLd01JNmk5V1lnWUZSSGtJelgyUklZMXJGd01ERXdNckdES0pZR2hnWTFnY3dQUGpOQUFXNU9jWEZEQTRNdkw5WjJJTCtCVEV3c01zekhsQmdZSnp0QzVSanZzc2FCcVFVR0ZnQTVRSVFSZ0FBZU5wallHQmdab0JnR1FaR0JoQjRBdVF4Z3Zrc0RDZUF0QjZEQXBERkIyVHhNdFF4YkdINHp4ak1XTUYwak9tT0FwZUNpSUtVZ3B5Q2tvS2FncjZDbFVLOHdocEZKZFUvdjFuKy93ZWJ4QXZVdVlCaEcyTVFWRDJEZ29DQ2hJSU1WTDBsWEQwalVEM2ovNi8vSC84LzlQL2cvL3ovM24vLy9YMzU0TmlEZ3cvMlBkajdZTmVEN1EvV1AxajJvT21CMmYyRHQxNndQb0c2a3dUQXlNWUExOFRJQkNTWTBCVUFnNENGbFkyZGc1T0xtNGVYajE5QVVFaFlSRlJNWEVKU1NscEdWazVlUVZGSldVVlZUVjFEVTB0YlIxZFAzOERReU5qRTFNemN3dExLMnNiV3p0N0IwY25aeGRYTjNjUFR5OXZIMTg4L0lEQW9PQ1EwTER3aU1pbzZKall1UGlHUm9iV3RvMnZTOUxtTEZpNWV1bVRaaWxVclY2OVp0M2I5aGsxYk5tL2R2bTMzcmoxN0dZcFNValB2bEM4b3lINWNsc1hRUHBPaG1JRWhIZUs2bkdxRzVUc2Jrdk5BN055YXUwbU5MZE1PSHJweTllYXRhOWQzTUJ3NHpQRG8vb09uenhncWJ0eG1hTzV1NnVuczY1L1FPMlVxdytUWmMyWXhIRGxhQ05SVUNjUUFiZ3lORndBQUFBQUFBOTBGVmdDWUFHOEFjd0IvQUlVQWlRRFBBSmtBcWdDWkFLSUFrd0N3QUw4QXp3QzBBSXNBalFDUEFJY0FSQVVSQUFCNDJsMVJ1MDViUVJEZERROERnY1RZSURuYUZMT1prTVo3b1FVSnhOV05ZbVE3aGVVSWFUZHlrWXR4QVI5QWdVUU4ycThab0tHa1NKc0dJUmRJZkVJK0lSSXphNGlpTkRzN3MzUE9tVE5MeXBHcWQrbHJ6MVBuSkpEQzNRYk5OdjFPU0xXekFQZWs2K3VOakxTREIxcHNadlRLZGZ2K0N3YWIwWlE3YWdEbFBXOHBEeGxOTzRGYXRLZiswZndLaHZ2OEgvTTdHTFEwMC9UVU9nbnBJUVRtbTNGTGcrOFp6YnJMRC9xQzFlRmlNRENrbUtiaUxqK21VdjYzTk9kcXk3QzFrZEc4Z3pNUitjazBRRk5yYlFTYS90UWgxZk54RkV1UXk2YXhOcGlZc3Y0a0U4R0Z5WFJWVTdYTStOckJYYkt6NkdDREtzMkJCOWpEVm5rTUhnNFBKaFRTdHlUS0xBMFI5bUtyeEFnUmt4d0tPZVhjeWY2a1FQbElFc2E4U1VvNzQ0YTFCc2FSMThDZ05rK3ovenliVFcxdkhjTDRXUnpCZDc4WlN6cjR5SWJhR0JGaU8ySXBnQWxFUWtaVitZWWF6NzBzQnVSUys4OUFsSURsOFk5L25RaTA3dGhFUEplMWRRNHhWZ2g2ZnR2YzhzdUt1MWE1em90Q2QyK3FhcWpTS2MzN1hzNit4d09lSGd2RFFXUEJtOC83L2txQitqd3NyalJvRGdSRGVqZDYvNksxNm9pcnZCYytzaWZUdjdGYUFBQUFBQUVBQWYvL0FBOTQyc1c5Q1h4VTFmVTQvdTU3czJSbWtzbThXVExaazhra21ZUXNrOHlRVENZTEFjSytDWWdCUWtTRXNJZ2dJQ0JpcEJRUkVSRVJVSVM0SVZwTEkrcDdreEdRS3FKSWxiYldyN1ZncVZXci9mcjFteGFYV3IvOVZrZ2UvM1B1ZmJNRXdtTDcvWDkrNk15OFdmTHVQZWVlZS9aekxzZHp3emlPYjlOZXh3bWNuaXVYQ2VldEQrazF6aTk5c2s3N3gvcVF3TU1sSnd2NHNSWS9EdWwxcVQzMUlZS2YrMFdYV09BU1hjUDRYQ1dmN0ZJV2FLODcrOXd3elRzYzNKSnJQMytHdEdxYk9TTm41bHE0VUFMSGxjaUNvVHRrNHJrU0lpVjdKZTZVckJXNzhkR1ZwT1VTU3NKbU0rZlZsRWhtYnppSlhuVzV6Q1p6aVp4bzZaWXRwRVJPTW90V21FOUNNQmprWkpNZ1dxV2tZRVZsWUdDMUw4VmgxN256Q20xK3dkM2UxRHEwcWF5OHlmSzZhMjFyZVZOVGVWblRNRzFoVHpGSDU3UkVHTWRQMWk3a0VyazByb0tEbTNFbGtzVWZOaG00QkJqWTZTTlNPcDJYenRJdDZTeHlFb3hxZzlFelNBbFhVV2tiV08yblF5VVROMThRLzJaSmRhRW5rR0Uyand1UTRvQ25zRHJUbkRRdW9FMHNyQWw0a3Y1MDAwTHlkSlluVUZQSUx1azh5amhPc3dWd2s4SGxBUDVENllBYnllRVA2WEUrSm45SVN3QlhoaVMvWDlab3V1WGtiSjh2ekpGMGJWS0pMR2JDaHh4OGFIUDZZTGE1WHRuRjVoYncyOXp3OEF2MG9YZlRoOXVHRC95cXpQM2h4bzljbjdhdmJmKzBmYzJhRDdQL3RPblB1ZjhOVjM5dVg3dG03NmViUGlYTEY1RmRDOGxLWlRNK0Zpb0xGaWxieUhKOHdPZUlPNEdiZHQ2dmFkVVZjQ1hjUUs2QjYrQkN4VGpyUXBpajBDMVYrVUxGR21OSjErRGlJa05KeU1id0txZkNOejVmeUphSzM5aEVBNno3SUsrVWRFb3VUZTZXU2kxeUVTa0phU3lWUG9EUFExYzhaRTJ0Z25lU3h5TFhBTzVkeWQxeUk3eVdKc0ZpazZEc3FoR3Rjb29EMXo5Vkkxb0hHem1TNUVoeFZmcHJHdktkUWNrbVNuYWdpRWFTVFp4aXVhNXFZSFdneXU5SWNlb0xQV0syem1FMzgzcUh1NnFjMk96WnZGTTBFektJVkEwczV6M1Q1ZzArdkx4NjFJMkRSeFNuZi9uek5kODlOVy8xZ2VxeHM0ZU5MTW1vblBQQ3JXc2UvbXB6L3VoSnRZc0JOL2Y4eUROK1N2M3I2OGZlbEVTK1RVNHBMS3dkT3IzcThYZk5QMy9Wdm0vTmhqUmxTSEpxMFlCQkkyYlZqRnAvNjlpRUF3Y015NFdIaXdkWHVFU3lOK0cybm5MenB1c3F4bGJuV3psT3l6V2UvMExiQWJSbzRweEFCL2xBajg5d29WVEFhU2dmdDBxUnBqdVVCbmlrUkNvN05OM2g4cHg4QVVpZ0hDNlREZlF5V2ROTnBFcWsySEFpMnp1SkZ0bEtTc0k2OWc1SU9BdmVGYkIzQlJhNUJON2wwWGV5RC9CcVRSU3RYUVloTlFPd0o1Y1VpTlp3V280N1B4M2VjWEo1S255WG1lWEt3KzhjeVlCNEhSY014dTBDMkhBQmU0cmZWMTAxc05DZHA3TVJQOG0zNEhjV1hhNFE5MFhqeTl1Mkh6cTBmZHZMN1N0YlpxeFkzdHF5Y3B4dzA2MDlPOG0ybDdjOWVPaWc4dkhnRmRmUFdMRml4dlVyTk00ZFIxOTdhT3RycjIyZGZmZmRzK2R0MkhCdXZiYjViT2RQU2U0YmJ5aC9Pa29tdHEyL2U4N2NEUnNZUFk0Ny80WG1DOEJmTVZmRkRlVnU0VUl1eEYwQjRxNU0xeDB5SXRvR2F3RkJUWFJMRDBqcWxnWllaRDJBWFEyWDFSYTVnZktVYm5rWWZxUUhDdE1HcFFZeGJDd284enVRbkpLc29UUzNsM0tid1dXaTlRQ25UOHAyKzJ2Z0s4VENJRDVRV0tYaXdxelZwemhUbk5VQnB3NHUzSVVlUUU0NVQ3RVRLUFFVZXN4QWNzNUJBc1BIT08rTVdVMDNIZDl4NzM1bmRvTjNtczlYM3phaWRWcmQzZFBtck4xOHNualJ2aytuN1Y3UjlNeFR5M2R0MkZJeHYrbkdtNDVNSGpMeHVxS1drUk9Ya0xieGEyZVB5Ty82OGNid0F6OHFHVi9YNEtuS1NKOTQ2M1d6N3duWG45eDgxNC9kaS9aVlhyOWovaDFiNzMwNHVHcE8zWDE4eTZ6N2N5dEdUSzRjZmUweXhCbEIva2VLS2Y5ek0rNm5zajRpSlVYNEhuMllMMlo0TVI0WHo5amduaTNLQW5KYTJ3NzN0SEgwUHVTVXJEZEY3bEZ0c1FKV2VJZmRDdHV3WmVmbW1Zc1hMbHc4YzNNUE9VUGVQenJpcExMK2I5OG82OTRmZFpUTnp3MzMyaHQvTCtNcFdSTzlsODFaYmJYd0huMksxV0huM1RNMzcyUzNVNlJSUjhudit0d1E3elZDeU9LWEE2d2k1K05DV29RMTJjRHBFVllyd2lyeHZyQkpwSHpmNEpOdFFBTW1Eb2ljR0dHOWtaOTZBazZQWHg5dzZwMTZqOU1kMEk5NDc3MnlYeVRPVER6dWZlODk3M0c0K0lWdyt1YUZrOWY5OWEvckppKzhlZUxhdi81MUxZT2hqanNoSE5Oc2hYMTlIU2R4WGtudmw0bW1XOUw2UWh4QlBzZ1pnVU1TRGkrSmdDd3hFY0hFNlJqTVhCNU1SK01MR1l6NHRVRVB2elFhOE5MSUdVcFFIT0hVcWx3aUNGNkhTM1NMZGVTK0ZlUSs1YllWL0pxRlpKOHliYUV5am9DbzRGWXFQV1FCOXc3QVhnZXc0NVl3R2JvcDRBbW5KTTRYTm91Y1ZWT2l2bERnelFrQXZDQlMwYXFGdldBR0luY09JZ0hjNWhFeTErbFgrc2ZwRWh6RndjYXl3SmpXMGNkZGkzeWErdEt5b2RlTm5QR1RLb1M5Z2V6bmkzay83TTQ4aEYwbSttNThFRW5qbFRuZ1BZTElHV0JBYlFRUVJ3TXMyLzZORy9GdnFiNEFjOWJEamc3cEk5cEM1SUpJQ1pTeVZJMUJOakRxUXVGdjErV2gxQi9hV3Q3YUJLOTRMKzc4Qi94TTdWcVlSd3FIZ3lPSDVFVmNmWFZzQjNBcjh2bHFKYU5ZdSsvc05DcVRGd0EvV1FQMGtzSU40RVp3SVJFSHpoUzZRenBrSklVQ3pLQ0U3aEVueUM2blJjNEZwQ1dDZkNxRjExd25JRS9VSWZJS00wRkpNU1VDcTJSY1F2RDdzZ1c3V1FDR0lBUkE3dmdHOFNCemhEeXpzQ0IvMHFyUTRrV2hWWlB5OFdyUllyeDZzV0RDL1lmdm4xQ1FNbkRDNnAyckp3eE00VHNYdkhsbzA3WFhianAwL0RmSFg3NXZ5cFQ3RHI4NWY5R3JUOTl3dzlPdkxycXVZOXZDeHNhRjJ6b1E1aElBd2drNmhZNHI0RUlhNUlXRWFscDZyNlE1SlF1d2l4Smdxb0tHaWxKRVAvRURCZWxMU1BQT3pqOEsveUN6em5acVZ2MkYwZkJpMEUvU0FCYzVVVXlZQVJOVUVtVWlKbks5VXRvcE9jSFVMU1g3UW1rSlNLRnBJTjZwTWlLYlJSakNHcFF5eFM0dUlTMkg4Y3RCQkJBQmJNQXM2SUYwcXdacEdUUFVMeDUvYnNmVXA5WmZNMnpSQVdrZC8wUlA4LzJobzB0bkZmOXM1YXBYR3pVNzVpLzF6WHA4OXVTZjdYenA0WG03TmkzZTl0UFY2MWZXdHE5dG5ZajdETlpMQjNNc2gzMFdLc1U1Z2lJU3lxVFNVZ0FSYVN6TlJCR0owL1hDTGp3bEY4TjByYm1uUkRrSGNGR0JNelVDTW1CWEZzTmlTY21pbEIrVUhOWlFhbG9PWFR4VUl5SkNURjhWazJkNkQ4S2lvZXBFdHVDd2EyQ0gxTTBkZE9LMmg1NDc4TVJxdS9PMnpWMHZyci9sK2ZFekozeTErNWRFQ0V5ZjdhKzhhWGFqOHYzSFArazlzWER5N1B0dWExL0ZQOG92VzNyTG5aT24zRHpyMWpmMmpieHRiRm1DdHV5YTlST2UvMmd0cFVVZ1lrMFYxWjJUdUdsY3lJQ3J5U01MNDB3R1BnbFlCQ2lCb0Z2cFFBVTBleVhES1NuUlIxZEQ4SVVTS0w5STBBSHJNTkNGTVNEclNFWndrY0hCMmt1OFNEVm5XeFZRZ04vaEJpb0FKWDRvUC9vdlI0OTJLaTd5Q1duWklpenA2ZGlwUEV0YWR2SnZBNjQzQXE0bndueXl1Q1ZjS0pOdVNjQjFFdUxhQXJpMkd6S1RBTmQyeEhXMlYwbzhKWXVtN3BDWWlNT0x5WVlTU2JUSU9pQytORUI4RHJ5S29IZklKZ0pZMTRsZGdzR2VTVFVPQTZqMHdMeE1pV2tvZmUyaUpOSlZpR0plNzZGY0wwSkpHbmZ1eHB2dVAzTmY2TVhOQnphc0VZYjF6Z3ZzdTNIcVk2dEhLWC81clhMODJLMEhmdnFqZTU1YVc4Si9za3NwcUI1ZWUvTysrYi82WjJTZk53UGRGSERWM0UxY0tCZWhLWTNzODBTQUptVmdyZzZnU1VGb0FuVEwyd0MxaFQ3SlpwRXJZZllaQUFWcXA1VTIwSkFTZFNtNU9OME1VVFlrSUFNWVdJbzBsV0VER3BJVFV3RE9CRU9NRlRqMTVjUU5leitMUlBjRGo1ekJtYTN4VTg2QUJMYWdlUHE2bnk4OWMzOXo3WVk1NCsrYTNwRGwvK0NPNjUrNlkwVFQ3UWNXTFEzZlBpbS9TNU5SUFhiWjhISHRZNHBldkcvdUliNXoyYS9ENjhjOXZYYll5UHI1OTNWTXJwcDBkMkRoenhaT2Yrck8wZVB1T3ZEcnV1cDU4OFo1cTVyYmZBOCtzaFRXc2hHVXB6OVRQcEhIWkFQbEUwaFB5Q3VRU1hCZ0JRS2xDRUhHbzRtYk5BclA5TDczQ3UvUkhObTE4bHlPNWdqcVh3c0JqdzJBeHl6T3l3M2hGaklyUm5ZQkpoUHhmbzE0djZFVWZkbUF2bXlMVklGN0R6UURIS1dDZmlUbkF4cWRjRm1QWHdITnlFM3dRWDJGYUgwcFVVaDNEYkJUdW1oMHdYdE9Mem9IVkt1NlYzV2dISEExaUdjbzFPbXpDZDJHNVNTaWtKWUxIck1HMUh6Qk9VakRrTHJ3bGZ1bXJKODI2ZDY5MDZZK3ZXbnk4M2ZmOTNQbGkvKzQ5Nk1Oejc5ODkvckR2akV6Um1kbGpaNHh4cGZpSFRKdGNFN09rR2xEdloxcmYveFQwckx1bFFHcGt6WmROMzN6dFNVbDEyNmVmdWRQQ290ZlhiZnZWMU9mdS92bTlldHY5azhMbGpvRXdWRWFuTVpQOWw1VDZSRzFXdEZUZVkxMy9oMTNJSzIxbmUvV1RORXVCbTFySUdLSWNsSW5ZQWpWRWJrQ2FDMFgvZ0pvTFJlUlZVV1JsUS9veUxlZ3lTa044TWttd0VrMTRDUWZkUk9iUFlpRTFpV21hSE1wWnFqY3dVL2xDZy9Rb2ltRHk0cHFweWgzSEZUd2VBTFpoQklYNktFeEpBWEtBV05tdnExcDljSEZTNUNxQmt4ZjkvTFMvOTdSWEh2dkwzWlBMK1g5cDI3LzBWdDM3cGMzdHgydTBXWUVnTjdHdG84ckVsNklrTlh5WmU5MDNUM3VHU0M2Nng5L2VaN2JPdW51bVNkMlBQaklzdGJxdWZQR2VxdXVhNHY2QUlReklOTkZvSktZVkRlaGdXdUpWMG5rSkxFYk5COHEyMjE5Wkx1Z0d2aDVoVXpLbzR4dmFobkdoTDJ3bGRyNHc0WXgrMzdsZVk0c2dQRXNYRG8zV3RWOGpEQ2VIY2RMdy9FeXZKSjRTdWIwWUhJbU1TV0l2VWdwUGprVERRSVI5U0FMN21TalZuVXhSUFNncUJvVW05SkszM2hRaUFiVW9FSTBZOHdvTnJWanJsdDhtcm9XVUl0YW42blN0RWRuaUxyaElkQU5uNEc5eHdIM2RSaUlvMDY0dCtlY29PVlhMU0t2cjFNMktWdldJUngxUkJLT0NmdW9UeWFkYVZLZ1FvSVNwZFZRVFVoVmYranVoQWZlNUhiaFhpSXRYa3cyTDE0YzBVT2pZd1dxREtRS3g5TDA5QWozSGxwSGxwTlY2NVRHUlJSbkJlZlBDS2dudTBEdmFtTld2VnhnVUtWOU5oTG1BSzlrT3lYbCtXUXpXRXNlV0NjenBVOVpCK3BQQ2VxT3dBaEJ0Y3ZPTDBaTzZCRkRsb0lpRktrWndPUlRFWlBaWUZwMmNUclJGZE1GcU5Ya3NJTlJBQnM1b2d4WTFTVXZHUHZaMW9NZmxvNllNbVZFYWZXYUNjVkRKbHd6cEhqTjhpV1BOYnhMU1VEVE1XZnhTL2MyTGh3N3REWTRxcWpPRTJpYVd6VjlTRzBnT0s1MDBpM05rM3NFcGdqeTNLanp5N1JudFJrZ1Q2L2gvaE1zUkNBREtjL2Y1WEJsbVV2azhkcHVxZEVicnRWd0R1cDFraHgrdExxbEVUNndxY05hK2pHUkpsTGxzZHJNMmVGSFlEV21Bc0JONW02cHlTS1hnMFpyb0YvSWsyQzdWcWNmSHRUMTl3R2NvOFFvdWNyTjB1aWpXamt2NFh1ejVENHFqYlowNVk1MjJVcTZ4dUJ6Q0o1ejc4dTl6NjB6aTZBbzVRYTVybHozNkRIbDhJKzhsT3ZLVTYvTHk2WEI2VVF1YnhLdEJ3RlpXWlcxRFkxMDM1dHJnVWpyRzJEZmp5OUMzbWhJdFpaSGVLTzFPaCswRXl1VExJV2VLdHp6aFl4WnBqZ0Rma0hud08yUHhpam55dE5ReXd4a0Q5aG83cng4dm9DeEJodEtLZDJvalorUUFZKy9Tb3FmSERUdnpxR1QyN1ExTDl6d3dQNXI3M21oNVlaTk9lbjNyOVFFaXROckJsWGtLRWVWM20zSzEyK3Qya21TZnZyV2dZSzNQenVvbk5wSE9wZk12dUhScWpySG9zazdmMHUrMjB0S2Y3OU9VazUzTFg5bFplT053ODBUMnc3dFhIQjAwNlNXRVd0N1Q2YmFLb01wTlpQdW5xU1FFWGVjVVA2K1phL3lqMTNMcTlaMWtzSmpjMzkwODNpU1ZUdmpLNlJWZEp4VWd1elNnMlpVeW9VNDlFQUpmaXJBd3JvRWpnQXIxU0hGbXJ4eUlwVmpZTlZJUnNDTEgvUjl0K0FTYkM1aTVUM3Y4d1Z2ck82ZHRuby9QMHo1Q0YwTXBGSjVsN3pGZjRweWJRL29YaDB3aHBsemNybmNIRFlLNnBGTVRnS3JEcWM2NlZDcE9KU0xjdTFrNE5xcFBpblp3aXhKTUJFeVVhUnBZWWZrd1FlWnlUQ1BCRmc1SjE2WWdsS3FDRytsWFBRNXdPUkVGK01yS01kMDdnSVhVM2hjVlpHTFBmd3M2ZDM3MnhZLzhmN0xTajE1NXJZTmQ2OVNXc251cFhmZXVWU1pyMjArK2xqN3ZoVHgrQjAvL2VXdUh5MXV1L2VSTzI2Y3RZYnhBTkIxdEY2UVB4a2dmNmh2U2JaR3BJOEpKNTlKYlNvenpES0xLb2hXb0NiQzZSTWNLWlNhckJha3Bsd2IxVm80aDUwcXhBRW43OHJMTDF4d3l5dEUyRTVHdjdxbC9wZkxQMU4rZDk4M0Q5MzZxL3F0YnltdmJWZDZYK0V0WkNBeEhseWcvRzFpeTJMbHhIZFBudDl5eS9RSnl0Y0xEbEtlQXppR2VUV0RqWnpDMWFnWVRveGdtQ3BlVG9yV1JFQnJva1VXVldhVGlwTk1BZVZSMHFsb280Uk9OSWd6NnN3amdDenkvbitRb1oxdFllWDd4NVVQU1BGVDM2NWU5YmRubEErMHpTOHB2M3g5MjdrREMzWTkrTlZETzc5NkVQQ0RhNTFENXpGU25ZVWhNZ3N3SnNKYVJsSmFuRkFpblpEQjFFM3RjMnErRzB5ZzJ2SStacWlyMWptenpObGpqN0MydDRUL1JXOHRmMUxidkVzWjlZaFN2SXV0UzJSY0F6ZVlqZHYvbU1aK3hoUU1xbWNBRk9pK0EwYUhZNFAxYm92UXdPZmFScUNCWE5UZEkwc3ZaWG1SRkFETlVTcG1oSUM4M1FIb1RrYzl6UmR5cE9PZ0RpY01oM1RzUUJlOFNadUYzRDFkWkJRTk5DTno2VUZLMCthZ1pMS0dpRDZCV2xBcStUajdrbzhJZEMzcVFQa0FHbHJ5S3VHM2tXRy8yVGowdmRzWkRTMTdzMTRwNW44MFIvbHk3elpGZVpVM2t4cGlPakJQYVc2ZXg4aG9hajF4UEtJNGxxeWRmekNLUzYyVnJtR2p5aEgwakNOSVduOVlNRkpzQ3JFVkJJMEsxa3d5V1ZEVFJZMERmVldSdGNPQUJsckZnTXhPSWJ1enMrY3piWE52bUI5M3RwTmYzcnNsT2g0WkErTUpJREZqYTZkNkdhaWRqUTl0OUk1N09wSERzTDkxbnY5Q0tLTzhwWVFMSlVYc0tIMGtJcUtqaTQzQkRrN1dDNGhYRW96WlFIQXZPM0p6Wjh2TkQ2OTV1SFBsMFRVZmIxaTM4WWwxd3FHZUVWdFBYQitocXhjb0xpb3V3SVhHM3hjQkZHU3E1NE5DRmd5eXFSSy9BWlI5UFV5WmJ6M1oreGEvNkdUdjJVMkFnY0g4MGQ3VnZaWDh2RWVWS2dySEptQ1VPSTQyd29VcEhBd1B1Z2dlUWdLbFdFRUx4S09QSWRpeHFaTnYxemFmR3hyYkM5clRjSzlFOURYUWUra00vcmhaSjhWekFuVGY2cGhEVU5hakZjbHJVTUZBT0VKQ2dpbW9RbUtndmcyQVJkenpkOUpKOW4zWHFWUU9WNERqblB1ekp1dHNwMmJOdWZYNGlJNXZwSHRSSFYvU3hZMGUyNElHaXl5b281dlFrV0lBTnNTakJTdnBneEZNSnFqakU2UWlHUHdGd2RyNVRNOS93cmduTlNVdzd0QnpSeUsrSnUwQjJKTW1McFVidzRXTUhET2tRNW9vLzB1akd6SXhtVUtOTWtVUC9DOGQ0MUhvc3hjTVJnM1ZCRklzOEk3bzlGeUVYK2ZuYXF3V1hwT2JEOVlQeVVXZXlNSGVXL0F6RWlEM2s1ck9UdVZ0WllWeUltSDFmNUhTTDlxVnYzejJaK1VyOGhsNWtBeDkrV1hsaUxKVU9mTHl5N3p4aVo1dDIzcWUrSllFbGJlNUNML1dMS1ArQ0N2b1VuRWNDM2hJMkdDaWU4eUEwN1pSZEJrQlhTYWZaTFNnMzRFS1FUdFNtOVVrOWhWNGJsY2FBUm5IUkZ6QkwvN3JpK1BLQmpKdjlhNWRxeFdRd0YrKytNS1h2Wi95Qng3ODd3Y1p6bDZuT0xQQXZwdk9oY3djYy9Rd25PWGc0SGtVWnlMZ1RMUlFaUjV4NWtieEs2S0NxakdaRGFpZzZrVlFDVGpLeTJSaklqQ3VITEdMY0FaOVBBb2RGdlQ3b2s1a28yd0wzY0hWRitEeWxYVXJOeno1dTE5UWJPN2N0dnlOVlVmWFhvalF0NVYzVDJ5YXQyVSt3K21JOTl2ZWUrelBESzBNcDJzQnA4bWdaMHhWS2MvRUtBOXR4TERaUXRGcVJzaFNvMHFHaFNvWmRoV3RhZkJxeDloTUlycXRaUXVDWklCTHlTbkdJOXJNNjJFdjlFSDJrVy9xMnRhT0pNdE9LTS9DaE9ldDd0aDlCK0w4MDU5UGYrakdvSzczZlQ0SFVCL2VqcWlIUFRJQmJQM0pnSHN2ZDVJTGxVVjhiU2s0MVF5Y1h3VmFDSEoyTWpYcXdUYVJpMkJ5bFV3blBuUDlzUlRVaWMwd2NTbnhxT3l5ZmkvbEg0VTNYVW5KaWFBUm0vRlpjbG02OGx6NThOYU56eUc0amxPUTNjRVEvQXF2a29MY3djUWtjekxveVBubDZqOXkwU2RVYmM2Mk1XK1hRZXpTcEdTVTRjb1hXZVhVTkVSVWhnYlZabUpMVFN1aXE4NThmZFExcTY4YVNHVVdHaVFnc3ZSTWtjNmZNRy9NaHh1bnJoL3BDc3hjZmMvRzFUTUR4UFJyVW5wdzNyYXpkendKSDIyOEJ6NnF1ZlhFaHA4cC8vdjYrdVlscGFPdUthbTVycW80djdCMi9Pb0orMDYrdnVhWjFiTXF4M2dMODRzYnIvM3g1QW4zclJ5K0V2Q0tmcjRKVkordDVVSzZlRitNSlBpb3l4dEVnaFpZcVZhSHJGUUx3aitrMCtLbERyMTZNU3NRZ3dGRE5ZbktoRTdOa1YyN3pnMUZGdzN5TmxpM0hyaS9oUXVvTzBhbjhtbkpBTXhOakxCcVNhRGlrTG9iclBDYUlOQVFBTjRjcFU1S0xwVStzUE55dVQzNzN5SXJUdXhYUGxPK1Z2Nm1mTVpiaFdFOXI3OTIrZzlIaE1hZUk4bzU1ZmVrbVBIMWlLNnVRemxKWWVONHFxN0gzRXhnRWlJUGhWR1FZeE8zOVJoNWg3enpSdStIN3dQSGJOTThCbUtUY0ZrY3AvdU95b2ZudVZBaTFkRk1JQi93WmwxRTBPanluVkVoUVN6ZEVtR3VSajJMWWlFQnZ1SDUrbjVxbEhGSWYyYjRoY1FmUGR6UTlaV0NuMm9sb1Z3bWZBSjhacGFOdHUrMWt1bm80VGZHZkcyaWYySW9sMDNHQk1rSTMybnQ4SjNtcU1DRmVLMlJraDB2YUxRR295a3hqdXhnYkticHF6QlJzRUNvWnIxQ3ZLUjJDd21Tc3RlVTFTOHI3eXZ2SHdJWXQyaVc0d01rdzRSeklZQTFEWERHOU5GQ2xTTWsrS25qRjNRWmxOOU1hdk1vYXpSR0ttdllHQVljSkkyM0s4WjN5VTZ5NHozRnlEdmVWY1lwWS9sWCtJN2VUM2hYNzRMZW9meUkzc05zWFRUZndCZ0pxQ1BvKzZ5TGdmckpVY0laVWRMcDZlckFNdW43TEJPUW12VXRzby9zZTZ2M0M5QnRlamZ3N1QxbmVvL3dROW02ejRiN2o2UHl0RnlWNS9vSWx4YVlVa3MxVjFuUHZOSEFTU0w2ZkJWeG9VUEQ1Wmd0Y0wyYzhHR1BJb2hiTkpXN3RweDdWOVVWSml2dDVGM2dRM1MvTUpVWkRIWXU2aGRCVTEwdmNpWU42dVZoTFkxMFJ6NFFmSkg5b21yTWs4a2FwWWRvbEhiZHQ4dSsvMmJaVmNXTlFMUzdWNVBQVjJ2WG5wMUc0NVh0WkMrZFR4T25ncWloL2sxT25ZLytGSXdiMXJFWjZDeGh3a0x4eEl0djFJbnBvKzRjRjlXTlhXNmlVODZTdGNvNjVZek9zdXg3TTRQZHczY0tFK2grRXJsb2FJZnVJeHJMUVFyd2tKYVZaTnBhNWEvS0diNlQzOTg3aGEvclBRNS9lLzdzK1FiTnB2TXZBRnhPVGhMbzlOZ1UwYVZFNzRCUkdaMW02N2xsazVjaEhqVExBYzhkOFBzaS9IMllHRGl6cGlRT0k1RW9ua3h3OWJnZ3c4d2U0bDJwN1ZCT2M4ejMrWVh3aFBBUExodDAzVVZjeUltVVJsM0VlWnJ1a0FVZGNpWTltRHZGNlJZMGQzQXlwWFFUNXhpN3BSeUw3TVJOWE9EenlTbkdicmtNM3VRZzFTZVpxWERyMHBvc0xFMUJtdzZmNmxQaFU1Tkl2NDE0UDUxcXpLQ2FPb2xGZDFVc0psOGRxS0lPanJiNk9iY1ArZTF0OTk4aXJSMzErTmVUTnk2czcyaC9wM0YxVy8xam14WlAzbFpTc20zeW92dUlkK0s2OFVVYlFyT1czSGZ6TTRYajc1N2FPMjNaZlNVVDEwNjQ0WTdHK2xkcUcxZFRXRHVBendZcG44M0VhQlRWanlpcnNpY3dkaHZTVVE5a0FrQ1pSYUcwQUZTODZQTkpGZ2FxSWFsYnprWnZ1QVV6TFJKUlNLWFpRYWsxSkFzUnBaWkdQbWpvTzYvUTR4Q3BOV1doZnJPTzNmVXZ6bm56dSsvZW5QdGliZkd6TGR2Mzc5OCsvYWZGc0RXL25keXEvT2VacjVRdlprN1lRUktIVGo5SkpuNXdmUk9qcDFtd1BvZGdmUnljbnd2WmFJd1BKcXVocVVjNHp4U21kOE84bkxqUUJwREVZUjJudDRnUkZ6UEJlQWFPYjBsUkhVamNyUGJQdG4yK1lkNzFUejc2ODFjNkhyMXgzb2JQLzZDY0lkOXMvK3VtL2ExclR5bWgzNis3WVQ4WndIUktHRi9EeFhDR09qQVRVWWd6UGMxOHdibGt4SEJtVGVxV3JCYkdtNXhBR1FZanc1a1JUVkRCVEFVNzRvd3o2ZFR3cXhXZFhxaUxVemNZYjdYUTFSZHg5V2Y5NDlpYzV4czZPbXBmbVB2bS8reDU3cUhwUHlrdWZuYmFEdkxWWDBsVzYyVGVmTFp6eDRTWkpJM3NWS1NUTTRhUzE1cXVWK2ZzcGpqTEJUN0hzSmFrVTdHV3Flc09weGh0R293ZGFhT2VJU05NT29YcXdyak1DVWJtRUhJYVlaNmFKSXdTU1FtaWJLR0JkMk1Td0lHWFVvcEk5eFJEY2piSklpN1Y5WUpJdHJuS0JYVGR6MXJ6cDgzYi83Q2s1MVBEYXgxVG42b2YvZmlaajVYLzNNdHZJcDV4UDU0MDdzN3hwZVNiQjc3Yy9NRFhPejNiM3h6YTBOWkI4a2hoY09uc2h2b2JLYTl6d1NLRXRRc0JsaFl1WkVmczB3aVlDY0FoNkNkTjlnUGpCMVhhUjBuQmpoa0tzZzMycHRrWHN0a2pDVjBodXcwdjdhaU5VREl4b2Z3elVMTW9nY2FQL0RSN2dCRktGbUhoUnRjekhYZXZtOWdZR0RwKzBva1R1NFhtamVNZTZSdzdwNkx0aG5FYmV6cUZacFUrbENVYUxzWS9hTlF4RDBtRFJFaWpPQUZtNDVVZHVoanZTS0s4QTMyMHVnS1ZRcUs4QS9SSGRGSjBDV1lIQ3pobU90UlA1V0wwYTNDNnRIaXlxVUp6bSs2MUFFVitBNkUwcEhJUVNrTzZXZDhkUnlLYXNHbnZyTHNPTm85djJMM28zb08xTDdZZC93NElhdG96SlNVL21mclFjK1M3dnhKbjYrU0hleXFYUFh0OXllRHJsb3djOU1EMm5kZmNTT3hubm4zditpWVNHdHI2SHE3SFkyQlR2d2Y3d1JyeFJZR0tGc2M3ekFsUjg4cHFwQzRNZFNzZ2pIWjFGNEFjNVdSekpIaW44b3pjTk9JV21ZTmRmR3gzeldzTFNWM0hyWXV2MjFNT0RPS2Z3K2NvYi9hTzREZXZtZHN5dUxjTThiNFdKak5CR3dTWlprS0xHUE0yUXdZa0NKQTJOQkVqTVQ0Um84dWtKUW1VcmpFc1lUSlNYNHBzU2tBalZhZm5FYzlnVkVWQ09UQ2h0UTNOOWZYTmViczF6elkzd09XNW5jSkhQVzRZOTN4QVdVTEhOWVBzSGN2UlpVYU5SOURCL3ZIS1ZnTnpDcUtMeE5qZGxhMnptSUZUaU5RbktCdEFqK3dTcmRScnljbENJaFZKYU9jUndJSVFpSHBQTUlqRHFYTTVVZDB3Y2ZUVTNZODhNT29Ha2tybnBCeGEzakN0UmROdzd0aU9KMEQzcDlPRGRla0FhY2hSbmN6WDE2ZENkMzNVcTJLTWVWVTAvWHRWT25iekNjZVVNZVRRY2VXSlo3WE5QYXQ1c3pLNDk4L2tsYWVVejlrNHhIOXB2eEpnRmg4eHYxTEg3cGhmQ2Y1Vyt4SHNsVnh1Z2FweldWTFJoMEpVNnBFUy9YSW03QmE3TDhLV2Noa041VnFvRFprSzcxS1puOVdpY3FpMFhFcE82TldEN1F6WGliaGora0Rtb0lFY0p3dm53TFllU0Vrczh0cXh1K2hBMjgzM09Nc096NzMzL3QwSHh6eFV0UHZncU8wRGhJKzIxdDR5Zi9Mb3BUc2Y3cTNpOTd3enZiRzNCRjVtTkNMMXFiQUk3d0lzZmZjQitmZjJnZU9DZmRDeHUvYm9UU1M0YThYTnpVOVd3SlJnR3h6dEhjTnZYSE1UMndZcXIvZkRQRXlnbFVkOE5Na1JDZW5FV2FRekgwMVN6RWVUUkhPRm1ZOUdZekFLbEI3UjV4L3ZveGxFY3JPSnhVeHlDMjAwRkVQOTFubG1NdXUyVDBuaHB5dFhmcXI4NGROU2FkZThSOGFNZWVUWHU4YVFXU1QzTC9mZi94ZmxUMmUyYkNGMzd2bGswWE1MNW5jdVd2UWM2aDNLUmswUTVvZ3lkQVlYVXprU0tZTk81RERUalB3NzJvZVF6RmlpdXRnUjdTT045TkUrYXVTNXgvLys5K050enpXQ0NFWHRZOXF6eGNwR2JUTklVS1g3NnkrVi8yeTl0dmR2L0thbTFnL0l4Sk90UXhsL2IxRTJDbWRqYzQrS2ZqT2R1eG16NUdLcy9sL1JBblNtQzlpNVc3eElDMmo1Ky9HNWNrMUhSK056YmNmL3Z2YzVuRGlDUUw3NW1qaEJaenJieVNkZjIwb3l5Y09LOUVGckUzbHRhR3VFUnZrMXduZGNFbGNaMmF0Uk5GTS9tSmxPTllreEJacDhZN2lBR2gwUlFoemNPU3ZmT2ZMWlBPR2pKeWJQZVVKelkwUHZNRHJHQ05EUHBnRitQT2h6S2FRK0Z4RE5WaHdpRlNWZWtWZEtQaVZubUx1bERPWVhkWnU3NVdKbThuNVo5c1pKNW5OSnRFaUdvM0pXd3ZkUzdsRjQwMlZNTk5oS3VrejRMR1ZadXJLemN1RnREajZINERyTzU1SVRETUd2OE1vWTVBNmltWnVWblpNYjg3bGMrQW4xdVdRa001K0xYdXpTV0ZNTDBlZml0c3IyYU1iMlN4eEp0anZjY1Q0WFROYlFxaW9DRmFrT2U3YVdaaGVQR0Y4bDNiaGt6YkJGZDYxZk5Pek41ejY3ZjJUNW96UG4zRDRNOHk2Ry9lclE5K3VYMUUrZU9hNWlhSDUyVWUzTlkrNTQrc0dGTmNPbk41WFV1YklHTk53NjRhNmZJUTd0NTcvZ3gybk9nSTR6UzgyK1NFeFExUnN0VTIvMHZqNjVtRkZOQjZpS0JsM3MwVVJNdTZHdnBwT0lhVzdKUVlrVGFiSWthRG9pUzZleVI5VGh3aXJSL3N4akowNzRLb1lWbERVdFg3d01OQjJTclB4dFkyOUg3ZkNTbFlOWEwrRTNxandQMXZwZDRTUEc4ekF1d0Nhcmkwelc2SS93UEpBQjZLd0JPWU5wcTRrcXowdENLMHhFTjdST3pkMWtmaHRLNTZyNm05dXgrOWJGelh2S09qb0dIVjZnSENkdS9uRHZ5anZuTmpmeUgvUzRONCtZaWZQUUFlLzlIT1lSNTdNaFYvRFo2UGFSVVdUMHM4cmNmU0RJVHdvbElNeVpIK01FM0NlUmUxemxTZ25vMDhlYmRSR05UaC92czBtSytXeVNZajZiMzM1WmZiSFA1bGpabVJUbXN6R1VteVhqVVZtcm96Nlp3dzNsN09leVJwc0FscldrUGFxVjlCWXBJYzViYzRDSDd3ekd4Qmk1VWg4TldzNDI1cU5KZS9KYm90bEErRy8zS204K3FzQy9Eb0RvakdDbkQ3ZVEwZk01WFN1QVRYZ0hZT3Zyb3lGWDZhTWhkeWdkSVdJamRrbnBJR3NrNWFUeUFla2hueW9ieVdvbFI5R0F1YkVRMTBGWlF0ZkJnbkVpZFFsd0JSS1JEWXBlOU5FQkFlcVpxczJKTWs4SFlpdWkwK2Q1cU1yVFNDSnJJMDc2N1dDdnM4QmJQU3h0S0Z1bGN5M0hCZk5tUzFuZFRnclRRb0NwRmNhTDg5bm9WVWtuNksvT1o3T1FkL1Yrd3YrbDkwTytiRFgvMGNhVnZUa3FiUnVWZHZJZGpUOWVDOW9rTlRFMDNTQTdaU2R6M1JBTnM1V3lUc0dHQzl0WkRyVFpSNVVRZTVaSzF4ek5kTW9DQlo1Z1hxQmtzc3JhWkFwekZlcDJBNnZyaUFPWmgyalhneXBpVDZGdllmOE5MRFJXMWV5YXQzWnRZT0wxMTA4TXJGMDdiMWNOZVgzZXhBYnlUSHZIc3RZUnlvVDdpNHEyS0JPSHoxeTJlelY1dG1HU0dwTTYvd0d4VUQ5UVZ0UVBKTkNacVMrcUhvYTI1WjZsa1J4aTZnL2lqUkZZa3hGV013Q1pTeDB1VWlvRm1jS3FPUVc3TjV6SllMVXhXRE14TXhkRFNhbElPdHBNNXNYWEJ5V3pWVGJZMlBwU1dBTVVyaEpTUmRVdTJPUU9Dcml1aExqWDFFeHFiWjBZWExObS91NkEzeC9ZUFgrTmNtYm1jQ0k5NFBGc0lhR1JNNVoxdEN1dERSUG5UV3BRV2xidlpyQUdoRm5DTzZCM3VybW5nVWZ5TlA0bDU5RDVTbTQvQWtDa2ZKb3hUM3h5QWQyZVVpSHdlamRYZmdJV3hsMStBamRzNDZQLy9BdVRPQnh1VmNsdGtWeEhOZkNtaTNDOHJlUnc0NUIvTk1MM0p2aWlLOCtOT1REd0hCTTNYQmZoWFhsVXNvVFlCY29UVHM3QmlJWUoxMTBVSlN0Tkh0S0FSYXlseHJBWmMvNDBZQW5yQXdrcEpmV3R0UU1uZXZNemN5cHlSMDZ3TFV0d2xOUzIxdFZQTHkzT3FoNVRVNVJ1RUpaTVdyOSthcUJrK0pScmg1ZjgrdFhFeWV2dW1WcFQyenkzdWJabTBhWVdwcE8wd3o1c0ViNkZ2WjJNT2g5VlBReG9lVmhZZVlTSUNjOVlWcE5vNlViRkg2NDRFYW00SzBtWEdLMWdvM3EwR1kxNWc4Q3FDZUpxWmpLSTM5YmVWRjQyWkFoV3FlV3Njd25yYUlMWTBLWnpQdUVEV3FpR3VxZGZPS1RaQUpaUUZyZVlTUzdKN3NmdEw2WDdJb20xTm9PcTNBdCtNTGhBRGZDRmRDWWFHOUNnS010bTJlcEpORnNkdFZNaDNlY0xXOWtNdFNiUW5IS293UTY2YWppQk01aVRJd2xFc2FJcFd0RGljRmNWb3RXTEZWT3p2bmgxOWRIMmVaUHVYamRsM3UzSFZyLzZ4WjdOcTIrL24zeHpnbVNsUDd3dCtkSFdKVW05aHNUbE56eWFmT0Rub0NQKzZzRmZaZkovemZ3bHBiUGk4NTlyTE5xRlhCQTRUTWdQRUhVNS9LVm1tbHJQaW5YRWhHNjUwbS9KUGVxVjNRQk9NUmE5K1kxSkpWSTZMWG1UTXNGNHFVVUxVQnJvaysyVzdwRE9Ib21FU0hhTEhFQTczOWdkeWduZ3B6bVpJS2Zya0lYb01FcnNCd29LaUxJTC9TMDUxbkJhZXBhN2tpcm5vSTVaSlMrb0tXTElOV0FnZnMxWjVaeEFNQWlMQ0Vxa0RsMktUTG9YZWpDTmlsbzhVVTFGY0xvY2JsaFlQYTV2eEVGVHpxUGZFZFY2VC9FSDQ5TnExcnpmZnYvcDRLYk1yUzEzN0xNV3VlcVN5TUN6NXNmcUtwckNOWTJMbmFQbnZqaG9mdjBNLzVUSDYrL2Frc01YM0RLOXFIWCtrc01MYjE4OGVjVHNyYXRLeGc0dkgybTl4VnY4MUMyMktmNmNUVGRtdTdNbnJ3dnViYTBiREhReWh2dEkrTE5tRlpmQkZYQjNjTEJqd3prYWJpTHdsSHh2MktnbXNCVjZKZUVVOGhwTVlNdTBZSTUrV0dSWmF4NWtPNWhub004QXdGM2lRVzFDWXJJdEpaMmc0b2JlVnFxNDVhVENwWjJEWCtTTEI0a1dmcEdRanBhMlpBUmJnWGxjc1JTS2hraEJqUXM0OVlnUkZqNzE2RzAwZWpTd01GYzM1dFo1ODI0TnJyejlwM3Z2WEY2SDEzWEw3OXo3OUowcnEzNUQ4dDU1Ui9uNE55VHQxclY3bnI1elJlM3llZk9XMTY2NDgrazlhMit0WDNuVFRTdkpPOXZlZVdmYjlsLy9tb3VMWDZSd0s1alZFSWxmaEMwQVZoS2FpN0pGZ3dIb3NOMUJQd0JWejQ1dWVSLzFJSmhQU1ZZdzFFM2RVb0l2bEdSR1lrbkNSQjZkTDJST29xYUhCUW5LUnowTFdIUEtZaUNPUG1xUHk4SCtjMWU1Mkg5cVJFVHhra01LekVmaE90a0xPY0FpSkwzTkMvKzQ2T3paUlg5Y1NPUHBVZm1pQjc2clJpNVEvREhwQW5PSnlCbERWTTRJVk5Zc1hWck1iK3hkTGJqd21mS0tFZWRiaEdtd3I2cTVrYVNNQzZYU3RFMXR0elRRQzlvUXNLNVJhQ2RJRHA4Y0FGUEI1Wk1DMUZxUUJ2dmtTdmlneENlUFppclgxOSs5WVlyYURLQmJCVk8rbHhxT0h2NjYrbzFCVkJNYmJwR2Fqc29GWUVsNHFDVmhTalRhc0tpd3E3REFBeGRCUzFkdHNBR01pVHA4UG56bWhUZDZLTDhmYnVrYU5yd0orRDE4RzJkZTFLRjVZWVNyRVB3NXZzQ1BVQTRNVHFwckdBNm1SVUdoSjFqYk5LdzgvaCs1M0pmVS9naEU3WStYd1A3SUxoK0laRnBwbGRNemFCb3FzMEFjNlJtVmxOYzVBL0VXU0tDY1hHQ0g2R001ZVhtRm1BZmdSR2NITFJrMWt4SGovZnZtMzd5Qm1TY2I1aTViL2RhK00zZU45RDA2WmU2ZEEwYTJ6cDNiT25MQXJOYldXYWVlMzN6d3hxblh0Vm9OMTExWE9HYTQvMGZ6ZFcyRHJwMDUyVC9DazFzY3ZIbk0zTHN6OG0rZnZmTEpiYTBOZzFyRzVGZTcwbE16U3h0dUdOUzgwWk8vNm9iN243cU83Nm9hbStuVThnV3pSZ3hvTEVsTHltM2orUE93NS9reFdqK3RIZlZ5R0xkeitORTVCOUtKK2VoUzQ4dVlFN0hVMDBLekJZQ1doRGhoVkJCM25SVXN3aXJsb2lEWkYvQVVCWU5GaFRXYWs1NUF3Rk5ZVTFPb3ZtSitaTXY1YnUwbjJpV2N5T1VCTDcrTDdjR3drMlhSMW5qRFBuWlY2ZzBYc3FzY2IxaWo4cUphcWtuWkdDK3kwZnovc0plOTg5S2M0a2crTFhMdURDL212YVpvY2dxTHFtc29zeTcxaWRiQkpvUFZsdUhPTCtLS3E2STVyNWp5U3FzQ2FWNFpXUGpaZkM1RzgvbDhkNTZaV0MzeHl4cmwweTFIeUlqWEhpUzZWNVl1ZlVVNSsrQnJ5dUVqZytmdi80cG92dDQvNzNubDl5L2M5ZVh6dC8xdjE4dTMrajMzanQ3NjdudGJSbThzcWxyeGNvamZmNVNNZUhYcHEvQW5XNVd6UjViQ1hjZ1FwZWVyL2ZQblAvL2xYUytRb3VmbjdlODlUVmI4YzRPL3V2RS9ubnJpNUpCcS8wYllwMVA0emZ4bXJaZExCVjY5bGd1NVFYS0hCWW9YV3U4TnBtYzRreUhNNEEyYlk4d2JFSmJHdUVJYWsrUGFIQ2JIODFRT25vYjZvZ2tUV1d4WVRXTm1YdEJNckQyeG9jdmJMY29jMWdoZ2ZRMzluYXFReEVYSVV0UUFXV0dmK05pVVRhMmJyNzFoZVB1RXFwdWVYdm53aXVzMnpiaHYxZFJoVlRka1pkMVFOV3lxTUt0dFNmT3lobEV6Snl5NlphVXljZVMwRlRjMmpCbVF2enkvZUN6bFN3M2NPbUdFME1wcGdVbzVHN1YvQlByY1FFWjFLSWZneVJXNUlOK1NoY3BPWlN0WnhsNVovcnFhQTYvbC9KRU0rRWdGSmRWdmRLaEdxMnd5cEJId0N3MFhUVFhES2ttM1dDZmN1MHlvVzZ3a2tNM2N2MWVmcU9GRzhUcGhQNjJkVGVIeXVUSVFDYXlDMXNFV3plZ05XOWlWMnl2bCtNTUZiR25kQlRneHR4TkVTcTVQS3ZPR1U5V1ZMYWNybThTSVA0bTY0Y0w1N0YyQkR5dEFpdUVEVldyRFgyYXl3bTQ5Mng1ZUxBbEJrOGdCUnBCVUxIWVpCUmNXMmttWlZ0bGlSMTVYNEJhdFhmb2tLem9kcFRKUnlveXNlb1NmQmFKeTJTYXFQTURwOXJnZElpdTNLaUdqbFBDcXQ1ZjN2aFJXNnY1SXF2LzRvZkwyaCsvOWFraHJxL3VleWV0YU51WFYxT1J0RWc2OTFMdjg3VlZoUlFsMy9QR1BIVStjUHEwc0lOOU9hUm8xN3Ezanh3bFhYVkJVeld3TVRuT1kvMEtiUmUwcHdIdVlVQzFGZlltTFFvdUFjdjRMemVFNWM1Zys3aFZXOFc2MVJuNXNYM3didkt6OFBUVlMvbTd2VS82T1dFcFRTOXlaR240MVJlemU3UXZtNzlneGY4SDJ0cW1OZzFwYUJqVk8xU3lidjMwN2ZMQjlRZVBVYVlNYVdxYlRlZFVCSXp5bTZRUjRrckZtZ2xyTXJFSkRNdmt4bUEzbVhVaERFM1UwWmxEVHRiUTNnbGFQZEd1aEtnaEkrQ1MycTJOYWlBQkVZb3hxSWFqV2FueG9TNkREbjFWNnhBcC9zZUlqVXZ5N2VERy9TeTMvSFV0ZVFueTNDVFA1dzdvbmdOY001NlJrcjV5b29VRVVRY015QzIybmtKQXdFU0hKRjdMcGFUQXZHYlpPT25Vcm9BeTFZQXl5aTlQYlV1UEtOd25OSk1QeXpYekVWNTVPMzFhNXQyWEN1dWJnYmZlMmtTZDc5eFB1NUx3SDIvTjBXWU9hS3BkTnJGKzFadW5vdWEySGZqZHo5TGlHTWtvSHpjSkUvZ2pNYXdBM2taT0t2RFI3QXpaT01sdFNoMWRPMTdBNld6MHFhWkhHQlZrK3JMS05sbXNXcU9XYXViUmMwNW1heFRUMFFML2xtaXA3UTBFdXNQVnVIbGEwZHNUVWVTdHVISkZvSGpaajhVM1gzRDFqOEpKWDF1OWRNakpuU0lQbjJhMExuaEpPVHZEWFR4ZzZwb21meHpjT0d6Ujg5cWkxcTlvbXp6SUpHZDd4M29YcngwUm9PcElqa2N0bytsSTVFa0RXV0czczNhTThDMy9pb2VrUmFIZURqYWVqZVUwUnlrNWdMQ09COHJJRUk2eS8xcWRXd2F0eVVUSll3a1RrakN5RnhFRGRacGptZ3RUT2F1UlIxaUdCNEg5NWdYZTNrMXRhRDdSdUY5cEkvbSsrLzBqNzF0bWdNQWRycmNrRzBzcTNjUWJrZ3drMHJzZjBCbU44V3hZMXc5eDJZUUVXK1VmcDBLR2xZTFV5UENpcnlUT3dQOU80WVJ6bzE2cE1ReUVtcXF3dUhZMDI5T3pnTkxHWGlpdzRXWWpPSUlhSXlZN3JpVG1NMUtFakJ1TFdMdURYeHphcVovU01xbEdlQW4vR3NNR3RWVm5ldW5GM3pHaGNvaHlZVUZkZTVDck1LM3orWHVmWVFXTmEzRGluTEdFbW1hZmJSdjJZSUNqVUltZ1VGbWo4WGxBSEhhQjEwRmtmTGJyalhxMzBhYzg3L0VNUDRCNmZEUEw2RE1oclVJcTUwYWhqSVptaWJXVlhOMUpLaElON0dRZVBOZDZnTVJWcjFBSEFValF2NWp6VmxQTWdwSk1QUHZ6SXdZT1BQSFNvZmVtTnM1Y3ZuMzJqOE5IV1kyODh1UFhZbS8vem0zdnYvYzNHaStScElPSlRoUDlCbmlxSE92QnBTL1JxWFVTVXhvbFVrR0ZaR0Nla09VUkdnQ3FWMjhZeXdDU2JtdkdjNEErYlV2UWtpVWIvMFUwbitrSXAxS2VRa29TOEt5ME9qZWlHdGhQc21vTUtIVzNjMDE5bWdJbnhGWXB3MmwxQnNvdGRDWVlrcHFXa21HaGtVU0tpTEtTeWJVeFhBOTJ5QldwOU1oaFpCUzZScmsrN2NOUFNucDI4bWN6dVhMbnlEcVdiT0RVcmNjVjJiRG4zQVVaRDMybmxqYjFLMnp2dnRKR2RISlUybk02dXdsdkEzY09GTWxqOFZrN1ZkRWNoTnVkbDBFUmJYTlBDQ3dETWdUVmxMaE1welJmS3NWTFhRb2FCS1Y0eGtITEVjSUxCWkU2bE1LVm1BRXlaUVNrUGpCQ1RWY2dwd0E0cUJCMVpXbDFmRUEwa3lsZUZHRi9GdUZBOHRFc3JuMjY1NXNmWEZUY3RYbjROY05ubmtjdU9IdFdlMXhkMC9nZ3czYVVUSythMExHZ050a1c1cm9ackJoeThvcDBOUExjYzlQVjY3blV1VklKWUNQaEQ2WWlCVWovdEx1T3RMVW1IZGZmN1phK0c5dk9wOVNLd3RaV0drbkNSQnIvRDRyaHdzaEV2Vlk1TnBJYUxXRFcybWFrQnNxanpoUVBzTTU4dkZLakJld1dxZ0N4cXFIdW14Z3M0SEFRNHJNSFN3Tkt5eWxxS3VscFErYVdLSU9YMFhjRHA2MUY3K2RkWnZlRWlLcUxNZjlyY0ZUY090bDZDK1pONjRhWmxQUS96RmpLbmM4V0tkcVF4dm1POHYyNzgwREhEaFBsTUhveEVlWENES2cvdUh0djcxTVcweDNPTnloSmhpL0F0cmF0Y3dJVUthTVlLbUdnNWFzbk5BTXBxSGNuZGtvTWwzeWFaYVpVNWNCSzMyQTFhSksydGRHT09pbFZMMDRSQ3huemFxaURKR2phbDVoUVVVWlFWWTU4ZXpwU1J5VXhhV2t6cENhamxsY3pXb1NXQWtieUhSbFpXV1hVbmxsVk9HRks4NXRZbGp6WE1vd1dYcElaVzEwNkpGRmJXRi9ZcHJMeHUwdUk1aTEvU2VQRTNUYXdIRDgzeDFaMmx1U0xtaXl2eUVtTVZlYUNFMExJV2txZ0dxS0lWZVg1TVRZK3Z5dHVJYVlUS3IrSnI4M1JubGRQbnZtUDFlYkV4amYyTm1kRFBtUDFVQVlJcGNsRWw0QWFVMFQrSnJ3Y2tKUkY1M1hkYzhiTGpXcjIwaExtL2NRM0U1cmU1UGZvTGgxYStlK09odHhkMFBuUHg0S2RQUjhmK0NzYk9BejUyOTRWanV5TmpBNE1PVzZOV3QwbFZyd3V4eGhyN1BxRUdrVWZydThJcE1ROWdIazdURFR0TURQTW1rb2JzU2txeFN2a1lUZ1FyUWlvSXl0WTBiR1NRUnptZGJNa0t4c05FalFvTmJrSS9ianJNVGRNNWhENHJ1dVdtbVhuQmZIZW14MWxhM2JwZ1p2SGdvdnpTak5KQVEvd1NhejlzMzVVNW9ISkE1clJwN1krZ3UySGF0SE5uY01WUmJqSDR0d0Q4TnJDKzhpSlZtVEVNMktNWUVMMVNyaC9iM1VqcG9EeTVFWFRaYktGMWJTaVZzeXpkdE9zQTlydVI3QmhpZ1R1azRLN0tza29PQk5rT1g2UmNDR0NrdzV5THhMK05BL0d4R3VZOXFiRWdVS3NDbnFLYW1xTENtaWdCZTR1cXFRZmwzQkZZMkkyZVFIVVJkYWRFWU5QblVMcXljcG5jeWt0U0ZoQldPSVd0YmtiTVJaQ0ZEVGRVN1FyOTRHRDFoQzFzZFRFdEF2TTREaEFlSFpsR3lqQlVxcFF6VXJCOVJiTEZSQmxIM05iZ1ZVNVJHRlZQTHFUV0U3Yy91M3o1czRVai9KVWpSbFQ2KzlEczlHZHZYN1Z2VlcvYnlKRnRJNWtOWitZNGZRR3RjN0Z5clN3YUxISCt2b1dXWmt1aVd1c1MxaVlrUnVzZmJRZ2E2Q0RSRXNqRVNObWx6T3Q4UGxaVnBOSFNkak1JUXF6MEVoNENjWWxtWVlwd3JMZUVmNnMzeUovc1dkZjd4U3ZFVE42S0ZtUEd5bjZ4VGxKWlIydGxxOUNuRmEyVnJVUUhjN1JxMHVVTmU5Z0NnQ1dmb1M1QU5XWGthdTNrQU1CK05zTStCaVFHbUxGTm5VbHJUVTNMY09WWHNKaERtUWZzbU93Q0w2MlJGK1cwaW1DUWx0Nkc5VnlrOHBiVmNWOWNlYXVOMTRmN2FNcmx3aVVxY3Q5UWZwT2RVVkUzSHJWbEYrclFJd3RSaHk2NXAvdG5OL0tkSGYxVTZmNXZ3alVwVkpWT3A3cTF4KzFabmJnMDNLdldMT1VBRDhUNDJEVlhxcGkxWEtsaUZzTmtOQzBtTVhoQjVTd1NZMXoxYk0vWko0bDNSWFRaVUJyRTZ0SWk4eG41ZnpHZkMrYUJDa1RjUEhvUFVTc3VPaEh0KzFROHhNL0RldVY1Mks0MEQvdEY4MUNsUnZ4VXZHODhkT0ltRkJoOTVuTDZOQmVwWWM4QmZvbCtFemUzL1BJekFydGJjdm5sWkFPR0VOVlk3MldtMTVWbzRCS29ReGtOVUF5U1pBTlBMVUNMeHdCU0l0a1J2R2cxTCtGeGpnY25NY0kvcWZkWjVaMlI5WTR3ejhJWTMrVFA3NGROMnc0NHh4aEtwT09WbG1aTUp0Q09WMWpYaTZWb2VnMU52RUxQTjdJNDBTOU9RUVZqWGllUzBka3lOWW1TNTViQlUrTVB1aDhhS1hpL1pjVDdwUExzOEU2MkJORmJ3aHcvaHljTjNCUHREN1dyR1UyQndBNEZXR3BqaEh1aWQ5Nm9CNDVBZUcyUTRrNWdxNDBwUEJuSGRwd0F0V0J5WjJSNUkzY1h6cjhPOS9iUU5VN21NckNPSERrcjdjbUU4WUEwRmcrdytXaVJmOTlZQU5ZUkpsdG9UOVVVQ3l2OTd4c1d3SkhqNVZ4alpIRSs2Y3l1WWFzVGpDN0s5LytMTTlKNTQ5YUdzNE5NVzBCNWZqWTNYODN0czBRNmlLVUQ5WEhFTElDMWtlR1hPVjAzV0EwRTlCVjBpL0UrMldLaVFXNEw5WWxac3NCa01GdWlEakVMcTA1UFNPN0dCbXhxMlcyQ1F3M1J4alVFY0ltMldFc0FwRVA3OGZpK0FHV2RzY1lBcEVWNWxtOWJ3NitNOUFmZzI1U0JyRVdBNGw0VDdWZGdCUDNMd09WekQxMVVKWXpTMk03RUFnaUlKRlhyS29pdkhEYkd2THY1ek5lYnl0Nmx4cXFLQzVFUVdGV3g3TXpIOEd0R01MNnlXTFpuWU1WcVBnM1Z5dFljYWduSXp0UytOY2Y5NjJPUlN1U1IvV3BpMWZFRnl2MG9ZcFNuMEpwbHl1TlNRVXNaMTIvVmNsWi9WY3ZaYWtic1MxaTFuSmJ4UStxVzBUaTRiTzN5QWR6S2x5MWdGcTVYVHY4L216L0tqOHZYWHQ5S0pjcGxJZUNyVlNPa0x3dzVsNEFodHo4WVhIMWd5UHdoTUdEQ0NuQ2p5NEx4VjJCVE4zVStmUlZnb0lDS3dQRVZoY1BIYmU4SERxbllHODVqZThwTEEyTjBUL25qWVVORjE4ZDJrYytDQWloY3lONFZ4dUFlQ0s4RkdEVTBJT0RKbHN5VTRvdGdsL09LWVYrbCtXQS9lVVU1dHl4NFdZcWsyMHU0WUh0ZG5rWnZtbG5jeUN5ZTFwdWlXKzd5dUJyVXZnczRycWZQRmdSYmdlRnRDOFViZGd5K3N6L001WG1sY3IrY0NkeS95RWZiQS9kQm1aeGpvVFV5S0xCTDRMSWtoaXhzQ1p3RGxsN0lTSXZPcEFJUkRDR3B4Qm95V0RTMERlN1Y3dHBMeVB2TFl1a05rREUxd1lnQ1FNUFBsMGZSOXBoU29NYW1DYmVlZUlWMlRUR05PQnBJd0VDY0JxSTNrUFdvNkk4alhsSTVUbm1QZU1jcDc4SkxPNm5FOSsvU0ovd2FmaE9sVGJBRG5MRERpcmxiMWRvb0N5MC9VcHQxTUZ4bnhidzRxY20wZnFKUTdRbUtqaHZNNGtNRHMxQThxTmRZYkE1REJ1MFRtTWo2QU9YWldZL01MUEVsUTZLRFM2ZWRzL1FzcDVMRnM1MEJQMnQwcThFc0duZWdrQTlZbktRUTBhc1dEUlI2RUtHL2VIVjN5WDNOeTM4TU9QM0ZHMCtVYldwWjBpNC96TTljY1IvZzlNdGxqK3o4b3YzYThYem4yNERINXNaMXM1UlBPdDhHVkY0L2JNTXNrdmt6NWZ5andvYWh5dHU5QTBZQlduOThlaXpMVGZsQzB3TTh4Z0pTdks2L3FuRkhmMVhqS1dyVmVNZ3MycGdXYzFIbE9ETHpDNnJIdTVGOTkxZENydjBMMDZ2Ly81b0xWZXo3em9VOFM5VzQvbWFqT1JiUjg2UHpjZlkvbjlUKzVwTVdtNC85RXZPSktQZ1hUS21ZZVlVdVBhZUl2ay9udFlYV1VoUng4eTZlR2ZhOUsvVExEbUFLdWNBVWl1T25pUVgvcVJaS3dGbm9jWVJMZDJ6eUEvQmJLK3VPblVVNy9MaHBlVTAvUUZpcllwdTlqNTdmRjZvZVZac2tTeU9hZnIvd2ZWL0lOdmpNcUdMSnM5d3Z3SDhDbDRqVldIMnIxNU9pMWV0bXRYcGQ1bWtweThYMTY5VDdGNjFoTDFHdHVsZ2x1N0F0NHZlTDlUNUo1QndZcVl0V1pvVk5TZFNDTW9FNkt6aGliWVpTSXYxcVpEN0o1NHUwcjBMK1Nzc0dIRWswelpmVmdmUnBnOEphZlhXUzlrZ2psRHNlWVkxUXZ2dnF4UmZPS0NmSnNhM0xWMnludm9ySFlMMzMwRnpLYjlVWnNlYWJPbFVNVkdHZU9FMjJrWVBHYmlsb29XMktrNDFVNy9leFZIdEpyL2JmTkhaanVnMHRHL24yamQwc0JhellJaFVlbFVYSDk1TDlhSmRWdE50S3VtejRERjkwZVlvTDRXMFJQb2ZncTdpa0xsc3dCQi9qbFNmSUhSU3RObnVocDZnNFZqTnk0U2MwWjZzMENBakpRamQvU0pOZGhYTEhaNVVUSzRLWXhTV251M0FCcTF5WXpPRE15bWF1S2pIYWRqMWFMQklwMG1TNVhKRlc2dzd4c1pQU2p2Znpxb2NNcmM0YnNtRE5tZ1ZEZm5Id25zN3hFOHFmbkwxMEZmdGcwTFNwZzlxdmFidEhVQjU5NzRFVlplTUdlZ2VVMU9hVkJGMlpBeHFXVGZqeDg5ZU92N25obWpraks0WVc1QlFIRjQ1dW1ETzRaa2grNDVnNzUvZnd6QzlNNjl5MUhXRHA1SEZlc0NMakt0MEwrMVM2bDhVcTNTdm8wcmlOZEtmUlN2ZGl0ZElkRzh5NnNadFJraG5iRUV0TzhRRFd1dWZTUHZ3L3VOeWRPdGV2cXVSOUpYVzZ2M1Bsd25mTnk4cnBubGVpMWUveDhKY0EvQ3V2cXRLLzRwS1YvcFVYVlBwVDZFdkx2S3BUdXZ6ZkxQbEhrLzFxeXY0Zm83TGdpc1gvL0gvRjRnUHhlUEJkSlI3OGw4VER3SDd4VUY2aDRzSDdiK0pCVmVxdkJoVk9Kb091RWhkTXYyZTQyQUs0cU9HR1kxMUJEQmYxZlhEUkZNRUZhdmxGVE4rdmltaitSQm9SWVdGZE9VRThJYWFHS2ZoQmlxeVF2cVRSeDlBVkxtVXUxNUhJejNEM21DM3M0SVltSjZhTUlKS0N0Szg5eFpOYzVJV3JuQnJBWEpVb0YvcXZ1SXY2MWZtRnE5cFg3VEdOUHk3eVVYZmxmU1owUkZUL3lHdFBPSzduaEViRnNSOXdQSUFMY0Uxb1JjV3dYTjRIeTFWUkxCZDVwU0YrT1EvVWdEcFFBNFpSOUpZZ2VrdlFwMWZBN0FGS2lKVU1zMTJEVXB6d1RRMThVK09WQjFtNjVlRnExUFlsclNuZFVsNUYyVkpWZjJpK0NxUkcvRTN4cUl6M0ZsNFNyUnNpeWFyT09FeHVpL2ltTG9uVDcxUmJvZWZIRVZRS28rSmpNUXluck9lQW4ydmc5bC9GTG9aTkhBNHd5cTMzaHIwcTVRNkszOWxsWUp0V01kS3Rzc2kxOEs2U3ZhdThZTmZqWVRlMVZSZ3lBT1RtRlpkN2ZYNExpL0wyUzhmMUFaQ0xaUldWcFhGZG42OWk4MXN2Q3ZCY0RSOW83aFAwdVNJN0VNYjJpUVJSbnFBN0l2d0RNRnNMUE9GSkxwU0hYalFQV0tyNmJucU5pUWNoTTJHbExnWjl0elRFRjY1THl6TURtdXUwb0dQVjBFdWFlc1A0UXFtUm5pSlVyeW94dVBsTG83bXc5ZUpnazJBdzI3V1plWjQwZngzeVRTZHMrbHhhMjV5Sng3bms1T2FYK3BGK3BUcnNsa2J6WTBPbVJESFliNFlzTFhQbjRqdHg1TEorMmd5M2cwaWdrR0czUUczUDBYWmk2M3VyVkl4dTNwOVc4K3FHVTl6NW5zOE1SeDZkK2xUZG1NZlBLTi92R1BUTHJVUFh6RzBBSkFjWDNPVE9vV2ptbitBM2tTTFd3UU1VMDkzUHI1Y29qbSs1ZWZZcTViZWZlN2E5UHJoaFhzYzdVMjlqeU02ZTFEaTJ0bjdJNnIzUnpoNjB0NHV5aHZaMktlZHU1Nkl0WGFUTXFFdWxLQkpJcEdjamNORWlkblNpcERGV1dvR2VrMFFrUllQR0RCczBNNmVrbEpKaUhpQlB5Z2xLUldJb0xYY0E2aWdwVnRsZUVzUnNMbXdRWXl1OVZJT1laSEtwNEZVaGYySG5tRlcvZGtWU3ZGelJ4Syttc2wvOFQ5OXVNbzhuTlR2alFsV0ZlWjQxSXNtajhwajJhZ0Y1akwxYThybWJyOVN0cGVBUzNWcW9WeFp0ZVJlSzRaYzBTYlk4ZHo0U1RZTDFYMnZiZ2xHSUs3WnVFYWhmODVMOVc0Uks1ZlRGTU03L2QyREVqalFJSFNpYUZEb3haQkhkd1g4QlBsU3hyZ2pmRWFaZlhSSkEzaGoxZWNiRDZNRnMyOHZEV0hRSkdJdFZHTU1Jb3dyaXY3YUFxdTUwUlJpcldlem1Ta0JTRXg1a0Q0UFRUK0VzQmIzcG5zdERpcDZuYXIrY0Q2SzhBa1I1OEFLdzBlSHJBYUh0b2RKSDlzT2xQNGFNV2p4Y3pVaGJVZE5vZEZlU0xaTTFGUDJoaTMwSlY5OFZrV09OeHZ0K0dwWGFsMGJVb29zQ2dQejVKNERSTGFiNXQzSHhPaElYcnpOZUt2NDMrMGxTc1hMbWJ1eFVkbTRMYXorRE5aZnc1UDFCOTR2RS8yWlIvMEhkYnBiZEc3MGx6QkdXbHZ3VDd0a24va2ZpNG4vR0s4VC9QTXl4UGsyOTkrbm8zWVh6WVJnZ2c5WUE5WW4va2F1SS94bC9ZUHh2WE1RMysxKzdpMk8xUVpHTWxrazRvMmlwVUt4M2l2WXhMcDByeEhNdmFEWkZka0kzTFM4T0MvbXBJZ3B5OUZGNDZOd3lrbWdUQ3p4U3laSFVqY2NDeWhtY2VuU0tsQ3NlRlBUYUpLc3gxVVlwTkQ4YlZTRUg0a29XOGNnWWZVS1N4UmJKbWdDUlUralJlZ0xsQkNRTTFpSnlvaDE5MG1xNUErdmFwQngvdTMzQko4cUhCZDltTFUyYXNtYkJ4M2tTV2FQOHo4ZC9VTDdaSzVHS0Y4YzhNbStYUkQ3NVBja09IOTY3dm5taGJWVEMydkhYeko0eVhubEZXZE90bkNMWmYrajQzZTg2Wmo4ei8yVFVSeVNjQkh2SENqdDM2eVc2MWtqdWFJRlBjVXo4bHZYdFpDT1Y1cDRTb3dWU1h0V3VpV3R4SStYZ0QzS1pqQzVISTdFVXRxOHV4ZXhtVlQ5dXJQb3BwVVVoY3JvbjJILzNHNkZmZzJaUGZFK2NwcGl4RWhlMHVLaFRqcWI5UWlzbHlyUDlRUGZZT3llTG05UnY5NXpzL3JybjRPbEFpZGhDTEIycm1jTFlReWZ6QnpYUndUYUVsMmlrUTBYcXBacnBDTU1pZG56ZnVZLzdZWE9uTVRhY2Rmb1BtellWbXYxUCszVW1LaTgxY1Q2TFNzcSs4ODY5eEx4ZC9jMDdyOCs4czM3UXZDT3lzUCtwMTZrUzhQSnpQMzA2RHU5YjZQejkwWmhnL1B4QjVJWGRiQWRWZU1OWjZnNGFHQTlUT2lpd2ZyWm4vRFFlZ3dlTDRqdFBETjRxZUMzMFIyS0NLYzZzNUFFWHdTeTdCOEJHU3NleThRcFJkcFVITDc5Ni9lNm5TeUFsb1YrUHdLVnhWSERSRHRPb3VQSlRYQlZ3bGRFNFlCOXN1YjJTMXk5bkdiQ1Vua2krQzlBazU0SkF5R1V4cTFJTE5hUWlDUExqdCtoY01ncEJER0NGVXB6WUJrb3F0Y29HMm03OXFxbjZVdHBCLzVoeDlLTVRYQkl0YXkvT0NSTG8yWXNmYW5iQUZWWnRsSE40RUlqZUVHa3pncFVieVFibW9rODhSWXVyTEZnRlRoM3pyTjZQdStqUW9UcGhUKy83TmVOcW92L3pheFl1Vk82bWw4SXRoZFhWTU4rYUtQMkN6WlhDNVhCRktQWGk0b2FSdG9WTWo4T2RXQnpmbllIR0RaTllyQVhkVjVJTjBmNlMzbUxWcExPVG5pTHh3a3dXTDZSdHEyUHhRbXBwQmZ5MFZobHRVaG92RE5ocHVCQldRVjBTRDZCOXg1N2J2Y3RhaDQxZStlbU9mZTFWUzJadjJEdUNISmx3eTd4ZFk5Wk91aDNXWVR6NTVzRy8zRCtsYnVYSVk3YzhlR2JMOWNQV2JQdHN4MXcrTUdqUmM4cXM0WUQ4Uithci9VNEZySDJ5QXJTVEw5bXh5SG1KamtXWU15YW9ZQ2FKWGFKZGJkeDN1ZVpGNk1udTI4Qm9HbXB4RjNVeDBuWkY0amIvL2h5eHExS1hDQ1JOQTdjaVN3Kyt6Qnd4dUhSQms2VVVsdDV4NFN3MTk4ZmlTN0Y1cG1GZiswdk1NLzBTODh6b2c4c3c0TktacHNhWlU2NHdYWlYzOTUzeEZwWldlSWtabjFabEpKdXpIK2FNM3NkbGw1ZzFhcDVGZmprRk5tQ2VMM0o4Sm9EUVpSUFEyNWhtdVFDWXJvTEVwQVExUWNHTHprZ2F0Y0tNQlBWd3pjc1N5Q1Y0VFYvd2J1a255K0FpVUwrNktMTUExNG4yWklKMXdsaDBQMTJaSEY2TU8xOU5WeVlNUHZiWG1jbFBCZjJGL1prMGE5VFlNKzMxcC9iTHZWU3ZQLzcvcHRlZitJTjcvZW5lN2YzdWtzMytCQlYzZmpVKzNYSWg5cEM2Qy8yeVBSYWRGb0UzV2lodlZFUFNqRGVLckZvc0MzQkxqMmk3Q21SZmdpejZXNEJQTDVZL0Y2M0dKeGVMSFhhZVI4SUM3VUxZd1VYY1p0VnV4NXdjZEI3ajJSUnEzNnRJbGs2aDBCMU9USGFpSlo4b01HRUFzams5R1JEQnpuYlE1L2xZSXFUSkY3TFE5YlZZc2Q5L0VueU1pTENqZE5ZNEVRWEpGalNIN0hrb29JRkhwYXNuOExnakovQmdhd1JuVlZ4bWZCWHRrWUJub0VlN0lISUxma0lxanUwa2hqRTBJMWZObGgrai9PL09ZOHAvSkk1Y2QzVDVudS9yNi8vNTFCZktHWnFUTStUZzVuWC9WSk56LzduK2daZDU0MjIvZm5qS2MwK1JvM3YyS2I5a3NsQS9CV1RoQUc0Z1dLYVBjcUVzdElpQUZ6aFZCVVV5KzJVL0xIeTlMMXhsejBKRVZLSHpaZ2hGUkVrU0RVT2dCOUtlaExWb1dOYUFweUNDbVNRUGhkZUtFZ0MvU0VOckNXVURscVZVVzBObUp6Mld5Q3FxM1Q2Y1dmQ2pzbkpXY01pbFoyQUFWYXF5eWlVWVd2YUxNakZFbERyMGxEdnBTYjE5dlJ6WTUwUER3aE5xcWJ6V3hVNU5SRWs2ZGZ1TmRYWmI0NDFicHpCSHgrdTdwKzVCUjBmTHpybU5LV0x4cUd2dkhMSGowOUlRS1pWbDVYY2hvWkxmVE5JR2psazhlTnlQeHBjeXRTWTRzN204dkdWR0Rmbzh0aDFIbjBmMWpHbSt3bUdUZ2g3UWRaNysrT09uOTM3NHg5bGxMYzFEaTZsblYxRHpIN1p3Q2NDRGFJK3grQXdJUEVzeDJ5OG5HdkFvTXFyckcwNEJlVkJiWHowM0J6MEFtRCtiWVdGcS8yVmEvRjlxNDhUU0prNzNsN0lkbDBQeDVZVmJoZFpNOHpuVUgxSkN6OFlXL05HeWFUMXJza1pQNUk0N2hCUlBNUkdaUDRTNlFwNkpPRUxVR3V3bC9EcXdHZEs0Vms2eWVNTUdaaDJrUktxUVZibXArclN4Z1VZaW1BUkowVXBrT1RFdGV0eWpBZmtobDBZOVg3SWVqOW9VcktDVjBacmtmdlg3T0QwK2R0bWZRUnpmZDRMcjAxWGkzL3hPczQ1KzU3eW9sMFZjQXd2Tk1Qb245UGU2eFZmK3ZhNUMvZjFzNFRFeUJYaWFsV3RnOWVtQVlGU20xUUtHdnNkbnNpNlVORk5aajhqVVUyUW1xWkVVTEVIVSsySTBOTHQxMUFUZmVCMUowUlVIRzh1clIyc0NMVDhaMk9CYVZLbHBLQzBmZkMyRGI2WFFRUmJRODl2cnVKQUoyYWIyWHpqRDNIYnhHZVl3c3RFV09jTmNPTzFhWEtsdEtDMGJjdTBvUE1UOC85WFo2VHkzUkhpTTMwZnhYWUM5NVNuR1UveFl0ZUwySTk1bFk3clBGK2tJb3g1YXFxSGxvakNIY0M3N3dPbWpKWDNSbFpCemJYQ1ZraDVaa3k0dXlaWWJQVVVYbHlYUVo1dGZ1RkpMV2tlUDg0M1ZtWXk2a3VCZ1dDa3k4bnI2QWJGclMycUgwS1diOFJOL1ErN2lTcDZuYXpkS2ZSdFpTUjdYa1pmb09ycnhuQ05jU1NuTGo0c3BPVmk1U1R4ZXNZWUtyRk1zS1dZZzBVVFZLSWFaWGVwd1IzQXRtM09EL2E1eTRBcnJmczQzVHFkTktRa09LYXNlZmYyRlZORFlseVo0cEFsZW9qUkJZVUNxd0k1TFdHV1k5WDhGZy9OcVlPaERRd2lEeG9rd1ZJMjUvZ0tLYXJ5QXZnaTNnOWo1Q2Z3N3RNZW5sQUFjMG9COUpOUVh0Zk5EV0V1YlM2Z3ZGL1YvMkxIK3dGMTNIVmhQdnBseDExMHpXdTVhVDNXNzl2Tm50RWJBalpIS3BPRmNLSnYyZTdYNi9YS3FnU1hCc1k5b2d3bFhwTUdFcExYUWM5UXNjS2xXZFdTSVZDckJrQUYxU0VhVTZ1anhVZ2c3VVRTVmxUZVJEOWlSdStSMHBLVmlLKzJtMkRTczlJSlh4ak81ZFh3TzdhR0E1N3ZvNGp0MTZDTUhxY1IzS0lvMEp1cjd0NjdJMytJaE01cm9uOU8rNzZ5blJPQ0N4Z3pSZGd4NC92YjVMN1N0MnNXZ0c2M2pRcDdJbWRtVXdZbTBNc1pqVWl0ak5FaGRZYjJPZnBBQ1RFRERPcmlYMEhoRVduSjNLSTMybFVsTE1aUkltYjZRSm8wMm5OSEJPNDYyVEpIVHNFTkJ3Z0NhQk9tQ3kvd0NkSnJyWXdrYVZmN0NnUUYzbGIrYWl4UWJhdWhKTUE2N0UxNVNOSkh6UGpsUDR3eU5ac2F5Qm5Mci82Z1ZoaThvLzZqaGIrNWRvOVB4NjNzZnJpYUpMNmpuZi81VGVhQ2VmSDV6N2VCQmkvK0xXR2x0NFpHOWk4c3J5a3R2ZnZvWVBRV1VPTHFaM3V3V2RnZ3Q5UHdyTzBhcWFYR2FJZEh2RDNOTWtBdStTTXNuUE04K3dReG1qSThtL2VwT3FXMVArajhaQzRrTGRJaTRxdGhrUXJ0em90ekg5T0JrdTNyNG15cjJzRjBLRWYwWjlOeEF3UzJJYmhKWUd5VDh0UFhycHdVN0xCMWFWMVdWY2l0NUFCN0hrREtVQnJKUzJZd1Bwb2ZBUnZoWStCaDJneWV1SDNpMGN5dzlRVWg5VVdWdHBlZ1M4VTk2OGpqYThaOFRkdEN6T0xMZ2VnL3pIWUV5RnoyU1EwckQ0MlN6RE15MmxwTnovTEhUT2ZLdTVuUU83TGFXVGFOKzNWM1oyVTR6MjIxNE9KNFRKWVFPNjR0YzJTQWcwakt6V0JzTEV6VUtVekpRcVU0VFpTY2U4YW16WHVaVUR5N3VsQWZYTTQvZGRVUFFVK3lsSjN6d1hFTnpYVjJ6dTRNZDlaRzcwaGs1Nm9OTTdITUtCTklFNG1JMXhVVWF0MHJGUklvLzVPUXZkMEpKK3RYaUFCYy9UZldicEVRZ2p4MWI0cnpjc1NYa1lzRFNMd2FwSjNyZXB3WmgwWDVBWWNGOG9nRDNKd2FQWER6UXo5Wld5dlRUNVhYNUpDK3VzRjlkNGE1a1owRlZ2cE1DR0JKVFBKVHVhNjRXU0RBUndRU1FpK0ZuK2I1UThRRDhydGdEUHh0UWpKY0RrRjhVVzJpT1lRRHBZV0FaMEVNbDBFTVFTNWFqOUZDR2RUR1oyWEJWT1JDdXl2MUJsU3k2RERtbFdNb3NlY1ZRUWxsRmtGRkc5cVhQZTdrS2Vvay9FWVk4OWN6ak1TeDNFR1VRSlorTFQ0cTVQRFhSZmFWOVJjVy9sM3NsZ3YxU3dINVpoSjVpUzhEaWRZQjV2Nzh2NGl2K2p4R1ByTm1ySnJ2RzBGMGFRVGNqUjltQUZYNWxvcHlRSGZ5Qm1DVlh3aWlmZGtWY01qTCsvd0M5L0p2YWVOcGpZR1JnWUdDVW5KV3JvMmtYejIvemxVR2Vnd0VFenBjK2FJYlIvODMvWlhCa3NNc0R1UndNVENCUkFFcFVEQVlBQUhqYVkyQmtZR0NYLytmQXdNQngvYi81LzRrY0dReEFFUlR3QWdDSHRBWmtlTnB0azAxb0UxRVVoYys4dndRWElxRlVLazBreGw4a2RCbEtDSUZXcFlnSUZna1NSSU5FQ1VFSlFscUVMcVJrVVZ4SUZrRkt4eUlqWFVoQnBJUWd4VVhSVGQyVUx0eUVJbHFrQkNtNktTNEtpc1R6SmthamRQRngzc3liZStmTk9YZkVWNXdKQXJDSUVPQTBNU1ZlbzZSZUlhNVdjRVcvUjFvZndRVm5GaVhuQjdJa0pwWnhUdjVFa3M5T2lGdElPUnVzdVFhb0ZncmlKVTZyQnU2b01wSnFFaU5xR1RQc1ZWQVJwTlV6RkxuT08ydVlzclcyeHgvcU9HWkdNYVpIRWRKQmVMcUFncDZEcHg2U0FxOGJ2SzdEYzdiaHlUVWNWT3ZVSFR3dzk3aTNDTTlFK0k3NmI5MWt6Ukl1cWlwRzlHUHVzMmZnQU1JNmdRRXRFRkl2Y01QWndiZzlNelVteXppaEt1M3Z6anEvWVJoNU5RZFg3aUpIemFscDVNUlpSUDExRWZNOCszMW5yWjFRZzNDNWRzMGtYTjUzVlkzN05WK3pZb0gxOUVoazBjZXp1L0lMak43RWdHd1JydVVxaXFJZis1d2xlTlNZTWtoMHZmZmZleFNuVkJ6bjdWbnRNM0tGdmVMdExUT01yRFM0TEN0SXFTQ1MxbnY1RFdQaU03TzdoQ0hmeDBQSWs0ejlGam1MaE0zR1dXRHZUd2pMRk1adHJUbUpzQ2tqSERESXlPUE0xM3ErQjRGSDJHOXo4RFBvd2RsdVAyY09kNmt0OGthL1ExODNnLy9obVNwVy9SeDZzVGt3TDdXS2VkL3pQUWdNOGx0Mk94bjBRditmMEh1ckc2VGhlMTlrcjA0Ry85TFBPYlRLSEhxeE9kaThyQWFiS0FUcXlOa3ppUWk5bktaM1ZTQncrSytLNi9Ud0xSbnFnQzNxYmVwTjdqR0hMdnhuVW1hUi8wU1RNOFlaOStjOGdoS3hPaUUrb0tabm1BbHJ4VlhXRU50WFY1R1dUem1MSHptREljNGJNUmxFRWYwRm12VFJPd0I0Mm1OZ1lOQ0J3aktHWFl3aWpIdVlZcGkrTVNzd3V6SG5NSzlnZnNXaXh1TENrc1hTd3ZLRWxZczFodlVVbXhCYkJkc1BkaG4yZFJ4NkhHa2MyemhPY2J6aFpPRE00d3JqNnVCNngyM0ZYY2U5aS9zRFR3TFBESjV0UE05NHBYZ2RlQnQ0ZC9FSjhZWHc3ZUVYNHQvSC8wNUFSeUJBNEpqQUQwRU53VERCTnNGNWdsY0VQd2x4Q2VrSUxSTDZJMndqUEUzNGo0aVB5QkZSRGxFWDBRbWlSMFFmaVhtSTlZamRFN2NSbnlWK1JpSlA0cEFrbTZTVzVBekpVMUpNVWdaU1hWTExwQm1rMjREd2xJeUp6RDNaQ05sZHNnL2tic2xMeUc5UjBGSHdVU2hUbUtKb3BPaW5PRXZ4bFpLWjBoeWxQVXEvbEJXVXM1UjdsSzhvZjFQSlUvbWd1a1pOVGkxQ2JZcmFKZlVnOVFNYUJob3RtbUthY1pxTE5GOXB4V2kxYUszVHVxT3RwVDFKUjBTblJPZWFycFh1TmIwMHZRNTlEbjAvL1duNmp3ekNEQ1lZM0RKY1lLUmd0TVJZeS9pT1NadXBpZWtyc3h5emUrWUI1a2NzWWl4YUxOWlozTEhVc2x4a3BXWFZZZlhFMnNYNmxrMmF6UkpiS2RzYzJ3TjJVblpUN0s3WUc5a3ZjdEJ5dU9abzVoam51QWtIUE9CNHp2R080eGNuSGljZnB3Nm5JODRHenBPY3Y3Z291SlFCNFJTWEhTNDdYTzFjRjdrZWN2TndXK2VlNXlFQUFKZUVsK1VBQUFFQUFBRHBBRkFBQlFBQUFBQUFBZ0FCQUFJQUZnQUFBUUFCTFFBQUFBQjQycDFTd1U3Q1FCU2NMcWdoR29JZURQRmdlaktZYUcwVlVNdkplSllRTUpwNFF3UWtnaVcyb040OWV2TG9wL2dCUm05K2hRZS93dGxsUzdDR3hwaE5kK2R0NTgyOHQ3c0FNbmhGQWtZeUJlQ2Ezd2diV0dVMHdnSnBQR3FjUUFYUEdpZGg0VXZqR1pTTnJNYXpXRE5hR3MvaHpBaHpVMWd4UGpXZVIxR0VYZ3ZFUlkwenlJcXV4b3RJaXdlTmw1QVRUeHEvWVZtOGFQd09XM3pnRUI3NnVNY05PbWpqRWdGTTVOREFPdGNqMUxsL1JWVGozeDZaMS9EVnZNRzliZGdjQlhaaTRnQmREbk5DeFZkUmsydVQ2NUR6QlprVllnOTNTcTFPUnBuUlVLRXE4NnBrdFRHZ2t2UU4zYVBlTHRseE9wTWE3a1NkOGQ3UnpCTlZ0MCsyOURUaHNIcUhPZzVLVktweHgxYVJwZGNTdS9iWWQwUHhoenJENXJlRHZZaDM2THdaOFp4ZVlVZWRwMFFCT1hXZVpWTnhScmZqb1JWN1cxYk1QM2xYQVYrQWl5Mk9Xeldzc2JiL1MwbjIxL3RuMXJUKy9ub0tQM21uak03WnVYUUl4dWQ5ek5vRzZrWDJ5Wkc3dTJvdXNOWThiOElsM3RldndrSCtHNTNRbERKNDJtM1FSV3pUY1JUQThlL2JLbHZuN2h2dTB2Ky83UVJ2dC8xeGQyZXdyUzJNYlhRVUdFNFlMb0dRY0lOZ0Z5QzRCZ0ljZ09BV0pNQ0JNeDRPd0JXNi9YL2NlSmRQM2t1ZTVCRkZXL3l4MG8zL3hTZVFLSWttR2d0V2JOaUpJUllIY2NTVFFDSkpKSk5DS21ta2swRW1XV1NUUXk1NTVGTkFJVVcwb3owZDZFZ25PdE9GcnBFOTNlbEJUM3JSbXo3MHhZbUdqZ3MzSG9vcG9aUXkrdEdmQVF4a0VJTVpnaGNmNVZSUWljRlFoakdjRVl4a0ZLTVp3MWpHTVo0SlRHUVNrNW5DVktZeG5Sbk1aQmF6bWNOYzVsRWxGbzdTd2ladXNKK1BiR1kzT3pqQWNZNkpsZTI4WnlQN3hDWjJkckdWMjN5UUdBNXlnbC84NURkSE9NVUQ3bkdhK1N4Z0Q5VThvb2I3UE9RWmozbkMwOGlQYW5uSmMxNXdCajgvMk1zYlh2R2FBRi80eGpZV0VtUVJpNm1qbmtNMHNJUkdRalFSWmluTFdNNW5WckNTWmxheGh0VmM1VERyV010Nk52Q1Y3MXpqTE9lNHpsdmVTYXc0SkU3aUpVRVNKVW1TSlVWU0pVM1NKVU15T2M4RkxuT0ZPMXprRW5mWndrbko0aWEzSkZ0eTJDbTVraWY1VWlDRk5uOWRjMk5BczRmcmcwNm5zOExVNjFTcTNLY3JYY3F5VnZWSWcxSlQ2a3FYMHEzMEtJdVZKY3BTNWI5NVhsTk56ZFUwUjIzUUh3N1ZWRmMxQmN5U2JwaDZERXRsT05UUWxuaU04bFlObjNsSFJGM3BVcnIvQXZab20vZ0FBQUI0MmozTXJRN0NNQlNHNFhabDNkaHZTV29oRy9ZWVBNR3hKVEJEcHRhRUswQWkwQmdrWE1zcGluQnpjSUJTOXoyZmVCLzhkVUYrWlIzR3U4Rnlmak8ybFREVXFFeUh1cWR4TmxPVXNCOFlpcXBCQVd1TXErWXV0Z0Y4RVJIaWxZTWtSQXVIa0NEbkRxT3FlYktRYStZOC9qVDBEeHdUVjA3cFRUWUJXTkdlaUJreFBYam14T3pvV1JEejNyTWtGa3RQUlN4cnp3bFJ6ZjQwcU9FTkRudEZuQUFBQUFBQlUxQXdBd0FBKSBmb3JtYXQoJ3dvZmYnKSx1cmwoaHR0cHM6Ly9jZG4uYXV0aDAuY29tL2ZvbnRzL3Byb3hpbWEtbm92YS9wcm94aW1hbm92YS1yZWd1bGFyLXdlYmZvbnQtd2ViZm9udC5lb3QpLHVybChodHRwczovL2Nkbi5hdXRoMC5jb20vZm9udHMvcHJveGltYS1ub3ZhL3Byb3hpbWFub3ZhLXJlZ3VsYXItd2ViZm9udC13ZWJmb250LndvZmYpIGZvcm1hdCgnd29mZicpO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH1AZm9udC1mYWNle2ZvbnQtZmFtaWx5OnByb3hpbWFfbm92YTtzcmM6dXJsKGRhdGE6YXBwbGljYXRpb24veC1mb250LXdvZmY7Y2hhcnNldD11dGYtODtiYXNlNjQsZDA5R1JnQUJBQUFBQUdoc0FCTUFBQUFBeVhnQUFRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUJHUmxSTkFBQUJxQUFBQUJ3QUFBQWNXM0s0eWtkRVJVWUFBQUhFQUFBQUxRQUFBRElEQXdIeVIxQlBVd0FBQWZRQUFBblhBQUFmcUpPcmdwUkhVMVZDQUFBTHpBQUFBZ2NBQUFZVVRKNTFUVTlUTHpJQUFBM1VBQUFBV2dBQUFHQjlzc01zWTIxaGNBQUFEakFBQUFHTkFBQUI2cm5sUko1amRuUWdBQUFQd0FBQUFEZ0FBQUE0RHNFU2dtWndaMjBBQUEvNEFBQUJzUUFBQW1WVHRDK25aMkZ6Y0FBQUVhd0FBQUFJQUFBQUNBQUFBQkJuYkhsbUFBQVJ0QUFBVGYwQUFJK296WVZ5Zm1obFlXUUFBRiswQUFBQU1RQUFBRFlGcnd1Y2FHaGxZUUFBWCtnQUFBQWdBQUFBSkE3QkIzcG9iWFI0QUFCZ0NBQUFBbEVBQUFPaXRtazZyR3h2WTJFQUFHSmNBQUFCeWdBQUFkUU5wakhjYldGNGNBQUFaQ2dBQUFBZ0FBQUFJQUlHQVQ1dVlXMWxBQUJrU0FBQUFYa0FBQU9NVjA5OTdIQnZjM1FBQUdYRUFBQUI2UUFBQXR1TUQzdG9jSEpsY0FBQVo3QUFBQUN4QUFBQkxSTVZIOXAzWldKbUFBQm9aQUFBQUFZQUFBQUdNQVZUVUFBQUFBRUFBQUFBekQyaXp3QUFBQUMvdnpWMkFBQUFBTTkxNElSNDJtTmdaR0JnNEFOaUxRWVFZR0pnWVdCa3FBSGlXb1o2SUsrQjRRbVEvWlRoQlZnR0pNOEFBRjdyQlBZQUFBQjQycjFaUzJ3clp4bjlac1lldjkrUE9MNk9rNXZyZTZ1VUZ0UWJLS1hnaWdXdDBsdTFnclNVVWtKVnBPSU5DQkhFb3BJM0ZEQ1BEVlo1cWdZS2kwanRLaEtJeGUybXRQWGFFZ3NnaGR1N3NGQWxGaEdMdS9DQ1JZZnpuUms3NDhTT25UakNSN2JIOXN6LytQNy9uTzk4WXpGRUpDcFZ1VWVNcjMvbDI5K1FzQVR3alRpTzZDL0cxNzc2TGYxTzNFLzR6Y1M3TFZuclR2aUZ4RnI2eHRJTk1hMC82alhtOCtidmNlWlYvTDdxSERwTjU2YlR4YlBqN09HNDRkUnh2TWZYdXROM2JqbnZPd2Q0MStjaFhnK2Nqa3g1T0p1NHJvKzJPa0FEeHkxKzI4QTFPMlBuYVV0ZGZMc3ZlUnp0VFdpcDd6OXo3SmZES1gzM0ovK0tQdHozQXoyZTFOZXg4M3N6ei9pdk04RFlCemdhVEJ2TjJQa0RQWGZzbStab2RuMk4yT216RzcvKzZKZ3o2ZzJQTlpyNnpjdzQ4UnhkYjc3MlJ5MDAzRGhqNWJyT3pqQnFSMWVNdCtIMDlOclJISHE2Si9EWnhQNjhDcGh5RFFqSVhZQXQxd0ZiUGdyWThpTWdJQzhEdHZ4TWZvWFhWd0JiZmdmWXVPNWVDUUpwdEJQRmF3S0lTUXFvU1Fhb3lUb1F4WHROMXRpSExYY0ROcTY3RjN2ZTM5UDlnQ2tmQnl4NUFBaktKNENRUEFpRTVaUEF1bndLaUVnZHVDS1BBaG41QXBDVlo0Q2NmQkhJeTdOQVFYYUFvbndUU010TDhrUDByak1abjBOSGZvdGVYZ1VpOGlaUWxMZUFvcndOMk5JRkl2SjNPVUFMN3dJMStZZjhFOGUzZ0pxOEI2ekliYUFtL3dMUzhyNzhHK014MEhjTkViMkdTRjdIdkY2Uzc4cjM1UHZTa2grZy81ZlIvOC9sRi9KTGpPSVZSTkFNTk1qdk81YU52amFtNzRKRkh0aG5UYkJTMWFLRjk5N0M3YUVOM1cramZUUll0TTBKakFOVDhleWZOeDUrUHB3WSs0bmU1bXB4a3VwQlZhQzZnd3RacFlOaE94NVBXMWl4WFVEMXVZdTFPOEEzK3pqUzc5djQxT2FLN3MvU1FqY1h1RE00cVF6ZU9UZDFkaU1OUHppYXE3TTVybUg4dElWUmliUDZ3UUJIWFdjVlNuU28xNktWUTR4S2RhcXRuN3hNMGthL0dOY0hlemkvRG41c2dOTUdPTzQrYkhEYkJNTlZSVkxnUUFSOFVDMUpVVXV1VVV0VVg5SmdteXBLa0lxU3BLSzRxcFdob21Tb0tCWVZKVU5GeVZCTERHcEpqVm9TbzViRXFTVlJha2xDUGdQazVSSFpBbTlWVVlweUF5aklObENRcDRBQ05XYUpHbE9peGl4VFk4cnlKZUFTbGFaQ3BVbkppOEFLOWNhazNtU29OeG5xVFlaNlU2UGVKT1ExSUMrdkF3WDVBMUNRTjRBQ2RhaENIYXBRaHpMeURsQ2dHaVhrci9JM3RLK2FsS0ltQmFsSktXcFNrSnAwbFpvVXBDYWxxRWxGZW9zTnhPakQ4aEVvenA0cWpoV3dyaVBXZDJPTjh0eGhHL0FPSFNlSzFkekc2cmJjZGIrUWZlM1BoUTJ2dHkzdVNzMWJtOU9ZZXVaK09rT2VPbzB6WE5XbkprQmxuTnNqL3ZuZU1jNnV6OWtjenErUncxZnFtUHFQdytsam1FL3JsUFVYbWhjYWZyMmdSMUEwblczMlZjZE8yTkNkd0wyeHkyLzNnUTZlQXpyR0hqMWpHNS9WWFRSY24rSlhzaU45OGZKUTYyaU5aanU3R2FQdkRwM1JLSXJ6UnNlRUFxbGFoR1VUTU9SamdFWC9FYUJtMk5TTU1QbXE2bFNuT29XcFRxN1RDVk9kREtwVGh1cVVwenBsd000cXZJYXFVNExxWkZHZExQYVhwRHBaVkNlM3YxWDJGNkE2QmFsT050VXBSWFVLVVoyeVZLY2MxV21kNnBTVHo4cm40SUJVbzNMeUpIQ0ZTcFdUendOWDVHbGdtYXBWcG1wdFVMVXVVYlVxVkswVnFsWlZ2Z3hjb1hhRnFWMTVhbGVDMm1WUnV5eHFsMFhWQ2xHMXNsU3RIRlVyUjlYS1ViV3FWSzBxVmN1aWF1V29XaUdxVnA2cUZhWnFaYWhhWWFwV2hucVZvVjZGcVZmcmlHc1UwZHJFcXR5UDZEeUFkZmkxL0FacllWb1YxUzdqTDhZZHRMcEdidTByczg3dEVqcWVnMVk5cXJPcTBvcXFwYjZHbFZHSDNPd3hyM1Y0VG85Y2JoOXhoanV4NjkrSjAzMzhjV1Z5T1lDV20xcWwwVTBja0dPcWpUMitxZ2IxNkRLNnlycVR2djRvWC92cmtzbDEwbkhPdVhVTnVMaUZQdk9ZdDNJKzd5ajd0OEI3MWVrVzBNQXpDcTIraWRlOVVjOU5qcnhIWHU5T2MwaCt2dUpaSHlxWngwUFg0eHZjK1JiM3ZPdkhnOXc1UVp4eEgxa1g5dm1Bb3VjRGxHbXJaSnB4b3JJSW5hZ3NxbVNheWY0czhpcEdYc1hKcXdSNUZTZXZrdVJWbkx4S2tsZHg4aXBKWHFYSXF6UjVsU0d2c3VSVmpyektrMWNGOGlwSlJoWEpLR05DOWFGY2lwRkxjWElwVGk3RnlhVUN1VlR3S2hIbFVwd3NLbnBaMzgzM2JxWlh6cWdXYVN3ZlJBUmZSZVJNK3kxbFN1QlB3U2N3dnN0VXg4NVFmUmRUM1lWYlFNWUhuMWFSVWM2WkFiemR0czFNMUtJclBpUC9SL3R3bHo2N2RVSDV0QTUrYk16YkdzN3NJQTVSSGYrRWV1am1ZaFhhR1NQcHF3ekE4dEc5SDYwMVpuc0lqTGFwSG1BaERXNHVGSGQxSkt2cVJLYTV6OU8xY1Y3L2VzcGpXM1pSNHpmeGJFMnNIRlZUV3F3ODJ6amF4SE9pRzRQaWR1Ym1XR05pSk90dTFoZzVyYWF2aDduMkpqSkFlL0wrbStOdVhOdmRWK29rejFEOTY5a21QSXRxdlVWdjVXcDltaW9mcFY2YjhqQmdRN1Vmd1ZsYlFNeW4zVWw1REREbENTQkRIVGNSNHlkeHZpcDRVbDRBSWxUa3RFOTVJejdsdGVYUGdLdTJNYXB0bWhWVmlBNHdBSlRwQTIyT2NvayswTWExY1l4YlIxeGtqc3B5MUd2TVVWbldxa0htcUNUdnM1V1pxUXk1QzU2c3pIeGx5SWZrSGh4cjFrcWhRcnNQeDVxN0RIclRNak9ZNjFETHpHT1hQTWVvRHJYQ2JCWm05b3pRTitZOTM2aDN5QXJ5YVdDWldhN0tHRlhsY1dDRmU3SEt1RlNadFhMeVBMQk1IMmd6Um12TVdrbG1MVU4rTEQ5Rjc1cTdET1l1Zzg2NDRubENqV09WY2F3eWpxNEROQmpIcXM4QnJ0RUIyc3hnV1RwQW0za3N5eWl2TXB0bDZRTnRYRjNGakJMZSt0ZXgrZzl6SG85aUZvOWhoWFY5ZFhXZndxcStpTlY4SGIyL2dkVjdoejI5SjJib1A1ci9iTEYvZ3BoYzgxaXhEWjNxdTd1TmlxVXVwOGRxdDZ0M3RYbGZZK2NrTTgvL01MWm1aMFB5c2psUHRwci9UdEpjV1hnQVI5ZkYrODYwKzJmcWUrZXB1SDNmYkUvU1dlMEIwZDJiTmNmajQ4WUk5eWFPcXp2RDZjNlpPOVdOejFKYloydSsveHk4KzZHbjVvcFI5WHVVYTV1VHhzcTJadDBMYUIzUGExbzNUR3Zyek9OcW4zWlhrL2Q4dS93SGFuOTZySS85QzlRYXIvaEgvMktjKzg3eG92ZENGcjhQUG91aGpCUHo0Q2xSYXNoRlAvcnkvM2hzWG1EME9oZDZWNnNEeFRlUm56VlhXOHpTRnZKNURMa2tCeVNReWNySWJCVWd3WndaazRlQU5HdThBR3U4SUdzOG16VmVpRFZlbURWZWhOa3l4Um92eWhvdkpNOEJhZmtPWUxCeWk3SnlpekxYV2N4eTF1aitkb0hPWVoxakt0QXRWT2dXTHRNdFZMeng1UUgxRk11anNhcUxxTkpGTE5FL2xPZ2NTdlFNbCtnV1N2UUpKZDhkNzJHbHE5NGd3SG11MEJ2a21FZHRPcWNRWFlGTlYxQ2tLM0Rka3Mwb2xCbUZNT2NmNGZ5am5IbU1QcUZBbjNDWlBtR0pQcUZFaDFDaVF5alJJWmgwQ0RrNkJKc093ZmFjbGtZcXhrakY2QlpLZEF2dWYyNDU1dkRMakdDQmJxSENPQmJvRmlyMENSWDZoQUpyM3hEZFFoQ2ppL0Z1WEE0anIyQytEMkU5bjhZTW5zSDRuOFc2N1dDOW5zTTZ2WWxldGUxMzJlb3R1ZjAveXoxc1h3QjQybzJVejBvY1FSREd2K3J1M1JnSklWbDNacGVKeUJBa2lJUWxlUElCRmhaUkVKZEVjOTBrbUFTV2pmZ0h4S0JlUFBnRW5uMEE4UWw4QUk4ZVFnN2lTVERtRVNRWFUxM1R1K21aN01nY3BydW4rTlhYWC9WVUR3akFLQ2J4SHRUdGJQWXdBc01SM04vTFRGRFFNS3ZyblkrSXVsOC9kL0R5Mi9xbkhxWTJ0dFkyMEdCQ0NXV2ZoTmN1NnhHZVlRcHZNSXN2V01NMnloeC96S3Nqbk9HYVJxaEJiMm1IamlWT2RKcG8wTG04Qi9TVDdsU2ttcXFuanRXRitxTmozZFNyK2tDZjZoLzZ6a1JtMW53d2grYkVYQ1c3bXN0a0xwVVRuZEtNK05Db0lrTHNISlo0Skk3WXNTSmpVSWlxNVZKaEljclhDbk9wb0JEbGE3MG81Q3VmcWhlaW9neVZxRmNjVXg1OCt3cDJzWWQ5L3ZKUG1OckJKcmFrRzZwY1dTaDU5VXdlb2NrMFlRempzdmN3b3AwaWxMaXpwNUJXc2VQekFtUjdLRG1PVjY2cTF4Njc0bEgvVG42ZU16VEhZa3hManE4K0wrdHNsdDJoamdsM2hwTXV2dXhwVnQxKzJwMjJmWTg5M2VVTVpXdWIrSysyRmZjbCtudUc3SUg0RHNKRlcxNlhWWE5PdXpXNEZjTThMNlVVRWo3UHM4KzJjajIzQnA2REJ6eUhCVHlIT1o3ZnBSUWU5dXl6UlR5SEthWHBUTzhvN29JeGp0U2twbjd2RE5mc2QwNDJwOEdQL1IrUGNrMjJuMyt6d2h3V2NTdnpBbjV4eGlKdWVGd1FmazU2V0RFZjgxakdVNzZSbW5NRHZwdDJyc2xOM1Irc0Zmc0loVmZvNHJ0RW1tai9CZUVMU0drQWVOcGpZR0tlekJUQndNckF3anFMMVppQmdWRWVRak5mWkVoaldzWEF3TVRBeXNZTW9sZ2FHQmpXQnpBOCtNMEFCYms1eGNVTUNneTh2MW5ZZ3Y0Rk1UQ3c2ek1lVUdCZ25PMExsR08reXhvR3BCUVlXQURWalJBU0FBQjQybU5nWUdCbWdHQVpCa1lHRUhnQzVER0MrU3dNSjRDMEhvTUNrTVVIWlBFeTFERnNZZmpQR014WXdYU002WTRDbDRLSWdwU0NuSUtTZ3BxQ3ZvS1ZRcnpDR2tVbDFUKy9XZjcvQjV2RUM5UzVnR0ViWXhCVVBZT0NnSUtFZ2d4VXZTVmNQU05RUGVQL3IvOGYvei8wLytELy9QL2VmLy85ZmZuZzJJT0REL1k5MlB0ZzE0UHREOVkvV1BhZzZZSFovWU8zWHJBK2dicVRCTURJeGdEWHhNZ0VKSmpRRlFDRGdJV1ZqWjJEazR1Ymg1ZVBYMEJRU0ZoRVZFeGNRbEpLV2taV1RsNUJVVWxaUlZWTlhVTlRTMXRIVjAvZndOREkyTVRVek56QzBzcmF4dGJPM3NIUnlkbkYxYzNkdzlQTDI4Zlh6ejhnTUNnNEpEUXNQQ0l5S2pvbU5pNCtJWkdodGEyamE5TDB1WXNXTGw2NlpObUtWU3RYcjFtM2R2MkdUVnMyYjkyK2JmZXVQWHNaaWxKU00rK1VMeWpJZmx5V3hkQStrNkdZZ1NFZDRycWNhb2JsT3h1UzgwRHMzSnE3U1kwdDB3NGV1bkwxNXExcjEzY3dIRGpNOE9qK2c2ZlBHQ3B1M0dabzdtN3E2ZXpybjlBN1pTckQ1Tmx6WmpFY09Wb0kxRlFKeEFCdURJMFhBQUFBQUFBRDNRVldBTk1CQ2dDYUFLd0FzQUM2QUw4QXp3RFhBSlFBMXdFTUFOY0EzUURoQVBBQTlnRUtBTThBdlFESUFMUUF4UUJFQlJGNDJsMVJ1MDViUVJEZERROERnY1RZSURuYUZMT1prTVo3b1FVSnhOV05ZbVE3aGVVSWFUZHlrWXR4QVI5QWdVUU4ycThab0tHa1NKc0dJUmRJZkVJK0lSSXphNGlpTkRzN3MzUE9tVE5MeXBHcWQrbHJ6MVBuSkpEQzNRYk5OdjFPU0xXekFQZWs2K3VOakxTREIxcHNadlRLZGZ2K0N3YWIwWlE3YWdEbFBXOHBEeGxOTzRGYXRLZiswZndLaHZ2OEgvTTdHTFEwMC9UVU9nbnBJUVRtbTNGTGcrOFp6YnJMRC9xQzFlRmlNRENrbUtiaUxqK21VdjYzTk9kcXk3QzFrZEc4Z3pNUitjazBRRk5yYlFTYS90UWgxZk54RkV1UXk2YXhOcGlZc3Y0a0U4R0Z5WFJWVTdYTStOckJYYkt6NkdDREtzMkJCOWpEVm5rTUhnNFBKaFRTdHlUS0xBMFI5bUtyeEFnUmt4d0tPZVhjeWY2a1FQbElFc2E4U1VvNzQ0YTFCc2FSMThDZ05rK3ovenliVFcxdkhjTDRXUnpCZDc4WlN6cjR5SWJhR0JGaU8ySXBnQWxFUWtaVitZWWF6NzBzQnVSUys4OUFsSURsOFk5L25RaTA3dGhFUEplMWRRNHhWZ2g2ZnR2YzhzdUt1MWE1em90Q2QyK3FhcWpTS2MzN1hzNit4d09lSGd2RFFXUEJtOC83L2txQitqd3NyalJvRGdSRGVqZDYvNksxNm9pcnZCYytzaWZUdjdGYUFBQUFBQUVBQWYvL0FBOTQyc1c5Q1dBVVZiWXdYTGVxMS9TU3JsN1MyWk5PSittRWtEVHBUdEkwSVN4aEZVSkFDR0VaUkVBRVJNTWl1d2pJSUFNWTJWd1JOMFlaeHNGbHFqb3RLS01JN3J2ak1NSTRqdVBvakV0OE9QSjg2bk13S2I1ejdxM3FkRUpBNW52diszK3h1NnVxTzFYbm5udnUyYys1SE04TjV6aCtybjR5SjNCR3JrSW1YSEJnektqTC9Db2tHL1IvR1JnVGVEamtaQUV2Ni9GeXpHakk2aGdZSTNnOUxQckVJcC9vRzg3bks0VmtqN0pBUC9uc284TjFiM0Z3UzY3bDNHbXlUZC9NbVRrYk40V0xtVGl1VEJaMDdiRVVuaXNqa2owb2NTZWxsSkNzdDdmalM3S0UycXg2emxRV3QzbTRjYm95eVJhTVcrbVJuRXJLWkt0TmRMWUpSaE5mNkkxeWNvb2dPaVZydEY5bHBLb21sT1p4R3dxS1hUN0Izeko1K2FSSnl5ZW5FRVBSa2JYUnBxWm9iVk9UUHEyamthUHd6QkY4L0NQNmhaeVZTK2VXY3pBd3JreEtEY2N0T3M0SWowc0xFU2tEWVpJTnp2YTJGQU5DWXZGd3FmQ1ZKUmhQWVVjR2gyd0RZSnp3aXpTbkRYN2haZGU5d1hnYVBaSXo0ZXNVQzBBblJHVXZCNStwVWNrcFNvNG8xNi9TVlZVVHB0Q21FajlmcEVLT3gzTkdoY0lqQzUzT09hTkowOGg1N0VqM1RYakVpTERqaSt0YXlCUCtya01ZUjREamRISEFheGFYQjNNWHl3UzhTcDV3eklqanNZUmplZ0o0TnR2Q1lWbG5iWmRUYzBPaE9FY3k5Yll5V2N5R2l4eGNkSGxETU5yOG9Pd2paUWhYSk96eXd5c3MwSmZSVDE5K0Y3N3dxMEQ1dTJ2ZkxYdHYxY01yMzFtNWY4MjdwZSt0ZTcvOGcxVVByLzc5cXYxclRyeDE0OXRrM2c2eWFBZVpwK3pGMXc3bHRoM3NpRjVIM0F2Y21ITmgzUlpERVZmQ0Jia2E3ajR1RmtDb0N3RkdTN3ZVTHhRTDZGTEsyb1lFaXMxbE1RZU93eFdXeTRWMktUMFVjNVRqTnc3UkREUVRDVXEyazNLcHExMHFkY2pGcEN5bWMvUU53ZmlLUEp4WFZ4WnpwdmVETTZuSUlZZGhGdkpjN1hKLytDd0Z5cEZJVk00TGkwNDV6Uk1GOHRFRjRCSVhsY3JGUThTV2x0YzNYQU5VSlRtY2tnZElhakRKSlY2eHdsQmRWUk9wRG52U3ZNYmlnSmlyODdqdHZOSGpyeTUwdWRPOG9wMlFRYVM2cWpnd1prdWR2S0NxOGNyaEk4cXlUcis0LzdzRFc1YnNiN2oycHZFMTFRc2ZYN0pmK2VEYUszL1dQSmZNdk9xcWViT09IeGsrMTBHMjI3ekZKWFVqWi9aLzhFUHgyZWV5SG93dDhTa1B1UDNETDk4d2ZzS3R5OGFrUFAxMG1uQzYvOGhzVW0rWjNySEx2cUIrU0dNdTRsRFBSYzk5cmo4TzlHdmh2REQzUllESmg3aFlPdUF4Vm9oTHE5VGFIc3NBM0ZIQ2xqM1c5bmhGWHFFQTAxNEJoNmxtZXBocWJTZFNQNlJ5WEZ1QU04bnFrSjJrTEc1Z1owRGYyWEJXek02S0hYSVpuUG5vbVZ5SmhHK0ZWV2dXMHJNQVgzSlpzZWg4TWlNM3oxK1lTUmRsUlRvZ09Oc1hqY3FlVkRneWNORm9FczM3QzRvajdyUndxQWF3NWk4d3VFallUS3BxOHZHcmZQeUdmbEZnaUQ1Nzk1NW5ucjM3cnFQNzVqVk9tRDkvUXVPOG9IQk5hOGVkWk91enBPTFpvOG9majk0L2Y5KzhlZnZtNjd5M0hUOTIrKzdqeDNkUFc3SmsydlRyci85eHA3NzU3RUVTdmYzNGNYWjU4ZUpwMDVjdFkvUlhCN2d6QU80Q1hKZ2J3bDNQeGZJUWIzN0VXNW1Cc1NSNWtCNlFNNVN5Z0JLeHZjMVlBaXhBcnJLMVN5VU91UllHYi9PMHkvWHdXVlVDbzlOWFJxTlNyUmhQOFplVnU1QjZiRTdaNjBQaUtzc0Q0dkpGcFVIaWs1elJsbDJKdElWNEdNUkhpcXRWYk5nRlk1bzN6VnNUOFJyZ3dGY2NBUFJVOEJRL2tlSkFjY0JPWEc3dklJR2hxcTVpNnV6NldYOThjTmV4MHVqVmpZT2pqUk9ySjRlZWFGcXc2d2JsczVIaFIvODQ0NEhWSS83Uk9uZkZxdXRybXV2SFhQN004SnF4SS96akJvNjRrclEwckw5eWhPK3hqZHVldW5QandQbWpScGZsVHBoK2RYVDlMeWU4dk9QdUZmWFZ1MEpYM3Iza3VwdG1yeDU1MWF6SzVmeWs1bFdaNWJVait3d2FOUXR3UnBCZmtpYktMK3NadDFSWkpRSFdyUExKaS9CSzJkN0ZDWHZ5dmk1K2w4emw4Sm5OeWdMZXFWOEx6M1J4OURua3BHeUU1OWdwbzZweE9BRmp2TWZ0aEVYWi9LdmJOcmZNbTMvZDV0dk9ralBrYi9MYzE1VHQ3WjhwMjE2ZUwzTVUvaUpsQWZrbytWNHBKMlZkNGw0dWI0M1R3UWVNYVU2UG15L2F2SHYvL3QyYnI1MDNUM2xudmt3K0lmOGtIOHR6WDFlMmYvR1pjZ3ZlcTFiZytWYkFoUWdjTEtaSFhLU3F1SEFHcGRTVGtpNFV0NnNpSWlTN1ZLNGFpSGdEWVdQRWEvUWFBMTUveEZqN3hoc0RqcVVzdFJ5UHZ2Vlc5TGhsYWNveDRaMEYxOHhaOSttbjYrWmNzMkRPRFo5K2VnTjlGdmVTOEpydWRsam5rem1KQzByR3NFeXM3WkkrRk9NSThrSXVCYmdrNGZDUUNNZ1dyVGcwaVEvRnpXemQ2a0l4Y3dwK2JUYkNMMVBNZUpqQ21jdFFkaUZnMVQ0UkJMZkhKL3JGV3JKMkQxbXJiTjdETDk1RzdsV3UzcVkwazRNQVE0dHlodHhGVEp5REsrZGlxWnJrTm5Jb3VVVTZLd1lRMi9nQzdnSGFBU3g0eVFCa1hxTk5zekV3aUVTQXFsc3VIMUEvWThHVU9lRXBacXMzUFB6NmlYT2I1ejg5YUh6dWtyQUJ4MXBIYnVkTCtRWllvUVU0VnBtWTJ2RkZKRjFRNW9EM0NIYk9ETFNrMXdEMzFKSFQ1UGFubjhhL2JUblhUbG9CUmpOWG1xUmRhQWRFU3FGVXFxb1hzb1hlb2t0ZkFGMWhNdnpQMUlRcFUrQiszTGxUL0diOUJvQWxqVU1Ba0V2eWRweGw5ZmtlRWliazAzMUtWcW4ra2JOVHFVN1JmTzV6M1Y2Z0N5L0FBTExZaVEvUEVkcGpCbVFvQVFHZzZFT2h5QUNabGVHUUMxQ1RBYmtFYkZVdXlBQTI0alFneXdqa3dLRlY1WmVEaEhBb1YwQWVBVHhCcUhIbjh1SFFJTDY2cW9JdnNKUG1RUE82cDVjc2ZtcGRjd0NPbmxxODVHazQrdFkzWXZYbEUxWVA5K1dQV1BYUTZoSDh3WVd2SE41eStlVmJEcit5OEpwWEQyK2JPSEhiNFZmZmVmUFI3Uk1tYkg5MDN2eEhXOGVQYjBYOEFRdmsxNEFlWVFCWkV0TWhQeVJVTXpNR0pkMUpXWUNWWWlLSVNpbytFZjBrREJSanpDUGIzajN6a2ZBYTJYNzJvTTczSlZ0clRhQ1REQWM4NUhJTlhNeUJXTEFCRnFna3loYmEyM0lkZ2dudW5CZVUwdWw2anFVYmtTalRIVUNVK1VoQU5nYzhSWXhLdWFKc1RBZk9tbzN5R1I1WlV3aklJSlJoQXNGV0Q5SURIb2kvd05nMGxWanYydktYVy9yUHV2ZXhGZndWSFFXM0h6a3lmN0p2ektMNnYrM1c3YngyeWN6bk40MjkrOWI3ZDA4OWNYVEo3bnV2WFhwbGFQanNQZzh4V0N0aHpxSUFheG1zcjFncHdxb1RtT2lVWFVKNzNHNHV6UUJSYWNmSjZ3dXI3NlJjN0d5WHhQeVRvcHdOT0NsSGNNMkFGRmlOeFZFQTFTNGl0M2M1WTU2MDdHaFVWU0NvblBNVkdLdFI0aUVYeC9VUURqRXRBbWRYNXk4b3JOeFUvM3JMNWozS3U4dEx2SnR2Mm52L3FyZnZ2S0dwNCtHUGlLMXF5cnlhcW10bjF5bWYvOGZqeXJjdjNUOXUydlZYdnFCN241OGV2M3JQblZjdGYrazM5VXNiS3MyR2l2SHJ4OG9mM1FoMEdBWDhMNFM1VEFGZGV5b1hNK05zOHNpbU9JdVp0d0ZMQU1VUDlDbERpQ3JlNXBPU05TU2JZRmhDS0dhaS9NRmtBRlpoTmxHdWdhd2lGWWRwNGVqY1M3d28yWEEycWdsd0RvOGZxQUNVL2loZlNjWWNPdlMxTW92c0k5WEhoVmtkc1JQS0c2VDZCTCtLNFhrRjRCbnBLeHUxN1N5NkxBSFBOc1N6QS9Ec05tZlpBTS91Rk1CelRsQ3lucFJGSUF6UmlpQ0lxZVl5U1hUSUJpREFkRmd2dWZBcGd1NEJxeGd3YmhEYkJMTTdpeW9kUWhaVDVjeGlHN0ZZMDFFU3U1R1NjQm9TMm9ZeFFOa2R6Z0FTazg2ZnYySmI2ejgyM0hQbnVzZlhIeFEyZEM2SlBIVEZ5aGR2VkQ3OFhIbm15SUg5dHl4bzJieWlrajk3UWxrVnJyLzZ6YTEvNkV5czlZMUFOL2xjQmJkWUhWRXhqQWpGZ1d5QkVibjZacUdhN2NJUkJlbXlkd0NLZlNISjRaQkxZUVJlR0VrLzFFaUIyTnNzZWhlT1FQS0tzc21JVEtBdnFGTVNYSENKTXVlQVVWcWNraWtxNlVYSnFLb1A0WkRYaU1Sdkp6bEVHNHFkSUpQdzVnb0p4YXE1OFk0dmRwMjVlOUdBVFRNV0g1aFU5ZnFTOVcvZHRQYUxPMWNjM1RnMThMMitlUGlLc2V2dmVIRFZsRi95Qis5VWpyWGNIYThkdVA2Tkd3TGpsczk1NjliMXYxODM1dWZ4dHlPMTE4MGVjUHZQVnExclp2TVlBZHB5VUQ1UkFMSlA0eE5JVDhncmtFbHdZRFZTUWM5NE5QR1JpUEIrNXhubEIxNm4yM1Rpd0k4VGRKdUFxeUwrRmdQK2NrQ20xSEhYcWhqMEFRYXRlTCtCZUw5QkZHMjV3QzF6SFZJRnJqblFNQ1JEVUs1dzRpVzVrS0ZSaXVKWEl1QnpNRnlJVm9qT1ExWjNacGF2VktCRU1kQUhtaWxuRUwybFZhcnlWUk9wQUhXZHNsWWVwUlBEWFg0RjBYVFNDajVnRjF6dVhJR3BYWURISnpadnVIL0E3Sjl2SHp2emlkdW1QckJoODIvditGTDU1RDl1KzNiZjZwVVBENXJWWEZUY1BITlFXcUQvMk5xY1FNUFV5SzUvN0NLejFoN3BXL0xRbWpGckp2YlA2RE54NTgvV1BGVFM5OGphVlU4ME5UMXgxN1NGMTA2dG5GU1pvOWZuVkU3a0t3b0hsZVE1OUliMHN0SGx6Yk5uTS90MHdybDIzVnA5QzJDNWtsdXFTbDJQeGtXRFFGOTV4YW1veE9jaGZZVW9vdnlBRmI4RGpVNnBOQ1NiZ1QyaDVlT0h5WURGQkRTVUtiYWxlb1E4aWhSVXlwSEY1b21TTXlvVk8yUG1UT1JYVWxCa3JMYUs2NUk3Z1FpeU1KUTZBVXBoS3BvaUZjQzJEQk5JK3Q4b09WVmV0ZVBGNWYrOGQ4bUFuMTh4YmNma3Zuem85ZXZYdjduaG13ZlhUSG13V3BmUmI5amN1dlYzQ0ErOVFFeGpOc2JmWHI3cWovSk5vL1ljcWhzNDd1Y1BOR2RaRzViTmZ2T08xVGRPSFJOc2JoNFV1STM2QzBDZUM2ZEJucnZBdHVtUzZEWTBhSjBvMGQxSlBnTXBsYmtPUEQza3V0aFR3bmVYODBKMjdlVEp0WERDY042aWZFL3VnbWVLWEFaWHpjVTgrS2dNSGR3OHlIU0lUUHBFWjBoVGQ2UzBrSnpWVGVPSjlOUjRpaDBJQVFDUXBQcVlzc0lqbWxZMlRWNitLY29Vb0FtNWk4TzZ5L2ozbHpjMUxaOU1kYjZuUU9mYkQydU1BeTdyTVJOUHJiQ2pNNDMva3A5MUgzbGt2L0tZRWp1QThOYVMvY0pyUXB6NmFqS1p4Z1NxSVNoTGVyVHNURUhabk5DVUNMemdKaDNYQ3p2SS90WldzbVhiTnJhZWs1NFZxVFlUZUZ3dGY3clRMZXg0NmdCcEpFMzdsYW4zVWR4a25Xc1gxc0I2elFQZDVtb3VWb0x6NGRlcDlKaWo2amJ1azFKK1NMYURhVlFFMkxGVFdwUU5xb3BqZDR2T3VPRE04UWVRMHhYQmlrWFpudW1VTEVDUE9YNlFvUVpuSHRLZ29OSWdzalUwai9RZU45cmR1R0laQTNjbFpqV3I4Zk50Uno4cEdUcXVjV2hKdXVmUTZPR3padytmTy9PSnhYYzM0enczNi9iTnZpYStmZENDeXdiWFZBMHR5cXl5RHhweDNZakZsOVZQREE1cDJ0V3hRdFAyY0h5anp5M1ZuOVZuZ1QwNGp2c1VMRUtZZXlrLzNKYWFsMlV2azhmcTI2VzZZTHkvbFNyMVFIaTJzRHdjcmhXSHBJcGdYRWN2RTZtUktvbGhwdm1ISGJJWEJqM1UweTROWlphemlWbEM0MkY1MW1RZUdmVFp0MzA1VDFtS2xGZGhsMFlkMDh2NWFmK3lTNzVqMGloSFcrNm9QRmRaMjJoOGo4RjcvaTM1dC9nTmRsakRVbTZVYTh2MWpScGRBZitSSjNQejh0WGppZ3BwU0NhUnk0YUt6c00yblR1cm9uOXRIVjNuN3Y2dytnZlVnaGsrZGpqd1JjN2s5WmVGUlpVUE9rR2YwamxSQ3dGQ0RSSmMzSWhsUkxzM0VoWU1IbHpudU80NVg0RU9MUzNVUHNIbUFtMkZMMkk4d0lVeXlERDZIMlRWSDU0anBmZVBYTEo1ZU5QVkpqNnlmK3B0ajI1NWY5V016ZjYwNDR0MXdhTDhFVU5MbFZjVVpaZnl6VXNycDl6enAzVXZ5Nld2Zm5KWU9ma0llWFh1bEVrM2wxYzdyeHkxK1RENTloUlorZWZIbFk5K3UrcUZWWU5uMU5zYlp6NTc5OWJUV3lmV3IrajgxcDNSTDFUY3VQMW5QNURJNmxlVTc3YXYvdU05MDViVmJqeElpdCtaMWpLdG52RDl4akpmSTZpditsa2dvNHlnQWZYbFloeDZsNFF3RlZSeGc0a2p3RFlOU0xHV29HeWw4c29FeXpjRlVCSUdZZVVUZklMTEorajRERkxHcHl0bjVuWnV2L29SY3ZwNzZrOHdLVCtRRC9oV1dIRzdRUTYrQzgrd2c3YWZ6MTNGbmlLbkFvZW04akFmT0hTNmx6NHFIUi9sb3h3NjFZbGVMQ25WZ1ZhaGJBSFJsWTJpU3c4ckJJMEJWN2FJWXA2VHZjaFBMRkVwWFVTcG4rK1U5QWljNkdPc0JjV1Z3Vi9rWTBMZVY2MGQ3T2IzSFg1NzI5ekY5N3o3akZKSFdtY3ZXalJiV1VFMlRwczNiNXF5UWQvODB0MXJmK01SajkvNHE3ZFBYRDN0OGtVblpvOGZkeFhqQVNDTDlhTkIxbVJ6WWVaRGtwMmFKbU1WbUVLR3dEUFZpNU90VGxqSVlHbDUwalE2UXNWY3gvUVJ6dVBta0RDOHZLK2dzSmh2WG55TW1PNDZSaHlUM2dnZnVmWU41VnRpZldQaDc4SnZ2YVRzdTB2NTRkaGkvdUM5Sk9Ydy9OOXNXemgxc2ZMbG45NVRQbDh5Wlo3eStvTERKSVh4Wk1DemZpcjFHN3U1L2lxV1V6UXN1eEU2RDRVdUJWQ2I0cURlWVdRNGFRaW9PMFZseTRnNklIUUg1d09zb2FzT0lQWHRKaDBueU1pWXNrSjVYdm1HV0hmOXFlV2FVN2NyMytpYm4xQmVmMWw1VjlsMFl1TjdtemFmMk1Cd2hQTWRCVGdzM0RBVkNyTUdCUmdNY1Qwakt6MENaS1VBZ2Z5bHRqYzF6YzBXMEtKNVF5aWtXdDNNNG1hdjNjSWpuYVA1ZzUzTi9GUDY1aFBLdmhQdzVPN1BOSU9HUkovWisvTlNlbmtlMlBvU0gxTHQzSzZuSlo3Rm50UXBxZlAvcWI0SjVqOFBOVmxOZ1pXeWc3Sm9BUmtYbEwxd1pncWlqeGdmWkhkUjF1NEdUR2VBanU3T3dBZTYwMkNBUHJqa0JqNFZzK2lwTXBHaGFiTnBJa3hFUmxRMkFZSExuQjMxV1UyVFJkckpkM1VqbldvZ2FkR0FOaEhmdlBRNE1kNUJybno1aGRvakxZeDZadjgyck16bnR5eFFQbm4wWmVYSWNmN2dBOFR5NU5YS3Awc3ZuOGNJNkxMUWlSTUt2Mkx6RTJRa3c2RStRdWR0c01vSmpJd1RTUHB3WEVpaFdCUzZaczBDV09SRGtzV0JtaXpnay9xYnREbkRBQWRhdllESE0vd3JYMy9kQ1pQVGVZSXZQM3VRYis0OG1KZ3pzaEdlSjNDK3BEbFRQUWpVanNhWFBuSEgzV2VRc2JDL2RaejdYQmdEZjJ0RGpjZXEyVWhHTFVKaW9KUE1qREhCeWl3ZG93Z21XY0s4Z2Z1aGI5V3hkTzdtNjI0K283eno4WnBEeTdZdEZoN3FtUEh4bHlvOW5hYTQ2TmNERjdwd2R3VFFJVk05WGhiTTBTZ0RsZmpNd0IrTk9IZ3ZLZTE4ajI5V1Rpa1JNT282Vi9IYk90ZDFsdlAxTzVRR2VNNUdqaFBlZ09mb05lNUx4OEh3WU5Ed0VCTW9wUXA2SUJ4akY0STlHOC93MC9YTlA2N3JXZ09HSExpWGxSdXAzc3RnRGlkQnpieVBWb0RhNnNEN1VFY2tlaHVOYUNIeU9pUS9IRWRNTUZtaWJDUTRESmhGNGlmaWJqS1JyQ0RMeU1RenlzeDV5Z3g5YzBlemNQRHNRVjNlangvalM2V2ZTcm9HMWVkTGhxU25keTA5czBNVzFLZGIwRkZpaHZuaDBUb0ZPdGN3YVZJeFNaQ0s0T0hmODcvNyt2Tk9vTTZPUmlGMjlxRHdia2RRc3kzMWI4QjZUT1d5dUZGY3pNWXhaMFJNaDBzekE0azFtM3JkSExBU3dab0VYaWViZ2VmbHdHY2FXSk95alk0Nnd3V0dKZUhNSnNxbG5RNHE3ZE9jRHA0dUxaZmJHUTQ1cTZ0QTlQUE5NaG44K3QxRTk5U0NCVThwSFhlL3Jod2Y4Y09iYjV3OSs4YWJQNUMva1R2SXNFUFgvazQ1cS94Qk9mdTdhdy94dHBQS0Z5VDk1Q25pVmI1TThHamRJOVRmNEVMdmNCZW5RZytLMlVMWG1GblFWSGJLcWkwaGpWdWo4RU8xWFhhaGV6aFowUGw5R2FSTHR2M3NuYS8rK2JaeUp4a3piK1BHZWNvaGZmTjNoNS84VHVINEU2dG16Vm5GcVhpTFU3dzV3V3Fhb25xZTBqUzg1U01BZm9vM0YrRE41YUQ0UXJ5aEdaa0R5SXJaSFRwa1cyWjBjSEFNbFZaa1Z2a2k0TkZpN281SGp3TTl1UVlObGVqZnJlbUp6c05MRDZ5NjkxbUd6NFZURGo1eWNFWVBuTjZ0ZlBES2h0Yk5FeGxXUzQrM0h0dDBTRU1zd3l2RzlsSzVkUFJPVWVxek1PcERyU0p1ZDFEVVV1ZFVSa0xCY0ZBRnc2MmlGalZ3TjBaZ3JDbElGQTQ3VlhWUXMwaEN0WjAzd3NyMko2Tjc2dXYvSGJuaStpRmtndktsY3VJTVlIM1R6K2NqMXI5NmJ1cnUyWFVwblo4VFJlSDVkMWRmTlhzbFhhZFJzT2RYQWU0cnVObGNyRnp6bzdrUjFFeUJ1VURFazREbWRpbUhyZE9BNnYvSUVabGJ5U2crcVFPenZhQWNyWU9BVTA3eklyeVpPdEExT0NKNnFkSGdGcVcwWko5YWhiRzZDc1FIMHp4QVhjMDFVb3MxUDdwMTNGODNiOXRTTTJQMXpadFd6NmdoN3IrU0FTOXVHZi9PNGdYcjRkcW1tK0Zhb09rRytWcmx3UEVqazY1YjNGZ3h2S3pBRnhoNCtmb0pqMzk2UERaKy9KVmpTK3NDQlFVbFE1bzJYajdpeHVzYXl4a3ZRci9hWEtwWER1QmlobVRmaHlTRTBPQkNGcTBIMXFZM0lHdlRDK2F5bUVHUGh3YjBvblZaWThoK29yb3k1YW96dWswblR2eTRUcmVKOFRwWTk4aHJIRnlFaTlrcHIxUDVwbVFPVTFjN3NrNUFvVURGRXlxUTZIR1hUUmdBdDFPdkxFcUF0SHdxQ1VEYnllZDJmL3NrYVh6eVcxaTdmMVUrVXQ3bGM0Um94MXNIamg4L0lJUTdYbEYrVk40aGxXeHNtczVzUUxsRng4YnhWRzN1Y3V0d0JzclQ0Q2xVRVBoMHhFRWVnSCtPemkrVTk0QmxTN29KS01rSTZNU2NzWnp5N04ycUhETmJnR2R6TkI2cE00VERDYjVOd0V3a3pMTm50Rk8ramJaUjNlKy9Ya2h0SXdGc0kvNlluSkwyTDcxa09YYmsrZkRYTStoMWM0VnNTVEZKS2Nmc3N0NE0zK21PQ1Z5TTE2ZWdWWFNJRjNSNmM0cWxJbUVYd2UyQi9rM1dLTVVRd0I2bTRNT2JuVmhJQ3NsOGptVEJoMVZaYzQ1VGZsQytPOGZCWUQ3VlplRUx1UEkzSFhZWWt3bndNNXpLem1KMUpackMxS2tLZWdUS1RpWXhlZVR6dWhUSzU4MzBFZlIvRXl3V0g4a2pzOGhNNGxQeWVFNzVXTm1vYk9TZjRmY3FWdkp0NTRMT2V0N2IyYTdOZ3hlZVkwSVpiZXcyRDJicWYwWUprNEtTeGtobkE2YkYyRzFhZ0xSMHhFVldrbFhFMWZuMTF5Q2RuK0pIZDN6YytSb2Z3ZnZQQUJxZVFlVlpoU3BQalJxSEZKZ3lTWlZHMmNpOHZiQ0tOUjI2bXZpb084OHpnMytxYzdUd1RlY3cvbzBYaEdNbmpuWFVxYko2dXJLV25BVWVRTmNIVTFXdDdlaVdVUDBSYUI0YjdWeUtEblhUdUo3R3B6Q29rOElpWmVyNlVKWFY2V1RmT2JpbnN0Ynd6UjFucTIvbkxpVW1BNkxWdjQ5OHVrKy80ZXhVR3ZOYlMxNmk4SURPem9ZSThBQTVjeW84eHBPd2NPTUdGUUpIbkxDUUdRbmlpUXFZb0xsUnZBQVZLS2ErSXNJQllQdVVXZC9vMzdqalgwZ2JBZjZnTUpXdUhaRkxoRTNvbXFGeEV1SzNrQUJwdUorTTN2OWYzL0lIK2NjNm05aHN3NWpPblQyWHBkdDI3Z2tZazVmRFoyRkdCZ1VQM1RqMERoanJNT2gyL3JoMDR1MklBOTB5Y2xxL0YzNWZSSDlQZE8xSnFORENZeklSUkJZMFFaUzhSZkwyNnZjcTc2Tk1tUWc2NW5IaGU3Qlp5N2tsYXNaQU5wSkJvYlU5NWtDUGw4VUU1a1ZadGdQTkN3U2tncTVVbjYxZDhqbmtkRnlwQWJCanZMWjJPUWduUHFSNEcwckpkTEZOYjNGa1U3ZURIaFY5WXdaVDlHMDBtOExlNWJoVzNmQTExTVVvK3F1cFY1Rlh2WXJWbEpkUEhIajF5c0h2THJscC9zRzEwdytjSGJGcVlVUGZQMFVlbVZPM2VtN2RxVFV6UnE4dktsby9lc1lhRXB5NGNXenhodHNuWDdYK3puM2VtZ2xyeDNVdWJoa3lzbXo4VFEwVDVsUlg3cW1zdmdySDNBcXlhU3JscXpuY0ZhcCtRdG1TMjh6WWE4eUFBODgwdzJoem1hc2VSc2VMSWVxc1J6ZU8yZEV1NTZHM0dYVUNBM0lTMmEzbTgyU0traG4wUE9id1JoVVcvU2NZUnZZWEZBYzhvaXFwMEJsdmJEMVZlK0NLRjc3NzdvV1pCd1lVN1JxNy9wNTcxby9kV1F3clZCay9TZm5zOUg4cVgwd2V1NFdVOWgvNzFHMjdEamRFNlpxYUFQUDFHc3lYaXh1a1JoUnRBTFNBOEpyTVRLVUNqY2JpVUpVb0c5am1raU1xbVZCbE1hU2kwQlNZVnVWMGNCZ3pRRUFjYWFvYlp3TEorK2lIVFRzbTNMNzV3SUhOTzV0MmJQbjJJNUpLbmlkRjBzYnJEeWwvZlhyVlpwbjVvai9YWlhYaEx3WHhaOWZ3WjZSY0hlSEo2c0tmNkdqSGlBM2xVMTZnRnJPTjRTOUZSRDNZVHZHWHdud2NXZWp0UXlBTnpCNUU1eFBxeDVRcU5LSVFLVkZNK083NGxiOGFjT3JVZ0Y5ZGVmeTdEKys1YWN5dXdzSmRZemJzSldkT2s4eEo0M24rN01FdFl5ZVQ5UCs4N2FseC9jbVcvdU1PYTc3MHozVmxnRU1QbDh0TjQySXVCTjFxQks2SFVHY2IyK05wWnBjT3lEME5jejd5Z3BMM3BHejB0TWU4TkN6cDVWaFlValo2QWZaVUI4SnVkVEVzZzZZSUZKQ21oaWVwNTR6TElUNDY1eEV2RG9CeitTb0VCSDNERnp2L1FzeWRCdHVCWHpUY1d6Vm43THNyUGxIKzhoRmZ6dnVIdEl4Y3Y0dWMyZkZWcTNMaWRQWHkrd1pVYlIvWlFQSkpiY1hVOGNFSGtRWnlZQkNmNmhkeWJtNDZnNTVGbEMwd0JJSitTbnRZNWt5bytGRm5pQXVqLzdJVDFxc3RGSE82Y0F4T0IyZ2lMaWNldW5BNDFEdGlBYWxJU1JlZFRLaVhoR2xDQ3BCSWdTR0hzTWhlenY2RDIrKzd2S25pNWxHdnZucEs4QitKUEhpNGVYTlowOFRJa1k0UEJUL0ZyYkpZbDBYNVNWOXVFUmZMcGF3RXlZSm9aRkZtcGg1MGp4R1FXMDZwb3dDb28wQjFEZ2RVNnFqQUlEanlFcWVMaFNxRVZFOHU1U1c1SG9EVEZaWExVSXZsc3FMVTZFMGlsbXBRZVRCTVVSeUlVSGRsSFhWazhrNUhGK1ZNK09iRm1mc0huaG80ZStzdDR6YTlPRzN1MGpmNlh6VWxYUHVybWM5L0MyUjAyYzdpNHAyWDNVVE9ma1ZTSjQzZjF0RTgvNWRYRGNtb3YveStEZGwxaXh1V2pwdEdiR1M5OHNuakRmM0o5UkcwYjdjREZ3WWRBZGJrS0ZVWFNBa244WkZVYzhMVWNkbW9Pd0dNRFRRS1UyeDBsWUxlUm1VcUp4dFN4ZTU4SXczWW9jaVloYmo5VlArbldoN2NkK3JxT1kxYlN2WE5DbDgvWTkvZXp1SDg0c1hUR2lLZERZRDdaVUFjNi9TelFMNVp1S0VzUnNMODhVWmRlOHhNT0pZTkF1eEI3MjdIVjV0SlQwendlQnQxYVFDanh5eEtnNUZtVVFLRFVDTVZBc0N5Yk55U2NlT1dWSi9TN1YvVTJMaW84Y2VEd29jZGZseEw1eXFWeGZTWmRwREI0NEFqNGVQU2RHeStVUTBTY0pxOXpGbGhhMi96R2h4MjRCUHdmSlFjWnRBZzIwUW5kUnllNThNUUlzaytqR0pPQmVlZElZUEdEbXM4ZGVDWEUrY1FLd1ZMT2JRdk1tbXlMdTNITHg4NmxHL3dVQWdwcjJ5RmVTbWxPbHFvdTMrRHJ2U0VoOFBXNWVIUTllN2hhRDFGbmlRcHlqenlrUEtOY3VKV01OQVBrZytWSVoxL0ozdDNLZDlyenlKekx1em5BUlRqcTh2UDAzcXF5ODhEZjJ2d3dacnhjUXRVSGN5UmdUNE5vbEtRWkEzTE9iQnFQTENnQ3hMU0Yrakl4eFpOaG8zbWo0aHdpSUxLRDUrWlBrcFNVZ2FWUmpRZkZwU0FuT1RSZVpoanZ5ZVp3UUg5YkQxVjh1VDhhN2RsbGorOWNOc2RweVkwRFYvdi85TXZoNjByRmo3Y0hKay9lOUxvNis2NnM3T2EzOXcwYzF4Tlp3Ty9PZFpZM2RtZzRweWo4aWw1TFpCL2Z5MlFwTFhnNlFsazY2bkk3MW9lK09XcEJiTWJ0dllCaUlaZXNYOXY1MmgrNGVLWmRDbW9QSDQwd0tINlRLaDRkNWxWSHA5aFpqNFRsT3lPaE0vRUtIYjVUTnAwZ3NWS3FSTGRKcUQ5cXVrM0pKOEdoL21FZnNKRStZUTFYNUxRbDJ0R2JUeisyZkdOb3o3YXUrbm1QWHR1M2dTQ2FPZVgyN2QvdVhQaHN6c25UZHI1N01KYmpqM1hlc3V6UjZrT29telJOYXZ3WFpVRW41VXlhQ3VIV1Z3SnJLVjN3WnVLbW9nalJHMzZORlVUb1VDbkpqUVJsNVdhZjJqVHc5d1ROZlN1WXBGcElvRU1aakk3VkQyay82K3ZmUEdiLzNyaDZFMVVmdTdkTUdabmtiSkYzd3pTVS9ueURPZ2hEM1VxL0lGbzQxT2s4TW14L2FrTWJRRDR2VjN3MnpUNGJSUitHMmFoZGJIOHpDNzRreldCTkpYWDV5UTBBUnVGMzhZMGdVeXFDUmlkUFppN1h6VDBZT2NOMzd4NDVhK2lmL3JUVGMrKzhGOGZJdkNGUlR2R2JDQm56cEEwVUtET0h1VDVoMGc2MmFUODVhbkdLS2dCWTlVMXgrOEgrRzFjcGJaZUUrZzJZd3lkcHFETE5zWWNxSStWbUx0VHBFZWp4WUdQL2l3ck1ISnZ2dkRoempFejN6T01yK21jeVhJalFGZGJDODhvNVQ1aU9jMnl6dEFlYzlJWk5iQUlhZXBKT2N2VExtVXhIMGloaDRaRzBlWTlZM2plaUxhdFhiSTZKUE14T2NmN0x5bi9HSnkwcFZqTnJySTJDNzVMT1k2MjNKeDhPTTNEOXhnY0p3VUg4Nkl4K0JVZXBVUzV3MkFDVzNOeTgvSlZPN2lDbkhlRmhneXpValgzUzV2T21VNjlMSVZPMmQwdE14bzBlNUxxS2NUdm5FN0ozYzBEbzFlVkJzMERZMUN6ZTYrSy9PNW5WODZydithbW02NnAvLzJULzdoM2V2Qys2Wk91Q2pkZHQrUzZwdkNmbjkvd2wwMTdvNWVQSGhpb3lza3NIYmhrM0liSHR1MnBHamFpSnErdk56TTlPUGk2a1Z1ZnVKemkxSDN1YzM2RDdqUkltMW1xL21zMXEycVBucWs5eGxDMy9FZVFQUjZxQVFHbDBZQ0lKNUg4NktISlRSN1VnTksxUUJhcWNSeXFjVlFERXNNMHBZa3BuYWdoRjFlTDd2Mm5YbnN0Vko1VFpRdVArdm02amFBRmtWVGxQNDkwbnEydVQwdmRQMlRUT240ZzBoZk12U0o4eVBnZ3JvNll5SnpWS3JBcFlZMFBnbHhBQnc3SUg4a2NrcTBxSDdRSk5DRURkQUticUJwTDFKZERpVjVUaDR0YlQ4MmZNMjVMeWFsVHRVOWU5OEJEeE1jLzAzbkhvaXZHMXZDSE92eWI2cWV6bkxaekhjQ1RVd0NXSkY4T3VaQXZSd2liMFVMVmZZNHVrVStWbGkrRUR6dXorRTlCMmdOU1FVNXhjQjhyOXhMaldERVRPbkxDOUhaeEl1Z014a0p2bHkvSDBlWExFUk8rbk9kYi8rbW5QaHZPSVZtUDJlRVhFbi9zeU1CM1RxZmdWYjBrVk1pRU44RTF1NXlTenR3OEx4U2VEcDNuNWpGU044K1J1aFhzZHJKT2J3SWpYZElmMDB0R2gyUktjZ0FOTWFNSHlJVFVYcEZFNm1pTGg3TUkvbzhHdVQvbG8zZFBILzN5M1krVnR6Nys0dE5QWU5TVi9EdjQ2dkR6NzNXV1VkcUQ4UXRuWVB6ZGZUN2tvajRmdkwrWitNMGtoYlFvQi8venkvLzRSamxJV3I0NXh5a0s2U0FmS3pIU3FPUXBPdmp5ZGpaWG9EL2pYSWxjR2FkTkU2WnUySkNGT29NMGZWaTJzUUExRUtyTVc2S0pXYk1UWXdGVmVtc0dFMjBDL1pVSDFvNE01eFdWUjRaNUt0bGMvcmgwOWRXOC9aaWp1TjlTcG4vTWduRXRoV2NtK1lCTXFxUVVUSmZtQTVwRnZsRFNCWk1pa2gvMjh4dU8zTnQ1d3pQczNpbktXdDZ0YndGN1lERm9wTlJNc2JaTG1VSFpTMTFCY2FJbVMvaUNVZzdObEhZem40czlGSFBuMEVoaWhoa1hSaXpIaldjNUJCWXJ4c2JkT2VyNjROQU1jK1dBR1VCRXpHQ3lPR1Y5S3BYVzFhZzlWdFhVRWcreUl0RnRCQTNDblVaUFlSbFhGYWRVUlI1ZmVlT04vUnRuekJnZnVmSEdsWTlIU0h6RCtJRmszZGFEZDB3Wm9iVHNEQVIyS1l1SFQ3LzkxMXZKaG9IajFmalR1Vk9raVBxY2NoSStKMEgxWExGU0NLYmpvYzI2K3c0dEY1aHdmc0JEdVlhSFZNU0RIUkNRVHgwOFVub3c3dTNDZys0a2pEZWV6ZkRnQ3NXeWFmbEx0aGM0bGk0YkQzWDVaa1FReFVNMlp1QmlTQ2tkeVE3anJKSVhZMHlTM1NtYlhZZ0hMOVdpcXlKMHpHV2ttbXBTd0VnOEZDbUdNdUpmRndFVU5FYldyVnY1ZUUxVlZjM2pLOWQ5TTMwNDJiMHJFTmhKYmg4eDVZNkRXNVZOQThjRGFwU05XMytOY2sxb0V0NEhYVGVmbThQR2dxdzMxNm9tWStIRTVvZlVGSWQ0UGh0R1BnM3V4QjBNUlFoNHZwbyttaXJLK2pTVUxqWXZreTY1b3B5Q1ZsMHE4bUpNKzhHOFBIMDQ1UExhOVFVVmVuK0JFREVWREZreXJ2cnlmb1daV2FYWlMzMTNHcHc1ZlFkT1hxaGR5QlhtemQ5MzU4VFNZUlBHRHlzbGF4ekRGNjJhZWxseGFmMzRDZldseWpibUExaW9iQ0ZiaEc5cC9ka1lUbldnNk5wN0tUMnphYVZuRmxaNlp1bGVlbVpKS2oyanlZUmFLaElKdXhZMlk4bFpzNjNvU0VDWU82Q1pwcGI5T0VPSWR6U29mb2l3OEpwdU04aXlIRzRWeHdRRVNqTTF6ZFVGRSs3bU5LWEVBbDhZTERSNG9ETXp2VXJ6cm5pQjAzcFpEb21RR1FyRm5Tb2hXa0MveXFPQ1RXUytLWXNZNTh6MlRKcGFhbkF5TTcvSzJWWElSRXRPUFA3cVlsUnVzWTVwUXZ0eis1NWZ2R1B3M0RsRGQxei8zTDZqWDM3WU1uTm1Dem56R3NuTXVmTjI3NTBicDNnNjEzcG1iTDdUKy9UdnNrbldHeXNPNXZBcjhnNEFqWlNmKzFSWHJWL0k5ZWVlNEdJaEdFVmJhcWdNVEw4aVFTMm9FYzN0Y3IrUUkvOVlVQzRBMjZZRUM5RkNLYll5S1lPV29VbFpRRUpSdEJ1bGNBZ054cGpCclVWTzJtcmNCckJiYzIzdHNkd2F2SmliQlZ4aEFBeS9Cc1JZakEvMWowYWpjcTRiSzVDeTh3c3ErbEZGdmw4SWtGQVJsUXJFV0g1cEdBTjduRlBPcllGZmlnU1R6ZEJweWFSK0JhOWxQU1hVR043cjgvaGhZbzJZejZjcEF4VThTOTJ1cmdxVUh5enVFN2psejJzZi9HemcwWXdORXhic3lNNGNZaWJsWHhsMkJpTkRmeDJ1bSt1ZGMvWFJ1dXZxcDVmUHVHM2k5VGRsOFlIdDRTR0wrcTg2Tm0vTnlxWERwOTV3VmQvSjVkUHMyM1B6NzVqdGJBam1IYjA2eDU4ejRXRDFqa21SUVl4ZXgzQWZDbi9YcmFLMVhUZHd5REh5V1BaWllUQ2VvdktPNHFBa25FVEdnZGV6SFpoL0VSZFpsbGtBV1lXQWxnd3VMWjk0V0creXByclNNZ21TQW5wc3FZS1hoMFZhYnJCMXBFTHhNTkhETDB5WmFKdExLV0JiMkNsMnNFeUp4alpCeVl0NGpZZ1NGdllNR0YwMDBsUlZuRzhZYy8yOGVkZEhWNnorOVVNM0xxdkY0OXBsTno3MDhJMHJxdDhtQlcrOXBmejFiWkp4L1laOUQ5KzRmTUN5ZWZPV0RWaCs0OFA3Tmx3L2NNVTExNndnYisxKzY2M2R0NzM1Wm5Mc0l3MXp4TzFKc1krNFE3UnpOb3lDeVE0ckJvOUJhdEFMd0lmYzZOSVBVYjNQVHBNemJjNTJ5UlNLMmV6VU1NRkVtSlJRekc3RE03c2J6aHdoNm91dzJiWDRpYWQ3V012RC92a3hEUVgvSmFJcHlsaHlpNUpKUGxNeXYxYlNVZjZSVmhaZDZXeTU5VWpyTjkrMEhybFZqWWNuWklhUkF6MktSVDVRMWdscVlaMTJwRVVXUUhZSVZIN2NjVWNwdjZWemplRERkM3F2NkxucHdscFlWMkZ1Sk5BQnJjeVFRL3AyWnNMMHd6Y3Z6Y0JFMStVb1duM2tEc2xWSG1USlVoVzFNcVRCSVRrSUYvcUU1TkZZc0paUStBL3BMRTV2VGxFSUp6em9qR1ZrbGtlUktISXc1RXJjbVFPSHM0eDBLUU9GU2lSWjRWZHIxN3JGWFExR1Z0am5jdWZxdlRUSGlnL1lTWFIyLzBmbnpGaks3SUQxMDA2OTkwVEg1dW5odlJPbXpDOGRNZjJxcTZhUEtMMWlTdnpUd3o4T2Riajc1ZzNKTHhvMU1uL2dvTElGVFliV3V1YUdZWDNyQ25MN0RGelVNSHR6Wm1OODdjUGJOL1N2RzEyWFg1SHQ5V1pWMU0wZTFMUXQwUERFYmI4V3JON2k3RXk3eTJUT256aXdNRkxzdFdSTXByNnE5M1R6K0dYVUgrVGxCbmJWK0pvdFhDYk1naWZFNnRqWUtZRWxwdGF4WWVHamxSWDJ5aGwwZ29Ta3VzV2lwT015TEYwYkdRNk5JaytNWUVjamRCK3l6NUdWNmlkUXdmUno3ZnFQOUl0Qnh5c0NPRFl5MmxZMUFLazJHSzltUjhGZ3ZKUWQrYnFTU3V1b1ZIV3lOZTUwNE1LT2g5aFppTlZubXRtS0g0UXJIbGplWWJ0WDV5c3RpOVpTSmhpc0ZwMURVc3pPN09KQUdkZTNmelE1ODVNV3U3RThxMGhTWVpHL3dBN1dkdkwwSmhqZzlLTms1SE83aU9HWkpVdWVVYzd1ZWs0NWNuVGt2RWRQMzdUeHE0TlhYMzN3OU05dk92M292QS8rdSszcDVkR1NtMGZmK3VwcnJaZHRLcWxkZlRqR1AzYU1qSHgyeWJQd056dVZzMGVYNEczd3QvaTNQeitOZi91VjhocFovdjJXMnBvaHI5OTN6enRESTlGV3pNbmxXL2w5K2lDWHlRVzQ5WlFINWpMOEZBWGpBanN5QitOMkZWTWxGRk5aYkltQmdZMVdsZDRYMGpSTVduU1JoVXFUeFFvTXo0TmxJL1owNW1HbWJCQ1VFcWxJQzBib3FYUGZnbW9WTFMybkZZdkpnU3NlQTFkZGRheHEyR3IwMXArMU5qVFhMMjhZc3ZTUjJqa1RLeDRZdjNYYUxmZVBxKzE3ZVhyNjVYMXJ4d216NXJaTW1Ga3pkT28xQ3pJaXM0Y3BzMGMwTDV0VE5hQWdiM3FlZnlCZDczWGNSdUVKWVFhbkI2cmxhRjJzbjczWGtkRnZLVS9CbTRlTVlnZmtHN0pRdVV2WlNaYXlUNWJQcmVhRTY0RmpxQm5oV3FXZ3pzenlyM1NhQmh2VENWUzk1QklwV0ZnTjZCZHJoUjI3aExKdG5XZklGdTUvVnBlbmd6azBDSStwZGZiRlhKQjdXSzBlVFdQemx4S01PN1E1bFh6aGVJQ2V4SW9DQ0ZnUm1nSUZJVndZbWVva3MzSmxHMXNBTmdldVR5eFF4ck5BU0t0UnptVVg0Qzl6cVpZVU43SWxna1hMdEU0NXhaRW0rSDEwN2dORm9NOFpiUzZPY2tGUnl0VW1tMlhaOXFoVEZ0V2w3L1VIL0I2UlhTOGpvNVg0cWxlWGRUNFpWd2Evdi9mZVA3OS8zOTczMzNwajZNd1ovbDgwYlp5NnBhQi8vNEl0d2xOUGRpNTdkVlZjVWVKNy92eitQZmU5Lzc2eWtIelROR3gwd3lzdnZVU0VjRkdnbXRrYm5PNEkvN2srU3UyTkxuc3BZVFlsb3NJaW9Kbi9YSGRrd3dZbWM4cUZxZnhnV2cvdTRScFZITHNTYXlSVi9mTTByZG83bFZWN2k2emFHNUhqMWFxcXpBSjF5bDJ3YXB1VnNCbks5eTVxdWYvK2xrVjcxMDVjT1hseTdZQkp1bG1MN3J0dlVjdTk5N1lNdVB6eTVjMlRHVnkxWUd1K3Bqc0s0MG5sNXFyV0pxdFNrQ3hoRERDanJhZWpTVEk2TytpNWVtcjg2STFJcXc0cTBrRmEydGlpN3BMcVFqZXBEdlNMcVpvaWM3YXphb2V1b2xhc2V0QUtXMXRiK2IydDVCNWxmcXN5bFR4Q2F4V0ZtZndKd3dPZ2MwemthTXdrYm1WWWMyazhocW9XanBOYVZUdzgxa0hUZXh4V3pZOWtSZ2VzRFl1MVlnWkhHaTFoY0hZcllURFFlc1ZDTFE3YzFQL1I2VnZqVDcxQU5uYnVKTWFqVTRZTnY5Rm55QnBhdjNIVmduZHUzYnoyeUZQakJ3OFpXTWJvb1VHWXdKOEMrRXE0bVJ3b2ZLcGM2T0o3Q0dlNkNtY3B6V2h3aE9KK2xRbUc1RDQweWxHc2xjWEp4QitsUEMyWGxwWjVVRGxNZDlLa0twY200ZjJzVUxHTDE3R2tjNEVSUUVOVDZjYWhqVk9mSCs3MEREMTB4YWhOMHh1WHZicnJrVVdYNVE4YldOeDJaOHR2aEJNTEt5TkRxbGNKTnd1THF5Slh6TjY0YWw3RFZWWWhPOWhRdm5EelpScU5hemtNT1l5ZjlKckRBRFNPSmJaNWJ5bFB3TzhEbUw1QWZheGh3VTl6aThhcVZHNWlMTU1rYUpXTFFGRnFoYmNxR3lXekkwN29qVEcxdzB4OVZKaCtvaGFtWSt3TDVCMFNDLzRyaUx4ekcybGRlbkRKYmNKY1V2ajJ2ejdVeDg0MkNsZGhqVEdaUjdieG04Q0dCRDVvb2tWQkZ5NHVkaVdYSG1FakV2STlyVGVaUEpuaFFGbEdEb0Zla3M0TjUyQlphdkxNcFBGRG10Rm5PQmwzSlRxSmNMS1F4dWJSSk1aSWlndnB6QUhTak9ycElndWU0ZVFGSW1GajE0SU5YblpGc0w2K2IvYkVRVXVyZktVRHhtMllPWFNGRXB0WkcvRFg1ZlU3ZUxOMy9LQ0dtWVhvWnhWbWtvY011emtEbDh1cFZiK2FrdHFqOERkQ0MzL2R5cTREVy9SMy9kanhGajlyTzZ6emtTQ3Jmd0JaamJwV0E5ZkZjeVJQMXpwS3YyQ3ZDZVRqdEorRXluMHVvV2ZFeUtONzczLzI2SDE3ang2NGNsTHpuRG5OazY0VVB0eng0Z3M3ZDd6NDB2WXJsaSsvWXViU3BlZkowd2pOL1dML2d6eFZubm9MMzNhUlVjclRiK0xSUmsyVUpvbFVrR0ZnbEJzaU5MOG5CYmhyT3Zjcmxwa2x1ZFJNWUZNNGJra3pFaHZySU1PR0xZWmlhZFI2VDdPQkFXc3dFaE9iVXQxSnNGWTBRMENnZVpxU040VFRySHJCWE5Uc2RZbm9ES0N4RlRmV0RtU3FjeUNUbENqbVFiYVp6RFlXUlUyejBHaWZaQkJCbktjalVSQ1c4S0ZPRkNZZ0ZWVVQ2dGdHb3lZUUZ1blV0UW9MYittNGt6ZVJpWjh0V3JUL3pCbmQ5QTQ2bFIwcEdLZDhaZ1hQSzlaTnp6eXppY3huUFRNUUJ3dFVIUGk0UFZ6TXkrS3JjVGRiZmhvaTdMbGVRSVRLbk5vTVhqcnVndlBIbmNWc1ZTOVR4TE5FSEdtV0YwYnE3emJTTERGdU1sdnNibGJNaEI2amRQUVl4WFdpa0lVQ0hIbVpKU29UZzloejBHYlNPL05OSHYycy9vOU4zOXBHR2ZFdVlueTJlZGlJdGI3dWlPQ2ZHVExzSnBVdEgwYTIzQWZvb1FGdzBhR2ZBenk1THhmaEJuQy9aNVhqVW5VNGxvNW82Qk5XUlcrOHZIOXBPcEJGWlRoZXpzZ2lISXIxcHoxcytnZk5vTG5vOEd1NTJFb0x6ZE1UZUNOZ0ZmUms1VmphV1FQRUVnM0ZxOW0xZnFGWU5YV0hWSWVCV0dxcThiQ21IRkE0RU1zK01TdXdiMVNxRWR2NmxBWDdVL3oxTDZjZWtTUjVFQ1ArQWRHZUV1R1NaWUg1UE5MU3BNTVlxMzMwb1JtamI1N1dRenFRUm1IaHRvNjdlQU9aK09uaXhmdS8vcHJmQStKaWNQVXFmaE8vdUtwbXhpd1VGM05VY2ZHTHl6b2Y3b1VZZVM2c0xCWjJDOTl5K1Z3Zjdob3VWb2p1c2xKZHU1UWJaTVZXWlpRZGUxenRrb2NseXRvOXRGYlA3cEI5OW5hd3J1UyttTG5tb1RRRDNGUzJ1Q2dPNHRiMDNNSlNpcXIwWFBneUt5cVZpakhPbWtrZFJkNHFiRGlBV1NZZXQxMUhyU0tXNDFOTUtJdENWaC91S2tXc3ZLejVzc3E1TXg5YjJqcitzMjFIUHlFNWt3Y0E3MS9aTkdIUU5aY05xYTVXeXhHdnJaMHpaR2o0c3RJaGszYnVuYlV3cmh0YU94bExGOW1hb3ptNWhyTTB2OE4rZmlXYnRhdVNMVFVvTzJqSTBxb0dqeEtWYkdIaUYzcFVzelZpUHVBUFNTVnRoclBLK3gwbXZyWDdNMU42ZTZhcGwyZWVYejFuSVVBWjUxWFEzVTF5UVpZbjE5R1JGbFd1SnovWERuYnllYzlON1hxdUZoUWhySVM1Njdub2dmVUhqRDJIdSs2NUYxL2FzdS91SzVNR3JEK0J6MzNsRlRwbzdkbi9oR2Y3dUVKdWE4OW5GMmpQUmd0VVpPczRONmd5ZW9LR2kra2s5a1dpbGp2bDZIRVBrOXJGU0dZbUZHVUZsR3ZIQ1c5SnAzRlVqMVBXKzJsdFNnR01vakFxaTJDRHhrellNQW41RzQxSEp2Qkp6UkZhMUIvR2RVY1R5anc5aDltODZPcVN3YVgrUHQ3aWZpc1dYUjBZWEZyWXgxc1VMRW9lOVFjMzNlNExCbjFqTHJ2cE52d2NlMWtIQitQWHFlTS9CT04zZ1I1Y3dDM3NpUUYzQWdOaVVNb0hHY2M4S0praFdsRmhPaW5ibmJRbURHMklIQ2VycUxDYjBNbEszRkVXb1VpTFNqbk9tSjczVUI4VGNZdE02K3cyUmxYS3U3cWZkaHZsQk0zak1oVUdOa3R6dWlRSXVZNmVEeC94NHp0QVhLZlVFeXJENlJpTlFVclhMaTZQVzM5QnlrYU5XdlhONUhSNUYvS3hLUVc2RW1nRk1NM0R3ZWdHempJdGU3TXlyMXFtR0xmWm5hNFV0WVVZK2hmVjlTSG5lTEV5enVwZ1ZVaGRsYWE4cGlnR2tyU2I4eGJQdStzZVc3UG1NZmVndm1XREJwWDFIZFJ0RmUxN2JOMk5VNXJYdmxzMmVIQlozOEdEcWUrcmcrT01EYlIyeEltUmM0emVTbHk0ZTlHaTNXRlY2MGZpZXBNMVVVL293c1pxb01Ba1NncHRXZ1NkRlRKaWNOMU43UW85ak13Sm8vR1RybkpHZUFuRUorcUUwVHBUNXloYTEvaDB4MVRGOUFCSkpWc1NCWTZKU2xyVzUya3RyVCt0NG42ZVZIOUtuWnRhRVNxNnhKaHZRT29iakdlcGsxS3RGYVppZGt5ZmhPV1BjbEx1azRxZUw2dmVtWjRCbWtLUXhRVDZCbUFPY29zcW9sUzFrRE9DMGVpbGxyUHFrNVRxUUxLMlhTRmNxTWoxR2FVdE82K002dHdyL2YzR1RnL1dEeTNQbWxpMjlUOStNN3YzdXRkVHRyRnBWQ0hQdW5JZ0tPaTV3VlcyNitNL0ptcUJvc0FmTFRDalkzK3FBdFZ4c1FwVVRCc3pjeXhGckhzbEtrYkdrNnBST3o2Z2llUGFsS0dVNE02RFpkai9GSlllTUtCT2tRUkQ1eDBrNzAwVUdpb1FqSE4zZzhINTAvaHdYUXdHOTRYeDRhSUNKUmtjODlHWFhnUmgwZ09lVjE2aE1vekJkSWphUUg3c0szY3hxREJWMXhlT3B6SldpdEd2d290QTJXWTFZd002SjZzMHhQaEZMdkRaSXJTYXpKaVc3SW1lQi93RmZOYkpFL3kza1l5QmppUlBES2RIbFNPNnBsdmpwWlZkYkJUNHlpRllzQThCM2pHMm9YV0swdFBNUnhQdEZJWDFzbVpNQWRGcHpkNEVWRUhFc0RnR3FXblZHU1NqcytWcU1pVFByWUMzV2YvVy9kQ2d3ZnV0b09yRXVqTnNDaEszQkJnL2hiZHl1Q2ZhS3FWcUZZMkozdE5DUzJoUzRKN280RThCSFJtbVJoK2x5QlBZYkdQYVRSWlRHUXJPYU5PcjNWMDRkd1R1UGRVUXA3U2Z4YzFRODJKc3RFWXJLR1dFNHdLYlVGZUlac0JaYVUxZW15SFZDclBIT1drMURMYkpjOUFMYVU2V0RHZlYwbEJaV3A4cmd3R1VMQk14UkpSMFBsS1RnNmZPWkdoUzBGQ3J6dFMvcU1oUG5GSThnLzJtMzA1cmk3TzUrV3Irb1Yzcko0UEZoQnl4Q21vMDFzQ2lzYlFQRXpKN08yMWJFTFBUTUxVOUM0d05xMTNMV2tTeGo0Rm9rOVlkZ0phNm1seHFhRlVydkM4bG9xdXI5QjVKMU4xRzYrOWxaYVh5dk1KL1RXeHFBZjUva3BIS0VYN01FL3hNclE2Zkg2TnNZNlg0eW9vbnRKNEFsYUN2bVdHVjNYRmVWYTZVR2RROG4vbkJ1RTBWRllYSmxib3BJQ3I4VEpUN2FWcGxvblZyVnhVdnJxMFVWc1VycC9reFpKb1pUYTdrbFYyWlFEMHB1ZjRvclJERlZCUWJxMXBNcnZIdFhYZlRLbjg5TGIzcGJNbjF3T2ZyYkt4M2t2NE5vTzlVMnZWMVRLOFZ3dm05VlFqN3RHeFhteTQ3TjVIdGVtbEZ3bWhKWEtSUWVNMmJKTytlbjZnV0ZsYWpCUG4vQ1g0VUxCY3JkQzZuZ3VZblJzQmZ6Z3lXN21Nb3VNQVkvTDJOb1RCcERIbi81aGhVQytjaXd6akE1Tk1sRFFPa2xqYU9mOUp4VkhNN2Voa0hLbHhGYkQyRnRDd0VJdFVranczRGtOVnNCVlU3NUJJNEsyVm5wVjNqanNCblNiWG9mTkxteXNqVDlUMXY1SEpSWDFoUDJmMnFjVDJGUk1uL1UvVFk2OHE2Q0dyV29ZRlUwbk94L1JTbXBwMjMvblFxemc1Um5HRVAyU1c5WVEzTXdzcHdQSTlKZ3pKZ3AxVTlNQ1lYT0drWkRLQ0xOalNyNk1KVk5lS3FBR25FbGFIN2Q5ZnBCZVQrUlRDejZudzE0S2ZROHJ2emxRUENyUUZCMzZxcnBwRkxNNG1ZaWRkTWpHYXlocFFxcCthUUFDbWRwYnhQQXJPVVUvQ3h1ZnY1SFB4TllsMkJMWkRPNVhNbDNFb3U1a25rMHZyVlpoZ014N200d2txVCsya1dxLzAwKzJDSkJMSnBENFowaThVbmphSmJsMDI5aFZhbmJEWWhHL2Q3VU02bVVXTzd6Y3BsbGVDM1JqRFV6ZEZFZ053YkNSc1RNZktBMFIvQk5Da3ZLVVlrcDFGOEJ5aFNqOTlYSHJ0bTBRMFVyVzgrRkc1Yk9uL0o5d3Y1OE96VmIvN3cvalUvZitQc1d2N2c2NERMNXNHN1p5dGY3cjhic1hubHlQdG1FL3VEYjJ3V1REWEtsNTJyQndGaTMydGx1U09mZzJ3N3l6bEFZdGYyVmdYdTZhMEtQRTJ0QW8vWlJSZlRaczZyQktmS2ZmZHFjTUtqU3RaYlRiaitrNFN1Ly84S0hxcm85NERuYWFyUzlRYVE3bmVhM3ArQXg5czdQT205d1pQUkJZLzdRdmhSbGYwZUlQVm5EUFhDTUdtNlA0WHJFTUNWRFhSN3pmbVFTVmxCcVRnYzl6Q0dnQW1UcGNtUVloMS9PdXBackMrRjJzdFBnNzhQL1piNUszTkVMUGJ3MDZxWjg4ZGhJdFZkaTc2YjN0OWpZSHAxMFpNRmJNMkhodmM2eG0vVkZiNHlzZEJaZnkwdnpJR0pzMktsVmZjcWRWdWlTdDJ1VnFuTFBDMVRPYjlPWFVBdllWS3RlbzVxNjNWVnJBdjNNWG5iMVdQRXhxVnA5aDV6M0ZqdDFLS3lnZ29ycEhXMTgvR3ljZzRBZzdlSFFwZ3E0RlMxVkJxeVRiT0xMQjhTbmRjK05kaWYzRy9rRExtMjlhMjUzVHVPZkxyNjJNcEQzeXFmazlPclpzMVp3MktaMjg5OXJudGZ2NUFid0oxV29jcWtqU3lOcWlpb3dUenVXZ3JNQUZ1N05NQkJmYy9va0xhenp2UkdSN3RrZE5Dd2g5ZlRqcjU3VEp2LzU3WFByMkxsSUNVT3FmaVk3UEQrUzNJZGF4TWRMbGRabXhQZjRZdTJRRW14QzVpanc1VlVCZUtNeHVBeUhIR0hRTXR3RlFkS3RBS1FIdWUwL0tQdkFNQkREdmF0amVrd056SXFoWjJ5dFpJV1djWXk4MzNVVzRjMTN2aWpHakZtOU9hcVhYUzA1dVc2cnFJUGJCUkpjOFFNMVZXRGRNeVI1UkczbjM3NWwvOVJObmpzNExKK2pYT3ZtZHZZNzQ5UGIvM3R4Sm5sRHowMVI3MVFVamVxcnVUYTBWZmNJSHo4NjAvMjNsZzlMUkxwTThDSHBTRGU0T0JyUjI1cG16VCtqZ0hqeHZZdkNHWGxwRmZVWGwwZm1oS3RDWVF5SW9NV1hkR1J4M3psdEs1ZHZ4ZWtSaUZYQ1ZabFVtVjdTYmZLOW1CWFpUdHJtMWtFMDFLa1ZyYVhxWlh0T0RGRjJEWElacWNlMlhUeEVOYTJGL2dMLzYvTDI2a24vaEpMM0RlK1JYTHY2YmlVT25mZDA4cjdIVWNTeGU3SmVDZ0hQS3k1cEFyLzBBVXIvTU05S3Z3cEZpcUNsVFF6MENuMSs5OG85VWQ3L3RMSy9SZlFaSUJMS1Bybi96c1JWK2pDUjRDcjRtNU14a2RaTjN5RXV2REIzSW9sck5rL3hVZUZpZzkwTEpaMG80dkRqQzZLQWlwS0N2OHZVYUlGTHk2UlFnNVJEOFdlQlpkQ0k4SnRpSTJYWCs2RlRyWURYZ1p3bzdoWGsvRXlxQnRlUm1oNGtTcUQ4VDdNRG9nRTQ0V3FIVENhNHFvV2NGWHJrQWJrbnhRVGtaQmdmQUE3cWxXUk9KUWhzYTNjbTI0cWkxY3dWKzFsOE0wQUg4dWZTUmVIbUdrTGlUNlZnMGFnU1ZET3NjWTI4Z2pNME9NUW83UUZNclpEUnJ5aUpKVDdWTUo4K0tvSFJLTS91UVI3RDZSY0lzcGJldzJ3bEYzU0RPd0Y2NkZDdFNMb1owY3NNUmM2ZFM2YWFRMTlsQnZCL1RwNU52ckJiQlNpY0swTHgvc3c1V0ZZS0dsK0lsMTBPNUxPUlRtZzJGZU8zc0lBS0JIbEt2TEREUG1TMXlFTndaNlRBK0M3QVVGNUNBaklVZGlOeVlkRW5ZMnVNR21BMkdaeDlJdFFUaGU1TU9JdkJkbWE5eW9aeGNtT3lZdnhRTTNEMVp5RTRhbWFyK3NpdU81UUUyODdObW9vRm1acnViZ2FyaFhLSDJ1NGV1NjVTK0NRWU96R0J6REtIeEtNVjZxVVB5eVphd2JCNW8wd2NvOTA1NkZ0WVVydWRlekx1cURhSUZZZURyK0pCSEdURkVDNlZDY2V0aFNXOWF1c3JuRlF2SmRkaE9DSGdNeU9WUVREUDAzdzNmaXNzN2M0MDZVeDNuSWFmUElNN2x0V1YxZldkL0FsY0dCaDJua3hLY3B6RE04STN3UG1hN25oM1AwYzNYSkZLZzFqRHc2Mi9VcWxPZ0dTTzR4eklOV0g0Z016L0RnTkEvWHQwa0NIcEVmYWpTS3hqNkRvcjdCUnc3bE8xWjVHb2kyZGtGZDE0aEFMOEJPM01kdGZtbEUxa0hGb09TK2Zkc2ZMeHE3Z2VjVVZWWFM3bjRHSVpkbWl4ejkxOW9iWGZLeUE2Tkhjb3pqUURjM0ZETTlGck9QSHhQNnpiaGorKzZVcVpvbGwxSWF2M2lPR1RxUHR3Qy9HM2xzOVoreTdLemY5WWZqUXQ3Y01XejkvRUtDNnNiVXNvMmpEcUJscitEMjBLY2lpa2V0M2t2THg2OGYzV2JlYjR2bnBwMmw3a0QyMTRkMGpHK1pQbmRqU3AvR214Z2x6aG8zcFZ4ZU9YUFZ5eGRUR2Z2ZGp2eGhsRmUwWDA1ZGJ4eVhheElEdEVmY3hBaTRPeGowcUFiTm1IQmJRUHkyMGwzbzhuVkVtdHVJb3RHRDB6Q1RZbkM1UFZtNXBIMHFVUG15dm40c21kU3c5cndSWmhRZU02TklvYlRmREdaeDlrdHJOMEE3aTNkck5wSklMQk5DSytaNTlhRmIrTVUrTm02M3dzd1Eyakp1OThpOXk1dU9rM2pUM095OVhvMlUwblMwM3VOWk44cERPYUw4WGtQa2VMb01yT0wvalM3NnhQWjdKT3I1azZwbWJMb3QxZk1taUhWK3lNQjhhM1hUR3JBdDBmTW04YU1jWFVQVEl4YnErN0VmdFRtbS9TTzhYM2UzSys1M3ZxUDFma3NlVEMrUDUyVTkxc1BIMzFzR21VTzFnRTB0MU1LWCszKzloZzRyYVQvV3hXYzFVdEF0MXN5RnZhdjdUcmpGbGMwWG5qNmtReHBUTHhwU0xZeW9PU25sc1RIbDBUSGs0Sml4eU11YlJNV1gwTXFiY2k0MUoxYmQ0SXgxYjc4TjY3K2hMTDIxOWNNOXFvemE4ODhjbFhNZDBLNlhxYWh3Z3l4ZGtZMnVHc2ZtNFBpQmw3azBhSGU0c0lsVWtISU5WSVRiZUVoaHZBUnR2QVk0M0VwVFNUdUlXSTFqWGhkM1RLNTN0YmY3S01wRHFpQVEvUllJZmtZQzdtbVduQVJMTWZRcHdTWmFKYlZhWGp2cXovRTY1b2dvdVZWSjBHQkUxYXJKeUtwYkZYV3pHdTZWajBObFBGdHU5bytzUmtOZ2pSb0RFam5TUjloSW1zQ3RIOW9LNms2cFU3cnlMMGdaZm8wbHBqT0h0QitONko4MFJUb29Ma3FTNG9PMUNjY1ladUx5dVBZVU56MzdjcnZXdDRXYkMyNWgvNjM1YW5IRW1KZW1XVXl3Sk9YRkxnUEVFdkdYQlBidkZHVWxTbk5IMkUzSEdja1pnUWZYZUw3K3MzVjA0OXdqY2V5U3RYVUl2ODB3MXppaXc3ZkMwRXFhTUVDM0JUVVFhYmY4UElvMVROVDNzNzZlczJtUW1pcHgrYkVKNEU2ZGFIeGI5RThCNWk3Q0t6MHYzUURLMzA0Mzg0b0xmaTdLY0Zwa1hVK21UQ2RJbjAwSDdhN25GZHJxaU05RytNcG10TEs1MldERHFiWTRVcnpPeG1Rc24rM08wc2tVQjI1aUNmUlUzbXF5cFRpMS9Bd1JQY1VBUGdnWEVEQll0Y3FLYkE2THUxc0RseCtmZVdkVjBSamxWOWxueHZCVTc1cDBxZjRoY3EzelYvZy9saTQvMmJ0cDhOKzNtOHQ1N3hQM1VieDdmZE8zY2pNRlBURzJZT1crMGNrejV4VCtWOTBqYW56Wkl2NzFwL1c5L1MybnJMdXkzQUxhVUN6U2JteS9RQlFmck5uT1lDTzdUVmYxZG9YWEdrZm55RVBiR1NXUVlCWk1hNVVqNVhYWVZiYnFIVy9ISWhzSm9Wd3NwT2FjUXNPWXVLWTlHTDlCQ1IralYrTG5yVk9TSTJsaG5TNS9GWFJiT2NtcmgrTkhDRVQ3Y1hEOGp1ZDJPYm0xUGEwYmw1Nk5oTGFUUzdLb0phb1RacTNYZ3lURzNhLzNEM1REbExJR0s5b21nMlZNYzQ5dVo0aUhzd3lPNm5GVGZ3SXlwWGx2eFVCRjd3WFk4QjZsOC9mc0ZtdkxvM0NCYjF5VTY4M0RkWU05S2dyMTc5NkQ4M3JvSGFmRklDblYyVGg0TkltQU4wU1cyRWFJU3RmZFdRcHRVUWRwclF5RnlOdUhmNklJOWpYVTlwckJuYXJEbm01bEMwRlUxbnFQQ1RqZlBVZkdlSXg3R0VUamRZaHFMZzBndUdFSis1Z1dHME0xWDBkc01mQUI4YmN1K1Bac3ZNQVg4VjR6YmRVMkRObzd0TUk1U3JwcmJxWTZqWEJ0SDJJek5FK0laQ1NYVzFSV0hoTEgxY1FDajY0TkYrMnJnc1krRE5oZUdnYmJsR1B2QmRhMUtHbFloVzBjWWo4d3VGWjJIQlozVjRzb3ZEMU9TQzVlclk1WXo4bUZCT1FwTG83MlEzMFg4Q0wyaEk5NnI1NkRoUXRqNXJ1Znk2bHloNFVtbjRxazVFWHZjcUdJcUR6RGxRdWxRRm81bk1PbFFxZW9XUlVnRFZSUlAyWWluYkk0SkJGUXRDbFFrVlJnTDRHSUpYQ3loMnl2UkVDVHJnQzBBbnkwUjVid2krS3h3eWhiYVhMd283MEpMOHp5em4yR2ttL3JRRFR1UGFRSW1uRURJMmk2dG9SdHFoQ21heWpCY3hRZy9ONkUwQ0dCVnZpSjhvTnNEUnhiT3pWVnd1TUdIMGRLdWJZempDc3FwRnJaaGhQVWtMUmh6WUtVNDdZYkk2aGExbm5PQytsbGNLK3pyUEY0L1kralFHZlh3WGo5OUdMOTQyelpsTDcwZ3pDMGZNbmpHaUJGSlBBVHNyalRRMFl0eFB5dmF5WUcySVBkcDdSQ1p0bzZ6RVVoZWtiZ1NMYkFpUzdRVjZjUjYvTGpCb2N0a0NRSStOL1pGOU9CT2VHS2JoY3NvN2hHc1JGWlBnNVZzS3hjYXFsUWpsUVlYbTRJQTRQeWUremYwMjM3TnJZRDJaWS9lRUw2MVpmTkhsV1JML2JSTmU5ZU1ubkh6bm1xSzZ3bVJkYmY5RmJIZFhMZHA5MStXVFNRZkJvOHFjNnFmYTcyK21jVURhWjhqNERjdXpvc1ZjeGZvZEpSK2dVNUhHSWNUY0lqdXFHUVQyMFJQbXBlTzhLSk5qNURiZDI5ODFJSWMvdnp1UjNxUnhZcis1ekJpTjZZMjBlM3gwcUF4WmkvL0JJd1l6ZXpSbk1uUE9QaDVVQXBmYWpHdExqZ3owVXE5QUp4WkY0QXp1eHN1NDRETDlFd1c0NVorRXFVcUIrOE84UjRNZFQ2NDUwSVF2L3d5MGptRHVabEsrVEwwcDNlSEdwc1JTUDV3UElleG9OSlExemo2YXVOb2N3dklnVEtkUFVhRW5jK0swYitUNzZTZGNvclpCb3R5cHB2dFZaWXZzcWFaRjZXVkMyUS9kQi9wMHA1MSs4QnB6aHUxcnFsbkpUL05xOForVFRCbklsaDN2WFJzd3QxU0xyRmpFNDErOXRhMXFaUVN6bm05bTNRYkVuU0R2UVJWR1hDaFhvTDgvMFl2UVVPaWw2RDRiL1lTTkx5amNCZG9KaWlvT0d3R0hPYUF0Ri9BeFR4SU5iNXdQSXRSVFNCMEhsNzdCQ1huU1MxQWpodEFGanJacm1JWUZXOHoyUWp1YVlXRkV6ejJyME1EN3BLbTRBTFUwdXUwZkhRKzBady9SKzI5MEF6bXRKaG02aGVDVFZUTTNhNzZBaHhDdTJvY3dZRkozWE9IaFl3TGhmYTROZFdyczZuYkx3Vm80bENtSzJFcEdWMmhFTjNxd1JLS3BlYmpuS2M2Y1g4QkcxeEdJVUlWTngzZFA4SGhZZ3dpVlpTNS9DaGxEcGtZbHBLSkQ5MTJUcm9MRDBzblN2TldKMlh4MCtYRUVvdlVyb3Q4ODBGUzllTG1iMFlsSlJCUEhmVmZONytvdk5udzR4OXUvWE1rOHY3MlAveElQaUoza2FIeEpkZThwT1lSdjNMdGlrTzg3WlRTdm1zTGlXMitWVG1ka0pmR2tTQXZDMmdOM2UzcXp2VzVZVXJJRmtJek9lV3drUjFqRCtGNHVTUFRBaWdwUi9kSWY3YmhvWU1tU2VDUUhXSzdWRTdiZFZldzhMb2N4VkFkNW0zbTZyQlFWcFFOMlZTQmlWbGNtV3luVm5XTENVUlJXMXAyVVRIZHhoeFJ4eG1TNUNxMm8rcnVIc2xQYk5DdHRyL1JVdytKblVjWjI3RXpmZENWbThmOWhWZzdkYlpIZmpIbXZ2Q2N5OTVkcFh4NzYrNnp5MUMvdjQvdzk5NnJLUGNKR1h3NTd4dXlhR1Q5d3FGRlZQUitYelp1ZkpCNVNHckQyMGMyZlA4OWF2dzduMzEyNS9ZalIyb3JwbzNyVnpGdVdxSld5bXM0eEpsQXk2SDl4Wkl6TUhBUDZ0eHczTXFXVWpwcnpNVXlNdHBTRFVaZ3ZEUUpOa2p6a2ozMFFwYVQ3VDlteEZSeXExUGRzeDBUWDdNTWNDVTk5d0xwR3hkYVBVa3BIU2Q2cHBhRmhpZm5kK2dNdmVXUmNicGwvR2pxVnltaGUxNExZVllpYm1UZDExakgvNjZkUnRIZExES25Dck03Tkc4S3U5ZGlmamZZRlJuY2RFNXlCT05tWmtHa2RWVWwwMTBkNHhuTVBzaWdyVi9VQmhOWXBDcGJjV2RtZ1RxQnpRN2M2TmVOdmtaYWl4MHpXbTNVUEJCN05RaDZ0YVo3TVo1NzlOamd1blhRK0I5K3A5dEl2L09lMTdjanFWbUhiamo5RS9wN1E4dFAvOTdRVC8zOVZLR0piTlMzQUIrdjFMcnJCR1d6anRibzBWMlo3TzMwUmN2MXpLbXM2RlFRSloyNkN5c3NwcVNpbXFtNE8rWlVzOVZiTlFMM3l0VFo1eDhaTkFHM0JyK3NmKzNFdVhTUGIzamVYZHErNnpSeFBiWHJZZG9XNUs1dUczSzZ6dHVRczhkR25McVA2Q2FjaHdjMTBrMDRLZDcrdjludm5PZG1DazJDanVMUHIzVXprRHhoUUNMSVFzU2psS0ZWaFdDV2s3MnJhRDZYbm1HS09zT3J6RG1wTTB6V3BVVjd4VzNSZVZkbUxwd3lLelFseGVtb0hqa3hXaitUcklYek1KeUw3RnpGL3VJcXcram9nRWtBdGpvWDlJenVsUXF3TytoYytIRzNHaFYybkJBcEwxSExnbnVrR3RUY05uczdnMWVneWtaNnROZkpLZnFwNlNJM1RCeFEvN1A1Nm5sVnorbnIzMk15Y1UvWE00S0R6cVVQZTZTbnFsSUdKbFJ5aHhqalRLY1RXNkJOckFheDEwNWJhMnNRMDhUKzgyYTQ4T0pUVHFxN3dPMUpBV1BveVpFNmxSeUE3cllRRXorZGY1LzI1Y1JPRUlJT2UxYW9IMnFYaWJpZU5ySlFQODdyTmJGbDIvTmJ0ejYvalp5WnZYWHI3RmxidDFGNTBYTHV0SDRGNEFEM1VNempScWg5ZEkwNTRiQnMwNEZLNkEyRjJDWGF6Q0pmYTJZaDZWbmY1bFE3cmEvRGZrcVpkdXIwNnJiSGJwRjY1TzkycURXOStBNWJJZzZvblV5K243eThxV2xBYlJQYmU3ZXBxWlo5VGg2Z25pUC80VGJ5RTJtdkJ0emZ4YUExQkRIcEV1Mkp1bmRDMGhvZ2NkMysxcWY5TFc0eW8wdjhPZTMxemxwWVJIbzBnRWkwZllEN1ZKLzdYSS83V1BWRnowcXBsblpzMVhZejQwaXAxVlltNWJDZWhYbWh1TWxJTDZTSFpaTVZOd1NtWVZYZFNUbkwxUjdMb3Ixc3N2TE0yT0locHN2U21pMUp4aEJWVTdLd3pZRzVMNVd1cUtrVUI3Q3N4S1FHSFduOURIYmY4MWVIYTdoRVJTSnRaMkR3dUwzd29lb2t2SytBQzFSUDVIVk5pK3ZKOGgrMFFzVGIvaDdoaXpyak9oM2YwUGwrNU85M3FQdHUva3ZaTm9TY2F2VldwdGUwL28yazBCTEVPMjlxclVtdjlMWnUya08zM3lTMnYrUGE4UXUzQzlQcGZsZHViclc2bzQvWkdnN0hPU1pFaFpEV1dncjNpemZaeFZDSWJVRmhPS20yVitsOUp5d2tMQkRmU2RXMDJDdlV6bVF1R2lhcDZQQklVVGRzQXBHRGJWbUlpSzExVWUzd0M2S2ZSRFpFQ1Q5MTA2YXAwYjJPdlhwZmRiVnlQZGtCcnhlUU1wUTZza0pweFJmVEoyQVIvRlg0SzZ5RVFGTHY3MFEzVjZwUGFHb0ZrM09Wb2svRVAra280R2lYR2s3NEhuaWRCNDU4M0gzTXR3TmNwR3Niamd6YWcwL0hySFk1TlMvTVdsT0xySUcvbTFaUllmLzdYdnQ3SUVaY3pLcng0WllKdVY0NzBJYWJOZmIzb2gvWmdQVkd2bHpRVXpPeWMxalBNb3NiUTM1cFdXeWZ6WmpKbTZsMXM5UjI4ZkIzYmVQQkpXM3RrTFAvc2RhV29jSENVRDN1NmNHWE5lTCtDVFYwYzQrSDRvVVBwV21iZTVDTjNiZCtBSHBBUEh4QThaQ0IvVXNwRnRMQzFPYnZzU05KYXRmNE15OTEvR2xzWndPcWRLVnBvKzdhcHNSNzNqWWxTUU1rNXc5czJQbEQ2dmhRcXhIVTRWZ01MWFJQbFQ1Y0ZkZWYrMEMxeTBxcXcrRllGazhyeWpCVEFQczlWZURZd3Vyc3R0blRDbXNLdlhTQU1ZZW5tTko4OUZLMlhjSDJmYVcwM1F2TkxmU0hZaVdsK0YxSk1meXN0QVFQU3oxbVRPeWwzdGYrU0F2VmZZRVdLb0hyWXJmVFVxZEdDMzFMNENnckI0NHFxK0dvSW95WXlrZER4cHhiUnJNeks4UTJVMDdmZml3azF0dldMcjRMVVFwdFplRlhhU1ZwK3hmeTNzT1Bxd2dlL2RwcnAvalN4a2oveHNiK2tlcnpONGE1S0NuUjlXU1lxT0srZ250R3czd1pZTDR2MGxJUDlOTTRHbUE5SE82TzlPRC9NdExSblZCaFk3c1NkcUc2VEVNMUlCajNrVE9ETlNUMUZXVlRUdlRmUXkzNUtZVFcveVFpTlFMK1B3OER1SUlBQUFCNDJtTmdaR0JnQUdMRktjOVh4dlBiZkdXUTUyQUFnZk9sRDFwZzlIL0RmeGtjY2V6NlFIVWNERXdnVVFCZ25neWJBQUFBZU5wallHUmdZTmYvNThEQXdMSHZ2K0gveVJ4eERFQVJGUEFDQUlZVkJrMTQybTJUWDBoVFVSekh2L2VjMzdrYkk0YklpS0JtRDJJRklXRWhZNHc5UkpHejlqQkVSa2hJRE5xRE1KS2FVQytCUkVSY2h0eVhmSklZRlJTSWozdVFrQmdoUVRHQ2lCN0VJbUwwWU5LRGlKakMrcDQ3VmlZK2ZQaWVmNzl6ei9sK3oxVS9jVEVNd0tLNkFHY0RKUjFCUVZad1VqN2pzdGxHMHB4QzJxbWhvQWFSVnduMHFXV2tSSkJ5TmxGU1JjNXRVUjhBOGd0NTFoNlhPa1psRmdQeUZFbDVqeWxwSUMvbmtaQTMxQVp5VGhNbFcydjM2S0RuY2RTOWdJd3BRTXdBZkZORzNpekFsemt5emY0cjl0L0NWOTN3OVFxNlpJdmpoekR0Y28ycHczZDd1UGZYdHBvdzUxN3oyM004Tytmc25xRWtvbVlZWVhNRUlqVmNVejBZczJlbTl1bDd2T3Y5MW05bmpYZTRnaEY1RGsvdklFZk5TUms1ZFFmeG9PMmg0cXpqdHJQZUdwQUVQTFk5ZHg0ZXh6M2VOeWRWYWhWWit1UHBaU1JVQlRGNXhERzN0ZXRHRU5IYmlOaTJidUE2Zll6UVU1L2FLMUd1YlhzL0VYeDNHUDNTVCs5NVZydEdmMEJTRGJVK3VVbU02U2d5ZWcxcE9ZeVU5VjV2SUtOKzhCNFRyTEUrbnNBb3lkcTc2RmtrYkRiY0Erb1lZanFOUzdiV3ZZV1l1NGdZUGNucTB6Z1hlSDRBb1lYV3JzMGh5R0FQcXJ0Vll3NVQxQ1paTk44UjYyU3dINTdwYnBCSnZaM1RYMndPekV0MlVBazhQNENRaTVIQWovTC8wUDluOUg2YytwRzhDTHozOERqUS9kQ25RRzBPZTJFT1FWN1U4Qkx5b1JuazdKblVFTDN5QSs4UU92TlAxUTNtODQ2Y2JZTW05U2ExeURubTBFR1c2TzlML2hPYnVHcmZ1RVZQWXB4WUxhbFZQRFRmT001YU5jTWFZdmMxVHpDb3EralZYL2dHaTN4dnhGMUZIUEUvM0tyT1BBQUFBSGphWTJCZzBJSENFb1liakVhTVY1aUttSG1ZM1poem1DY3huMkRoWXJGamlXRnBZWm5IOG9kVmliV0M5UkdiRHRzVWRnRjJFL1lqSEM0Y2RSeUhPSzV4L09EazRhemhTdUthd3ZXTDI0TzdoL3NZOXkrZURKNEZQUHQ0M3ZFcThYcndkdkFlNHBQaWkrTTd4aS9EMzhlL2ovK1BnSkpBajhBQmdRK0Njb0orZ21tQ3N3UjNDRjRRL0NDVUpYUkNtRXM0Uy9pVWlJVElKSkZyb2dLaWNhSlRSRGVKU1lqRmlLMFI1eEhQRVo4bjRTRXhSK0tSSkp0a20rUU95VTlTQ2xJZFVrdWt1YVJ6Z0hDZGpJek1FVms3MlVXeUorVFM1RmJKdThrZmtIK2d3S1dnb1hCQTRZNmlobUtGNGdrbEk2VUFwVDZsTFVwL2xHV1VNNVM3VkhoVUpxa0dxUjVUWTFDelVhdFMrNldlby81RXcwcmpqS2FRWm9qbVBDMEJMUXV0SkswSldtKzBnN1F2NlJqcFROSDVvVHRKVDA3UFFlK0FQb2QrZ1A0Y0F5RURINE1aaGpHR0Q0d3lqTDRZN3pJcE1OVXpmV0NXWkhiSzNNUjhrWVdMUlk3Rk5Jc2psZ3FXczZ4a3JLcXNibGpiV0Yrd2liT1pZeXRnbTJTN3pVN0Fib0xkSlhzaisxVU9KZzZYSEowY014ejM0SUNuSEc4NFBuUDg1eVRtNU9mVTVMVE5XY1E1dzNtZjh5c1hPeUNNY1dsd2FYQmxjODF5N1hMamN5dHhOM0svQWdEOWQ1TS9BQUFBQVFBQUFPa0FUZ0FGQUFBQUFBQUNBQUVBQWdBV0FBQUJBQURzQUFBQUFIamFuWkk5VHNOQUVJWGZPdUVuQWtGb0VLSkFMb01FeG9Fa0lGTUJMVVNJSUpBUWpVTU1pY2lmc0FrZ1VWSlNjZ0tPd1FuZ0VwU2NnWkszNjQxbE9Zb0xOTXJ1TitPM003TTdBVENQRDJRZ3Nqa0FYZjVDRmxpaEY3S0JhYnhxenVBRWI1cXpLT0JIOHdTcVlrN3pKQXJpVXZNVUxzU0w1aHlXeGJmbUdWVEVyK1paVkF4TGN4NUxSa1B6QXZMR3MrWlBMQnJESHI1Z0crODRRQTk5UE9FT0xkeWdpUUFtKzduQ0t2Y2p1SXpma21yODJxR3lDMSt0YTR4dHdxYVZZWkgzMEthWnNTeSs4anp1SHZjQjF3YVZ4K1FlSGxVMmw0b3F2WUdpUTU3WnA5ZW1ibGczV2RXaGJueUdHbXQwR0svckxFNnN4L1M2WmxUNVRIWHJVeWZybVNpeVoxdlpMblBVR0pFY2p6YXBEUGhlVWorSVRsall3azZpNnJEbStraW40N3RycVhlVUZGRGpVdXNwVFRpVkhxNVRwMlNsZkpNekNqaDVCeHUwQjJWV2xOc2Z5U1J2MlBubnFYSDNTNzdET2YwNjd5VFBCdEZibnJMcXZmcVA5WmxIUnJmVldtWVhKYjZ5bzZZY3pycUkwaC80Wm9xSEFBQUFlTnB0MEVWczAzRVV3UEh2MnlwYjUrNGI3dEwvdiswRWI3ZjljWGRuc0swdGpHMTBGQmhPR0M2QmtIQ0RZQmNndUFZQ0hJRGdGaVRBZ1RNZURzQVZ1djEvM0hpWFQ5NUxudVFSUlZ2OHNkS04vOFVua0NpSkpob0xWbXpZaVNFV0IzSEVrMEFpU1NTVFFpcHBwSk5CSmxsa2swTXVlZVJUUUNGRnRLTTlIZWhJSnpyVGhhNlJQZDNwUVU5NjBacys5TVdKaG80TE54NktLYUdVTXZyUm53RU1aQkNER1lJWEgrVlVVSW5CVUlZeG5CR01aQlNqR2NOWXhqR2VDVXhrRXBPWndsU21NWjBaekdRV3M1bkRYT1pSSlJhTzBzSW1ickNmajJ4bU56czR3SEdPaVpYdHZHY2orOFFtZG5heGxkdDhrQmdPY29KZi9PUTNSempGQSs1eG12a3NZQS9WUEtLRyt6emtHWTk1d3RQSWoycDV5WE5lY0FZL1A5akxHMTd4bWdCZitNWTJGaEprRVl1cG81NUROTENFUmtJMEVXWXB5MWpPWjFhd2ttWldzWWJWWE9VdzYxakxlamJ3bGU5YzR5em51TTViM2ttc09DUk80aVZCRWlWSmtpVkZVaVZOMGlWRE1qblBCUzV6aFR0YzVCSjMyY0pKeWVJbXR5UmJjdGdwdVpJbitWSWdoVFovWFhOalFMT0g2NE5PcDdQQzFPdFVxdHluSzEzS3NsYjFTSU5TVStwS2w5S3Q5Q2lMbFNYS1V1Vy9lVjVUVGMzVk5FZHQwQjhPMVZSWE5RWE1rbTZZZWd4TFpUalUwSlo0alBKV0RaOTVSMFJkNlZLNi93TDJhSnY0QUFBQWVObzl6VHNLd2tBVWhlRk0zZzlqWGlQYVJCSkJCR2NKTmhZbUNHbkVLZ0ZybDJCdFk2bHJ1YkZ5VWU1QkR6cVo3bnluK1Yvc2N5TjIxeHB5RDIzUDJLUHJhMXUwSmNWZFEveUljZTF5c3NXcDFjZ29LakxFanN5aWVob3pYZnhnQWVZQUc3RDJFZzVnYnlSY3dDa2xQTUI5Uy9pQU41Y0lBRCtYR0FIQjRnOUdvYXlQOFlaVFhmUkdmUUVqY0x4VWpNSG9ySmlBOFZZeEJST2htSUhwV3BHRDJVcHhBdko4WUVkY2ZBR2p4bFBrQUFBQUFBRlRVREFFQUFBPSkgZm9ybWF0KCd3b2ZmJyksdXJsKGh0dHBzOi8vY2RuLmF1dGgwLmNvbS9mb250cy9wcm94aW1hLW5vdmEvcHJveGltYW5vdmEtc2VtaWJvbGQtd2ViZm9udC13ZWJmb250LnR0ZikgZm9ybWF0KCd0cnVldHlwZScpO2ZvbnQtd2VpZ2h0OjcwMDtmb250LXN0eWxlOm5vcm1hbH0jYTAtd2lkZ2V0IFtjbGFzcyo9XFxcIiBhMC1pY29uLVxcXCJdOmJlZm9yZSwjYTAtd2lkZ2V0IFtjbGFzc149YTAtaWNvbi1dOmJlZm9yZXtmb250LWZhbWlseTphdXRoMCFpbXBvcnRhbnQ7Zm9udC1zdHlsZTpub3JtYWwhaW1wb3J0YW50O2ZvbnQtd2VpZ2h0OjQwMCFpbXBvcnRhbnQ7Zm9udC12YXJpYW50Om5vcm1hbCFpbXBvcnRhbnQ7dGV4dC10cmFuc2Zvcm06bm9uZSFpbXBvcnRhbnQ7c3BlYWs6bm9uZTtsaW5lLWhlaWdodDoxOy13ZWJraXQtZm9udC1zbW9vdGhpbmc6YW50aWFsaWFzZWQ7LW1vei1vc3gtZm9udC1zbW9vdGhpbmc6Z3JheXNjYWxlfSNhMC13aWRnZXQgLmEwLWljb24tYmFkZ2U6YmVmb3Jle2NvbnRlbnQ6XFxcImFcXFwifSNhMC13aWRnZXQgLmEwLWljb24tYnVkaWNvbjpiZWZvcmV7Y29udGVudDpcXFwiYlxcXCJ9I2EwLXdpZGdldCAuYTAtaWNvbi1idWRpY29uLTE6YmVmb3Jle2NvbnRlbnQ6XFxcImNcXFwifSNhMC13aWRnZXQgLmEwLWljb24tYnVkaWNvbi0yOmJlZm9yZXtjb250ZW50OlxcXCJkXFxcIn0jYTAtd2lkZ2V0IC5hMC1pY29uLWJ1ZGljb24tMzpiZWZvcmV7Y29udGVudDpcXFwiZVxcXCJ9I2EwLXdpZGdldCAuYTAtYW5pbWF0ZWR7LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246MXM7LW1vei1hbmltYXRpb24tZHVyYXRpb246MXM7YW5pbWF0aW9uLWR1cmF0aW9uOjFzOy13ZWJraXQtYW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoOy1tb3otYW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoO2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aH0jYTAtd2lkZ2V0IC5hMC1hbmltYXRlZC5hMC1pbmZpbml0ZXstd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6aW5maW5pdGU7LW1vei1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50OmluZmluaXRlO2FuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6aW5maW5pdGV9I2EwLXdpZGdldCAuYTAtYW5pbWF0ZWQuYTAtaGluZ2V7LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246MnM7LW1vei1hbmltYXRpb24tZHVyYXRpb246MnM7YW5pbWF0aW9uLWR1cmF0aW9uOjJzfUAtd2Via2l0LWtleWZyYW1lcyBib3VuY2V7MCUsMTAwJSwyMCUsNTAlLDgwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTQwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzBweCl9NjAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTE1cHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xNXB4KX19QGtleWZyYW1lcyBib3VuY2V7MCUsMTAwJSwyMCUsNTAlLDgwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTQwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTMwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTMwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KX02MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTVweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xNXB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xNXB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTVweCl9fUAtbW96LWtleWZyYW1lcyBib3VuY2V7MCUsMTAwJSwyMCUsNTAlLDgwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTQwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTMwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTMwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KX02MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTVweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xNXB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xNXB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTVweCl9fSNhMC13aWRnZXQgLmEwLWJvdW5jZXstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmJvdW5jZTstbW96LWFuaW1hdGlvbi1uYW1lOmJvdW5jZTthbmltYXRpb24tbmFtZTpib3VuY2V9QC13ZWJraXQta2V5ZnJhbWVzIGZsYXNoezAlLDEwMCUsNTAle29wYWNpdHk6MX0yNSUsNzUle29wYWNpdHk6MH19QGtleWZyYW1lcyBmbGFzaHswJSwxMDAlLDUwJXtvcGFjaXR5OjF9MjUlLDc1JXtvcGFjaXR5OjB9fUAtbW96LWtleWZyYW1lcyBmbGFzaHswJSwxMDAlLDUwJXtvcGFjaXR5OjF9MjUlLDc1JXtvcGFjaXR5OjB9fSNhMC13aWRnZXQgLmEwLWZsYXNoey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6Zmxhc2g7LW1vei1hbmltYXRpb24tbmFtZTpmbGFzaDthbmltYXRpb24tbmFtZTpmbGFzaH1ALXdlYmtpdC1rZXlmcmFtZXMgcHVsc2V7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfTUwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjEpO3RyYW5zZm9ybTpzY2FsZSgxLjEpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfX1Aa2V5ZnJhbWVzIHB1bHNlezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpOy1tcy10cmFuc2Zvcm06c2NhbGUoMSk7LW1vei10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfTUwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjEpOy1tcy10cmFuc2Zvcm06c2NhbGUoMS4xKTstbW96LXRyYW5zZm9ybTpzY2FsZSgxLjEpO3RyYW5zZm9ybTpzY2FsZSgxLjEpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxKTstbW96LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9fUAtbW96LWtleWZyYW1lcyBwdWxzZXswJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTstbXMtdHJhbnNmb3JtOnNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX01MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xKTstbXMtdHJhbnNmb3JtOnNjYWxlKDEuMSk7LW1vei10cmFuc2Zvcm06c2NhbGUoMS4xKTt0cmFuc2Zvcm06c2NhbGUoMS4xKX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpOy1tcy10cmFuc2Zvcm06c2NhbGUoMSk7LW1vei10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfX0jYTAtd2lkZ2V0IC5hMC1wdWxzZXstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnB1bHNlOy1tb3otYW5pbWF0aW9uLW5hbWU6cHVsc2U7YW5pbWF0aW9uLW5hbWU6cHVsc2V9QC13ZWJraXQta2V5ZnJhbWVzIHJ1YmJlckJhbmR7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfTMwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZVgoMS4yNSkgc2NhbGVZKDAuNzUpO3RyYW5zZm9ybTpzY2FsZVgoMS4yNSkgc2NhbGVZKDAuNzUpfTQwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZVgoMC43NSkgc2NhbGVZKDEuMjUpO3RyYW5zZm9ybTpzY2FsZVgoMC43NSkgc2NhbGVZKDEuMjUpfTYwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZVgoMS4xNSkgc2NhbGVZKDAuODUpO3RyYW5zZm9ybTpzY2FsZVgoMS4xNSkgc2NhbGVZKDAuODUpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfX1Aa2V5ZnJhbWVzIHJ1YmJlckJhbmR7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxKTstbW96LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9MzAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlWCgxLjI1KSBzY2FsZVkoMC43NSk7LW1zLXRyYW5zZm9ybTpzY2FsZVgoMS4yNSkgc2NhbGVZKDAuNzUpOy1tb3otdHJhbnNmb3JtOnNjYWxlWCgxLjI1KSBzY2FsZVkoMC43NSk7dHJhbnNmb3JtOnNjYWxlWCgxLjI1KSBzY2FsZVkoMC43NSl9NDAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlWCgwLjc1KSBzY2FsZVkoMS4yNSk7LW1zLXRyYW5zZm9ybTpzY2FsZVgoMC43NSkgc2NhbGVZKDEuMjUpOy1tb3otdHJhbnNmb3JtOnNjYWxlWCgwLjc1KSBzY2FsZVkoMS4yNSk7dHJhbnNmb3JtOnNjYWxlWCgwLjc1KSBzY2FsZVkoMS4yNSl9NjAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlWCgxLjE1KSBzY2FsZVkoMC44NSk7LW1zLXRyYW5zZm9ybTpzY2FsZVgoMS4xNSkgc2NhbGVZKDAuODUpOy1tb3otdHJhbnNmb3JtOnNjYWxlWCgxLjE1KSBzY2FsZVkoMC44NSk7dHJhbnNmb3JtOnNjYWxlWCgxLjE1KSBzY2FsZVkoMC44NSl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTstbXMtdHJhbnNmb3JtOnNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX19QC1tb3ota2V5ZnJhbWVzIHJ1YmJlckJhbmR7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxKTstbW96LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9MzAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlWCgxLjI1KSBzY2FsZVkoMC43NSk7LW1zLXRyYW5zZm9ybTpzY2FsZVgoMS4yNSkgc2NhbGVZKDAuNzUpOy1tb3otdHJhbnNmb3JtOnNjYWxlWCgxLjI1KSBzY2FsZVkoMC43NSk7dHJhbnNmb3JtOnNjYWxlWCgxLjI1KSBzY2FsZVkoMC43NSl9NDAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlWCgwLjc1KSBzY2FsZVkoMS4yNSk7LW1zLXRyYW5zZm9ybTpzY2FsZVgoMC43NSkgc2NhbGVZKDEuMjUpOy1tb3otdHJhbnNmb3JtOnNjYWxlWCgwLjc1KSBzY2FsZVkoMS4yNSk7dHJhbnNmb3JtOnNjYWxlWCgwLjc1KSBzY2FsZVkoMS4yNSl9NjAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlWCgxLjE1KSBzY2FsZVkoMC44NSk7LW1zLXRyYW5zZm9ybTpzY2FsZVgoMS4xNSkgc2NhbGVZKDAuODUpOy1tb3otdHJhbnNmb3JtOnNjYWxlWCgxLjE1KSBzY2FsZVkoMC44NSk7dHJhbnNmb3JtOnNjYWxlWCgxLjE1KSBzY2FsZVkoMC44NSl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTstbXMtdHJhbnNmb3JtOnNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX19I2EwLXdpZGdldCAuYTAtcnViYmVyQmFuZHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnJ1YmJlckJhbmQ7LW1vei1hbmltYXRpb24tbmFtZTpydWJiZXJCYW5kO2FuaW1hdGlvbi1uYW1lOnJ1YmJlckJhbmR9QC13ZWJraXQta2V5ZnJhbWVzIHNoYWtlezAlLDEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0xMCUsMzAlLDUwJSw3MCUsOTAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KX0yMCUsNDAlLDYwJSw4MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KX19QGtleWZyYW1lcyBzaGFrZXswJSwxMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MTAlLDMwJSw1MCUsNzAlLDkwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KX0yMCUsNDAlLDYwJSw4MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KX19QC1tb3ota2V5ZnJhbWVzIHNoYWtlezAlLDEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0xMCUsMzAlLDUwJSw3MCUsOTAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpfTIwJSw0MCUsNjAlLDgwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpfX0jYTAtd2lkZ2V0IC5hMC1zaGFrZXstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnNoYWtlOy1tb3otYW5pbWF0aW9uLW5hbWU6c2hha2U7YW5pbWF0aW9uLW5hbWU6c2hha2V9QC13ZWJraXQta2V5ZnJhbWVzIHN3aW5nezIwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMTVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMTVkZWcpfTQwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTEwZGVnKTt0cmFuc2Zvcm06cm90YXRlKC0xMGRlZyl9NjAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKDVkZWcpfTgwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTVkZWcpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9fUBrZXlmcmFtZXMgc3dpbmd7MjAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgxNWRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMTVkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgxNWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgxNWRlZyl9NDAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtMTBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKC0xMGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKC0xMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtMTBkZWcpfTYwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoNWRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoNWRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoNWRlZyl9ODAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtNWRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoLTVkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgtNWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtNWRlZyl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKDBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9fUAtbW96LWtleWZyYW1lcyBzd2luZ3syMCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDE1ZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgxNWRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKDE1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKDE1ZGVnKX00MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC0xMGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoLTEwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoLTEwZGVnKTt0cmFuc2Zvcm06cm90YXRlKC0xMGRlZyl9NjAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg1ZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSg1ZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoNWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg1ZGVnKX04MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC01ZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgtNWRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKC01ZGVnKTt0cmFuc2Zvcm06cm90YXRlKC01ZGVnKX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKX19I2EwLXdpZGdldCAuYTAtc3dpbmd7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnRvcCBjZW50ZXI7LW1zLXRyYW5zZm9ybS1vcmlnaW46dG9wIGNlbnRlcjstbW96LXRyYW5zZm9ybS1vcmlnaW46dG9wIGNlbnRlcjt0cmFuc2Zvcm0tb3JpZ2luOnRvcCBjZW50ZXI7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpzd2luZzstbW96LWFuaW1hdGlvbi1uYW1lOnN3aW5nO2FuaW1hdGlvbi1uYW1lOnN3aW5nfUAtd2Via2l0LWtleWZyYW1lcyB0YWRhezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX0xMCUsMjAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuOSkgcm90YXRlKC0zZGVnKTt0cmFuc2Zvcm06c2NhbGUoMC45KSByb3RhdGUoLTNkZWcpfTMwJSw1MCUsNzAlLDkwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSgzZGVnKTt0cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUoM2RlZyl9NDAlLDYwJSw4MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUoLTNkZWcpO3RyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSgtM2RlZyl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSByb3RhdGUoMCk7dHJhbnNmb3JtOnNjYWxlKDEpIHJvdGF0ZSgwKX19QGtleWZyYW1lcyB0YWRhezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpOy1tcy10cmFuc2Zvcm06c2NhbGUoMSk7LW1vei10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfTEwJSwyMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC45KSByb3RhdGUoLTNkZWcpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC45KSByb3RhdGUoLTNkZWcpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuOSkgcm90YXRlKC0zZGVnKTt0cmFuc2Zvcm06c2NhbGUoMC45KSByb3RhdGUoLTNkZWcpfTMwJSw1MCUsNzAlLDkwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSgzZGVnKTstbXMtdHJhbnNmb3JtOnNjYWxlKDEuMSkgcm90YXRlKDNkZWcpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEuMSkgcm90YXRlKDNkZWcpO3RyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSgzZGVnKX00MCUsNjAlLDgwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSgtM2RlZyk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSgtM2RlZyk7LW1vei10cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUoLTNkZWcpO3RyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSgtM2RlZyl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSByb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxKSByb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMSkgcm90YXRlKDApO3RyYW5zZm9ybTpzY2FsZSgxKSByb3RhdGUoMCl9fUAtbW96LWtleWZyYW1lcyB0YWRhezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpOy1tcy10cmFuc2Zvcm06c2NhbGUoMSk7LW1vei10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfTEwJSwyMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC45KSByb3RhdGUoLTNkZWcpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC45KSByb3RhdGUoLTNkZWcpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuOSkgcm90YXRlKC0zZGVnKTt0cmFuc2Zvcm06c2NhbGUoMC45KSByb3RhdGUoLTNkZWcpfTMwJSw1MCUsNzAlLDkwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSgzZGVnKTstbXMtdHJhbnNmb3JtOnNjYWxlKDEuMSkgcm90YXRlKDNkZWcpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEuMSkgcm90YXRlKDNkZWcpO3RyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSgzZGVnKX00MCUsNjAlLDgwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSgtM2RlZyk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSgtM2RlZyk7LW1vei10cmFuc2Zvcm06c2NhbGUoMS4xKSByb3RhdGUoLTNkZWcpO3RyYW5zZm9ybTpzY2FsZSgxLjEpIHJvdGF0ZSgtM2RlZyl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSByb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxKSByb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMSkgcm90YXRlKDApO3RyYW5zZm9ybTpzY2FsZSgxKSByb3RhdGUoMCl9fSNhMC13aWRnZXQgLmEwLXRhZGF7LXdlYmtpdC1hbmltYXRpb24tbmFtZTp0YWRhOy1tb3otYW5pbWF0aW9uLW5hbWU6dGFkYTthbmltYXRpb24tbmFtZTp0YWRhfUAtd2Via2l0LWtleWZyYW1lcyB3b2JibGV7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpfTE1JXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yNSUpIHJvdGF0ZSgtNWRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTI1JSkgcm90YXRlKC01ZGVnKX0zMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMCUpIHJvdGF0ZSgzZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMCUpIHJvdGF0ZSgzZGVnKX00NSV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTUlKSByb3RhdGUoLTNkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xNSUpIHJvdGF0ZSgtM2RlZyl9NjAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAlKSByb3RhdGUoMmRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAlKSByb3RhdGUoMmRlZyl9NzUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUlKSByb3RhdGUoLTFkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC01JSkgcm90YXRlKC0xZGVnKX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKX19QGtleWZyYW1lcyB3b2JibGV7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSl9MTUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTI1JSkgcm90YXRlKC01ZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTI1JSkgcm90YXRlKC01ZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yNSUpIHJvdGF0ZSgtNWRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTI1JSkgcm90YXRlKC01ZGVnKX0zMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMCUpIHJvdGF0ZSgzZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAlKSByb3RhdGUoM2RlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMCUpIHJvdGF0ZSgzZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMCUpIHJvdGF0ZSgzZGVnKX00NSV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTUlKSByb3RhdGUoLTNkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTUlKSByb3RhdGUoLTNkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTE1JSkgcm90YXRlKC0zZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTUlKSByb3RhdGUoLTNkZWcpfTYwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwJSkgcm90YXRlKDJkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMCUpIHJvdGF0ZSgyZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwJSkgcm90YXRlKDJkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwJSkgcm90YXRlKDJkZWcpfTc1JXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC01JSkgcm90YXRlKC0xZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUlKSByb3RhdGUoLTFkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUlKSByb3RhdGUoLTFkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC01JSkgcm90YXRlKC0xZGVnKX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpfX1ALW1vei1rZXlmcmFtZXMgd29iYmxlezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpfTE1JXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yNSUpIHJvdGF0ZSgtNWRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yNSUpIHJvdGF0ZSgtNWRlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjUlKSByb3RhdGUoLTVkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yNSUpIHJvdGF0ZSgtNWRlZyl9MzAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAlKSByb3RhdGUoM2RlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwJSkgcm90YXRlKDNkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAlKSByb3RhdGUoM2RlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAlKSByb3RhdGUoM2RlZyl9NDUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTE1JSkgcm90YXRlKC0zZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTE1JSkgcm90YXRlKC0zZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xNSUpIHJvdGF0ZSgtM2RlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTE1JSkgcm90YXRlKC0zZGVnKX02MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMCUpIHJvdGF0ZSgyZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAlKSByb3RhdGUoMmRlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMCUpIHJvdGF0ZSgyZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMCUpIHJvdGF0ZSgyZGVnKX03NSV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtNSUpIHJvdGF0ZSgtMWRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC01JSkgcm90YXRlKC0xZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC01JSkgcm90YXRlKC0xZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNSUpIHJvdGF0ZSgtMWRlZyl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKX19I2EwLXdpZGdldCAuYTAtd29iYmxley13ZWJraXQtYW5pbWF0aW9uLW5hbWU6d29iYmxlOy1tb3otYW5pbWF0aW9uLW5hbWU6d29iYmxlO2FuaW1hdGlvbi1uYW1lOndvYmJsZX1ALXdlYmtpdC1rZXlmcmFtZXMgYm91bmNlSW57MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMyk7dHJhbnNmb3JtOnNjYWxlKDAuMyl9NTAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjA1KTt0cmFuc2Zvcm06c2NhbGUoMS4wNSl9NzAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuOSk7dHJhbnNmb3JtOnNjYWxlKDAuOSl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfX1Aa2V5ZnJhbWVzIGJvdW5jZUluezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjMpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4zKTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjMpO3RyYW5zZm9ybTpzY2FsZSgwLjMpfTUwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMS4wNSk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxLjA1KTstbW96LXRyYW5zZm9ybTpzY2FsZSgxLjA1KTt0cmFuc2Zvcm06c2NhbGUoMS4wNSl9NzAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuOSk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjkpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuOSk7dHJhbnNmb3JtOnNjYWxlKDAuOSl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxKTstbW96LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9fUAtbW96LWtleWZyYW1lcyBib3VuY2VJbnswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4zKTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuMyk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC4zKTt0cmFuc2Zvcm06c2NhbGUoMC4zKX01MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuMDUpOy1tcy10cmFuc2Zvcm06c2NhbGUoMS4wNSk7LW1vei10cmFuc2Zvcm06c2NhbGUoMS4wNSk7dHJhbnNmb3JtOnNjYWxlKDEuMDUpfTcwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjkpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC45KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjkpO3RyYW5zZm9ybTpzY2FsZSgwLjkpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpOy1tcy10cmFuc2Zvcm06c2NhbGUoMSk7LW1vei10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfX0jYTAtd2lkZ2V0IC5hMC1ib3VuY2VJbnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmJvdW5jZUluOy1tb3otYW5pbWF0aW9uLW5hbWU6Ym91bmNlSW47YW5pbWF0aW9uLW5hbWU6Ym91bmNlSW59QC13ZWJraXQta2V5ZnJhbWVzIGJvdW5jZUluRG93bnswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KX02MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMzBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMzBweCl9ODAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fUBrZXlmcmFtZXMgYm91bmNlSW5Eb3duezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpfTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgzMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMzBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgzMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgzMHB4KX04MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX1ALW1vei1rZXlmcmFtZXMgYm91bmNlSW5Eb3duezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpfTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgzMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMzBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgzMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgzMHB4KX04MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX0jYTAtd2lkZ2V0IC5hMC1ib3VuY2VJbkRvd257LXdlYmtpdC1hbmltYXRpb24tbmFtZTpib3VuY2VJbkRvd247LW1vei1hbmltYXRpb24tbmFtZTpib3VuY2VJbkRvd247YW5pbWF0aW9uLW5hbWU6Ym91bmNlSW5Eb3dufUAtd2Via2l0LWtleWZyYW1lcyBib3VuY2VJbkxlZnR7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCl9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDMwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDMwcHgpfTgwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfX1Aa2V5ZnJhbWVzIGJvdW5jZUluTGVmdHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KX02MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMzBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDMwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMzBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMzBweCl9ODAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19QC1tb3ota2V5ZnJhbWVzIGJvdW5jZUluTGVmdHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KX02MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMzBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDMwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMzBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMzBweCl9ODAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwcHgpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19I2EwLXdpZGdldCAuYTAtYm91bmNlSW5MZWZ0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6Ym91bmNlSW5MZWZ0Oy1tb3otYW5pbWF0aW9uLW5hbWU6Ym91bmNlSW5MZWZ0O2FuaW1hdGlvbi1uYW1lOmJvdW5jZUluTGVmdH1ALXdlYmtpdC1rZXlmcmFtZXMgYm91bmNlSW5SaWdodHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCl9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0zMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMzBweCl9ODAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTBweCl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfX1Aa2V5ZnJhbWVzIGJvdW5jZUluUmlnaHR7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KX02MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTMwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMzBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMzBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTMwcHgpfTgwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19QC1tb3ota2V5ZnJhbWVzIGJvdW5jZUluUmlnaHR7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KX02MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTMwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMzBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMzBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTMwcHgpfTgwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwcHgpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19I2EwLXdpZGdldCAuYTAtYm91bmNlSW5SaWdodHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmJvdW5jZUluUmlnaHQ7LW1vei1hbmltYXRpb24tbmFtZTpib3VuY2VJblJpZ2h0O2FuaW1hdGlvbi1uYW1lOmJvdW5jZUluUmlnaHR9QC13ZWJraXQta2V5ZnJhbWVzIGJvdW5jZUluVXB7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpfTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTMwcHgpfTgwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19QGtleWZyYW1lcyBib3VuY2VJblVwezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCl9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTMwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTMwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KX04MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fUAtbW96LWtleWZyYW1lcyBib3VuY2VJblVwezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCl9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTMwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTMwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0zMHB4KX04MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMHB4KX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fSNhMC13aWRnZXQgLmEwLWJvdW5jZUluVXB7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpib3VuY2VJblVwOy1tb3otYW5pbWF0aW9uLW5hbWU6Ym91bmNlSW5VcDthbmltYXRpb24tbmFtZTpib3VuY2VJblVwfUAtd2Via2l0LWtleWZyYW1lcyBib3VuY2VPdXR7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfTI1JXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjk1KTt0cmFuc2Zvcm06c2NhbGUoMC45NSl9NTAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjEpO3RyYW5zZm9ybTpzY2FsZSgxLjEpfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMyk7dHJhbnNmb3JtOnNjYWxlKDAuMyl9fUBrZXlmcmFtZXMgYm91bmNlT3V0ezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpOy1tcy10cmFuc2Zvcm06c2NhbGUoMSk7LW1vei10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfTI1JXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjk1KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuOTUpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuOTUpO3RyYW5zZm9ybTpzY2FsZSgwLjk1KX01MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuMSk7LW1zLXRyYW5zZm9ybTpzY2FsZSgxLjEpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEuMSk7dHJhbnNmb3JtOnNjYWxlKDEuMSl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4zKTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuMyk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC4zKTt0cmFuc2Zvcm06c2NhbGUoMC4zKX19QC1tb3ota2V5ZnJhbWVzIGJvdW5jZU91dHswJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTstbXMtdHJhbnNmb3JtOnNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX0yNSV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC45NSk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjk1KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjk1KTt0cmFuc2Zvcm06c2NhbGUoMC45NSl9NTAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjEpOy1tcy10cmFuc2Zvcm06c2NhbGUoMS4xKTstbW96LXRyYW5zZm9ybTpzY2FsZSgxLjEpO3RyYW5zZm9ybTpzY2FsZSgxLjEpfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMyk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjMpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMyk7dHJhbnNmb3JtOnNjYWxlKDAuMyl9fSNhMC13aWRnZXQgLmEwLWJvdW5jZU91dHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmJvdW5jZU91dDstbW96LWFuaW1hdGlvbi1uYW1lOmJvdW5jZU91dDthbmltYXRpb24tbmFtZTpib3VuY2VPdXR9QC13ZWJraXQta2V5ZnJhbWVzIGJvdW5jZU91dERvd257MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0yMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KX19QGtleWZyYW1lcyBib3VuY2VPdXREb3duezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9MjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCl9fUAtbW96LWtleWZyYW1lcyBib3VuY2VPdXREb3duezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9MjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCl9fSNhMC13aWRnZXQgLmEwLWJvdW5jZU91dERvd257LXdlYmtpdC1hbmltYXRpb24tbmFtZTpib3VuY2VPdXREb3duOy1tb3otYW5pbWF0aW9uLW5hbWU6Ym91bmNlT3V0RG93bjthbmltYXRpb24tbmFtZTpib3VuY2VPdXREb3dufUAtd2Via2l0LWtleWZyYW1lcyBib3VuY2VPdXRMZWZ0ezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCl9fUBrZXlmcmFtZXMgYm91bmNlT3V0TGVmdHswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfTIwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpfX1ALW1vei1rZXlmcmFtZXMgYm91bmNlT3V0TGVmdHswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfTIwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpfX0jYTAtd2lkZ2V0IC5hMC1ib3VuY2VPdXRMZWZ0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6Ym91bmNlT3V0TGVmdDstbW96LWFuaW1hdGlvbi1uYW1lOmJvdW5jZU91dExlZnQ7YW5pbWF0aW9uLW5hbWU6Ym91bmNlT3V0TGVmdH1ALXdlYmtpdC1rZXlmcmFtZXMgYm91bmNlT3V0UmlnaHR7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0yMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KX19QGtleWZyYW1lcyBib3VuY2VPdXRSaWdodHswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfTIwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpfX1ALW1vei1rZXlmcmFtZXMgYm91bmNlT3V0UmlnaHR7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0yMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KX19I2EwLXdpZGdldCAuYTAtYm91bmNlT3V0UmlnaHR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpib3VuY2VPdXRSaWdodDstbW96LWFuaW1hdGlvbi1uYW1lOmJvdW5jZU91dFJpZ2h0O2FuaW1hdGlvbi1uYW1lOmJvdW5jZU91dFJpZ2h0fUAtd2Via2l0LWtleWZyYW1lcyBib3VuY2VPdXRVcHswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTIwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpfX1Aa2V5ZnJhbWVzIGJvdW5jZU91dFVwezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9MjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCl9fUAtbW96LWtleWZyYW1lcyBib3VuY2VPdXRVcHswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTIwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpfX0jYTAtd2lkZ2V0IC5hMC1ib3VuY2VPdXRVcHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmJvdW5jZU91dFVwOy1tb3otYW5pbWF0aW9uLW5hbWU6Ym91bmNlT3V0VXA7YW5pbWF0aW9uLW5hbWU6Ym91bmNlT3V0VXB9QC13ZWJraXQta2V5ZnJhbWVzIGZhZGVJbnswJXtvcGFjaXR5OjB9MTAwJXtvcGFjaXR5OjF9fUBrZXlmcmFtZXMgZmFkZUluezAle29wYWNpdHk6MH0xMDAle29wYWNpdHk6MX19QC1tb3ota2V5ZnJhbWVzIGZhZGVJbnswJXtvcGFjaXR5OjB9MTAwJXtvcGFjaXR5OjF9fSNhMC13aWRnZXQgLmEwLWZhZGVJbnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmZhZGVJbjstbW96LWFuaW1hdGlvbi1uYW1lOmZhZGVJbjthbmltYXRpb24tbmFtZTpmYWRlSW59QC13ZWJraXQta2V5ZnJhbWVzIGZhZGVJbkRvd257MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX1Aa2V5ZnJhbWVzIGZhZGVJbkRvd257MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fUAtbW96LWtleWZyYW1lcyBmYWRlSW5Eb3duezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX0jYTAtd2lkZ2V0IC5hMC1mYWRlSW5Eb3duey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmFkZUluRG93bjstbW96LWFuaW1hdGlvbi1uYW1lOmZhZGVJbkRvd247YW5pbWF0aW9uLW5hbWU6ZmFkZUluRG93bn1ALXdlYmtpdC1rZXlmcmFtZXMgZmFkZUluRG93bkJpZ3swJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX1Aa2V5ZnJhbWVzIGZhZGVJbkRvd25CaWd7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19QC1tb3ota2V5ZnJhbWVzIGZhZGVJbkRvd25CaWd7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19I2EwLXdpZGdldCAuYTAtZmFkZUluRG93bkJpZ3std2Via2l0LWFuaW1hdGlvbi1uYW1lOmZhZGVJbkRvd25CaWc7LW1vei1hbmltYXRpb24tbmFtZTpmYWRlSW5Eb3duQmlnO2FuaW1hdGlvbi1uYW1lOmZhZGVJbkRvd25CaWd9QC13ZWJraXQta2V5ZnJhbWVzIGZhZGVJbkxlZnR7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfX1Aa2V5ZnJhbWVzIGZhZGVJbkxlZnR7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9fUAtbW96LWtleWZyYW1lcyBmYWRlSW5MZWZ0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfX0jYTAtd2lkZ2V0IC5hMC1mYWRlSW5MZWZ0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmFkZUluTGVmdDstbW96LWFuaW1hdGlvbi1uYW1lOmZhZGVJbkxlZnQ7YW5pbWF0aW9uLW5hbWU6ZmFkZUluTGVmdH1ALXdlYmtpdC1rZXlmcmFtZXMgZmFkZUluTGVmdEJpZ3swJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfX1Aa2V5ZnJhbWVzIGZhZGVJbkxlZnRCaWd7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19QC1tb3ota2V5ZnJhbWVzIGZhZGVJbkxlZnRCaWd7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19I2EwLXdpZGdldCAuYTAtZmFkZUluTGVmdEJpZ3std2Via2l0LWFuaW1hdGlvbi1uYW1lOmZhZGVJbkxlZnRCaWc7LW1vei1hbmltYXRpb24tbmFtZTpmYWRlSW5MZWZ0QmlnO2FuaW1hdGlvbi1uYW1lOmZhZGVJbkxlZnRCaWd9QC13ZWJraXQta2V5ZnJhbWVzIGZhZGVJblJpZ2h0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9fUBrZXlmcmFtZXMgZmFkZUluUmlnaHR7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19QC1tb3ota2V5ZnJhbWVzIGZhZGVJblJpZ2h0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9fSNhMC13aWRnZXQgLmEwLWZhZGVJblJpZ2h0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmFkZUluUmlnaHQ7LW1vei1hbmltYXRpb24tbmFtZTpmYWRlSW5SaWdodDthbmltYXRpb24tbmFtZTpmYWRlSW5SaWdodH1ALXdlYmtpdC1rZXlmcmFtZXMgZmFkZUluUmlnaHRCaWd7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9fUBrZXlmcmFtZXMgZmFkZUluUmlnaHRCaWd7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfX1ALW1vei1rZXlmcmFtZXMgZmFkZUluUmlnaHRCaWd7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfX0jYTAtd2lkZ2V0IC5hMC1mYWRlSW5SaWdodEJpZ3std2Via2l0LWFuaW1hdGlvbi1uYW1lOmZhZGVJblJpZ2h0QmlnOy1tb3otYW5pbWF0aW9uLW5hbWU6ZmFkZUluUmlnaHRCaWc7YW5pbWF0aW9uLW5hbWU6ZmFkZUluUmlnaHRCaWd9QC13ZWJraXQta2V5ZnJhbWVzIGZhZGVJblVwezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fUBrZXlmcmFtZXMgZmFkZUluVXB7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19QC1tb3ota2V5ZnJhbWVzIGZhZGVJblVwezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fSNhMC13aWRnZXQgLmEwLWZhZGVJblVwey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmFkZUluVXA7LW1vei1hbmltYXRpb24tbmFtZTpmYWRlSW5VcDthbmltYXRpb24tbmFtZTpmYWRlSW5VcH1ALXdlYmtpdC1rZXlmcmFtZXMgZmFkZUluVXBCaWd7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fUBrZXlmcmFtZXMgZmFkZUluVXBCaWd7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX1ALW1vei1rZXlmcmFtZXMgZmFkZUluVXBCaWd7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX0jYTAtd2lkZ2V0IC5hMC1mYWRlSW5VcEJpZ3std2Via2l0LWFuaW1hdGlvbi1uYW1lOmZhZGVJblVwQmlnOy1tb3otYW5pbWF0aW9uLW5hbWU6ZmFkZUluVXBCaWc7YW5pbWF0aW9uLW5hbWU6ZmFkZUluVXBCaWd9QC13ZWJraXQta2V5ZnJhbWVzIGZhZGVPdXR7MCV7b3BhY2l0eToxfTEwMCV7b3BhY2l0eTowfX1Aa2V5ZnJhbWVzIGZhZGVPdXR7MCV7b3BhY2l0eToxfTEwMCV7b3BhY2l0eTowfX1ALW1vei1rZXlmcmFtZXMgZmFkZU91dHswJXtvcGFjaXR5OjF9MTAwJXtvcGFjaXR5OjB9fSNhMC13aWRnZXQgLmEwLWZhZGVPdXR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmYWRlT3V0Oy1tb3otYW5pbWF0aW9uLW5hbWU6ZmFkZU91dDthbmltYXRpb24tbmFtZTpmYWRlT3V0fUAtd2Via2l0LWtleWZyYW1lcyBmYWRlT3V0RG93bnswJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpfX1Aa2V5ZnJhbWVzIGZhZGVPdXREb3duezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjBweCl9fUAtbW96LWtleWZyYW1lcyBmYWRlT3V0RG93bnswJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwcHgpfX0jYTAtd2lkZ2V0IC5hMC1mYWRlT3V0RG93bnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmZhZGVPdXREb3duOy1tb3otYW5pbWF0aW9uLW5hbWU6ZmFkZU91dERvd247YW5pbWF0aW9uLW5hbWU6ZmFkZU91dERvd259QC13ZWJraXQta2V5ZnJhbWVzIGZhZGVPdXREb3duQmlnezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpfX1Aa2V5ZnJhbWVzIGZhZGVPdXREb3duQmlnezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KX19QC1tb3ota2V5ZnJhbWVzIGZhZGVPdXREb3duQmlnezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KX19I2EwLXdpZGdldCAuYTAtZmFkZU91dERvd25CaWd7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmYWRlT3V0RG93bkJpZzstbW96LWFuaW1hdGlvbi1uYW1lOmZhZGVPdXREb3duQmlnO2FuaW1hdGlvbi1uYW1lOmZhZGVPdXREb3duQmlnfUAtd2Via2l0LWtleWZyYW1lcyBmYWRlT3V0TGVmdHswJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCl9fUBrZXlmcmFtZXMgZmFkZU91dExlZnR7MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjBweCl9fUAtbW96LWtleWZyYW1lcyBmYWRlT3V0TGVmdHswJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMHB4KX19I2EwLXdpZGdldCAuYTAtZmFkZU91dExlZnR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmYWRlT3V0TGVmdDstbW96LWFuaW1hdGlvbi1uYW1lOmZhZGVPdXRMZWZ0O2FuaW1hdGlvbi1uYW1lOmZhZGVPdXRMZWZ0fUAtd2Via2l0LWtleWZyYW1lcyBmYWRlT3V0TGVmdEJpZ3swJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpfX1Aa2V5ZnJhbWVzIGZhZGVPdXRMZWZ0QmlnezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCl9fUAtbW96LWtleWZyYW1lcyBmYWRlT3V0TGVmdEJpZ3swJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpfX0jYTAtd2lkZ2V0IC5hMC1mYWRlT3V0TGVmdEJpZ3std2Via2l0LWFuaW1hdGlvbi1uYW1lOmZhZGVPdXRMZWZ0QmlnOy1tb3otYW5pbWF0aW9uLW5hbWU6ZmFkZU91dExlZnRCaWc7YW5pbWF0aW9uLW5hbWU6ZmFkZU91dExlZnRCaWd9QC13ZWJraXQta2V5ZnJhbWVzIGZhZGVPdXRSaWdodHswJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpfX1Aa2V5ZnJhbWVzIGZhZGVPdXRSaWdodHswJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpfX1ALW1vei1rZXlmcmFtZXMgZmFkZU91dFJpZ2h0ezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjBweCl9fSNhMC13aWRnZXQgLmEwLWZhZGVPdXRSaWdodHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmZhZGVPdXRSaWdodDstbW96LWFuaW1hdGlvbi1uYW1lOmZhZGVPdXRSaWdodDthbmltYXRpb24tbmFtZTpmYWRlT3V0UmlnaHR9QC13ZWJraXQta2V5ZnJhbWVzIGZhZGVPdXRSaWdodEJpZ3swJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KX19QGtleWZyYW1lcyBmYWRlT3V0UmlnaHRCaWd7MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpfX1ALW1vei1rZXlmcmFtZXMgZmFkZU91dFJpZ2h0QmlnezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KX19I2EwLXdpZGdldCAuYTAtZmFkZU91dFJpZ2h0Qmlney13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmFkZU91dFJpZ2h0QmlnOy1tb3otYW5pbWF0aW9uLW5hbWU6ZmFkZU91dFJpZ2h0QmlnO2FuaW1hdGlvbi1uYW1lOmZhZGVPdXRSaWdodEJpZ31ALXdlYmtpdC1rZXlmcmFtZXMgZmFkZU91dFVwezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KX19QGtleWZyYW1lcyBmYWRlT3V0VXB7MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCl9fUAtbW96LWtleWZyYW1lcyBmYWRlT3V0VXB7MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjBweCl9fSNhMC13aWRnZXQgLmEwLWZhZGVPdXRVcHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmZhZGVPdXRVcDstbW96LWFuaW1hdGlvbi1uYW1lOmZhZGVPdXRVcDthbmltYXRpb24tbmFtZTpmYWRlT3V0VXB9QC13ZWJraXQta2V5ZnJhbWVzIGZhZGVPdXRVcEJpZ3swJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpfX1Aa2V5ZnJhbWVzIGZhZGVPdXRVcEJpZ3swJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpfX1ALW1vei1rZXlmcmFtZXMgZmFkZU91dFVwQmlnezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCl9fSNhMC13aWRnZXQgLmEwLWZhZGVPdXRVcEJpZ3std2Via2l0LWFuaW1hdGlvbi1uYW1lOmZhZGVPdXRVcEJpZzstbW96LWFuaW1hdGlvbi1uYW1lOmZhZGVPdXRVcEJpZzthbmltYXRpb24tbmFtZTpmYWRlT3V0VXBCaWd9QC13ZWJraXQta2V5ZnJhbWVzIGZsaXB7MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgwKSBzY2FsZSgxKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgwKSBzY2FsZSgxKTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dH00MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMTUwcHgpIHJvdGF0ZVkoMTcwZGVnKSBzY2FsZSgxKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMTUwcHgpIHJvdGF0ZVkoMTcwZGVnKSBzY2FsZSgxKTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dH01MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMTUwcHgpIHJvdGF0ZVkoMTkwZGVnKSBzY2FsZSgxKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMTUwcHgpIHJvdGF0ZVkoMTkwZGVnKSBzY2FsZSgxKTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbjthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW59ODAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMzYwZGVnKSBzY2FsZSgwLjk1KTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgzNjBkZWcpIHNjYWxlKDAuOTUpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbn0xMDAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMzYwZGVnKSBzY2FsZSgxKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgzNjBkZWcpIHNjYWxlKDEpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbn19QGtleWZyYW1lcyBmbGlwezAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMCkgc2NhbGUoMSk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDApIHNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMCkgc2NhbGUoMSk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMCkgc2NhbGUoMSk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0fTQwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigxNTBweCkgcm90YXRlWSgxNzBkZWcpIHNjYWxlKDEpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMTUwcHgpIHJvdGF0ZVkoMTcwZGVnKSBzY2FsZSgxKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigxNTBweCkgcm90YXRlWSgxNzBkZWcpIHNjYWxlKDEpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigxNTBweCkgcm90YXRlWSgxNzBkZWcpIHNjYWxlKDEpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dH01MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMTUwcHgpIHJvdGF0ZVkoMTkwZGVnKSBzY2FsZSgxKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDE1MHB4KSByb3RhdGVZKDE5MGRlZykgc2NhbGUoMSk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMTUwcHgpIHJvdGF0ZVkoMTkwZGVnKSBzY2FsZSgxKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMTUwcHgpIHJvdGF0ZVkoMTkwZGVnKSBzY2FsZSgxKTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbjstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbjthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW59ODAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMzYwZGVnKSBzY2FsZSgwLjk1KTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMzYwZGVnKSBzY2FsZSgwLjk1KTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDM2MGRlZykgc2NhbGUoMC45NSk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMzYwZGVnKSBzY2FsZSgwLjk1KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbjstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbjthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW59MTAwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDM2MGRlZykgc2NhbGUoMSk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDM2MGRlZykgc2NhbGUoMSk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgzNjBkZWcpIHNjYWxlKDEpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDM2MGRlZykgc2NhbGUoMSk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWlufX1ALW1vei1rZXlmcmFtZXMgZmxpcHswJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDApIHNjYWxlKDEpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgwKSBzY2FsZSgxKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDApIHNjYWxlKDEpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDApIHNjYWxlKDEpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dH00MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMTUwcHgpIHJvdGF0ZVkoMTcwZGVnKSBzY2FsZSgxKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDE1MHB4KSByb3RhdGVZKDE3MGRlZykgc2NhbGUoMSk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMTUwcHgpIHJvdGF0ZVkoMTcwZGVnKSBzY2FsZSgxKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMTUwcHgpIHJvdGF0ZVkoMTcwZGVnKSBzY2FsZSgxKTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9NTAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDE1MHB4KSByb3RhdGVZKDE5MGRlZykgc2NhbGUoMSk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigxNTBweCkgcm90YXRlWSgxOTBkZWcpIHNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDE1MHB4KSByb3RhdGVZKDE5MGRlZykgc2NhbGUoMSk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDE1MHB4KSByb3RhdGVZKDE5MGRlZykgc2NhbGUoMSk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWlufTgwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDM2MGRlZykgc2NhbGUoMC45NSk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDM2MGRlZykgc2NhbGUoMC45NSk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgzNjBkZWcpIHNjYWxlKDAuOTUpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlWigwKSByb3RhdGVZKDM2MGRlZykgc2NhbGUoMC45NSk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW47YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWlufTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgzNjBkZWcpIHNjYWxlKDEpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgzNjBkZWcpIHNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSB0cmFuc2xhdGVaKDApIHJvdGF0ZVkoMzYwZGVnKSBzY2FsZSgxKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZVooMCkgcm90YXRlWSgzNjBkZWcpIHNjYWxlKDEpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluOy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbn19I2EwLXdpZGdldCAuYTAtYW5pbWF0ZWQuYTAtZmxpcHstd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6dmlzaWJsZTstbXMtYmFja2ZhY2UtdmlzaWJpbGl0eTp2aXNpYmxlOy1tb3otYmFja2ZhY2UtdmlzaWJpbGl0eTp2aXNpYmxlO2JhY2tmYWNlLXZpc2liaWxpdHk6dmlzaWJsZTstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmZsaXA7LW1vei1hbmltYXRpb24tbmFtZTpmbGlwO2FuaW1hdGlvbi1uYW1lOmZsaXB9QC13ZWJraXQta2V5ZnJhbWVzIGZsaXBJblh7MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoOTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCg5MGRlZyk7b3BhY2l0eTowfTQwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgtMTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgtMTBkZWcpfTcwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgxMGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDEwZGVnKX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgwZGVnKTtvcGFjaXR5OjF9fUBrZXlmcmFtZXMgZmxpcEluWHswJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCg5MGRlZyk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCg5MGRlZyk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoOTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCg5MGRlZyk7b3BhY2l0eTowfTQwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgtMTBkZWcpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoLTEwZGVnKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgtMTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgtMTBkZWcpfTcwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgxMGRlZyk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgxMGRlZyk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgxMGRlZyl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgwZGVnKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDBkZWcpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgwZGVnKTtvcGFjaXR5OjF9fUAtbW96LWtleWZyYW1lcyBmbGlwSW5YezAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDkwZGVnKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDkwZGVnKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCg5MGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDkwZGVnKTtvcGFjaXR5OjB9NDAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKC0xMGRlZyk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgtMTBkZWcpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKC0xMGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKC0xMGRlZyl9NzAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDEwZGVnKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDEwZGVnKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgxMGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDEwZGVnKX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDBkZWcpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMGRlZyk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDBkZWcpO29wYWNpdHk6MX19I2EwLXdpZGdldCAuYTAtZmxpcEluWHstd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6dmlzaWJsZSFpbXBvcnRhbnQ7LW1zLWJhY2tmYWNlLXZpc2liaWxpdHk6dmlzaWJsZSFpbXBvcnRhbnQ7LW1vei1iYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGUhaW1wb3J0YW50O2JhY2tmYWNlLXZpc2liaWxpdHk6dmlzaWJsZSFpbXBvcnRhbnQ7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmbGlwSW5YOy1tb3otYW5pbWF0aW9uLW5hbWU6ZmxpcEluWDthbmltYXRpb24tbmFtZTpmbGlwSW5YfUAtd2Via2l0LWtleWZyYW1lcyBmbGlwSW5ZezAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDkwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoOTBkZWcpO29wYWNpdHk6MH00MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoLTEwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoLTEwZGVnKX03MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgxMGRlZyl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMGRlZyk7b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIGZsaXBJbll7MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoOTBkZWcpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoOTBkZWcpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDkwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoOTBkZWcpO29wYWNpdHk6MH00MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoLTEwZGVnKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKC0xMGRlZyk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoLTEwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoLTEwZGVnKX03MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMTBkZWcpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMTBkZWcpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDEwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMTBkZWcpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMGRlZyk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgwZGVnKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMGRlZyk7b3BhY2l0eToxfX1ALW1vei1rZXlmcmFtZXMgZmxpcEluWXswJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSg5MGRlZyk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSg5MGRlZyk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoOTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSg5MGRlZyk7b3BhY2l0eTowfTQwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgtMTBkZWcpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoLTEwZGVnKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgtMTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgtMTBkZWcpfTcwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgxMGRlZyk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgxMGRlZyk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgxMGRlZyl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgwZGVnKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDBkZWcpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgwZGVnKTtvcGFjaXR5OjF9fSNhMC13aWRnZXQgLmEwLWZsaXBJbll7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGUhaW1wb3J0YW50Oy1tcy1iYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGUhaW1wb3J0YW50Oy1tb3otYmFja2ZhY2UtdmlzaWJpbGl0eTp2aXNpYmxlIWltcG9ydGFudDtiYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGUhaW1wb3J0YW50Oy13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmxpcEluWTstbW96LWFuaW1hdGlvbi1uYW1lOmZsaXBJblk7YW5pbWF0aW9uLW5hbWU6ZmxpcEluWX1ALXdlYmtpdC1rZXlmcmFtZXMgZmxpcE91dFh7MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDBkZWcpO29wYWNpdHk6MX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDkwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoOTBkZWcpO29wYWNpdHk6MH19QGtleWZyYW1lcyBmbGlwT3V0WHswJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgwZGVnKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDBkZWcpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgwZGVnKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCg5MGRlZyk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCg5MGRlZyk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoOTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCg5MGRlZyk7b3BhY2l0eTowfX1ALW1vei1rZXlmcmFtZXMgZmxpcE91dFh7MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMGRlZyk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgwZGVnKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWCgwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoMGRlZyk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoOTBkZWcpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoOTBkZWcpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVYKDkwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVgoOTBkZWcpO29wYWNpdHk6MH19I2EwLXdpZGdldCAuYTAtZmxpcE91dFh7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmbGlwT3V0WDstbW96LWFuaW1hdGlvbi1uYW1lOmZsaXBPdXRYO2FuaW1hdGlvbi1uYW1lOmZsaXBPdXRYOy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTp2aXNpYmxlIWltcG9ydGFudDstbXMtYmFja2ZhY2UtdmlzaWJpbGl0eTp2aXNpYmxlIWltcG9ydGFudDstbW96LWJhY2tmYWNlLXZpc2liaWxpdHk6dmlzaWJsZSFpbXBvcnRhbnQ7YmFja2ZhY2UtdmlzaWJpbGl0eTp2aXNpYmxlIWltcG9ydGFudH1ALXdlYmtpdC1rZXlmcmFtZXMgZmxpcE91dFl7MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMGRlZyk7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDBkZWcpO29wYWNpdHk6MX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDkwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoOTBkZWcpO29wYWNpdHk6MH19QGtleWZyYW1lcyBmbGlwT3V0WXswJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgwZGVnKTstbXMtdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDBkZWcpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgwZGVnKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSg5MGRlZyk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSg5MGRlZyk7LW1vei10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoOTBkZWcpO3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSg5MGRlZyk7b3BhY2l0eTowfX1ALW1vei1rZXlmcmFtZXMgZmxpcE91dFl7MCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMGRlZyk7LW1zLXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgwZGVnKTstbW96LXRyYW5zZm9ybTpwZXJzcGVjdGl2ZSg0MDBweCkgcm90YXRlWSgwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoMGRlZyk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoOTBkZWcpOy1tcy10cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoOTBkZWcpOy1tb3otdHJhbnNmb3JtOnBlcnNwZWN0aXZlKDQwMHB4KSByb3RhdGVZKDkwZGVnKTt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoNDAwcHgpIHJvdGF0ZVkoOTBkZWcpO29wYWNpdHk6MH19I2EwLXdpZGdldCAuYTAtZmxpcE91dFl7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGUhaW1wb3J0YW50Oy1tcy1iYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGUhaW1wb3J0YW50Oy1tb3otYmFja2ZhY2UtdmlzaWJpbGl0eTp2aXNpYmxlIWltcG9ydGFudDtiYWNrZmFjZS12aXNpYmlsaXR5OnZpc2libGUhaW1wb3J0YW50Oy13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmxpcE91dFk7LW1vei1hbmltYXRpb24tbmFtZTpmbGlwT3V0WTthbmltYXRpb24tbmFtZTpmbGlwT3V0WX1ALXdlYmtpdC1rZXlmcmFtZXMgbGlnaHRTcGVlZEluezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSkgc2tld1goLTMwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSBza2V3WCgtMzBkZWcpO29wYWNpdHk6MH02MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAlKSBza2V3WCgzMGRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwJSkgc2tld1goMzBkZWcpO29wYWNpdHk6MX04MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goLTE1ZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goLTE1ZGVnKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goMGRlZyk7b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIGxpZ2h0U3BlZWRJbnswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHNrZXdYKC0zMGRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHNrZXdYKC0zMGRlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSBza2V3WCgtMzBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHNrZXdYKC0zMGRlZyk7b3BhY2l0eTowfTYwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMCUpIHNrZXdYKDMwZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwJSkgc2tld1goMzBkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwJSkgc2tld1goMzBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMCUpIHNrZXdYKDMwZGVnKTtvcGFjaXR5OjF9ODAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKC0xNWRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgtMTVkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKC0xNWRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKC0xNWRlZyk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goMGRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgwZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goMGRlZyk7b3BhY2l0eToxfX1ALW1vei1rZXlmcmFtZXMgbGlnaHRTcGVlZEluezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSkgc2tld1goLTMwZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSkgc2tld1goLTMwZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHNrZXdYKC0zMGRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSkgc2tld1goLTMwZGVnKTtvcGFjaXR5OjB9NjAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwJSkgc2tld1goMzBkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAlKSBza2V3WCgzMGRlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAlKSBza2V3WCgzMGRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwJSkgc2tld1goMzBkZWcpO29wYWNpdHk6MX04MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goLTE1ZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKC0xNWRlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goLTE1ZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwJSkgc2tld1goLTE1ZGVnKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgwZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKDBkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKDBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgwZGVnKTtvcGFjaXR5OjF9fSNhMC13aWRnZXQgLmEwLWxpZ2h0U3BlZWRJbnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmxpZ2h0U3BlZWRJbjstbW96LWFuaW1hdGlvbi1uYW1lOmxpZ2h0U3BlZWRJbjthbmltYXRpb24tbmFtZTpsaWdodFNwZWVkSW47LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0fUAtd2Via2l0LWtleWZyYW1lcyBsaWdodFNwZWVkT3V0ezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKDBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgwZGVnKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHNrZXdYKC0zMGRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSkgc2tld1goLTMwZGVnKTtvcGFjaXR5OjB9fUBrZXlmcmFtZXMgbGlnaHRTcGVlZE91dHswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgwZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKDBkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKDBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgwZGVnKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHNrZXdYKC0zMGRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHNrZXdYKC0zMGRlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSBza2V3WCgtMzBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHNrZXdYKC0zMGRlZyk7b3BhY2l0eTowfX1ALW1vei1rZXlmcmFtZXMgbGlnaHRTcGVlZE91dHswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgwZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKDBkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCUpIHNrZXdYKDBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDAlKSBza2V3WCgwZGVnKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHNrZXdYKC0zMGRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHNrZXdYKC0zMGRlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSBza2V3WCgtMzBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHNrZXdYKC0zMGRlZyk7b3BhY2l0eTowfX0jYTAtd2lkZ2V0IC5hMC1saWdodFNwZWVkT3V0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6bGlnaHRTcGVlZE91dDstbW96LWFuaW1hdGlvbi1uYW1lOmxpZ2h0U3BlZWRPdXQ7YW5pbWF0aW9uLW5hbWU6bGlnaHRTcGVlZE91dDstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbjstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbjthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW59QC13ZWJraXQta2V5ZnJhbWVzIHJvdGF0ZUluezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTIwMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtMjAwZGVnKTtvcGFjaXR5OjB9MTAwJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIHJvdGF0ZUluezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LW1vei10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtMjAwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgtMjAwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoLTIwMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtMjAwZGVnKTtvcGFjaXR5OjB9MTAwJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstbXMtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfX1ALW1vei1rZXlmcmFtZXMgcm90YXRlSW57MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LW1zLXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstbW96LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC0yMDBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKC0yMDBkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgtMjAwZGVnKTt0cmFuc2Zvcm06cm90YXRlKC0yMDBkZWcpO29wYWNpdHk6MH0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LW1vei10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9fSNhMC13aWRnZXQgLmEwLXJvdGF0ZUluey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6cm90YXRlSW47LW1vei1hbmltYXRpb24tbmFtZTpyb3RhdGVJbjthbmltYXRpb24tbmFtZTpyb3RhdGVJbn1ALXdlYmtpdC1rZXlmcmFtZXMgcm90YXRlSW5Eb3duTGVmdHswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7b3BhY2l0eTowfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIHJvdGF0ZUluRG93bkxlZnR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO29wYWNpdHk6MH0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfX1ALW1vei1rZXlmcmFtZXMgcm90YXRlSW5Eb3duTGVmdHswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7b3BhY2l0eTowfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9fSNhMC13aWRnZXQgLmEwLXJvdGF0ZUluRG93bkxlZnR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpyb3RhdGVJbkRvd25MZWZ0Oy1tb3otYW5pbWF0aW9uLW5hbWU6cm90YXRlSW5Eb3duTGVmdDthbmltYXRpb24tbmFtZTpyb3RhdGVJbkRvd25MZWZ0fUAtd2Via2l0LWtleWZyYW1lcyByb3RhdGVJbkRvd25SaWdodHswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7b3BhY2l0eTowfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9fUBrZXlmcmFtZXMgcm90YXRlSW5Eb3duUmlnaHR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO29wYWNpdHk6MH0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApOy1tcy10cmFuc2Zvcm06cm90YXRlKDApOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX19QC1tb3ota2V5ZnJhbWVzIHJvdGF0ZUluRG93blJpZ2h0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKTtvcGFjaXR5OjB9MTAwJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9fSNhMC13aWRnZXQgLmEwLXJvdGF0ZUluRG93blJpZ2h0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6cm90YXRlSW5Eb3duUmlnaHQ7LW1vei1hbmltYXRpb24tbmFtZTpyb3RhdGVJbkRvd25SaWdodDthbmltYXRpb24tbmFtZTpyb3RhdGVJbkRvd25SaWdodH1ALXdlYmtpdC1rZXlmcmFtZXMgcm90YXRlSW5VcExlZnR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKTtvcGFjaXR5OjB9MTAwJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9fUBrZXlmcmFtZXMgcm90YXRlSW5VcExlZnR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7b3BhY2l0eTowfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9fUAtbW96LWtleWZyYW1lcyByb3RhdGVJblVwTGVmdHswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKTtvcGFjaXR5OjB9MTAwJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApOy1tcy10cmFuc2Zvcm06cm90YXRlKDApOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX19I2EwLXdpZGdldCAuYTAtcm90YXRlSW5VcExlZnR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpyb3RhdGVJblVwTGVmdDstbW96LWFuaW1hdGlvbi1uYW1lOnJvdGF0ZUluVXBMZWZ0O2FuaW1hdGlvbi1uYW1lOnJvdGF0ZUluVXBMZWZ0fUAtd2Via2l0LWtleWZyYW1lcyByb3RhdGVJblVwUmlnaHR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7b3BhY2l0eTowfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9fUBrZXlmcmFtZXMgcm90YXRlSW5VcFJpZ2h0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7b3BhY2l0eTowfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfX1ALW1vei1rZXlmcmFtZXMgcm90YXRlSW5VcFJpZ2h0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7b3BhY2l0eTowfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfX0jYTAtd2lkZ2V0IC5hMC1yb3RhdGVJblVwUmlnaHR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpyb3RhdGVJblVwUmlnaHQ7LW1vei1hbmltYXRpb24tbmFtZTpyb3RhdGVJblVwUmlnaHQ7YW5pbWF0aW9uLW5hbWU6cm90YXRlSW5VcFJpZ2h0fUAtd2Via2l0LWtleWZyYW1lcyByb3RhdGVPdXR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMjAwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDIwMGRlZyk7b3BhY2l0eTowfX1Aa2V5ZnJhbWVzIHJvdGF0ZU91dHswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstbXMtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LW1zLXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstbW96LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDIwMGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMjAwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoMjAwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDIwMGRlZyk7b3BhY2l0eTowfX1ALW1vei1rZXlmcmFtZXMgcm90YXRlT3V0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7LW1vei10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXI7dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstbXMtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMjAwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgyMDBkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgyMDBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMjAwZGVnKTtvcGFjaXR5OjB9fSNhMC13aWRnZXQgLmEwLXJvdGF0ZU91dHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnJvdGF0ZU91dDstbW96LWFuaW1hdGlvbi1uYW1lOnJvdGF0ZU91dDthbmltYXRpb24tbmFtZTpyb3RhdGVPdXR9QC13ZWJraXQta2V5ZnJhbWVzIHJvdGF0ZU91dERvd25MZWZ0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7b3BhY2l0eTowfX1Aa2V5ZnJhbWVzIHJvdGF0ZU91dERvd25MZWZ0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7b3BhY2l0eTowfX1ALW1vei1rZXlmcmFtZXMgcm90YXRlT3V0RG93bkxlZnR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKTtvcGFjaXR5OjB9fSNhMC13aWRnZXQgLmEwLXJvdGF0ZU91dERvd25MZWZ0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6cm90YXRlT3V0RG93bkxlZnQ7LW1vei1hbmltYXRpb24tbmFtZTpyb3RhdGVPdXREb3duTGVmdDthbmltYXRpb24tbmFtZTpyb3RhdGVPdXREb3duTGVmdH1ALXdlYmtpdC1rZXlmcmFtZXMgcm90YXRlT3V0RG93blJpZ2h0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7b3BhY2l0eTowfX1Aa2V5ZnJhbWVzIHJvdGF0ZU91dERvd25SaWdodHswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO29wYWNpdHk6MH19QC1tb3ota2V5ZnJhbWVzIHJvdGF0ZU91dERvd25SaWdodHswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO29wYWNpdHk6MH19I2EwLXdpZGdldCAuYTAtcm90YXRlT3V0RG93blJpZ2h0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6cm90YXRlT3V0RG93blJpZ2h0Oy1tb3otYW5pbWF0aW9uLW5hbWU6cm90YXRlT3V0RG93blJpZ2h0O2FuaW1hdGlvbi1uYW1lOnJvdGF0ZU91dERvd25SaWdodH1ALXdlYmtpdC1rZXlmcmFtZXMgcm90YXRlT3V0VXBMZWZ0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTtvcGFjaXR5OjB9fUBrZXlmcmFtZXMgcm90YXRlT3V0VXBMZWZ0ezAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO29wYWNpdHk6MH19QC1tb3ota2V5ZnJhbWVzIHJvdGF0ZU91dFVwTGVmdHswJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApOy1tcy10cmFuc2Zvcm06cm90YXRlKDApOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApO29wYWNpdHk6MX0xMDAley13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpOy1tb3otdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKTtvcGFjaXR5OjB9fSNhMC13aWRnZXQgLmEwLXJvdGF0ZU91dFVwTGVmdHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnJvdGF0ZU91dFVwTGVmdDstbW96LWFuaW1hdGlvbi1uYW1lOnJvdGF0ZU91dFVwTGVmdDthbmltYXRpb24tbmFtZTpyb3RhdGVPdXRVcExlZnR9QC13ZWJraXQta2V5ZnJhbWVzIHJvdGF0ZU91dFVwUmlnaHR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgYm90dG9tOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7b3BhY2l0eTowfX1Aa2V5ZnJhbWVzIHJvdGF0ZU91dFVwUmlnaHR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO29wYWNpdHk6MH19QC1tb3ota2V5ZnJhbWVzIHJvdGF0ZU91dFVwUmlnaHR7MCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1zLXRyYW5zZm9ybTpyb3RhdGUoMCk7LW1vei10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7b3BhY2l0eToxfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstbXMtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBib3R0b207LW1vei10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGJvdHRvbTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO29wYWNpdHk6MH19I2EwLXdpZGdldCAuYTAtcm90YXRlT3V0VXBSaWdodHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnJvdGF0ZU91dFVwUmlnaHQ7LW1vei1hbmltYXRpb24tbmFtZTpyb3RhdGVPdXRVcFJpZ2h0O2FuaW1hdGlvbi1uYW1lOnJvdGF0ZU91dFVwUmlnaHR9QC13ZWJraXQta2V5ZnJhbWVzIHNsaWRlSW5Eb3duezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19QGtleWZyYW1lcyBzbGlkZUluRG93bnswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fUAtbW96LWtleWZyYW1lcyBzbGlkZUluRG93bnswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fSNhMC13aWRnZXQgLmEwLXNsaWRlSW5Eb3duey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6c2xpZGVJbkRvd247LW1vei1hbmltYXRpb24tbmFtZTpzbGlkZUluRG93bjthbmltYXRpb24tbmFtZTpzbGlkZUluRG93bn1ALXdlYmtpdC1rZXlmcmFtZXMgc2xpZGVJbkxlZnR7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfX1Aa2V5ZnJhbWVzIHNsaWRlSW5MZWZ0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19QC1tb3ota2V5ZnJhbWVzIHNsaWRlSW5MZWZ0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19I2EwLXdpZGdldCAuYTAtc2xpZGVJbkxlZnR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpzbGlkZUluTGVmdDstbW96LWFuaW1hdGlvbi1uYW1lOnNsaWRlSW5MZWZ0O2FuaW1hdGlvbi1uYW1lOnNsaWRlSW5MZWZ0fUAtd2Via2l0LWtleWZyYW1lcyBzbGlkZUluUmlnaHR7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX19QGtleWZyYW1lcyBzbGlkZUluUmlnaHR7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9fUAtbW96LWtleWZyYW1lcyBzbGlkZUluUmlnaHR7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9fSNhMC13aWRnZXQgLmEwLXNsaWRlSW5SaWdodHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnNsaWRlSW5SaWdodDstbW96LWFuaW1hdGlvbi1uYW1lOnNsaWRlSW5SaWdodDthbmltYXRpb24tbmFtZTpzbGlkZUluUmlnaHR9QC13ZWJraXQta2V5ZnJhbWVzIHNsaWRlT3V0TGVmdHswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCl9fUBrZXlmcmFtZXMgc2xpZGVPdXRMZWZ0ezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMjAwMHB4KX19QC1tb3ota2V5ZnJhbWVzIHNsaWRlT3V0TGVmdHswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTIwMDBweCl9fSNhMC13aWRnZXQgLmEwLXNsaWRlT3V0TGVmdHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnNsaWRlT3V0TGVmdDstbW96LWFuaW1hdGlvbi1uYW1lOnNsaWRlT3V0TGVmdDthbmltYXRpb24tbmFtZTpzbGlkZU91dExlZnR9QC13ZWJraXQta2V5ZnJhbWVzIHNsaWRlT3V0UmlnaHR7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KX19QGtleWZyYW1lcyBzbGlkZU91dFJpZ2h0ezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgyMDAwcHgpfX1ALW1vei1rZXlmcmFtZXMgc2xpZGVPdXRSaWdodHswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMjAwMHB4KX19I2EwLXdpZGdldCAuYTAtc2xpZGVPdXRSaWdodHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnNsaWRlT3V0UmlnaHQ7LW1vei1hbmltYXRpb24tbmFtZTpzbGlkZU91dFJpZ2h0O2FuaW1hdGlvbi1uYW1lOnNsaWRlT3V0UmlnaHR9QC13ZWJraXQta2V5ZnJhbWVzIHNsaWRlT3V0VXB7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpfX1Aa2V5ZnJhbWVzIHNsaWRlT3V0VXB7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpfX1ALW1vei1rZXlmcmFtZXMgc2xpZGVPdXRVcHswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMDBweCl9fSNhMC13aWRnZXQgLmEwLXNsaWRlT3V0VXB7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpzbGlkZU91dFVwOy1tb3otYW5pbWF0aW9uLW5hbWU6c2xpZGVPdXRVcDthbmltYXRpb24tbmFtZTpzbGlkZU91dFVwfUAtd2Via2l0LWtleWZyYW1lcyBzbGlkZUluVXB7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fUBrZXlmcmFtZXMgc2xpZGVJblVwezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19QC1tb3ota2V5ZnJhbWVzIHNsaWRlSW5VcHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fSNhMC13aWRnZXQgLmEwLXNsaWRlSW5VcHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnNsaWRlSW5VcDstbW96LWFuaW1hdGlvbi1uYW1lOnNsaWRlSW5VcDthbmltYXRpb24tbmFtZTpzbGlkZUluVXB9QC13ZWJraXQta2V5ZnJhbWVzIHNsaWRlT3V0RG93bnswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAwcHgpfX1Aa2V5ZnJhbWVzIHNsaWRlT3V0RG93bnswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KX19QC1tb3ota2V5ZnJhbWVzIHNsaWRlT3V0RG93bnswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwMHB4KX19I2EwLXdpZGdldCAuYTAtc2xpZGVPdXREb3duey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6c2xpZGVPdXREb3duOy1tb3otYW5pbWF0aW9uLW5hbWU6c2xpZGVPdXREb3duO2FuaW1hdGlvbi1uYW1lOnNsaWRlT3V0RG93bn1ALXdlYmtpdC1rZXlmcmFtZXMgaGluZ2V7MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0O3RyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXR9MjAlLDYwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoODBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoODBkZWcpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDt0cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0fTQwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoNjBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoNjBkZWcpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDt0cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0Oy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0fTgwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoNjBkZWcpIHRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnJvdGF0ZSg2MGRlZykgdHJhbnNsYXRlWSgwKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7dHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDtvcGFjaXR5OjF9MTAwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDcwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSg3MDBweCk7b3BhY2l0eTowfX1Aa2V5ZnJhbWVzIGhpbmdlezAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LW1zLXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LW1vei10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0O3RyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0fTIwJSw2MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDgwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSg4MGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKDgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDgwZGVnKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LW1zLXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LW1vei10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0O3RyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0fTQwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoNjBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKDYwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoNjBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoNjBkZWcpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDstbXMtdHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDstbW96LXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7dHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXR9ODAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg2MGRlZykgdHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSg2MGRlZykgdHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoNjBkZWcpIHRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnJvdGF0ZSg2MGRlZykgdHJhbnNsYXRlWSgwKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LW1zLXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LW1vei10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0O3RyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0O29wYWNpdHk6MX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoNzAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSg3MDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSg3MDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoNzAwcHgpO29wYWNpdHk6MH19QC1tb3ota2V5ZnJhbWVzIGhpbmdlezAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSgwKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LW1zLXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LW1vei10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0O3RyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0fTIwJSw2MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDgwZGVnKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSg4MGRlZyk7LW1vei10cmFuc2Zvcm06cm90YXRlKDgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDgwZGVnKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LW1zLXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LW1vei10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0O3RyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0fTQwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoNjBkZWcpOy1tcy10cmFuc2Zvcm06cm90YXRlKDYwZGVnKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoNjBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoNjBkZWcpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDstbXMtdHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDstbW96LXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7dHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXR9ODAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg2MGRlZykgdHJhbnNsYXRlWSgwKTstbXMtdHJhbnNmb3JtOnJvdGF0ZSg2MGRlZykgdHJhbnNsYXRlWSgwKTstbW96LXRyYW5zZm9ybTpyb3RhdGUoNjBkZWcpIHRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnJvdGF0ZSg2MGRlZykgdHJhbnNsYXRlWSgwKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LW1zLXRyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LW1vei10cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0O3RyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0O29wYWNpdHk6MX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoNzAwcHgpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWSg3MDBweCk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWSg3MDBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoNzAwcHgpO29wYWNpdHk6MH19I2EwLXdpZGdldCAuYTAtaGluZ2V7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpoaW5nZTstbW96LWFuaW1hdGlvbi1uYW1lOmhpbmdlO2FuaW1hdGlvbi1uYW1lOmhpbmdlfUAtd2Via2l0LWtleWZyYW1lcyByb2xsSW57MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwMCUpIHJvdGF0ZSgtMTIwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTAwJSkgcm90YXRlKC0xMjBkZWcpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHB4KSByb3RhdGUoMGRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHB4KSByb3RhdGUoMGRlZyl9fUBrZXlmcmFtZXMgcm9sbEluezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMDAlKSByb3RhdGUoLTEyMGRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMDAlKSByb3RhdGUoLTEyMGRlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTAwJSkgcm90YXRlKC0xMjBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0xMDAlKSByb3RhdGUoLTEyMGRlZyl9MTAwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwcHgpIHJvdGF0ZSgwZGVnKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHB4KSByb3RhdGUoMGRlZyk7LW1vei10cmFuc2Zvcm06dHJhbnNsYXRlWCgwcHgpIHJvdGF0ZSgwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwcHgpIHJvdGF0ZSgwZGVnKX19QC1tb3ota2V5ZnJhbWVzIHJvbGxJbnswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTAwJSkgcm90YXRlKC0xMjBkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTAwJSkgcm90YXRlKC0xMjBkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTEwMCUpIHJvdGF0ZSgtMTIwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTAwJSkgcm90YXRlKC0xMjBkZWcpfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHB4KSByb3RhdGUoMGRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDBweCkgcm90YXRlKDBkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHB4KSByb3RhdGUoMGRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHB4KSByb3RhdGUoMGRlZyl9fSNhMC13aWRnZXQgLmEwLXJvbGxJbnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnJvbGxJbjstbW96LWFuaW1hdGlvbi1uYW1lOnJvbGxJbjthbmltYXRpb24tbmFtZTpyb2xsSW59QC13ZWJraXQta2V5ZnJhbWVzIHJvbGxPdXR7MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHB4KSByb3RhdGUoMGRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHB4KSByb3RhdGUoMGRlZyl9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSByb3RhdGUoMTIwZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxMDAlKSByb3RhdGUoMTIwZGVnKX19QGtleWZyYW1lcyByb2xsT3V0ezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDBweCkgcm90YXRlKDBkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwcHgpIHJvdGF0ZSgwZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDBweCkgcm90YXRlKDBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDBweCkgcm90YXRlKDBkZWcpfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSkgcm90YXRlKDEyMGRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHJvdGF0ZSgxMjBkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSkgcm90YXRlKDEyMGRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSkgcm90YXRlKDEyMGRlZyl9fUAtbW96LWtleWZyYW1lcyByb2xsT3V0ezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDBweCkgcm90YXRlKDBkZWcpOy1tcy10cmFuc2Zvcm06dHJhbnNsYXRlWCgwcHgpIHJvdGF0ZSgwZGVnKTstbW96LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDBweCkgcm90YXRlKDBkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDBweCkgcm90YXRlKDBkZWcpfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSkgcm90YXRlKDEyMGRlZyk7LW1zLXRyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpIHJvdGF0ZSgxMjBkZWcpOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSkgcm90YXRlKDEyMGRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMTAwJSkgcm90YXRlKDEyMGRlZyl9fSNhMC13aWRnZXQgLmEwLXJvbGxPdXR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpyb2xsT3V0Oy1tb3otYW5pbWF0aW9uLW5hbWU6cm9sbE91dDthbmltYXRpb24tbmFtZTpyb2xsT3V0fUAtd2Via2l0LWtleWZyYW1lcyB6b29tSW57MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMyk7dHJhbnNmb3JtOnNjYWxlKDAuMyl9NTAle29wYWNpdHk6MX19QGtleWZyYW1lcyB6b29tSW57MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMyk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjMpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMyk7dHJhbnNmb3JtOnNjYWxlKDAuMyl9NTAle29wYWNpdHk6MX19QC1tb3ota2V5ZnJhbWVzIHpvb21JbnswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4zKTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuMyk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC4zKTt0cmFuc2Zvcm06c2NhbGUoMC4zKX01MCV7b3BhY2l0eToxfX0jYTAtd2lkZ2V0IC5hMC16b29tSW57LXdlYmtpdC1hbmltYXRpb24tbmFtZTp6b29tSW47LW1vei1hbmltYXRpb24tbmFtZTp6b29tSW47YW5pbWF0aW9uLW5hbWU6em9vbUlufUAtd2Via2l0LWtleWZyYW1lcyB6b29tSW5Eb3duezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoLTIwMDBweCk7dHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgtMjAwMHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH02MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKDYwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSg2MHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dH19QGtleWZyYW1lcyB6b29tSW5Eb3duezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoLTIwMDBweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0fTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoNjBweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSg2MHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSg2MHB4KTt0cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoNjBweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0fX1ALW1vei1rZXlmcmFtZXMgem9vbUluRG93bnswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKC0yMDAwcHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH02MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKDYwcHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoNjBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoNjBweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKDYwcHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dH19I2EwLXdpZGdldCAuYTAtem9vbUluRG93bnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOnpvb21JbkRvd247LW1vei1hbmltYXRpb24tbmFtZTp6b29tSW5Eb3duO2FuaW1hdGlvbi1uYW1lOnpvb21JbkRvd259QC13ZWJraXQta2V5ZnJhbWVzIHpvb21JbkxlZnR7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgtMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKC0yMDAwcHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0fTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoNDhweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKDQ4cHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0fX1Aa2V5ZnJhbWVzIHpvb21JbkxlZnR7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgtMjAwMHB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgtMjAwMHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoLTIwMDBweCk7dHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgtMjAwMHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXR9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCg0OHB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKDQ4cHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKDQ4cHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCg0OHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9fUAtbW96LWtleWZyYW1lcyB6b29tSW5MZWZ0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoLTIwMDBweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0fTYwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoNDhweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCg0OHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCg0OHB4KTt0cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoNDhweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0fX0jYTAtd2lkZ2V0IC5hMC16b29tSW5MZWZ0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6em9vbUluTGVmdDstbW96LWFuaW1hdGlvbi1uYW1lOnpvb21JbkxlZnQ7YW5pbWF0aW9uLW5hbWU6em9vbUluTGVmdH1ALXdlYmtpdC1rZXlmcmFtZXMgem9vbUluUmlnaHR7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgyMDAwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoMjAwMHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH02MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKC00OHB4KTt0cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoLTQ4cHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0fX1Aa2V5ZnJhbWVzIHpvb21JblJpZ2h0ezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgyMDAwcHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgyMDAwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoMjAwMHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXR9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDhweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDhweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoLTQ4cHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDhweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0fX1ALW1vei1rZXlmcmFtZXMgem9vbUluUmlnaHR7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgyMDAwcHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKDIwMDBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKDIwMDBweCk7dHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgyMDAwcHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH02MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKC00OHB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKC00OHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDhweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKC00OHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9fSNhMC13aWRnZXQgLmEwLXpvb21JblJpZ2h0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6em9vbUluUmlnaHQ7LW1vei1hbmltYXRpb24tbmFtZTp6b29tSW5SaWdodDthbmltYXRpb24tbmFtZTp6b29tSW5SaWdodH1ALXdlYmtpdC1rZXlmcmFtZXMgem9vbUluVXB7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgyMDAwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoMjAwMHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH02MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKC02MHB4KTt0cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoLTYwcHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0fX1Aa2V5ZnJhbWVzIHpvb21JblVwezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoMjAwMHB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgyMDAwcHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgyMDAwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoMjAwMHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2UtaW4tb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXR9NjAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSgtNjBweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSgtNjBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoLTYwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSgtNjBweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0Oy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0fX1ALW1vei1rZXlmcmFtZXMgem9vbUluVXB7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgyMDAwcHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKDIwMDBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKDIwMDBweCk7dHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgyMDAwcHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dDstbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH02MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKC02MHB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKC02MHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSgtNjBweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKC02MHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXQ7LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0O2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9fSNhMC13aWRnZXQgLmEwLXpvb21JblVwey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6em9vbUluVXA7LW1vei1hbmltYXRpb24tbmFtZTp6b29tSW5VcDthbmltYXRpb24tbmFtZTp6b29tSW5VcH1ALXdlYmtpdC1rZXlmcmFtZXMgem9vbU91dHswJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfTUwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4zKTt0cmFuc2Zvcm06c2NhbGUoMC4zKX0xMDAle29wYWNpdHk6MH19QGtleWZyYW1lcyB6b29tT3V0ezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTstbXMtdHJhbnNmb3JtOnNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX01MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMyk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjMpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMyk7dHJhbnNmb3JtOnNjYWxlKDAuMyl9MTAwJXtvcGFjaXR5OjB9fUAtbW96LWtleWZyYW1lcyB6b29tT3V0ezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTstbXMtdHJhbnNmb3JtOnNjYWxlKDEpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKX01MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMyk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjMpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMyk7dHJhbnNmb3JtOnNjYWxlKDAuMyl9MTAwJXtvcGFjaXR5OjB9fSNhMC13aWRnZXQgLmEwLXpvb21PdXR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTp6b29tT3V0Oy1tb3otYW5pbWF0aW9uLW5hbWU6em9vbU91dDthbmltYXRpb24tbmFtZTp6b29tT3V0fUAtd2Via2l0LWtleWZyYW1lcyB6b29tT3V0RG93bns0MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKC02MHB4KTt0cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoLTYwcHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXI7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXJ9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKDIwMDBweCk7dHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgyMDAwcHgpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgYm90dG9tO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGJvdHRvbX19QGtleWZyYW1lcyB6b29tT3V0RG93bns0MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKC02MHB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKC02MHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSgtNjBweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKC02MHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyOy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXI7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXJ9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKDIwMDBweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoMjAwMHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKDIwMDBweCk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBib3R0b219fUAtbW96LWtleWZyYW1lcyB6b29tT3V0RG93bns0MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKC02MHB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKC02MHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSgtNjBweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKC02MHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyOy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXI7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXJ9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKDIwMDBweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoMjAwMHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKDIwMDBweCk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBib3R0b207LW1zLXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGJvdHRvbTstbW96LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGJvdHRvbTt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBib3R0b219fSNhMC13aWRnZXQgLmEwLXpvb21PdXREb3duey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6em9vbU91dERvd247LW1vei1hbmltYXRpb24tbmFtZTp6b29tT3V0RG93bjthbmltYXRpb24tbmFtZTp6b29tT3V0RG93bn1ALXdlYmtpdC1rZXlmcmFtZXMgem9vbU91dExlZnR7NDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCg0MnB4KTt0cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoNDJweCk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcjthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcn0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoLTIwMDBweCk7dHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgtMjAwMHB4KTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBjZW50ZXI7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGNlbnRlcn19QGtleWZyYW1lcyB6b29tT3V0TGVmdHs0MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKDQycHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoNDJweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVgoNDJweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKDQycHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXI7LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcjthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcn0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKC0yMDAwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoLTIwMDBweCk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgY2VudGVyOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgY2VudGVyOy1tb3otdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGNlbnRlcjt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgY2VudGVyfX1ALW1vei1rZXlmcmFtZXMgem9vbU91dExlZnR7NDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCg0MnB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKDQycHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKDQycHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCg0MnB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyOy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXI7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXJ9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgtMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKC0yMDAwcHgpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGNlbnRlcjstbXMtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGNlbnRlcjstbW96LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBjZW50ZXI7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGNlbnRlcn19I2EwLXdpZGdldCAuYTAtem9vbU91dExlZnR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTp6b29tT3V0TGVmdDstbW96LWFuaW1hdGlvbi1uYW1lOnpvb21PdXRMZWZ0O2FuaW1hdGlvbi1uYW1lOnpvb21PdXRMZWZ0fUAtd2Via2l0LWtleWZyYW1lcyB6b29tT3V0UmlnaHR7NDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDJweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKC00MnB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyfTEwMCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWCgyMDAwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoMjAwMHB4KTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgY2VudGVyO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgY2VudGVyfX1Aa2V5ZnJhbWVzIHpvb21PdXRSaWdodHs0MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKC00MnB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKC00MnB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDJweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKC00MnB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyOy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXI7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXJ9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKDIwMDBweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoMjAwMHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKDIwMDBweCk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGNlbnRlcjstbXMtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBjZW50ZXI7LW1vei10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGNlbnRlcjt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGNlbnRlcn19QC1tb3ota2V5ZnJhbWVzIHpvb21PdXRSaWdodHs0MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKC00MnB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKC00MnB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWCgtNDJweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVYKC00MnB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyOy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXI7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXJ9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKDIwMDBweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoMjAwMHB4KTstbW96LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVgoMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVYKDIwMDBweCk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGNlbnRlcjstbXMtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBjZW50ZXI7LW1vei10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGNlbnRlcjt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0IGNlbnRlcn19I2EwLXdpZGdldCAuYTAtem9vbU91dFJpZ2h0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6em9vbU91dFJpZ2h0Oy1tb3otYW5pbWF0aW9uLW5hbWU6em9vbU91dFJpZ2h0O2FuaW1hdGlvbi1uYW1lOnpvb21PdXRSaWdodH1ALXdlYmtpdC1rZXlmcmFtZXMgem9vbU91dFVwezQwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoNjBweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKDYwcHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXI7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXJ9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoLTIwMDBweCk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciB0b3A7dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgdG9wfX1Aa2V5ZnJhbWVzIHpvb21PdXRVcHs0MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKDYwcHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoNjBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC40NzUpIHRyYW5zbGF0ZVkoNjBweCk7dHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKDYwcHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXI7LW1vei1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcjthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcn0xMDAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoLTIwMDBweCk7LW1zLXRyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoLTIwMDBweCk7LW1vei10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKC0yMDAwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjEpIHRyYW5zbGF0ZVkoLTIwMDBweCk7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciB0b3A7LW1zLXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIHRvcDstbW96LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIHRvcDt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciB0b3B9fUAtbW96LWtleWZyYW1lcyB6b29tT3V0VXB7NDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSg2MHB4KTstbXMtdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKDYwcHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuNDc1KSB0cmFuc2xhdGVZKDYwcHgpO3RyYW5zZm9ybTpzY2FsZSgwLjQ3NSkgdHJhbnNsYXRlWSg2MHB4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyOy1tb3otYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXI7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXJ9MTAwJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKC0yMDAwcHgpOy1tcy10cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKC0yMDAwcHgpOy1tb3otdHJhbnNmb3JtOnNjYWxlKDAuMSkgdHJhbnNsYXRlWSgtMjAwMHB4KTt0cmFuc2Zvcm06c2NhbGUoMC4xKSB0cmFuc2xhdGVZKC0yMDAwcHgpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgdG9wOy1tcy10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciB0b3A7LW1vei10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciB0b3A7dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgdG9wfX0jYTAtd2lkZ2V0IC5hMC16b29tT3V0VXB7LXdlYmtpdC1hbmltYXRpb24tbmFtZTp6b29tT3V0VXA7LW1vei1hbmltYXRpb24tbmFtZTp6b29tT3V0VXA7YW5pbWF0aW9uLW5hbWU6em9vbU91dFVwfUAtd2Via2l0LWtleWZyYW1lcyBhcHBlYXJ7ZnJvbXtvcGFjaXR5OjB9dG97b3BhY2l0eToxfX1ALXdlYmtpdC1rZXlmcmFtZXMgZmFkZWlue2Zyb217b3BhY2l0eTouM310b3tvcGFjaXR5OjF9fUAtbW96LWtleWZyYW1lcyBzaG93UGFuZWx7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuOTUpIHRyYW5zbGF0ZTNkKDAsMCwwKX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUzZCgwLDAsMCl9fUAtd2Via2l0LWtleWZyYW1lcyBzaG93UGFuZWx7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuOTUpIHRyYW5zbGF0ZTNkKDAsMCwwKX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUzZCgwLDAsMCl9fUAtbXMta2V5ZnJhbWVzIHNob3dQYW5lbHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC45NSkgdHJhbnNsYXRlM2QoMCwwLDApfTEwMCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZTNkKDAsMCwwKX19QGtleWZyYW1lcyBzaG93UGFuZWx7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuOTUpIHRyYW5zbGF0ZTNkKDAsMCwwKX0xMDAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKSB0cmFuc2xhdGUzZCgwLDAsMCl9fUAtbW96LWtleWZyYW1lcyBoaWRlUGFuZWx7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlM2QoMCwwLDApfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC45OCkgdHJhbnNsYXRlM2QoMCwwLDApfX1ALXdlYmtpdC1rZXlmcmFtZXMgaGlkZVBhbmVsezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZTNkKDAsMCwwKX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuOTgpIHRyYW5zbGF0ZTNkKDAsMCwwKX19QC1tcy1rZXlmcmFtZXMgaGlkZVBhbmVsezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZTNkKDAsMCwwKX0xMDAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDAuOTgpIHRyYW5zbGF0ZTNkKDAsMCwwKX19QGtleWZyYW1lcyBoaWRlUGFuZWx7MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSkgdHJhbnNsYXRlM2QoMCwwLDApfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMC45OCkgdHJhbnNsYXRlM2QoMCwwLDApfX0jYTAtd2lkZ2V0IC5hMC16b2NpYWwsI2EwLXdpZGdldCBhLmEwLXpvY2lhbHtjb2xvcjojZmZmO3RleHQtYWxpZ246bGVmdDt0ZXh0LWRlY29yYXRpb246bm9uZTt3aGl0ZS1zcGFjZTpub3dyYXA7LW1vei11c2VyLXNlbGVjdDpub25lOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym9yZGVyLXJhZGl1czozcHg7cGFkZGluZzowO21hcmdpbi1ib3R0b206NnB4O2N1cnNvcjpwb2ludGVyO292ZXJmbG93OmhpZGRlbn0jYTAtd2lkZ2V0IC5hMC16b2NpYWw6aG92ZXJ7b3BhY2l0eToxfSNhMC13aWRnZXQgLmEwLXpvY2lhbCBzcGFuLCNhMC13aWRnZXQgYS5hMC16b2NpYWwgc3Bhbnt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc2l6ZToxMXB4O2xpbmUtaGVpZ2h0OjQwcHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7cGFkZGluZy1sZWZ0OjQlO3dpZHRoOjg2JTtjdXJzb3I6cG9pbnRlcjstd2Via2l0LXRyYW5zaXRpb246YWxsIC4ycyBlYXNlOy1tb3otdHJhbnNpdGlvbjphbGwgLjJzIGVhc2U7dHJhbnNpdGlvbjphbGwgLjJzIGVhc2V9I2EwLXdpZGdldCAuYTAtc3RyYXRlZ3kgZGl2LmEwLXpvY2lhbCBzcGFue3RleHQtdHJhbnNmb3JtOmxvd2VyY2FzZTtmb250LXNpemU6MTJweH0jYTAtd2lkZ2V0IC5hMC16b2NpYWw6aG92ZXIgc3BhbiwjYTAtd2lkZ2V0IGEuYTAtem9jaWFsLCNhMC13aWRnZXQgYS5hMC16b2NpYWw6aG92ZXIgc3BhbntiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjIpfSNhMC13aWRnZXQgLmEwLXpvY2lhbDpiZWZvcmV7Zm9udDoxNHB4IHpvY2lhbDtmb250LXdlaWdodDo0MDA7ZmxvYXQ6bGVmdDtkaXNwbGF5OmlubGluZS1ibG9jaztsaW5lLWhlaWdodDo0MHB4O3dpZHRoOjE2JTtjdXJzb3I6cG9pbnRlcjt0ZXh0LWFsaWduOmNlbnRlcjtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjMpOy13ZWJraXQtdHJhbnNpdGlvbjphbGwgLjJzIGVhc2U7LW1vei10cmFuc2l0aW9uOmFsbCAuMnMgZWFzZTt0cmFuc2l0aW9uOmFsbCAuMnMgZWFzZX0jYTAtd2lkZ2V0IC5hMC16b2NpYWw6YWN0aXZle291dGxpbmU6MH0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtaWNvbntvdmVyZmxvdzpoaWRkZW47d2hpdGUtc3BhY2U6bm93cmFwfSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC1pY29uOmJlZm9yZXstd2Via2l0LWJveC1zaGFkb3c6bm9uZTtib3gtc2hhZG93Om5vbmU7Ym9yZGVyOjB9I2EwLXdpZGdldCAuYTAtc3RyYXRlZ3l7bWFyZ2luOjEwcHggMH0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtYW1hem9uOmJlZm9yZXtjb250ZW50OlxcXCJhXFxcIn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtZHJvcGJveDpiZWZvcmV7Y29udGVudDpcXFwiZFxcXCI7Y29sb3I6IzFmNzVjY30jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtZmFjZWJvb2s6YmVmb3Jle2NvbnRlbnQ6XFxcImZcXFwifSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC1naXRodWI6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXFwwMEU4XFxcIn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtZ21haWw6YmVmb3Jle2NvbnRlbnQ6XFxcIm1cXFwiO2NvbG9yOnJlZH0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtZ29vZ2xlOmJlZm9yZXtjb250ZW50OlxcXCJHXFxcIn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtZ29vZ2xlcGx1czpiZWZvcmV7Y29udGVudDpcXFwiK1xcXCJ9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLWd1ZXN0OmJlZm9yZXtjb250ZW50OlxcXCI/XFxcIn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtaWU6YmVmb3Jle2NvbnRlbnQ6XFxcIjZcXFwifSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC1saW5rZWRpbjpiZWZvcmV7Y29udGVudDpcXFwiTFxcXCJ9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLW9wZW5pZDpiZWZvcmV7Y29udGVudDpcXFwib1xcXCI7Y29sb3I6I2ZmOTIxZH0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtcGF5cGFsOmJlZm9yZXtjb250ZW50OlxcXCIkXFxcIn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtc3RhY2tvdmVyZmxvdzpiZWZvcmV7Y29udGVudDpcXFwiXFxcXDAwRUNcXFwiO2NvbG9yOiNmZjdhMTV9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLXR3aXR0ZXI6YmVmb3Jle2NvbnRlbnQ6XFxcIlRcXFwifSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC12azpiZWZvcmV7Y29udGVudDpcXFwiTlxcXCJ9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLXdpbmRvd3M6YmVmb3Jle2NvbnRlbnQ6XFxcIldcXFwifSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC15YWhvbzpiZWZvcmV7Y29udGVudDpcXFwiWVxcXCJ9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLW9mZmljZTM2NTpiZWZvcmV7Y29udGVudDpcXFwielxcXCJ9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLXRoaXJ0eXNldmVuc2lnbmFsczpiZWZvcmV7Y29udGVudDpcXFwiYlxcXCJ9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLXNhbGVzZm9yY2U6YmVmb3Jle2NvbnRlbnQ6XFxcIipcXFwifSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC13YWFkOmJlZm9yZXtjb250ZW50OlxcXCJ6XFxcIn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtYm94OmJlZm9yZXtjb250ZW50OlxcXCJ4XFxcIn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtYW9sOmJlZm9yZXtjb250ZW50OlxcXCJsXFxcIn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtcmVucmVuOmJlZm9yZXtjb250ZW50OlxcXCJyXFxcIn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtYmFpZHU6YmVmb3Jle2NvbnRlbnQ6XFxcInVcXFwifSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC1maXRiaXQ6YmVmb3Jle2NvbnRlbnQ6XFxcIiNcXFwifSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC15YW5kZXg6YmVmb3Jle2NvbnRlbnQ6XFxcIiZcXFwifSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC13b3JkcHJlc3M6YmVmb3Jle2NvbnRlbnQ6XFxcIndcXFwifSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC1kd29sbGE6YmVmb3Jle2NvbnRlbnQ6XFxcIkRcXFwifSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC1zaG9waWZ5OmJlZm9yZXtjb250ZW50OlxcXCJzXFxcIn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAteWFtbWVyOmJlZm9yZXtjb250ZW50OlxcXCIhXFxcIn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtbWlpY2FyZDpiZWZvcmV7Y29udGVudDpcXFwibVxcXCJ9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLXNvdW5kY2xvdWQ6YmVmb3Jle2NvbnRlbnQ6XFxcInRcXFwifSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC1ldmVybm90ZTpiZWZvcmV7Y29udGVudDpcXFwiblxcXCJ9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLWViYXk6YmVmb3Jle2NvbnRlbnQ6XFxcImVcXFwifSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC1zaGFyZXBvaW50OmJlZm9yZXtjb250ZW50OlxcXCJwXFxcIn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtd2VpYm86YmVmb3Jle2NvbnRlbnQ6XFxcIlNcXFwifSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC1pbnN0YWdyYW06YmVmb3Jle2NvbnRlbnQ6XFxcImlcXFwifSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC1hbWF6b257YmFja2dyb3VuZC1jb2xvcjojZmZhZDFkO2NvbG9yOiMwMzAwMzd9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLWRyb3Bib3h7YmFja2dyb3VuZC1jb2xvcjojZmZmO2NvbG9yOiMzMTJjMmF9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLWZhY2Vib29re2JhY2tncm91bmQtY29sb3I6IzQ4NjNhZX0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtZ2l0aHVie2JhY2tncm91bmQtY29sb3I6I2VlZTtjb2xvcjojMDUwNTA1fSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC13b3JkcHJlc3N7YmFja2dyb3VuZC1jb2xvcjojMWU4Y2JlO2NvbG9yOiNmZmZ9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLWR3b2xsYXtiYWNrZ3JvdW5kLWNvbG9yOiNGNTg5MUY7Y29sb3I6I2ZiZmJmYn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtZ21haWx7YmFja2dyb3VuZC1jb2xvcjojZWZlZmVmO2NvbG9yOiMyMjJ9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLWdvb2dsZXtiYWNrZ3JvdW5kLWNvbG9yOiM0ZTZjZjd9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLWdvb2dsZXBsdXN7YmFja2dyb3VuZC1jb2xvcjojZGQ0YjM5fSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC1ndWVzdHtiYWNrZ3JvdW5kLWNvbG9yOiMxYjRkNmR9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLWlle2JhY2tncm91bmQtY29sb3I6IzAwYTFkOX0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtbGlua2VkaW57YmFja2dyb3VuZC1jb2xvcjojMDA4M2E4fSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC1vcGVuaWR7YmFja2dyb3VuZC1jb2xvcjojZjVmNWY1O2NvbG9yOiMzMzN9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLXBheXBhbHtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Y29sb3I6IzMyNjg5YX0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtdHdpdHRlcntiYWNrZ3JvdW5kLWNvbG9yOiM0NmMwZmJ9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLXZre2JhY2tncm91bmQtY29sb3I6IzQ1Njg4RX0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtb2ZmaWNlMzY1e2JhY2tncm91bmQtY29sb3I6IzAwQUNFRDtjb2xvcjojZmZmfSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC13YWFke2JhY2tncm91bmQtY29sb3I6IzAwQURFRjtjb2xvcjojZmZmfSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC10aGlydHlzZXZlbnNpZ25hbHN7YmFja2dyb3VuZC1jb2xvcjojNkFDMDcxO2NvbG9yOiNmZmZ9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLWJveHtiYWNrZ3JvdW5kLWNvbG9yOiMyNjdiYjY7Y29sb3I6I2ZmZn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtc2FsZXNmb3JjZXtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7Y29sb3I6cmVkfSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC13aW5kb3dze2JhY2tncm91bmQtY29sb3I6IzI2NzJFQztjb2xvcjojZmZmfSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC15YWhvb3tiYWNrZ3JvdW5kLWNvbG9yOiNhMjAwYzI7Y29sb3I6I2ZmZn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtYW9se2JhY2tncm91bmQtY29sb3I6IzA4NjFBODtjb2xvcjojZmZmfSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC1yZW5yZW57YmFja2dyb3VuZC1jb2xvcjojMDA1NkI1O2NvbG9yOiNmZmZ9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLWJhaWR1e2JhY2tncm91bmQtY29sb3I6IzI4MzJFMTtjb2xvcjojZmZmfSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC1maXRiaXR7YmFja2dyb3VuZC1jb2xvcjojNDVDMkM1O2NvbG9yOiNmZmZ9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLXlhbmRleHtiYWNrZ3JvdW5kLWNvbG9yOnJlZDtjb2xvcjojZmZmfSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC1zaG9waWZ5e2JhY2tncm91bmQtY29sb3I6IzlDQzI0Qztjb2xvcjojZmJmYmZifSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC15YW1tZXJ7YmFja2dyb3VuZC1jb2xvcjojMDA3MmM2O2NvbG9yOiNmZGZkZmR9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLW1paWNhcmR7YmFja2dyb3VuZC1jb2xvcjojQzdFQUZGO2NvbG9yOiMzMDMwMzB9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLXNvdW5kY2xvdWR7YmFja2dyb3VuZC1jb2xvcjojZmY0NTAwfSNhMC13aWRnZXQgLmEwLXpvY2lhbC5hMC1ldmVybm90ZXtiYWNrZ3JvdW5kLWNvbG9yOiM2YmIxMzA7Y29sb3I6I2ZmZn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtZWJheXtiYWNrZ3JvdW5kLWNvbG9yOiMwMDAwOTg7Y29sb3I6I2ZmZn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtc2hhcmVwb2ludHtiYWNrZ3JvdW5kLWNvbG9yOiMwMDcyQzY7Y29sb3I6I2ZmZn0jYTAtd2lkZ2V0IC5hMC16b2NpYWwuYTAtd2VpYm97YmFja2dyb3VuZC1jb2xvcjojZmFmNmYxO2NvbG9yOiNlNjE2MmR9I2EwLXdpZGdldCAuYTAtem9jaWFsLmEwLWluc3RhZ3JhbXtiYWNrZ3JvdW5kLWNvbG9yOiMyNTUzN0I7Y29sb3I6I2ZmZn0jYTAtd2lkZ2V0IGJ1dHRvbjotbW96LWZvY3VzLWlubmVye2JvcmRlcjowO3BhZGRpbmc6MH1AZm9udC1mYWNle2ZvbnQtZmFtaWx5OnpvY2lhbDtzcmM6dXJsKGh0dHBzOi8vZDE5cDR6ZW1jeWNtN2EuY2xvdWRmcm9udC5uZXQvdzIvZm9udC96b2NpYWwtcmVndWxhci13ZWJmb250LmVvdCl9QGZvbnQtZmFjZXtmb250LWZhbWlseTp6b2NpYWw7c3JjOnVybChkYXRhOmFwcGxpY2F0aW9uL2ZvbnQtd29mZjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxkMDlHUms5VVZFOEFBRGpzQUFvQUFBQUFPS1FBQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQkRSa1lnQUFBQTlBQUFORkVBQURSUjRNd3B0MDlUTHpJQUFEVklBQUFBWUFBQUFHQU9rdzRXWTIxaGNBQUFOYWdBQUFEY0FBQUEzQVNTQmZKbllYTndBQUEyaEFBQUFBZ0FBQUFJQUFBQUVHaGxZV1FBQURhTUFBQUFOZ0FBQURZRGxYTk9hR2hsWVFBQU5zUUFBQUFrQUFBQUpBbDhCYVpvYlhSNEFBQTI2QUFBQUt3QUFBQ3NwTlVEeVcxaGVIQUFBRGVVQUFBQUJnQUFBQVlBSzFBQWJtRnRaUUFBTjV3QUFBRXdBQUFCTU9yUWpSMXdiM04wQUFBNHpBQUFBQ0FBQUFBZ0FBTUFBQUVBQkFRQUFRRUJCM3B2WTJsaGJBQUJBZ0FCQUR2NEhBTDRHd1A0R0FRZUNnQUpkLytMaXg0S0FBbDMvNHVMREFkL01Cd0Y1L3BjQlIwQUFBRUtEeDBBQUFFUEVSMEFBQUFKSFFBQU5FZ1NBQ3dCQVFjTkR4RVVGeG9kSUNNbUtTd3ZNalU0T3o1QlJFZEtUVkJUVmxsY1gySmxhR3R1Y1hSM2VuMkFnNGFKZW05amFXRnNlbTlqYVdGc2RUQjFNWFV5TUhVeU1YVXlNblV5TTNVeU5IVXlOblV5UVhVeVFuVXpNSFV6Um5VME5IVTBOWFUwTjNVMFEzVTBSWFUxTTNVMU5IVTFOblUxTjNVMU9YVTJNWFUyTW5VMk5IVTJOWFUyTm5VMk4zVTJPWFUyUTNVMlJIVTJSWFUyUm5VM01IVTNNblUzTTNVM05IVTNOWFUzTjNVM09IVkZPSFZGUXdBQUFnR0pBQ2tBS3dJQUFRQUVBQWNBQ2dBTkFXQUNYQVBjQkpzRkRnWVZCMmtJR3dqQUNiUUx4dzBPRGJnUUl4TVhFOU1VNXhZMkYySVpkUnI1RzJFZWF4NjRJSFlocFNKSEk5b2w3U2JmS0RrbzFpbldMQjR1OGpCZU1WRXljVExmL3BRTy9wUU8vcFFPL0pRT28vbTVGWStqb3A2a2k2Q01vSDZVZDhYN0o4WDdKOFg3SjQyTmpZMkxqc0wzSThQM0pNRDNKSmFpcVplamdhT0RtVzJEY2p6N1ZUNzdWajM3VmdoOFpYcGpjV3A0YzNGNGJvSmxmMktMWkpCemozcWtqNk9PbkppYW5KQ1lqNW1IbUl1a2lxV1JucHVoblplbGxhUUlqNWlTbDVDWGlwR0lrSW1RUlBkQVJQYy9SZmMvaDVhSmxvMlhDUG0xVHhXaGtxWi9sWGFWZG9WdmQzNWJjVmx5V0hWdmdIQ0Fib0oraUgySGZvMklqSWFNaTQ2TGtwQ1FqcENjbjUrYm41c0lycWl2cGJDbG9abWZtNktYQ09qN3BCV2FqSm1PbW9xa2hweHhoM09KYzNWM2M0eFhqRmVNVnBCc2pteVBiWkovam9DT2dKR0hqWWlQaUkrUWs1U05rNDRJb3BPamtLT1B3cFhDa3NPUUNQdmIrMEVWa28yU2lwT0twSWVqZ3FLQ3lIUEdic1Z0bklPVmQ0cDVpbmQ5ZVhtRmZvWjhpNENUWmFObXBXZWxhcVJxcEcyb0NJT1RnNUtHbFlpT2k1S1FqUWdPK21qNTJCVk4zU09qK3dCcGFJQmloMmVTKzZ6SCszNzdJMFA3cW9oOWdYNkVmb3RtaTJhTFpwTjRsWGlRZDhYN2hQZG4reVgzbEtUM2RhSDNRL2RkbFBlQUNJeTRuYnVpczhMcGpPeE0zZ2o4SXYydUZmcytXdnRRMHlqM0xDZjNMNWIzVWZjSjl5UDNBZmNZOTBxLzl5bE5pRnArZEUyVSsxR2sreS83RkhIN1YzYjdML2NjK3o3M05uWDNUM0wzTC9jTXFmZFRsTWFMaTlpS0NJbjdhdnNDK3l6N1RsVUk5MWI0UlJYN0JZc3U1b3YzQTRyMjdmRDFqZmNBanZVaGlQc0JpZnNETFRIN0JJd0ljL2Y3RlN4NVlsT0tPNHMydUZQbmVJdjBpKytMOXdFSXZmdklGZXVqdThXRjNJWGFXTDA2a0lzb2l5aUxLQWdPK1JyM2dSV0xzNnFwc291empLeHFpMldLWld0c1pJdGppMnlwaTdJSTkrNzNYQldMWkd4c1k0eGxpMnVyaXJHTHNheXJzNHF6aTZodWkySUkrKzczWFJXTHM2dXFzNHF4aTZ4cWkyYUtabXRyWklwa2kydXFpN0lJL1ByN1hCV0xzNmlvdEl1eWk2dHRqR1dMWld0cVk0dGxpMnVxaTdJSStQcUxGWXV6cWFpMGk3S0xxMjJNWll0bGFtcGtpMlNMYTZ1THNRajdvSW9WaW1Wc2JHV0xaSXRwckl1d2pMT3JxYlNLczR1b2JZdGpDUGNaMFJXMGk2dHRpbU9MWld0c1pJdGtpMnVxaTdLS3NhdXFzb3NJalBlYkZXV0xhNnFLc0l1eHJLdXhpN0NNckd1TVpvdGtiR3hqaXdpTC9iWVZaSXhycVl1eGk3Q3NyTEdLc291cmJJdG1pMlJyYkdTTENOTDNvaFdMWld0c1pZcGtpMnFzaTdDTXNLeXJzSXV5aTZ0cmkyWUkrKzJLRll1enFLbTBpN0dMcW11TFpZdGxiR3hraTJTTGJhbUxzZ2ozcHZocUZiS0xxbTJNWll0a2JHMWlpMlNMYktxTHNZeXhxYWl6akFqN1lQc2RGV1NMYTZtS3NZcXdyS3V6aTdPS3FHK0xaSXRqYm01aml3Z09iNHU5RmZkYitpVDRWSXNGcll1c2hhdC9xMzZvZUtWeXBIR2RhNVZrbFdTTFhZRldkeTVmUWtkV1IxVThjUytMQ1B0UGkwcjd3L3ViaXdYeCt3UVY5NXlMeS9mQzkxQ0xCZWVMMjZiT3dNL0F0OVNmNko3bmZkWmF4S0paajFGOFNYZ3VYMEpIVmtkV08zQXdpd2o3VUl0TCs4TDdjWXNGOTVENHJ4WGdpN2IzVC9jVWl3V01pNUdLbFltR240Q2JlNWQ3bDNpUmRZc0kreFNMQmRQN2pSV3JqS3FZcDZPb281eW5rNjJMakl1TmpJNk1qb3VOaTR3SSt3bUxCUTc1UFBvbkZmc2Zpd1g3SFl2N0J5Q0wrMk9MK3hERE1POWVDUHRQKys0RmhZQ1JncFdMQ09LTEJaS0xrSTZOa1FqM1BmZm55SXVMKytjRmk0ZVBocENMQ05hTEJaS0xqbytMa1FpTCtpa0ZpNVNHajRPTENEcjhreFZZaXdVN2l6M0hpL2NxaS9jeDFNclZpd2pKaTR2OFFnVU9pL2xqRll1Y2tKdVdtWmFabVpTY2p3ajNYcnNGWUZwMlVvdEppL3NTNFNyM1FVaWVoSjJEbllHZGdwMkFuMzJlZlp0N2wzbVhlWkY0aTNpTGJYOTBjM3R6ZTNDQ2JJc0lZNHRpazJDYVlKdG5uMitsQ0RyN1N3V3hkcngyeDNlRWlZR0lmSWQ4aG42SWY0bUFpSUNLZ1l0NmkzdVJmWlY5bG9LWmg1d0kreno1VkFXS2s0cVJpNDhJK0VGY0ZZdWxsNStqbWFPWnBaS25pNnlMc1lXMGY3Vi9xWHVkZUFqSzkwSUZUYXRNb1VtVmpZdWFqNm1UcUpTamtaK1BubythalpTTG5JdWJocG1BbVlDVWZZOTZDUGM4L1ZRRmpJT01oWXVIaTNxR2U0QjlnSDE5Z25xSENQc3BhQVdydTV1L2k4T0wxM1BKVzd4YnZFeXdQYVg3Q2JKUnU0dkRDQTczVUl2M0RoV0x4Nm5BeUxuSXV0U2k0WXNJdzRzRmJxWjlxSXVyaTUrUW5wYWZoSXFCaTM2TFJJdFJvVjY0WHJkMXdvdk1pOG1ud2NPNXc3cktvdE9MQ1BmU2kwUllKb3NGckgra2M1MXBuV21VWll0aWkwdHRWRTljY25kNmU0U0FnMytIZll0NmkzNlZlcDEzblhpZWVwMTl0VzZvYlp0c0NKdHNrMldMWEl0T2IxVlRYbE5lUDNRc2l6Q0xQcHhNclV5dGJMaUx3d2ozQjYwVmkxeWZZN05xczJxOGVzZUwzSXZHbXErcHNLbWRzNHU5aTVpS2xvaVVpWktJa29tU2lKR0hrb1dSaHBLR2tJZVFDSWVQaEpHQ2tvS1JoSkNHajRhT2c1Ri9sSDZUZ3BHR2ozQ1RjWTl4aTA2TVZYdGRhbDFxZEdTTFhnak8rTkVWazFXZlhLMWtyV1N3ZUxTS3RJcXJuS093bzdDVHVJVEJoTUYzdVdteGFiQm1uMktNWW94cmVuTm5jMmVDWHBKV0NQak5jaFdMdnZkZ2k0djNZYitMaS90aDkyR0xpMWo3WVl1TCsySlhpNHYzWXZ0Z2l3VU8rT2YzeVJYN080dDBQZnNxaS9kSCtHNzNOSXYzUnZ4dSt5MkxjOWtGYlBJVlYvYytWL3MrODRzRitHT2JGWXY3c3Z0OCszMzdzNHY3c292N2ZmZDlpL2V5aS9lejkzMzNmUGV5aS9lemkvZDgrM3lMKzdNSS9KYjRGeFg3YTR2N1F2dENpL3RyaS90cjkwTDdRdmRyaS9kcmkvZEM5MEtMOTJ1TDkydjdRdmRDKzJ1TENJcG1GZnRXaS9zeSt6R0wrMWFMKzFmM012c3g5MWFMOTFhTDl6TDNNWXYzVjR2M1Z2c3k5ekg3Vm9zSUR2dUVqZmNyRll1YWo2R1RxSnZHcWNHMnU3YTh2cTdFb1ZXMmNNS0x6b3ZGb0wyMnRMYTB2YURHaThhTHZuYTFZclppb0ZtTFVRaUxTSEZWVm1EVWNjZGd2RTY3VHFOSGkwR0xUSEpuV29LSWhJZUNoSUNIZ0lPQmY0Ti9nbnVFZFlaMmhYcUhmNGdJZm9sNGlIR0hjWWgraVlxTGlvdUlpNGlLaDRxSmk0cUxDUHNQaXdWb2kxK1JWcFpWbG0yYWhKOS9sb0taaHAxNmpuMlNmNVp4bFg2b2k3b0lEdndjaStnVmk3K2VzYktrbjVpZWxaeVMyS3kxbnBHT2ZLQjVvblNsYUxSM280V1NRT1ZyNEpiWmo3R2FxcU9qazVXYWxwK1hDS1NhbXBPUmpvNk1rNDZYa1plUWxZK1RqZ2k3b2RLcUJiS2NxWmllbHBpU2xJbU9mNHVFZ29KNWdtRndkV1NKV0l0M2pIaVBkNDk0a0h1UGZwQitrM3lZZUpoNGxINlJoUWlRaEpkOW5YZWRkcFovam9lUWhwU0FtM21iZXBaK2tvT1NnNVIrbUhtWGVaUjhrSDJSZlpCN2tIZVFlSTUzaTNZSWkzS0djNEozZzNXQ2VYOStnSDU3ZlhaK2MzeDVnWDZGZklOMmduR0FnSWQvaG42RmZZV0VoNG1MQ0M5alozZ0ZkWUI2aEg2SVVYMWVrMnFwYXFwN3RZdkFDQTc3UEl2NUd4V0xwcENmbFplU2xaT1NsNUNYa1p1T240c0k2NHNGbG91VGo1T1NrNU9PazR1V2k1bUxtb3FiQ0l2SEJZdWNqNXFVbUpXYW5KV2prcEtQblkyb2l3aWVpd1cwaXF5RnBvR2xnSnAya0d1ZGpKdUxtb3V2aTZxSm80ak5nN2VEb1lPb2dwMTBrMmFSWlpKRWtDR09UbzFaaTJNSWkyMktjNGw1Z1BzS2ZEVjVVNEZ1Z25PQmVZSjVnWDJDZ0lLQWZvTjhobnVIZlloOWluNktkNHB3aTBLTFdaUnhuQWh5blg2dmk4S0xxbzZqa3AyUm5wYVhtNU9ja3BxUW00eVZqSm1MbklzSXFJc0ZqWXVOaTR5S2pJcU1pWXFKaW9pS2lZcUlpb2lLaDRxSGlvYUxob3VIaTRXTGhZMkVqSVdMaDR1SmlvbUppb2VMQ0hhTEJZdUxpSXVFaTRTTGlJcUxpb3VMaUlxRmlvV0tpSW1NaW91SmlZbUhpWWVJaW9pTWg0eUlpNGVKaDR1QmpJT09oUWlPaFkyR2pvaU5oNUdKbFlxVmlaT0xrSXNJcklzRnNvdWtqNWFVbHBXUW9JdXRpNytGcm42ZGY1MTNsbkdQVDVGamtuV1NaNWw1czR2UGk0eUtqSXFMaVl1S2lvdUtDSXRkaFdKL1p3aUNjZ1dFZW42RGVvb0loSXNGZTR0NWpuYVFOSlpJbTFxZ2U1TittSU9mZjZOL3QzN0xmOHVEdUllbWlLS0tuSXVZQ0pIM0RoV0xqZmRROTB3Rmk0eUxpNHlMQ0llRkJZUjloM3VMZUl0OGpHZUxWSXVFaUlpRWl3Z3Npd1YwaTNhSGVvU0lpWWlKaUlvSStOcjd2Uldaalp1TW5JdXFpcWFGcEgrTHhYYXBZWXdJaUlzRmQ0dDhoSUYrZ1h5RmVvaDJDQTc4QUl2M0RoV0x4Nm5BeUxuSXV0U2k0WXNJdzRzRmJxWjlxSXVyaTUrUW5wYWZoSXFCaTM2TFJJdFJvVjY0WHJkMXdvdk1pOG1ud2NPNXc3cktvdE9MQ1BmU2kwUllKb3NGckgra2M1MXBuV21VWll0aWkwdHRWRTljY25kNmU0U0FnMytIZll0NmkzNlZlcDEzblhpZWVwMTl0VzZvYlp0c0NKdHNrMldMWEl0T2IxVlRYbE5lUDNRc2l6Q0xQcHhNclV5dGJMaUx3d2ozQjYwVmkxeWZZN05xczJxOGVzZUwzSXZHbXErcHNLbWRzNHU5aTVpS2xvaVVpWktJa29tU2lKR0hrb1dSaHBLR2tJZVFDSWVQaEpHQ2tvS1JoSkNHajRhT2c1Ri9sSDZUZ3BHR2ozQ1RjWTl4aXdpSGl3VlFpMVo3WG10ZGFuUmtpMTRJenZqUkZaTlZuMXl0Wksxa3NIaTBpZ2lQaXdXeWk2bWRvNjZkcUpTdGk3S0xsWXVYaVplRXdYZTVhYkZwc0dhZllvd0loNHNGWkl0c2VuUm9lRytDYVl0a2k0Q01nSXlBQ0E2emh2bmJGWXV0bDZlam9xT2hxcGF4aTdDTHFvQ2lkYU4xbDIyTFo0dHFmM0IwZFhOMWJIOWtpd2lLaXdWbGkyMlhkS0Z6b29Dbmk2MEltUDRVRll2NVFQZDRpNHY5UVB0NGl3WDM5WXNWOTNpTGkvZ1NCWXVqanAyUW1KV2ptWjZmbTU2Ym81T3BpOWVMc1ZpTEpBaUwvQUwzZUl1TCtCd0ZpL0J6MkZ1L1c3OU1wajJMTTR0R1pWby9DSXVKaW91TWpZdnMrM2lMQlkxMWpFZUwrd2FMK3dhSyt6U0orMklJRHZkdWd2bDBGWktRazQrVmpwV09rNHlUaXdpVWl3V1NpNU9MbFlxYWlwYUxrb3VQaTVpTW9JeVdqSldMbEl1VWlwT0xrb3VZaXBhSWs0ZVFpWStHa0lXUWhJNkVqNFVJam9XUGdvK0FrSUNQZzQySXBWT3JVN0ZVakltT2g0Nkdqb1dPaDQ2SWpZaU9oNCtHajRlT2g0K0lqb2lQaUk2SUNJK0lqNG1QaTQrS2o0dVBqSitPbGJPTjE0eVlpNWVMbG91K2hxNkJub2VTaHBHRWtJV1BnbytCajRHUGc0NkZqd2lWbnB5WG81S2prYXlPdFlzSXdZc0ZpNHVVaTUyS25ZdVVpb3VKQ0tLR0JZdUxrb2lZaEppRmtJYUdpSkYvajN5TWU0dUdpNGVNaG90OWlubUpkWWh2aW5tTGhJbDhpbnVMZTR0L2kzNk5mUWlPYlpWMm5ZQ1JpNUNOa0kyUmpaQ1BrSkNSa1krUGpZMk5qWStSa1pTU2xJNlBqSXlydGF2RHE5QUlsYUlGaTR1UGxKS2RrNTJQa295R2k0YVFrSmFabFpDWWpacUxDSldMQlppTG00cWRpcUdLbTRxVmk1R0xsSXVZakppTWxvdVVqSldMbFl1V2lwV0tsSW1TaUpHSWtJYU9obzJIaklhTGhnaUxlSDl0YzJPQWQzOTZmM3QvZW50NGVITjRkSDk3aElPS2lZYUZnNENEZ0lXRGg0V0hob2VEaDRHSGdvcUNpNElJaTRhTWhvMkdqWWFQaG8rR2tJV09oNDJJam9tUGhwS0Zrb1dQaDR5S3ZGNnhZNmRvcG1lWmNvdDdpM1Y2ZldpRkNIbUllWXA1aTN5TGZZeDhqWDJNZm95QWkzbUxmSWwraUFpRWl3VmVrMXlyV2NPSWpvYVNncGFDbDRPVGhaR0Zrb09RZ3BHQmtJS05nb3A3aUlHQmhucUdlb2gzaW5PSmRJaDZob0lJZ25wd2cxNkxlSXQwakhHT1ZwRmJtRitoWUtGcG9uR2pjcVJ3cW0yeVJPWkg5d0pNOXhXSmo0ZVNocGVGbG9lVWlKRUlpWkdIazRpVmg1V0lsSW1WaXBTS2xJdVVDQTczaEl2M29SV0w5d0xLOXdyM0VmY1QyOXJjdzl5cXNadXNrNmVMcW91a2daMTVuWG1VYzR0cmkzYUhjb0p2aVlLTWhaQ0pqNGlSaTVHTkNKV1BCYzJteFptOWk3NkxyMzJoYnBWOGtIbUxkNHQyaG5LQWNJYUVpb1dPaDQ2R2pvaU5pbzZKa0ltU2liWityM2FwYmdpcGJwcG1pMStMWTMxaWIyRnZZV1ZsVzJoYmFFNXVRWFZDZEQyQU9Jc3lpemVZTzZVN3BrbXlWNzlXdjNISGk4NEk5eFJhRlpKR3RWVGFZc3BwMG52Ymk1K0xuNHlnamZTVjRxelJ3OG0rcThTTHlJdVJpcEdMa1lUUVlNRTl0RXV0UkpzN2l3aDNpM2VLZG9sR2hVMTVVMjlUYjJCcGJXSnhaMzVsaTJXTGhZdUZqSVVJOXpoTEZZS2ZoNStMb0l1aWthT1hvNkMzcjZ5OG9hcVlxcEtyaTUyTG5vbWRocjk5c0craVlaWjFrWFdMYzR0MWhuV0JkUWgxV21ab1ZuUnRmbTJGYll0MGkzU1BkSkpabTJtb2VMY0l4SjhWajNxV2Y1dUVsSWVVaVpXTGs0dVRqSk9PbnBHYWxwV2NrcFdPbG91V2k1Q0trSW1SaDV1QmwzdVJnbytDallLTENJT0xnb21DaUhtRmZZQ0JmSVNBaDRDTGY0dUdqSWVNaHdqM0pkd1ZqWVNQaDVLSWpvcVBpbzZMam91T2pJNk1rNDZRajQrU2pwR01rWW1SaVpHSGtJU05oWTJGaTRTSmc0aUdoNGlGQ0ltSGlvZUxod2lMaFFYMzNQa1BGWXVQaW82TGo0dVVqcE9RazVLV2xaS1lqNktRbzQyaWk2NkxyWWFzZ2NSNHZHdTBYclJlcFZlWFVKQnpqblNMZEFpTGFJVnFnR3NJaTRvRmgzNkRnb0NGZzRpRWlZT0xob3VHaklhTWZvK0NrNFdXaUpPSmtvdVNpNUNNa1l5UENJdU1CWk9qanFLTHBJdWJpcHVJbklLMmVMQnVxMjZyYUtGaW1IU1NjNDl6aTNxTGU0bDZpSWVLaUl1SGk0S0xnbzJEa1FpQWtvU1ZpSmdJdFBzMEZZdU9pbzZMajR1U2paS1BrcEdWbEpHWGpwaU9tSXlYaTdtTHNubXNaNTUwbUhLU2JvMS9qSUNMZ0l0N2lIcUZld2lJZ0lTRGdZYUZpSVdKaFl1R2k0YU1oNHlBajRPU2hwV0lrWXFSaTVHTGtJdVBqWkNObEkyVWk1T0xub09jZlpvSWZKMTVsSFdMaEl1RWlvU0tpSXFJaTRpTGhJdURqWVdRZ1pHRmxJaVdDQTczZm91eEZaK0pvSXFmaS9jTmkvYXc2ZFZUakZtY1hxeGZyVzIxZXIrWmlKdUtuWXVqaTZLT29aRlBsMW1vWkx0a3VuZkNpOGtJaTQ0RnIzZXpnTFdLWjZOdnFYYXhkN0dBdEl1NGk3bVh0cU8weXp2YVMrZGM2RnZ1Y2ZXRmhxS0luNHVjaTlLbHg3MitDTDY5eUtYU2k5YUx5bSsrVmNhWHdxQzlxWGhOWlZ0VGFyMlJ2Sm04b0dwWVlGNVhaUWlMYVFXTFJvQkdkMFozUld4SllreGlURnBUVVZsU1drWmtPMjQ3YmpSOUw0djdJb3Y3R0xIN0R0Z0lEdmNvaS9sQkZiRzNzTE94cmJDdXJLYW1uYWVkcEptaGw2R1dtNUtXandpY2p3V1RqSlNNazR1WWk1ZUpsb2VjaEpwL2xucVdlNVY0bEhhVGRwTnprVzZSYjVCeGozS1BjcEJ3a0c2UWJaQnprSGdJb1RhY1RwbG9tR2VaZVpxTG5JdWhucWl4cUxHcnZxN05uYXlVcW91b2k1U0trNHFTaEs1Nm9XNlVoSTZEaklLTENIT0xiNEpxZXByanVkUFh3Y1cweHAvSWk1T0xsSXVUaXRDR3UyeWtVNWR4a20yTGFZdDNpSGFIZFg5R2MwUm9RZ2hvUTJSTFlWTmhWRjVXVzFsYVdHRmpaMjVuYlcxMGNYcHVlbkNEY290eWkzU1NkSnAxbVhlYmZKNTduWDZmZ1o4SWY2VnA4VlgzUmxYM1JtcnFmNW1MakltTmlZeUpqSWFOaEkyRWpJT0xnb3FCaVgrR2U0TjhoSHAvZUgwSUR2ZUNpN3dWOXdENEVBV2ltS21XclpLdWs2ZVBvbzBJcll3RnJvdXVoN0NFMEg2OGRxaHZDQ0g4RHdWeW5uQ2JiWmR1bDNPU2VvMEljWThGYzQxMWpIYUxnSXQ5aW5tS2VZcHVoMlNDWklOdGdIZDlDUGNWK0h3Vjl3RDRFQVdpbWFtVnJwT3RrNmlQb293SXJJd0Zyb3V2aUsrRTBIMjhkcWh2Q0NIOEVBVnluM0NhYlpkdWwzT1NlbzBJY1k4RmM0MTFqSGVMZ0l0OWkzbUtlWXB1aG1TRFk0UnVmM1o5Q1BoTi9LRVY5dmdRQmFSNHAzdW9mNmwvb29TY2lRaWxod1dpaWFHS29ZdVdpNW1Mbll5ZGpLaVFzcE95azZtV241a0lJUHdRQlhOOWJvRm9nMmlFYjRkMGlnaHBpUVZwaTJlT1o1SkdtVm1nYmFjSTl3LzRlaFgyK0E4RnBIaW1lNmwvcVlDaWhKeUlDS1dIQmFLSm9ZcWdpNWFMbW95ZGpKMk1xSSt5azdHVHFaYWdtUWdnL0E0RmMzMXVnR2lEYUlOdWgzU0tDR21KQldpTGFJOW9rMGFZV2FCdHB3Z08rQmlMK2RZVmtYZ0Zqb2FOaUk2SWpZbU5pWXlLQ0k2Sm5vSDNCb3YzdXZ2MEJaS0NqNE9MZ2dpTCsxa0ZpNGFLaDRtSWlvaUppb21LQ0lpTEJUNkxXNHAyaVlTTGlJaUxoUWlMVXZpa2k0dkdCWXVOaW8yS2pJbU1pWXlLaXdqN0tZc0ZoSXVJa0l1VkNJdjNZd1dMall1T2pZMk5qb3lOam80SWpvNEZrcExsNFBkQjl6Y0k5eHlMQlpHTGtZMlNrQWljbmdXUGtJMlJpNU1JaTVrRmlvMktqWXFNaW95S2k0cUxDUHhWaTRTRkJZdUhpNGVOaG8ySGpJaU5pQWlPaDZKMG5ZVDNDb3Y3YVB0YyszMzN2cldMQlpTS2tvMlJqZ2pSb1FXTWk0eUxqSXlNaTQyTmpZNk1qWXlPaTQ4SWk1a0ZpNDJMalltTWlvMkppNHFMQ1B5TWl3V0dpNGVJaW9jSWk0TUZIQVREOXdRVjkxR0ROdnpZVFk0RmJ2dFpGWS8zQmZjRmg0ZjdCUVVPNzR6M1BCV09rWkdMa29iM1B5ajNUbHIzWEl2M0dvdjNHS1QzRjcyT2pKQ05rbzZSanBDTmpZeVdqNU9Ka0lPUmc0bURnb1IvZ251QmVJQUlVR2hLY0VKNFEzaEVnVWFMSVlzbW5peXdMTEEydjBEUGg0NkpqNHVPaTQyTWpZeU5DUGZJOTdnVmk3cVh0S0tzb3EycnBMT2NzSnU1bHNDU25vMnBqYldQQ0l1Y0JZdTNocWlCbW4yZ2RKVnRpd2lDaXdWMWlYaUVlbjk3Zm9CNmhuV0pmb1NEZ0lrSSt3cVpCWUNPaFpHTGxZdU5pNDJNanBiSXFMaTRxTG1vd0p6SGpnaWxpd1haaThoM3RtT1NoSktEa0lTUmc1Q0Vqb1dQaFk2Q2pYK09mNDJEakllTmg0eUJqSHlMZll5Q2k0Z0lpL3VNQll0NmpYcVFmWkI4a0lDUWhaQ0VrNEdXZlkrRmpZV0xob3VHaUlhR2gxSmFiSENHaDRPRmdZcUFrSUdUZzVPRWt3aUVrb1dSaUk2SWpvYVNoSldGbFlhU2lJNWxZV1Z4Wm9GMGhHK0lhSXRYaTJDYmFheHBxM3E1aThZSTkwU2dGWXR3a25hWWU1bDduWU9oaTQyTGpvdVBqSStMall5TWk2aVNvWjZicUpPWWtKbVBtNCthalplTGxZdVVqSnVMb1FpTHBRVmppMjJJZG9WUGVtMWxpMUVJK0VMNzNoV05qbzJPam8yY2w1dVRtNCtsa3FTT3BJeVJqSktLa1lxcWlKMkdrWVNPaDR5RWk0TUlpNFFGaTNPRmIzNXJmbXA1Y1hSM2g0bUlpWWlMaW91S2k0bU1oNDJLajQyUXBjZVh0SXVpaTVPS2tJaVBoSk40ajJ5TENIK0xmWXA4aW5xSmU0bDlpWWVMaUl5SmpJcU1pNDJMakl1TWpJeUxqQWdPcy9kZkZaT0Jrb0NVZ1p4NG5YbWdlN1pwdlhPL2VzaDN5b0hKaGRXRjFZdlRrOCtTenBuS3BNT2l2NnE0dEplVmxwYVVtQWlUbHBHV2pKbU5tb2liaUp1SW5JYWNoNXVKa29xUmlaRjcxSExTYU0xdXcyZkFZcnRrdDE2eVY2ZHZtbTZYYlpRSWU1QjdqM3FQaDR1R2pZZUxob3VGaTRhTGdJdUFpNEdMaG91R2k0YUtoNHVHaW9lS2c0cUNpWU9KZW9kN2hudUZDR3gvYlhwdmVGVmxXMXRqVjJGVGFVeHhTbkJHZUVOL1FZbUJpWUtMZ1l1R2k0YUxob3VJaTRxTWlZeUpqSXFNaVFqUHVSV01rSXlRakkrTmxJMlVqcFNYcloycW5hcVZtcFNhbFpxVW1wV2FscG1kb3FLa3A1VzBtS2xnbzNHWWZabDdub01JazRlVWlaV0xtSXlYbFpXVHA2S2hxS0dubzZ1aHE2YW5scGVYbXB1UWtvNlRpcEtJajRtT2lZNklqb2VQaVkrSUNLaDFwbktrY2FGMW9IT2ZjNTV6bm5PYmNKOXJtMm1lYTV0dG5HaDdhWXFKaW9xS2lXMVpWbXhXZDB4eVIzOUlod2hGaGtTTFJwSk1rVXlXVDZKYW5sdW5hcldEbFlXV2haYUtqSXFOaTR5S2pZcU1qSTBJRHBkLytEUVY5Mi8zTy90djl6cjMwdmRrOTJUN1J2ZHA5MGIzeWZ0YSsxNzdQZmRlKzBMN3p2dFIrMlQzTlB0ayt6UUZKMGNWaThiclV2ZGs5ek9NaW92OEFBWDd3UGtLRmZmQisxSDN3L2RjKzhIM1FnV0kvY01WalBnQWpZejNZL3N6OGNtTFNnVU8rRFdMOThZVmk2Q05uWTZhajV1U201YWJscHVibWFDVW41V29sSytSc0pLM2pyNkx4NHU5aHJTQ3BvYWZoWmlFQ0l2N09mdkFpd1dMZll0L2pZT01nbzZCa0grUWZwU0NtSVdZaFp5SW9JdkZpNmlnaTdRSTl4Q0xpekFGZUlKNGhYZUhYWUJZaGxPTFRJdFhrR09UWTVSdG1IaWRlSjErbm9XZmhLQ0lwSXVxQ1BkZnJSWDNTb3NGaTVpTGxJbVJpcENKazRhV2hwV0NrbjJRZlpCNGpYV0xkb3Q1aVg2R2ZvYUNnNGFBaG9HSWdvcUdpb1dMZ291QUNQZkErMDRWaStiYml3V0thSEp1V1hLS2lvbUtpb3NJaTRzVmpJdU5qSXlNdmFTa3FJeXVDRHVMaTdQZWl3V0xrNHlUaTVPTHFZYWxncUdCcFhPZ1o1c0lpL2RQOXdHTGkvdGpqWXNGb2FtcG1yS0xxSXVpZ3AxNWNIZDlhSXRhaTBTbFliOS9pbldKZVloN2lIeUdlNFI2ZzN1QWZueURmWUo0aDNXTENHQ0xiSng0clFpS2k0dGdJb3VMM0FXTDl4Y1ZpL2M1QmE5N28zYVZjWlIxa0hHTGJZdURpb09MZ3dnNGl3WDNBWUFWaTFhT1o1RjJrWGFYZ1oyTG40dVhsWkdna2FDUHI0dkFDSXVRQll1amlwMktsb3VXaVppSW1ZbVpocFNGa1lTUWdvNS9pNENMZzRpRWhZV0dob0NKZllsOWlYNktmNHVBaW5pTGNnajNEdEVWaTd5WnJxYWZsMytVZVpGemtYT09lSXg5akgyTGRZcHVDSXRXQlZlWGNiV0wwZ2lUOXpZVmk3cVpyS2FjbzV5dGxMbUxqb3ViaXFxSkNQY0MrM09MSWdXTGdvdCtqWHFNZVl5QWk0VUlKSXVHd0ltTEJYVmphSGhlaTM2TGdvdUdqQWlMd0FXTHFJdWhpNW1LbVlpZWhhT0ZvNEtkZjVlbG43bVZ6WXNJcEl1THFnV0xuNGlhaFpTRmxYK1FlWXQ1aTRDR2hvQ0dnSWw4aTNjSSt3S0xCZS83TVJXTFlKbDJwNHVVaTVLTmtvNlJqcEdRajVHUGtvNlJqWkdPa0l5VWpKV01sb3VUaTVDTWtZdVRpcGFMbG91U2k0MElpSXVGaTRPTGdvcUZpNG1MQ0h5SkJZdUxoNHFCaVlHSmlJbU5pWTZLaDRpRGg0S0hpSWVRaUkrSWlvV0RoSU9FaTRTU2hRalA5OTRWOXpLTDhmdUI5d1QzZ2ZjbWkvdFYvQU9MKzFmN0pJdUw5MWRmNW92b0JZdXhnNmg5b1h5Z2JwbGZrUWlMaXhXM2hhaDltbmFaZFpOdWkyVUlpeTRGRHZ0UTk3UDRNUldMOTFqM01ZdUw3UVdMMHFMSHVyMjV2Y0trellzSTl6R0xpL3RZK3pHTEJZR0xnb2FDZ0lOL2gzNkxlZ2lMSi9kWmk0djdXUHRaaTR2OGJ2dFppNHY0YnZzeGl3VU9TNHZyRll0Z29HYTFiTFpzdm56SGk4ZUx2NXExcXJhcW9MQ0x0b3UyZHJGZ3FXR3FWNXBQaTRxTGlvdUtpNHFMaW9xS2l3aDdtb0tjaTV5TG5KU2VtNTY3anJTZHJhNnNycHkwaTd1TG5vbWNocHFlajVxUGxwSUlpL2NKQldwMlpvQmhpd2lFaXdWc29HaVZab3RYaTJCNloyZG1hSGxnaTFpTGE1UnRtM0NiY0tGMXBucDRjNEp5aTNHTGNwUnhuSEZzZlhKNGVYUUllSE9DY290dkNQY1ErRTRWaTZLU25wcWJtcHVjazUrTG40dWRnNWw3bVh1U2VJdDBpM1dFZDMxN2ZYdDVnM2VMZDR0NmszeWJmSnVFbjR1aENJNzhUaFdMblpTYm5KZWNtS0dScEl1a2k2R0ZuWDZjZjVSN2kzbUxlWUo4ZW41NWZuV0Vjb3R5aTNXU2VwaDZtSUthaTUwSTkrZjVwQldMb3BPZm01dWJtNStUb291aWk1K0RtM3VjZTVOM2kzU0xkSU4zZW50N2VuZURkSXQwaTNlVGU1eDdtNE9maTZJSW52MHFGWXY0ZnZjZWk0djhmdnNlaXdYM1R2Z1dGY09MaS91NEJZNTJrWHFXZkpaOGxvR1loSmlFbUlhWWhwZUhsb21UaWdpZml3V2VpNXVPbXBDYWtaYVFqNUVJa3BTTzhBVnVnM1dHZTR1SWk0ZUxpWXg3allLUmlKUUloNWdGaTQyTGpJcU1DSXYzaU9pTGkvTXVpNHZxK3hLTGl5eFRpNHNqQlE2RytXWDQ1aFgzdm91TC9GMEZpL3NETURIN0E0c0kvUHlMQmZzRGl6SGxpL2NEQ0l2NFhmZThpd1Z0WVhsWGkxS0wreVQzQ2ZzSTl5U0w5eVNMOXdqM0NJdjNKSXZFZWI5dHRRajN2dmM1Rll2N0dmdlppd1ZjdTBtcFE0dENpMGx0WEZzSSs5ZUxpL2NaQll2T3JjZStzQWlMKzIyMGk0djNnd1dWajVXT2xZNElpL3VOdEl1TDk1SUZqSXVOaTR5TENLT0xpL3VTdFl1TDk1TDR1b3NGOXdPTDVqR0wrd01JTDk4Vmk1MThtbm1MQ1BzQml3VjZpM3g4aTNrSWkvc0RCWXQ1bW4yY2l3ajNBWXNGbll1YW1ZdWRDSXYzQXdYOC8vd2tGWXZIcGNHMXNKcVluSmFkazZTWHA1R3BpNmlMcDRXbGY1MkRtNENhZnJWbXBWV0xUNHY3QWpFeCt3S0wrd09MTWVXTDl3SUl3SXNWaXpuTlNkMkwzWXZPell2ZGk5MUl6am1MT1l0SlNJczVDQTc0ZFBuRCtQVVYreFNMS2llTCt4Q0wreGJ3THZjUWkvY1JpL0RvaS9jV2kvY1FLdS83RllzSWkvc0xGY09NdUZ5TFVJdFJYbHhUaTFTTFhicUx4WXZHdWJuQ2l3ajVGL3VPRll0Z2FHaGdpMkNMYUs2THRvdTJycTYyaTdhTHJtaUxZQWo3ZDBzVit3K0xpL2kvOXcrTGkveS9CUno3VElzVjkzVDR2L2NIaS9kdy9MLzdNSXR4MnZ0V2kzRTgrekdMQmZmbjkxWVYrd2VMeGZkT3hQdE9CUTc0ZS9sTStlWVYrOGxoKzVabmhZbHNnMjV6ZTI2RGVvWjhpbmVMZTQ1dXIvdVlwZnRSbVNhT2hKMVh1V25CaTVXTCtzNzNKcnVUeFpTNXdZdkdDSXVhUWZpM2hxU0ZwWGlvZFp0eW5IU1Nib3VCaS90aGNQdi9XUWozNVdNVnJJQ1dYblJ3Zlh4MmhuYVJmbzU5bVllWmhhQ1BuWm1abXBxZWo1K0ZDUGVWaXhXc2dKWmVjM0IrZkhhR2RaRitqbjJaaDVtRm9JK2RtcG1abXA2UG9JVUkvZm43T2hXdWdxcHluR2dJa1g2U2xnV1ZtYUtqbXBhYWxaNlRuSkNjajdhTG5JZkFmSzVrbWs2VGE0eURpL3NxQ0l2N0l6bUxpdmNtQllyM0pZdU5oNWwvdG5TamFaSjFqM0NIZUg1NGYzaHpnM09IZjR1TGkvc29DSXI3S1RxTGl2Y3BCWXIzSm91T2lKbUNxSHVpZHBWb25XS0ViR3gvZm9KK2duVUloNEdKKzdzNWk0cjNiZ1dLOXd5TDc0cU1pbzZRaTZ1TUNMQ0xqSGNGamxtTGlvNlFyYis1bzhhSm1JdVppWkdKQ1BrUiszWVZpL3R4TjR1SzkyOEZpL2NOaSs2TWpZeU5sSXVyaXdpMWlvdjdjUVgzbElzVmkvdHhONHVMOTI4RmkvY05pKzZMall5TmxJdXNpd2kwaW92N2NRVU8renVMK1JnVmk2YVFuNVdYa3BXVGtwZVBsNUtianArTENPdUxCWmFMazQ2VGs1T1NqcFNMbG91Wmk1cUttd2lMeHdXTG5JK2FsSmlWbVp5V281S1NqNTJOcUlzSW5vc0Z0SXFzaGFhQnBZQ2FkcEJybll5Ymk1cUxyNHVxaWFPSXpZTzNnNkdDcUlPZGRKTm1rV1dTUkpBaGprNk5XWXRqQ0l0dGluT0plWUQ3Q253MGVWT0JiNEp6Z1htQ2VZRjlnb0NDZ0g2RGZJWjdobjJKZllwK2luZUtjSXRDaTFtVWNad0ljcDErcjR2Q2k2cU9vNUtka1oyV21KdVRuSktha0p1TWxZeVppNXlMQ0tpTEJZMkxqWXVNaW95S2pJbUtpSXFKaW9tS2lJcUlpb2VLaDRxR2k0YUxoNHVGaTRXTmhJeUZpNGVMaVlxSmlZcUhpd2gyaXdXTGk0aUxoSXVFaTRpS2k0cUxpNGlLaFlxRmlvaUpqSXFMaVltSmg0bUhpSXFJakllTWlJdUhpWWVMZ1l5RGpvVUlqb1dOaG82SWpZZVJpWldLbFltVGlwQ0xDS3lMQmJLTHBKQ1dsSmFWa0tDTHJZdS9oYTUrblgrZGQ1WnhqMCtSWTVKMWttZVplYk9MejR1TWlveUtpNG1MaW9xTGlnaUxYWVZpZjJjSWduSUZoSHArZ25xTENJU0xCWHVMZVk1MmtEU1dTSnRhb0h1VGZwaURuMytqZjdkK3kzL0tnN21IcG9paWlweUxtQWlSOXcwVmk0MzNVUGROQll1TGk0eU1pd2lIaFFXRWZZZDdpM2lMZkl4bmkxU0xoSWlJaElzSUxJc0ZkSXQyaDNxRWlJbUlpWWlKQ1BqYSs3MFZtWTZiakp5THFvcW1oYVIvaThWMnFXR01DSWlMQlhlTGZJU0Jmb0Y4aFhxSWRRZ08zNHYzd1JXS3RwU3luTENjcjZLcXFLT25vNnFocnAydG5xNmFyWmF1bGFxVXFKS29rYUtRblkwSXBZNkwreElGWklob2hXcUFhNEZ3Zm5kOWRueDVmSHg2ZTNwL2U0TjdnM3VFZklaK2gzNklnWXFEQ0lsK0JZbUJpb0dMZ1l0OGpYeVFmcE56bUhpZGVwMTduM3lpZmFGOW9uK2pnNk9Db1lTZmhaK0ZtNGFYaVFpZWlJc2hCVW1TVDVkV25GV2NZSjVxb1dxZ2I2SnpwSE9qZXFTQW9vQ2pnNkNGbm9XZGlKdUtsZ2o0bmZ2c0ZZdjZNUGNtNzR2K1JBV3QrS0VWa1lzRnBZdWxoYVdDcUlDaGdKcUJDS0I3Tm1qMzFUdUw5NC83QWt3RmNLbGxvbG1kV3AxZ2xXZVBDRldRaS9zS0JRNzNNdmdZK2dZVit5cHcrdzkxaW91TGk0cjdRSXY3YUl2N2xZejdFbzJMall2NFJUNzNDM1lJbEltTCtscUNpd1dHaS9zVGRQc3FjQWl5KzNzVmxJbVdpWStKQ0pLSWl6bCtrd1Y5bEhHVGZZdGhpM1plcG0yUmhaMTluSURBWjU5dmpsNk9WWGRpWTNoOGhZZUthWXRrakgyT2M1a0lncEdMM3BwOUJaMTdvWUtpaXAyTGxwQ1VsNUNUakpDS2w0bWdnWmhwb251VmVKcUVrbFREbWZMTnJhT1hyNCtzaGdqMzZQY2lGWHVGZ29XRWc0aUlpM2lMV3dpTFNwYUNCYVYyc0lhb21KU1BsNUtRa0FpVGs1K0JCYXA3cjJhYmF3aVhjNFdFQld4a2lscXFZd2lTZ245ekJYeHVjVzl3ZVc1NGhvdDlsMnVtV1lscWNBaUNnNHY3RjVTREJacDhuWVNtaTZpTW1wR2dvSjJlazUrTXBnaUxucDJWQmJhZ3RMV2p1UWlXb3BlSkJhZUlzWitjcHEzQWNkUlBuWCtQZ0l5RGlnaC9pb09jQlhTN1piUmJwQWgzbDRxZEJZdS9ack5ZalhtTWhZcCtoUWdPOStyNVNoVzdjYlY5cVhDcmJweU9xNlNycGJPYXVhU0creHVvK3hBMSt3RkhObU9GUmR0enBuaXJmYXhuNDU3cGh2WUkrNWo4VUJYN0UvYzA0dmVFOTFXb3BQdFFkZnMzK3pBOUNQbEYrRU1WOTA5aDRQdGpLZnN5ZkhTQWlIV2FSTHRnejRIZGd0S1MxWXZXQ0ZQOEJ4V3VZTEZjczF0Q2EwQ0pQNjJ6dmJHNnJMUUkrOHo3SGhWRGFrQ01RS3V5dTdDNnJyV3NZckJldEZnSURsdjRGdm8yRlZoeFlWSnVPUWgxVUZSNUJVbDNsS0J6KzFTRFIzdjdENEE1Z0RpRlJZK0lqb2ozRTNIM0xXOEk5NmhYOXl1c0JmY0pwS3lWaTVTTGtvSFdmdUIvNFhUM0xYenhmUEY5NVltVmlKbURqbWVQWkk2QmtHK25jS2FEam5lSGRvZUhqWWFhQ0lLblk3TndrWDJOZUpTQmszS2ZjSXBiY3dpOFh4VnNjWFpuZmxtRGJvZUdiNFI1aDN5SWlJNkdrSjNBbmFxc3hiaXVzWXNJb1l0dmNnWE8rN1lWam9pSGNvSnRmV0tFZ1lLT2hZNTFqM2VOWEpCdWU0dHFpM2lUZ2ExeTBWaWtYb1JOZ0NVNVZpYXBjNUp1bUg2V0NIU2ZpNHVXcjVtNGk0eWhmZTVLeGRRdTFXQ3JmS3FMdll6M0FlSFQ5d3lFcG9xbGhvK0hDQTczTVl2M25SV0xsb3lhanA2Tm5vNlZqNDZQaUkrQWpuZU9kNDE5aTRLTGdZbDlpSGVJZUllQWg0bUNrSWVraTdrSXpZc1ZpNXlNcEkrc2pxMk5vSXlUaTQrTmpZK0xqb3VOaVl5SGt6T1BYWXVIaTNxSmM0aHJoMnVKZDRxRGlvYUppSWlMQ0llTGlZNkxrSXFTaVorSXE0ZXNpcU9MbkFqZGl4V0xtNDJrajYyT3JZMmRpNCtMa1kyT2tJdVFpNDZJaTRXVFBvNWZpNEdMZ0loZGd6aUxob2lJaG91R2k0bU9pNUFJaTVDSm40aXVoNitKcFl1ZENPcUxGWXVsaTZhTXFJeW9qYXlNcm8ydmpLZU1uNHVTam82Umk1S0xqb2lMaEl5QWpXV09TbzVLalZtTGFZdDVpWEdIYUFpSWFJbDNpNGFMaFlpSGhJdUZpNGlQaTVHRjVvaTVpNDBJNjRzVmk3Q013bzNTamRLTXQ0eWNqSk9RajVHTGtvdVBoNDJEaTNXTlhZMUdqa2FNVjR0bWkzcUtjb2hyaVd1SmRvdUNDSW1DaDRlRWk0V0xobytLbEl1U2lwK0pySWlzaXFTTG5RanNpeFdMcG95b2k2cU1xWXl1akxDTXNZeW9pNStObFpDUms0dVRpNUNGaklHTWQ0eHVqR1dNWm90b2pHMk1iSXR1aTNBSWk0bUpYNGN6Q0l1TUJZcUFob2FEaTRPTGhwQ0psWWZqaWJlTGpRanRpaFdMalkzM0RJLzNnWXlYa0pLVmk1V0xrSVNNZjVEN2dZMzdESXVKaTRxSllJWTFpbitHaFlHTGdZdUdrWXFYaCtHSnRvdU1DTnozYlJXTHhJekFpNzJMa1krUmxKR1VrSmVQbUk2WGpaZU5sb3lWalpTTGtZdk5pOFZ6dkZtOFdxWk9rVUtlbEo2UW5Zc0lzNHV0ZTZkc3AyeWFaWXRmaTE5OVpXOXNibXhwZTJPTENQd21pd1dIaTRlTmlJK0lqNG1RaTVDTHNJdkFpOUNMejRyS2k4TUlEak9OK09FVmpxU1FvSk9lazUyVG1aV1VsWlNVa3BXUWxKR1RqcEdNQ0pTTmxJc0ZxSXVsZnFOenBHK1pjWTF4am9DTWdJdC9DSXVGQll0OWlYbUhkWWQwZ25kN2UzeDZkNEJ4aFlLSmc0cUNpM3VMZkk5K2tuYVZmSnFCbm9DZWhKK0huNGlYaXBhTGxRaUxrb3lTakpJSXpmeUdGWWlYaVplTGw0dWZqNTJTbnBhcG1LS2FtNXVjbTVxZG1naWxvQVdOakpTVG5KbWJtWjZkbnFDZm9KeWhtYU9Yb1p5ZG9acWhtcVNVcFkrU2pKQ0xrWXVnaTZLRm9uK3BlNlp4bzJZSWtZT1RnSlYrbG42aWNxNW5yV2V3YTdCdG5YNlllcFYzbEhhUGVJdDRpM2lLZW9oNmlYcUhmb2lCQ0lWN0JZcUhpSWFIaFllRmdvRjhmWHg5ZW9GNGczaURjSWRvaTJpTFpaSmhtWE9UY0k5dGpBaDlpd1YwaTNtS2ZJZ0ljWWNGaEltQ2luK0pmNGwxaUdxSGVvcDhpbjZMZllwL2pJQ05DSWlMQld1TGNKZDBvWE9pZTZPRW9najNHdmNoRllxQ2lvR0xnb3QyajNhVGQ1cHVwbml5Z3dqM0ZvdUw5ODVSaklzMlJZc0ZkNHQ1aEh0OWUzMkJmWVo5Q0p6NDN4V0x0NVd3b2FxZ3FxV2Fxb3VxaTZWOG9HeWhiSlptaTErTFlJQmxkVzEyYkhGOGJJdHNpM0dhZHFwMXFZR3hpN1lJci8wbUZZcVFpcEdMa0l1VmpaV1FsNUdkbVplZWtRakVpNHY3RkZlTEJZQ0xnWTZEazRTU2haS0prd2ozVDI4VmkzK1FnSldDbG9LVmhKV0lDSnFHOXlxTGkvZHlTb3VMK3p0T2l3V0ZqSWFOaDQ2SGo0bU9pWTBJaW8rTDl5bE9pb3Y3T2dYQitVUVZqNnlickttc3BhZWptYU9MajR1UWk0K0txWVdrZDZCcW5IQ1VjWXR4aTRXS2hZdUZoV1Y2YVhGcmMzRndmV3lLQ0lhTGhveUdpMldSY1p4K3FZQ2docVdLcUl1VmpKV01sZ2ozU3Z1OUZZdnlzTDdWaTZLTG9JYWNnWnlCbUgrVWZKTjhrbjZQZm85K2pYK0xnZ2lMYUFXTGhvdUVpb0NLZ0lxRGlZU0poSWlEaUlHSWdvZURoWVNGaFlXRWc0V0VoWUtIZ0llQWlIK0tmb3NJaFlzRmNZdDJqM3FTZUpOK21JU2JnNXlIbW9tWmlKaUttNHVmQ0E2TCtGUVZpK2lpNGJuWnVOckp5ZHE0MmJuaG91aUw2SXZoZE5sZDJsN0pUYmc4dVQyaU5Zc3VpeTUwTlYwOVhqeE5UVHhlQ0QxZE5YUXVpeTZMTmFJOXVUeTRUY2xlMmwzWmRPR0w2QWl6aXhXTEw2TTN2RDY4UDh0UjIyVUkrM1g0L2dWd1RuMUxpMGNJMlBlWEZhbUxCYXlMdFkyK2o1U01rWWlPaFkrRmpJU0loWWlFaG9lQ2lnaFZodmRBL0pQejk4bEI5MTRGZTQxNmpYdU1nNHlGajRpU2laR0xrbytSajVHUmpwT0tDUGNRaFFXc2k3V052bytUakpHSWo0V09oWXlFaUlXSWhJYUhnNG9JVm9iM1B2eVF1dmN5QmFQYmw3NkxvWXUyZnJkeHQ0bU5oNUtFbDRTWGhwT0pqNG1QaUpHSGxZZVVpSk9La29tU2lwS0xrb3VpazU2Ym5BaWFuSjZUb1l1TWk0eUxqSXVOaW95TGk0c3kzaUcwK3hDTE9vcy9lRVpsUldSVFdHQkpDUGVhL1YwVnRYKzRoYm1Md291L2xMMmRDSWlSK3liNElnWDNldndFRmRLMXhNUzIxTFhVb05xTDRJdmRlTlpsMEkxOWpIdUxlWXRnZjFOelJRZ085eFQ0L2ZrakZUK0xTV0ZwVEdyS1NiVS9pMTZMWW4xcWNnaUw5enVMaXdXS29YcWNkWXQxaTNwNmluVUlpNHVMKzk2TGl3V04rd0RqTlBjQmk5ZUx6YmFzeXExTXpXRFhpL2NDaStUa2kvY0NpL2NCTXVUN0Fvc0krL1A3MFJWSmkxYkFpODJMek1EQnpZdk5pOEJWaTBxTFNWWldTWXNJOS9PTEZVbUxWc0NMell2TXdNSE5pODJMd0ZXTFNvdEpWbFpKaXdqNFpub1ZKZmNjOGZjY0JaZWNpS1I2bUhtWWM0ZDllZ2lMaXpUN0NUUDNDUVY5bkhPUGVuNTVmb2h5bDNvSWk0dngreHdsK3gwRmYzcU9jNTErbkgyamo1bWNDSXVMNC9jSjR2c0pCWmw2bzRlZG1aeVlqcU4vbkFpTGpBVU9pL2hkRll2Um1jMm15c0gzRStYbDl4UEJ5cWZObU5HTDBZdk5mc3B2OXhGVzVqSEMreFNtU3BsSmkwZUxTSDFJY0V0VSt4VXdNUHNSVlFoTWNFbDlSWXRGaTBtWlRLYjdFOEl4NWxYM0ZIREpmYzZMMEFqYml4V0xLNmcxeEQvRVFkVlc1bXNJaTkwRmk3U1pxYWFkZll4N2pubVBhSkZ0bG5PYVRiRnN6NHZ0aTc2Y3Q2MnZlN1NOdHA2NkNKK0xCWktMbElxVmg2YURxSHlzZGJXV3RKR3ppN09MdFlXMWdLYWRvNW1qbEtHVG1vK1ZpUWlYaWdXZVhJeGdmR0t0WjV4ZmkxaUxQM2xSWldSM2RYQjZhWDl2Z1d5RWFZaW5lSmx0aTJNSWl6a0Y0NnZVd01UWHc5YW40WXZxaThXQXczVEJkYjl0dVdPeVpiSmRxVmFpVktKVWxsS0xVNHRUZ0ZOMFdIVmRiR05rQ0dWa2JGMTBWM1JWZ0ZPTFVRZ08rM0tMUGhXTCtEL1ppb2o3Ni9pVmk0djM2dHlMaS93OS9UR0xCZmNTOTNRVitDV0xpemI4Sll1TDRBV016aFdUNHZnblpJSTBCZndSOTJ3Vm85LzRHZnNDY3pjRis5RDN6eFc0MXZmdSsyVmRRUVg3UXZnMkZkSy85My83M1VSWUJhTDRXaFhobXM3OEl6VjlCUTc2bEJUNmxCV0xEQW9BQUFBQUF3UUFBWkFBQlFBQUFwa0N6QUFBQUk4Q21RTE1BQUFCNndBekFRa0FBQUFBQUFBQUFBQUFBQUFBQUFBREFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCQUFBQUE3QVBBLzhEL3dBUEFBRUFBQUFBQkFBQUFBQUFBQUFBQUFBQWdBQUFBQUFBQ0FBQUFBd0FBQUJRQUF3QUJBQUFBRkFBRUFNZ0FBQUF1QUNBQUJBQU9BQUVBSkFBbUFDc0FNQUEvQUVVQVJ3Qk1BRTRBVkFCWEFGa0FZZ0JuQUdrQWNBQjFBSGdBNkFEcy8vMy8vd0FBQUFBQUlBQW1BQ29BTUFBL0FFUUFSd0JNQUU0QVV3QldBRmtBWVFCa0FHa0FiQUJ5QUhjQTZBRHMvLzMvL3dBQi8rUC80di9mLzl2L3pmL0ovOGoveFAvRC83Ly92dis5LzdiL3RmKzAvN0wvc2Yrdy8wSC9QZ0FEQUFFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRUFBZi8vQUE4QUFRQUFBQUVBQUYzS0tRUmZEenoxQUFzRUFBQUFBQURQWHBkeUFBQUFBTTllbDNMLzlQK2xCY1VEeUFBQUFBZ0FBZ0FBQUFBQUFBQUJBQUFEd1AvQUFBQUY1Ly8wLzlNRnhRQUJBQUFBQUFBQUFBQUFBQUFBQUFBQUt3QUFBQUFBQUFBQUFBQUFBQUlBQUFBRUFBQVlCQUQvOUFRQUFDQUQ1QUFBQkFBQkFnUUFBQUFFdkFBQUJBRC85UU1RQUFJQ2VBQUFBMWdBQUFLVUFBQUVLUC83Qk5yLzl3VHdBQUFFNmdBQUJKUUFBQVR1QUFBRmhBQUFCR1QvL3dRQUFDUUVEUC8wQmFFQUFBTkVBUjhEd0FBQUEvc0FBQVhnQUJzRjV3QWhBMWtBQUFSVUFBQUVuZ0J4QkFBQVVnUFFBRG9FblFBQUE2Z0FBQVFBQUFBRWdBQkRCQUFBQUFNaUFBQUFBRkFBQUNzQUFBQUFBQTRBcmdBQkFBQUFBQUFCQUF3QUFBQUJBQUFBQUFBQ0FBNEFRQUFCQUFBQUFBQURBQXdBSWdBQkFBQUFBQUFFQUF3QVRnQUJBQUFBQUFBRkFCWUFEQUFCQUFBQUFBQUdBQVlBTGdBQkFBQUFBQUFLQUNnQVdnQURBQUVFQ1FBQkFBd0FBQUFEQUFFRUNRQUNBQTRBUUFBREFBRUVDUUFEQUF3QUlnQURBQUVFQ1FBRUFBd0FUZ0FEQUFFRUNRQUZBQllBREFBREFBRUVDUUFHQUF3QU5BQURBQUVFQ1FBS0FDZ0FXZ0I2QUc4QVl3QnBBR0VBYkFCV0FHVUFjZ0J6QUdrQWJ3QnVBQ0FBTVFBdUFEQUFlZ0J2QUdNQWFRQmhBR3g2YjJOcFlXd0FlZ0J2QUdNQWFRQmhBR3dBVWdCbEFHY0FkUUJzQUdFQWNnQjZBRzhBWXdCcEFHRUFiQUJIQUdVQWJnQmxBSElBWVFCMEFHVUFaQUFnQUdJQWVRQWdBRWtBWXdCdkFFMEFid0J2QUc0QUF3QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQT09KSBmb3JtYXQoJ3dvZmYnKSx1cmwoaHR0cHM6Ly9kMTlwNHplbWN5Y203YS5jbG91ZGZyb250Lm5ldC93Mi9mb250L3pvY2lhbC1yZWd1bGFyLXdlYmZvbnQudHRmKSBmb3JtYXQoJ3RydWV0eXBlJyksdXJsKGh0dHBzOi8vZDE5cDR6ZW1jeWNtN2EuY2xvdWRmcm9udC5uZXQvdzIvZm9udC96b2NpYWwtcmVndWxhci13ZWJmb250LnN2ZyN6b2NpYWxyZWd1bGFyKSBmb3JtYXQoJ3N2ZycpO2ZvbnQtd2VpZ2h0OjQwMDtmb250LXN0eWxlOm5vcm1hbH1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LWhlaWdodDo3MDBweCkgYW5kIChtYXgtd2lkdGg6NDgwcHgpeyNhMC13aWRnZXQgLmEwLXpvY2lhbHt3aWR0aDphdXRvO2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbjowIDZweH0jYTAtd2lkZ2V0IC5hMC16b2NpYWw6YmVmb3Jle3dpZHRoOjQwcHg7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH0jYTAtd2lkZ2V0IC5hMC16b2NpYWw6aG92ZXI6YmVmb3Jle2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwuNCl9I2EwLXdpZGdldCAuYTAtem9jaWFsIHNwYW57ZGlzcGxheTpub25lfX0jYTAtd2lkZ2V0IC5hMC1zaG93e2Rpc3BsYXk6YmxvY2t9I2EwLXdpZGdldCAuYTAtaGlkZXtkaXNwbGF5Om5vbmUhaW1wb3J0YW50fSNhMC13aWRnZXQgLmEwLXBhbmVse3RleHQtYWxpZ246Y2VudGVyO2JhY2tncm91bmQ6I2ZmZjtwYWRkaW5nOjIwcHg7Ym9yZGVyLXJhZGl1czozcHg7LXdlYmtpdC1ib3gtc2hhZG93OjAgMXB4IDEwcHggcmdiYSgwLDAsMCwuNCk7Ym94LXNoYWRvdzowIDFweCAxMHB4IHJnYmEoMCwwLDAsLjQpO2ZvbnQtc2l6ZToxM3B4O3Bvc2l0aW9uOnJlbGF0aXZlO2NvbG9yOiM0ZDRkNGQ7bWF4LXdpZHRoOjMyMHB4O21pbi13aWR0aDoyODBweDtkaXNwbGF5OmJsb2NrfSNhMC13aWRnZXQgLmEwLXBhbmVsIC5hMC1tb2Rley13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmFkZWluOy13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi4yczstd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6b25jZTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1pbn0jYTAtd2lkZ2V0IC5hMC1wYW5lbCAqLCNhMC13aWRnZXQgLmEwLXBhbmVsIGlucHV0e2ZvbnQtZmFtaWx5OnByb3hpbWFfbm92YTtmb250LXNtb290aGluZzphbnRpYWxpYXNlZH0jYTAtd2lkZ2V0IC5hMC1wYW5lbCBoMSwjYTAtd2lkZ2V0IC5hMC1wYW5lbCBoMiwjYTAtd2lkZ2V0IC5hMC1wYW5lbCBoM3tmb250LWZhbWlseTpwcm94aW1hX25vdmEhaW1wb3J0YW50fSNhMC13aWRnZXQgLmEwLXBhbmVsIGEsI2EwLXdpZGdldCAuYTAtcGFuZWwgYnV0dG9ue2ZvbnQtZmFtaWx5OnByb3hpbWFfbm92YSFpbXBvcnRhbnQ7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAuMnMgZWFzZTstbW96LXRyYW5zaXRpb246YWxsIC4ycyBlYXNlO3RyYW5zaXRpb246YWxsIC4ycyBlYXNlO2ZvbnQtd2VpZ2h0OjcwMH0jYTAtd2lkZ2V0IC5hMC1wYW5lbCBoMXtmb250LXNpemU6MjRweDtmb250LXdlaWdodDoxMDA7bWFyZ2luLWJvdHRvbToyMHB4fSNhMC13aWRnZXQgLmEwLXBhbmVsIC5hMC1oZWFkZXJ7bWFyZ2luLWJvdHRvbToxMHB4fSNhMC13aWRnZXQgLmEwLXBhbmVsIC5hMC1pbWFnZXttYXJnaW46YXV0bztkaXNwbGF5OmlubGluZS1ibG9jazttYXJnaW4tYm90dG9tOjEwcHh9I2EwLXdpZGdldCAuYTAtcGFuZWwgLmEwLWltYWdlIGltZ3t3aWR0aDphdXRvO21heC1oZWlnaHQ6NThweH0jYTAtd2lkZ2V0IC5hMC1wYW5lbCAuYTAtYXZhdGFye2JhY2tncm91bmQ6I0QwRDJEMzttYXJnaW46YXV0bztkaXNwbGF5OmlubGluZS1ibG9jazttYXJnaW4tYm90dG9tOjEwcHg7Ym9yZGVyLXJhZGl1czoxMDAlO3dpZHRoOjU4cHg7aGVpZ2h0OjU4cHh9I2EwLXdpZGdldCAuYTAtcGFuZWwgLmEwLWF2YXRhciBpe2NvbG9yOiNFQjU0MjQ7Zm9udC1zaXplOjMwcHg7ZGlzcGxheTpibG9jaztwYWRkaW5nLXRvcDoxNXB4fSNhMC13aWRnZXQgLmEwLXBhbmVsIC5hMC1mb290ZXJ7bWFyZ2luLXRvcDozMHB4fSNhMC13aWRnZXQgLmEwLXBhbmVsIC5hMC1mb290ZXIgLmEwLWxvZ297bWFyZ2luLXRvcDoyMHB4O3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbToxMHB4O3JpZ2h0OjA7bGVmdDowO2Rpc3BsYXk6YmxvY2t9I2EwLXdpZGdldCAuYTAtcGFuZWwgLmEwLWZvb3RlciAuYTAtbG9nbyBpe2NvbG9yOiNFQjU0MjQ7Zm9udC1zaXplOjE4cHh9I2EwLXdpZGdldCAuYTAtcGFuZWwgLmEwLWluc3RydWN0aW9uc3ttYXJnaW4tYm90dG9tOjIwcHg7bGluZS1oZWlnaHQ6MThweH0jYTAtd2lkZ2V0IC5hMC1wYW5lbCAuYTAtbGFzdC10aW1le2ZvbnQtc2l6ZToxNHB4O21hcmdpbi1ib3R0b206MjBweH0jYTAtd2lkZ2V0IC5hMC1wYW5lbCAuYTAtcGFzc3dvcmQsI2EwLXdpZGdldCAuYTAtcGFuZWwgLmEwLXJlcGVhdFBhc3N3b3Jke2JvcmRlci10b3A6MXB4IHNvbGlkICNjY2N9I2EwLXdpZGdldCAuYTAtcGFuZWwgLmEwLWVtYWlsIC5hMC1pbnB1dC1ib3gsI2EwLXdpZGdldCAuYTAtcGFuZWwgLmEwLXBhc3N3b3JkIC5hMC1pbnB1dC1ib3gsI2EwLXdpZGdldCAuYTAtcGFuZWwgLmEwLXJlcGVhdFBhc3N3b3JkIC5hMC1pbnB1dC1ib3h7cG9zaXRpb246cmVsYXRpdmU7aGVpZ2h0OjUwcHh9I2EwLXdpZGdldCAuYTAtcGFuZWwgLmEwLWVtYWlsIC5hMC1pbnB1dC1ib3ggaSwjYTAtd2lkZ2V0IC5hMC1wYW5lbCAuYTAtcGFzc3dvcmQgLmEwLWlucHV0LWJveCBpLCNhMC13aWRnZXQgLmEwLXBhbmVsIC5hMC1yZXBlYXRQYXNzd29yZCAuYTAtaW5wdXQtYm94IGl7Zm9udC1zaXplOjE0cHg7ei1pbmRleDoxMDAwMDt0b3A6MThweDtsZWZ0OjE2cHg7cG9zaXRpb246YWJzb2x1dGU7Y29sb3I6Izk5OX0jYTAtd2lkZ2V0IC5hMC1wYW5lbCAuYTAtZW1haWwgaW5wdXQsI2EwLXdpZGdldCAuYTAtcGFuZWwgLmEwLXBhc3N3b3JkIGlucHV0LCNhMC13aWRnZXQgLmEwLXBhbmVsIC5hMC1yZXBlYXRQYXNzd29yZCBpbnB1dHtwYWRkaW5nOjE2cHggMTBweDtwYWRkaW5nLWxlZnQ6NDBweDtib3JkZXItcmFkaXVzOjA7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MDtsZWZ0OjA7Ym90dG9tOjA7dG9wOjA7YmFja2dyb3VuZDojZmZmO21heC13aWR0aDoyMjhweDt3aWR0aDoxMDAlfSNhMC13aWRnZXQgLmEwLXBhbmVsIC5hMC1lbWFpbCBpbnB1dDpmb2N1cywjYTAtd2lkZ2V0IC5hMC1wYW5lbCAuYTAtcGFzc3dvcmQgaW5wdXQ6Zm9jdXMsI2EwLXdpZGdldCAuYTAtcGFuZWwgLmEwLXJlcGVhdFBhc3N3b3JkIGlucHV0OmZvY3Vze2JhY2tncm91bmQ6I2ZmZn0jYTAtd2lkZ2V0IC5hMC1wYW5lbCBpbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojOWRhNGFkOy13ZWJraXQtdHJhbnNpdGlvbjpjb2xvciAuMnMgZWFzZS1pbn0jYTAtd2lkZ2V0IC5hMC1wYW5lbCBpbnB1dDotbW96LXBsYWNlaG9sZGVye2NvbG9yOiM5ZGE0YWR9I2EwLXdpZGdldCAuYTAtcGFuZWwgaW5wdXQ6Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6IzlkYTRhZH0jYTAtd2lkZ2V0IC5hMC1wYW5lbCBpbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6IzlkYTRhZH0jYTAtd2lkZ2V0IC5hMC1wYW5lbCBpbnB1dDpmb2N1czo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojNjY2fSNhMC13aWRnZXQgLmEwLXBhbmVsIGlucHV0OmZvY3VzOi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6IzY2Nn0jYTAtd2lkZ2V0IC5hMC1wYW5lbCBpbnB1dDpmb2N1czo6LW1vei1wbGFjZWhvbGRlcntjb2xvcjojNjY2fSNhMC13aWRnZXQgLmEwLXBhbmVsIGlucHV0OmZvY3VzOi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojNjY2fSNhMC13aWRnZXQgLmEwLXBhbmVsIC5hMC1pbnB1dHN7Ym9yZGVyOjFweCBzb2xpZCAjY2NjO2JvcmRlci1yYWRpdXM6M3B4O292ZXJmbG93OmhpZGRlbn0jYTAtd2lkZ2V0IC5hMC1wYW5lbCAuYTAtZW1haWwgaW5wdXR7Ym9yZGVyLWJvdHRvbTowO2JvcmRlci10b3AtbGVmdC1yYWRpdXM6M3B4O2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjNweH0jYTAtd2lkZ2V0IC5hMC1wYW5lbCAuYTAtcGFzc3dvcmQgaW5wdXR7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czozcHg7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6M3B4fSNhMC13aWRnZXQgLmEwLXBhbmVsIC5hMC1zZXBhcmF0b3J7bWFyZ2luLWJvdHRvbTo2cHg7bWFyZ2luLXRvcDoxNHB4O2NvbG9yOiM5OTk7Zm9udC1zaXplOjEycHh9I2EwLXdpZGdldCAuYTAtcGFuZWwgLmEwLXNlcGFyYXRvciBzcGFue2xldHRlci1zcGFjaW5nOjFweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9I2EwLXdpZGdldCAuYTAtcGFuZWwgYnV0dG9uLmEwLXByaW1hcnl7dGV4dC1hbGlnbjpjZW50ZXI7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2ZvbnQtd2VpZ2h0OjcwMDtkaXNwbGF5OmJsb2NrIWltcG9ydGFudDt3aWR0aDoxMDAlIWltcG9ydGFudDtmbG9hdDpub25lO21pbi13aWR0aDphdXRvO2xldHRlci1zcGFjaW5nOjFweDtwYWRkaW5nOjIwcHggMDttYXJnaW4tYm90dG9tOjEwcHg7bWFyZ2luLXRvcDoyMHB4O2JhY2tncm91bmQtY29sb3I6IzE2MjE0RDtjb2xvcjojZmZmO2N1cnNvcjpwb2ludGVyO2JvcmRlci1yYWRpdXM6M3B4fSNhMC13aWRnZXQgLmEwLXBhbmVsIGJ1dHRvbi5hMC1wcmltYXJ5OmhvdmVye2JhY2tncm91bmQ6IzBiMTAyNX0jYTAtd2lkZ2V0IC5hMC1wYW5lbCBpbnB1dFtkaXNhYmxlZF17YmFja2dyb3VuZC1jb2xvcjojZDlkZWUwfSNhMC13aWRnZXQgLmEwLXBhbmVsIC5hMC1hY3Rpb257bWFyZ2luLWJvdHRvbToxMHB4fSNhMC13aWRnZXQgLmEwLXBhbmVsIC5hMC1zdWNjZXNze2NvbG9yOmdyZWVufSNhMC13aWRnZXQgLmEwLXBhbmVsLmEwLWVycm9ycy5hMC1lcnJvcnMtZ2xvYmFse2JvcmRlci1jb2xvcjpyZWR9I2EwLXdpZGdldCAuYTAtcGFuZWwuYTAtZXJyb3JzIC5hMC1lcnJvci1pbnB1dCBpe2NvbG9yOnJlZH0jYTAtd2lkZ2V0IC5hMC1wYW5lbC5hMC1lcnJvcnMgLmEwLWVycm9yLWlucHV0IHNwYW57cG9zaXRpb246YWJzb2x1dGU7dG9wOjE1cHg7cmlnaHQ6MTRweDtmb250LXNpemU6OXB4O2xldHRlci1zcGFjaW5nOjFweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7Y29sb3I6cmVkO2JvcmRlcjoxcHggc29saWQgcmVkO3BhZGRpbmc6NHB4IDZweCA0cHggN3B4O2JvcmRlci1yYWRpdXM6M3B4O2Rpc3BsYXk6YmxvY2s7ei1pbmRleDoxMDAwMH0jYTAtd2lkZ2V0IC5hMC1wYW5lbC5hMC1lcnJvcnMgLmEwLWVycm9yLWlucHV0IGlucHV0e2NvbG9yOnJlZH0jYTAtd2lkZ2V0IC5hMC1wYW5lbC5hMC1lcnJvcnMgLmEwLWVycm9yLWlucHV0IGlucHV0Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJlZH0jYTAtd2lkZ2V0IC5hMC1wYW5lbC5hMC1lcnJvcnMgLmEwLWVycm9yLWlucHV0IGlucHV0Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6cmVkfSNhMC13aWRnZXQgLmEwLXBhbmVsLmEwLWVycm9ycyAuYTAtZXJyb3ItaW5wdXQgaW5wdXQ6Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6cmVkfSNhMC13aWRnZXQgLmEwLXBhbmVsLmEwLWVycm9ycyAuYTAtZXJyb3ItaW5wdXQgaW5wdXQ6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJlZH0jYTAtd2lkZ2V0IC5hMC1wYW5lbCAuYTAtYWxse2Rpc3BsYXk6YmxvY2s7Y3Vyc29yOnBvaW50ZXI7bWFyZ2luLWJvdHRvbToxMHB4O21hcmdpbi10b3A6MTBweDtmb250LXNpemU6MTNweH0jYTAtd2lkZ2V0IC5hMC1wYW5lbCAuYTAtYWxsOmhvdmVye2NvbG9yOiMwMDB9I2EwLXdpZGdldCAuYTAtcGFuZWwgLmEwLWNsb3Nle3Bvc2l0aW9uOmFic29sdXRlO3RvcDoyMHB4O3JpZ2h0OjIwcHg7ZGlzcGxheTpibG9jaztjdXJzb3I6cG9pbnRlcjtmb250LXNpemU6MTZweDtjb2xvcjojY2NjfSNhMC13aWRnZXQgLmEwLXBhbmVsIC5hMC1jbG9zZTpob3Zlcntjb2xvcjojMzMzfSNhMC13aWRnZXQgLmEwLXBhbmVsICNhMC1jaGFuZ2VfcGFzc3dvcmR7bWFyZ2luLXRvcDotMTBweH0jYTAtd2lkZ2V0IC5hMC1wYW5lbCAjYTAtY2hhbmdlX3Bhc3N3b3JkIC5hMC1wYXNzd29yZHttYXJnaW4tYm90dG9tOjB9I2EwLXdpZGdldCAuYTAtcGFuZWwgI2EwLWNoYW5nZV9wYXNzd29yZCAuYTAtcGFzc3dvcmQgaW5wdXR7Ym9yZGVyLXJhZGl1czowfSNhMC13aWRnZXQgLmEwLXBhbmVsICNhMC1jaGFuZ2VfcGFzc3dvcmQgLmEwLXJlc2V0X2Vhc3lfcGFzc3dvcmQgaW5wdXR7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6M3B4O2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6M3B4fSNhMC13aWRnZXQgLmEwLXBvcHVwIC5hMC1jZW50cml4e3BhZGRpbmc6MDt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7ZGlzcGxheTp0YWJsZS1jZWxsO21hcmdpbjowfSNhMC13aWRnZXQgLmEwLXBvcHVwIC5hMC1vdmVybGF5LmEwLWllOC1vdmVybGF5e2JhY2tncm91bmQ6MCAwO2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9hc3NldHMuYXV0aDAuY29tL3cyL2ltZy9iZy10cmFuc3AucG5nKX0jYTAtd2lkZ2V0IC5hMC1wb3B1cCAuYTAtb3ZlcmxheXttYXJnaW46MDtkaXNwbGF5OnRhYmxlO3Bvc2l0aW9uOmZpeGVkO2xlZnQ6MDt0b3A6MDtib3R0b206MDtyaWdodDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7b3ZlcmZsb3c6aGlkZGVuO3otaW5kZXg6OTk5OTtmb250LXdlaWdodDoyMDA7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO2JhY2tncm91bmQ6IzAwMDtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjgpO29wYWNpdHk6MDstd2Via2l0LXRyYW5zaXRpb246MzAwbXMgb3BhY2l0eSBlYXNlLW91dDstbW96LXRyYW5zaXRpb246MzAwbXMgb3BhY2l0eSBlYXNlLW91dDt0cmFuc2l0aW9uOjMwMG1zIG9wYWNpdHkgZWFzZS1vdXQ7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwwLDApOy1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMCwwKTstbXMtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwwLDApfSNhMC13aWRnZXQgLmEwLXBvcHVwIC5hMC1vdmVybGF5LmEwLWFjdGl2ZXtvcGFjaXR5OjF9I2EwLXdpZGdldCAuYTAtcG9wdXAgLmEwLW92ZXJsYXkgLmEwLXBhbmVse2Rpc3BsYXk6bm9uZTttYXJnaW46MCBhdXRvfSNhMC13aWRnZXQgLmEwLXBvcHVwIC5hMC1vdmVybGF5IC5hMC1wYW5lbC5hMC1hY3RpdmV7ZGlzcGxheTpibG9ja30jYTAtd2lkZ2V0ICNhMC1vbmVzdGVwey13ZWJraXQtdHJhbnNpdGlvbjpoZWlnaHQgMTAwbXMgZWFzZS1pbjstbW96LXRyYW5zaXRpb246aGVpZ2h0IDEwMG1zIGVhc2UtaW47dHJhbnNpdGlvbjpoZWlnaHQgMTAwbXMgZWFzZS1pbn0jYTAtd2lkZ2V0ICNhMC1vbmVzdGVwLmEwLWRpc2FibGUtdHJhbnNpdGlvbnstd2Via2l0LXRyYW5zaXRpb246bm9uZTstbW96LXRyYW5zaXRpb246bm9uZTt0cmFuc2l0aW9uOm5vbmV9I2EwLXdpZGdldCAjYTAtb25lc3RlcCAuYTAtbG9hZGluZ3ttaW4taGVpZ2h0OjExMHB4fSNhMC13aWRnZXQgLmEwLXNwaW4tY29udGFpbmVye3Bvc2l0aW9uOnJlbGF0aXZlO3RvcDo1MCV9I2EwLXdpZGdldCAuYTAtbG9hZGluZy5hMC13aXRoLW1lc3NhZ2UgLmEwLXNwaW4tY29udGFpbmVye3RvcDozNyV9I2EwLXdpZGdldCAuYTAtc3Bpbi1tZXNzYWdle3RleHQtYWxpZ246Y2VudGVyO3Bvc2l0aW9uOnJlbGF0aXZlO3RvcDo2MHB4fSNhMC13aWRnZXQgLmEwLXNwaW4tbWVzc2FnZSBzcGFue2ZvbnQtc2l6ZToxNHB4O2NvbG9yOiM0MTQ0NGF9I2EwLXdpZGdldCAuYTAtc3Bpbi1pbWd7cG9zaXRpb246cmVsYXRpdmU7dG9wOjUwJTtsZWZ0OjUwJTt3aWR0aDozMnB4O2hlaWdodDozMnB4O21hcmdpbi1sZWZ0Oi0xNnB4O21hcmdpbi10b3A6LTE2cHh9I2EwLXdpZGdldCAuYTAtc2FkLXBsYWNlaG9sZGVye2Rpc3BsYXk6bm9uZX0jYTAtd2lkZ2V0IC5hMC1uby1wbGFjZWhvbGRlci1zdXBwb3J0IC5hMC1zYWQtcGxhY2Vob2xkZXJ7ZGlzcGxheTpibG9jazt0ZXh0LWFsaWduOmxlZnQ7Zm9udC13ZWlnaHQ6NzAwO21hcmdpbjoxNHB4IDAgMTBweH0jYTAtd2lkZ2V0IC5hMC1uby1wbGFjZWhvbGRlci1zdXBwb3J0IC5hMC1pbnB1dHN7Ym9yZGVyOjAhaW1wb3J0YW50fSNhMC13aWRnZXQgLmEwLW5vLXBsYWNlaG9sZGVyLXN1cHBvcnQgLmEwLWlucHV0cyAuYTAtZW1haWwsI2EwLXdpZGdldCAuYTAtbm8tcGxhY2Vob2xkZXItc3VwcG9ydCAuYTAtaW5wdXRzIC5hMC1wYXNzd29yZCwjYTAtd2lkZ2V0IC5hMC1uby1wbGFjZWhvbGRlci1zdXBwb3J0IC5hMC1pbnB1dHMgLmEwLXJlcGVhdFBhc3N3b3Jke2JvcmRlcjowfSNhMC13aWRnZXQgLmEwLW5vLXBsYWNlaG9sZGVyLXN1cHBvcnQgLmEwLWlucHV0cyAuYTAtaW5wdXQtYm94e2JvcmRlcjoxcHggc29saWQgI2NjY30jYTAtd2lkZ2V0IC5hMC1uby1wbGFjZWhvbGRlci1zdXBwb3J0IC5hMC1pbnB1dHMgLmEwLWlucHV0LWJveCBpbnB1dHtib3JkZXI6MCFpbXBvcnRhbnR9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo0ODBweCl7I2EwLXdpZGdldCAuYTAtY2VudHJpeHtwb3NpdGlvbjpmaXhlZDt0b3A6MDtyaWdodDowO2JvdHRvbTowO2xlZnQ6MDtiYWNrZ3JvdW5kOiNmZmY7ei1pbmRleDoxMDAwMDA7Ym9yZGVyLXJhZGl1czowO2hlaWdodDoxMDAlO292ZXJmbG93LXk6c2Nyb2xsfSNhMC13aWRnZXQgLmEwLWNlbnRyaXggLmEwLXBhbmVsey13ZWJraXQtYm94LXNoYWRvdzpub25lO2JveC1zaGFkb3c6bm9uZX0jYTAtd2lkZ2V0IC5hMC1jZW50cml4IC5hMC1wYW5lbCAuYTAtZGItYWN0aW9ucywjYTAtd2lkZ2V0IC5hMC1jZW50cml4IC5hMC1wYW5lbCAuYTAtb3B0aW9uc3ttYXJnaW4tdG9wOjIwcHg7Zm9udC1zaXplOjE0cHh9fUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtaGVpZ2h0OjQ3MHB4KXsjYTAtd2lkZ2V0IC5hMC1wYW5lbCAuYTAtYXZhdGFyLCNhMC13aWRnZXQgLmEwLXBhbmVsIC5hMC1hdmF0YXItZ3Vlc3R7ZGlzcGxheTpub25lfX0jYTAtd2lkZ2V0IC5hMC1zcGlubmVyLWNzc3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6NTAlO2xlZnQ6NTAlO21hcmdpbjotMi41ZW07ZGlzcGxheTpibG9jazt3aWR0aDo1ZW07Zm9udC1zaXplOjMwcHg7Y29sb3I6I0QwRDJEMztib3JkZXItcmFkaXVzOjIuNWVtIDAgMi41ZW0gMi41ZW07LXdlYmtpdC1hbmltYXRpb246c3Bpbm5lciAycyBlYXNlLWluLW91dCAwcyBpbmZpbml0ZX0jYTAtd2lkZ2V0IC5hMC1zcGlubmVyLWNzczphZnRlcntwb3NpdGlvbjphYnNvbHV0ZTtkaXNwbGF5OmJsb2NrO3dpZHRoOjEuOGVtO2JhY2tncm91bmQ6I2ZmZjt0b3A6Mi41ZW07bGVmdDoxLjZlbTtmb250LWZhbWlseTphdXRoMCFpbXBvcnRhbnQ7Y29udGVudDpcXFwiYVxcXCJ9QC13ZWJraXQta2V5ZnJhbWVzIHNwaW5uZXJ7ZnJvbXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGVZKDBkZWcpfXRvey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZVkoMzYwZGVnKX19XCI7XG5pbnNlcnQoc3R5bGUpOyIsInZhciBqc29uX3BhcnNlID0gcmVxdWlyZSgnLi9qc29uX3BhcnNlJyk7XG5cbmZ1bmN0aW9uIExvZ2luRXJyb3Ioc3RhdHVzLCBkZXRhaWxzKSB7XG4gIHZhciBvYmo7XG5cbiAgaWYgKHR5cGVvZiBkZXRhaWxzID09ICdzdHJpbmcnKSB7XG4gICAgdHJ5IHtcbiAgICAgIG9iaiA9IGpzb25fcGFyc2UoZGV0YWlscyk7XG4gICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgIG9iaiA9IHttZXNzYWdlOiBkZXRhaWxzfTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb2JqID0gZGV0YWlscyB8fCB7IGRlc2NyaXB0aW9uOiAnc2VydmVyIGVycm9yJyB9O1xuICB9XG5cbiAgaWYgKG9iaiAmJiAhb2JqLmNvZGUpIHtcbiAgICBvYmouY29kZSA9IG9iai5lcnJvcjtcbiAgfVxuICBcbiAgdmFyIGVyciA9IEVycm9yLmNhbGwodGhpcywgb2JqLmRlc2NyaXB0aW9uIHx8IG9iai5tZXNzYWdlIHx8IG9iai5lcnJvcik7XG5cbiAgZXJyLnN0YXR1cyA9IHN0YXR1cztcbiAgZXJyLm5hbWUgPSBvYmouY29kZTtcbiAgZXJyLmNvZGUgPSBvYmouY29kZTtcbiAgZXJyLmRldGFpbHMgPSBvYmo7XG5cbiAgaWYgKHN0YXR1cyA9PT0gMCkge1xuICAgIGVyci5jb2RlID0gXCJVbmtub3duXCI7XG4gICAgZXJyLm1lc3NhZ2UgPSBcIlVua25vd24gZXJyb3IuXCI7XG4gIH1cblxuICByZXR1cm4gZXJyO1xufVxuXG5pZiAoT2JqZWN0ICYmIE9iamVjdC5jcmVhdGUpIHtcbiAgTG9naW5FcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBMb2dpbkVycm9yIH1cbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTG9naW5FcnJvcjsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmosIHByb3ApIHtcbiAgaWYgKCFvYmpbcHJvcF0pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvcCArICcgaXMgcmVxdWlyZWQuJyk7XG4gIH1cbn07IiwidmFyIEJhc2U2NCA9IHJlcXVpcmUoJ0Jhc2U2NCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHN0cikge1xuICB2YXIgb3V0cHV0ID0gc3RyLnJlcGxhY2UoXCItXCIsIFwiK1wiKS5yZXBsYWNlKFwiX1wiLCBcIi9cIik7XG4gIHN3aXRjaCAob3V0cHV0Lmxlbmd0aCAlIDQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICBvdXRwdXQgKz0gXCI9PVwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgb3V0cHV0ICs9IFwiPVwiO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IFwiSWxsZWdhbCBiYXNlNjR1cmwgc3RyaW5nIVwiO1xuICB9XG4gIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKEJhc2U2NC5hdG9iKG91dHB1dCkpKTtcbn07IiwidmFyIGdsb2JhbD10eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge307dmFyIGFzc2VydF9yZXF1aXJlZCAgID0gcmVxdWlyZSgnLi9hc3NlcnRfcmVxdWlyZWQnKTtcbnZhciBiYXNlNjRfdXJsX2RlY29kZSA9IHJlcXVpcmUoJy4vYmFzZTY0X3VybF9kZWNvZGUnKTtcbnZhciBxcyAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJ3FzJyk7XG52YXIgeHRlbmQgICAgICAgICAgICAgPSByZXF1aXJlKCd4dGVuZCcpO1xudmFyIHJlcXdlc3QgICAgICAgICAgID0gcmVxdWlyZSgncmVxd2VzdCcpO1xuXG52YXIganNvbnAgICAgICAgICAgICAgPSByZXF1aXJlKCdqc29ucCcpO1xuXG52YXIgdXNlX2pzb25wICAgICAgICAgPSByZXF1aXJlKCcuL3VzZV9qc29ucCcpO1xudmFyIExvZ2luRXJyb3IgICAgICAgID0gcmVxdWlyZSgnLi9Mb2dpbkVycm9yJyk7XG52YXIganNvbl9wYXJzZSAgICAgICAgPSByZXF1aXJlKCcuL2pzb25fcGFyc2UnKTtcblxuZnVuY3Rpb24gQXV0aDAgKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEF1dGgwKSkge1xuICAgIHJldHVybiBuZXcgQXV0aDAob3B0aW9ucyk7XG4gIH1cblxuICBhc3NlcnRfcmVxdWlyZWQob3B0aW9ucywgJ2NsaWVudElEJyk7XG4gIGFzc2VydF9yZXF1aXJlZChvcHRpb25zLCAnY2FsbGJhY2tVUkwnKTtcbiAgYXNzZXJ0X3JlcXVpcmVkKG9wdGlvbnMsICdkb21haW4nKTtcblxuICB0aGlzLl91c2VKU09OUCA9IG9wdGlvbnMuZm9yY2VKU09OUCB8fCB1c2VfanNvbnAoKTtcbiAgdGhpcy5fY2xpZW50SUQgPSBvcHRpb25zLmNsaWVudElEO1xuICB0aGlzLl9jYWxsYmFja1VSTCA9IG9wdGlvbnMuY2FsbGJhY2tVUkw7XG4gIHRoaXMuX2RvbWFpbiA9IG9wdGlvbnMuZG9tYWluO1xuICB0aGlzLl9jYWxsYmFja09uTG9jYXRpb25IYXNoID0gZmFsc2UgfHwgb3B0aW9ucy5jYWxsYmFja09uTG9jYXRpb25IYXNoO1xufVxuXG5BdXRoMC5wcm90b3R5cGUuX3JlZGlyZWN0ID0gZnVuY3Rpb24gKHVybCkge1xuICBnbG9iYWwud2luZG93LmxvY2F0aW9uID0gdXJsO1xufTtcblxuQXV0aDAucHJvdG90eXBlLl9yZW5kZXJBbmRTdWJtaXRXU0ZlZEZvcm0gPSBmdW5jdGlvbiAob3B0aW9ucywgZm9ybUh0bWwpIHtcbiAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXYuaW5uZXJIVE1MID0gZm9ybUh0bWw7XG4gIHZhciBmb3JtID0gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpLmNoaWxkcmVuWzBdO1xuXG4gIGlmIChvcHRpb25zLnBvcHVwICYmICF0aGlzLl9jYWxsYmFja09uTG9jYXRpb25IYXNoKSB7XG4gICAgZm9ybS50YXJnZXQgPSAnYXV0aDBfc2lnbnVwX3BvcHVwJztcbiAgfVxuXG4gIGZvcm0uc3VibWl0KCk7XG59O1xuXG5BdXRoMC5wcm90b3R5cGUuX2dldE1vZGUgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgc2NvcGU6ICdvcGVuaWQnLFxuICAgIHJlc3BvbnNlX3R5cGU6IHRoaXMuX2NhbGxiYWNrT25Mb2NhdGlvbkhhc2ggPyAndG9rZW4nIDogJ2NvZGUnXG4gIH07XG59O1xuXG5BdXRoMC5wcm90b3R5cGUuX2dldFVzZXJJbmZvID0gZnVuY3Rpb24gKHByb2ZpbGUsIGlkX3Rva2VuLCBjYWxsYmFjaykge1xuXG4gIGlmIChwcm9maWxlICYmICFwcm9maWxlLnVzZXJfaWQpIHsgLy8gdGhlIHNjb3BlIHdhcyBqdXN0IG9wZW5pZFxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgdXJsID0gJ2h0dHBzOi8vJyArIHNlbGYuX2RvbWFpbiArICcvdG9rZW5pbmZvPyc7XG4gICAgdmFyIGZhaWwgPSBmdW5jdGlvbiAoc3RhdHVzLCBkZXNjcmlwdGlvbikge1xuICAgICAgY2FsbGJhY2soe1xuICAgICAgICBlcnJvcjogc3RhdHVzLFxuICAgICAgICBlcnJvcl9kZXNjcmlwdGlvbjogZGVzY3JpcHRpb25cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAodGhpcy5fdXNlSlNPTlApIHtcbiAgICAgIHJldHVybiBqc29ucCh1cmwgKyBxcy5zdHJpbmdpZnkoe2lkX3Rva2VuOiBpZF90b2tlbn0pLCB7XG4gICAgICAgIHBhcmFtOiAnY2J4JyxcbiAgICAgICAgdGltZW91dDogMTUwMDBcbiAgICAgIH0sIGZ1bmN0aW9uIChlcnIsIHJlc3ApIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVybiBmYWlsKDAsIGVyci50b1N0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXNwLnN0YXR1cyA9PT0gMjAwID9cbiAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXNwLnVzZXIpIDpcbiAgICAgICAgICBmYWlsKHJlc3Auc3RhdHVzLCByZXNwLmVycm9yKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXF3ZXN0KHtcbiAgICAgIHVybDogICAgICAgICAgdXJsLFxuICAgICAgbWV0aG9kOiAgICAgICAncG9zdCcsXG4gICAgICB0eXBlOiAgICAgICAgICdqc29uJyxcbiAgICAgIGNyb3NzT3JpZ2luOiAgdHJ1ZSxcbiAgICAgIGRhdGE6ICAgICAgICAge2lkX3Rva2VuOiBpZF90b2tlbn1cbiAgICB9KS5mYWlsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGZhaWwoZXJyLnN0YXR1cywgZXJyLnJlc3BvbnNlVGV4dCk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAodXNlcmluZm8pIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIHVzZXJpbmZvKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNhbGxiYWNrKG51bGwsIHByb2ZpbGUpO1xufTtcblxuQXV0aDAucHJvdG90eXBlLmdldFByb2ZpbGUgPSBmdW5jdGlvbiAoaWRfdG9rZW4sIGNhbGxiYWNrKSB7XG4gIGlmICghaWRfdG9rZW4gfHwgdHlwZW9mIGlkX3Rva2VuICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ0ludmFsaWQgdG9rZW4nKSk7XG4gIH1cblxuICB0aGlzLl9nZXRVc2VySW5mbyh0aGlzLmRlY29kZUp3dChpZF90b2tlbiksIGlkX3Rva2VuLCBjYWxsYmFjayk7XG59O1xuXG5BdXRoMC5wcm90b3R5cGUudmFsaWRhdGVVc2VyID0gZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBlbmRwb2ludCA9ICdodHRwczovLycgKyB0aGlzLl9kb21haW4gKyAnL3B1YmxpYy9hcGkvdXNlcnMvdmFsaWRhdGVfdXNlcnBhc3N3b3JkJztcbiAgdmFyIHF1ZXJ5ID0geHRlbmQoXG4gICAgb3B0aW9ucyxcbiAgICB7XG4gICAgICBjbGllbnRfaWQ6ICAgIHRoaXMuX2NsaWVudElELFxuICAgICAgdXNlcm5hbWU6ICAgICBvcHRpb25zLnVzZXJuYW1lIHx8IG9wdGlvbnMuZW1haWxcbiAgICB9KTtcblxuICBpZiAodGhpcy5fdXNlSlNPTlApIHtcbiAgICByZXR1cm4ganNvbnAoZW5kcG9pbnQgKyAnPycgKyBxcy5zdHJpbmdpZnkocXVlcnkpLCB7XG4gICAgICBwYXJhbTogJ2NieCcsXG4gICAgICB0aW1lb3V0OiAxNTAwMFxuICAgIH0sIGZ1bmN0aW9uIChlcnIsIHJlc3ApIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG4gICAgICBpZignZXJyb3InIGluIHJlc3AgJiYgcmVzcC5zdGF0dXMgIT09IDQwNCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKHJlc3AuZXJyb3IpKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3Auc3RhdHVzID09PSAyMDApO1xuICAgIH0pO1xuICB9XG5cbiAgcmVxd2VzdCh7XG4gICAgdXJsOiAgICAgZW5kcG9pbnQsXG4gICAgbWV0aG9kOiAgJ3Bvc3QnLFxuICAgIHR5cGU6ICAgICd0ZXh0JyxcbiAgICBkYXRhOiAgICBxdWVyeSxcbiAgICBjcm9zc09yaWdpbjogdHJ1ZSxcbiAgICBlcnJvcjogZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKGVyci5zdGF0dXMgIT09IDQwNCkgeyByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKGVyci5yZXNwb25zZVRleHQpKTsgfVxuICAgICAgY2FsbGJhY2sobnVsbCwgZmFsc2UpO1xuICAgIH0sXG4gICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3ApIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3Auc3RhdHVzID09PSAyMDApO1xuICAgIH1cbiAgfSk7XG59O1xuXG5BdXRoMC5wcm90b3R5cGUuZGVjb2RlSnd0ID0gZnVuY3Rpb24gKGp3dCkge1xuICB2YXIgZW5jb2RlZCA9IGp3dCAmJiBqd3Quc3BsaXQoJy4nKVsxXTtcbiAgcmV0dXJuIGpzb25fcGFyc2UoYmFzZTY0X3VybF9kZWNvZGUoZW5jb2RlZCkpO1xufTtcblxuQXV0aDAucHJvdG90eXBlLnBhcnNlSGFzaCA9IGZ1bmN0aW9uIChoYXNoKSB7XG4gIGlmIChoYXNoLm1hdGNoKC9lcnJvci8pKSB7XG4gICAgaGFzaCA9IGhhc2guc3Vic3RyKDEpLnJlcGxhY2UoL15cXC8vLCAnJyk7XG4gICAgdmFyIHBhcnNlZF9xcyA9IHFzLnBhcnNlKGhhc2gpO1xuICAgIHZhciBlcnIgPSB7XG4gICAgICBlcnJvcjogcGFyc2VkX3FzLmVycm9yLFxuICAgICAgZXJyb3JfZGVzY3JpcHRpb246IHBhcnNlZF9xcy5lcnJvcl9kZXNjcmlwdGlvblxuICAgIH07XG4gICAgcmV0dXJuIGVycjtcbiAgfVxuICBpZighaGFzaC5tYXRjaCgvYWNjZXNzX3Rva2VuLykpIHtcbiAgICAvLyBJbnZhbGlkIGhhc2ggVVJMXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaGFzaCA9IGhhc2guc3Vic3RyKDEpLnJlcGxhY2UoL15cXC8vLCAnJyk7XG4gIHZhciBwYXJzZWRfcXMgPSBxcy5wYXJzZShoYXNoKTtcbiAgdmFyIGlkX3Rva2VuID0gcGFyc2VkX3FzLmlkX3Rva2VuO1xuICB2YXIgcHJvZiA9IHRoaXMuZGVjb2RlSnd0KGlkX3Rva2VuKTtcbiAgdmFyIGludmFsaWRKd3QgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICB2YXIgZXJyID0ge1xuICAgICAgZXJyb3I6ICdpbnZhbGlkX3Rva2VuJyxcbiAgICAgIGVycm9yX2Rlc2NyaXB0aW9uOiBlcnJvclxuICAgIH07XG4gICAgcmV0dXJuIGVycjtcbiAgfTtcblxuICAvLyBhdWQgc2hvdWxkIGJlIHRoZSBjbGllbnRJRFxuICBpZiAocHJvZi5hdWQgIT09IHRoaXMuX2NsaWVudElEKSB7XG4gICAgcmV0dXJuIGludmFsaWRKd3QoXG4gICAgICAnVGhlIGNsaWVudElEIGNvbmZpZ3VyZWQgKCcgKyB0aGlzLl9jbGllbnRJRCArICcpIGRvZXMgbm90IG1hdGNoIHdpdGggdGhlIGNsaWVudElEIHNldCBpbiB0aGUgdG9rZW4gKCcgKyBwcm9mLmF1ZCArICcpLicpO1xuICB9XG5cbiAgLy8gaXNzIHNob3VsZCBiZSB0aGUgQXV0aDAgZG9tYWluIChpLmUuOiBodHRwczovL2NvbnRvc28uYXV0aDAuY29tLylcbiAgaWYgKHByb2YuaXNzICYmIHByb2YuaXNzICE9PSAnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgJy8nKSB7XG4gICAgcmV0dXJuIGludmFsaWRKd3QoXG4gICAgICAnVGhlIGRvbWFpbiBjb25maWd1cmVkIChodHRwczovLycgKyB0aGlzLl9kb21haW4gKyAnLykgZG9lcyBub3QgbWF0Y2ggd2l0aCB0aGUgZG9tYWluIHNldCBpbiB0aGUgdG9rZW4gKCcgKyBwcm9mLmlzcyArICcpLicpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwcm9maWxlOiBwcm9mLFxuICAgIGlkX3Rva2VuOiBpZF90b2tlbixcbiAgICBhY2Nlc3NfdG9rZW46IHBhcnNlZF9xcy5hY2Nlc3NfdG9rZW4sXG4gICAgc3RhdGU6IHBhcnNlZF9xcy5zdGF0ZVxuICB9O1xufTtcblxuXG5BdXRoMC5wcm90b3R5cGUuc2lnbnVwID0gZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgcXVlcnkgPSB4dGVuZChcbiAgICB0aGlzLl9nZXRNb2RlKCksXG4gICAgb3B0aW9ucyxcbiAgICB7XG4gICAgICBjbGllbnRfaWQ6IHRoaXMuX2NsaWVudElELFxuICAgICAgcmVkaXJlY3RfdXJpOiB0aGlzLl9jYWxsYmFja1VSTCxcbiAgICAgIGVtYWlsOiBvcHRpb25zLnVzZXJuYW1lIHx8IG9wdGlvbnMuZW1haWwsXG4gICAgICB0ZW5hbnQ6IHRoaXMuX2RvbWFpbi5zcGxpdCgnLicpWzBdXG4gICAgfSk7XG5cbiAgZnVuY3Rpb24gc3VjY2VzcyAoKSB7XG4gICAgaWYgKCdhdXRvX2xvZ2luJyBpbiBvcHRpb25zICYmICFvcHRpb25zLmF1dG9fbG9naW4pIHtcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2VsZi5sb2dpbihvcHRpb25zLCBjYWxsYmFjayk7XG4gIH1cblxuICBmdW5jdGlvbiBmYWlsIChzdGF0dXMsIHJlc3ApIHtcbiAgICB2YXIgZXJyb3IgPSBuZXcgTG9naW5FcnJvcihzdGF0dXMsIHJlc3ApO1xuICAgIGlmIChjYWxsYmFjaykgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIGlmICh0aGlzLl91c2VKU09OUCkge1xuICAgIHJldHVybiBqc29ucCgnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgJy9kYmNvbm5lY3Rpb25zL3NpZ251cD8nICsgcXMuc3RyaW5naWZ5KHF1ZXJ5KSwge1xuICAgICAgcGFyYW06ICdjYngnLFxuICAgICAgdGltZW91dDogMTUwMDBcbiAgICB9LCBmdW5jdGlvbiAoZXJyLCByZXNwKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBmYWlsKDAsIGVycik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzcC5zdGF0dXMgPT0gMjAwID9cbiAgICAgICAgICAgICAgc3VjY2VzcygpIDpcbiAgICAgICAgICAgICAgZmFpbChyZXNwLnN0YXR1cywgcmVzcC5lcnIpO1xuICAgIH0pO1xuICB9XG5cbiAgcmVxd2VzdCh7XG4gICAgdXJsOiAgICAgJ2h0dHBzOi8vJyArIHRoaXMuX2RvbWFpbiArICcvZGJjb25uZWN0aW9ucy9zaWdudXAnLFxuICAgIG1ldGhvZDogICdwb3N0JyxcbiAgICB0eXBlOiAgICAnaHRtbCcsXG4gICAgZGF0YTogICAgcXVlcnksXG4gICAgc3VjY2Vzczogc3VjY2VzcyxcbiAgICBjcm9zc09yaWdpbjogdHJ1ZVxuICB9KS5mYWlsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBmYWlsKGVyci5zdGF0dXMsIGVyci5yZXNwb25zZVRleHQpO1xuICB9KTtcbn07XG5cbkF1dGgwLnByb3RvdHlwZS5jaGFuZ2VQYXNzd29yZCA9IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFjaykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBxdWVyeSA9IHtcbiAgICB0ZW5hbnQ6ICAgICAgICAgdGhpcy5fZG9tYWluLnNwbGl0KCcuJylbMF0sXG4gICAgY2xpZW50X2lkOiAgICAgIHRoaXMuX2NsaWVudElELFxuICAgIGNvbm5lY3Rpb246ICAgICBvcHRpb25zLmNvbm5lY3Rpb24sXG4gICAgZW1haWw6ICAgICAgICAgIG9wdGlvbnMudXNlcm5hbWUgfHwgb3B0aW9ucy5lbWFpbCxcbiAgICBwYXNzd29yZDogICAgICAgb3B0aW9ucy5wYXNzd29yZFxuICB9O1xuXG5cbiAgZnVuY3Rpb24gZmFpbCAoc3RhdHVzLCByZXNwKSB7XG4gICAgdmFyIGVycm9yID0gbmV3IExvZ2luRXJyb3Ioc3RhdHVzLCByZXNwKTtcbiAgICBpZiAoY2FsbGJhY2spICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcbiAgfVxuXG4gIGlmICh0aGlzLl91c2VKU09OUCkge1xuICAgIHJldHVybiBqc29ucCgnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgJy9kYmNvbm5lY3Rpb25zL2NoYW5nZV9wYXNzd29yZD8nICsgcXMuc3RyaW5naWZ5KHF1ZXJ5KSwge1xuICAgICAgcGFyYW06ICdjYngnLFxuICAgICAgdGltZW91dDogMTUwMDBcbiAgICB9LCBmdW5jdGlvbiAoZXJyLCByZXNwKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBmYWlsKDAsIGVycik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzcC5zdGF0dXMgPT0gMjAwID9cbiAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzcC5tZXNzYWdlKSA6XG4gICAgICAgICAgICAgIGZhaWwocmVzcC5zdGF0dXMsIHJlc3AuZXJyKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlcXdlc3Qoe1xuICAgIHVybDogICAgICdodHRwczovLycgKyB0aGlzLl9kb21haW4gKyAnL2RiY29ubmVjdGlvbnMvY2hhbmdlX3Bhc3N3b3JkJyxcbiAgICBtZXRob2Q6ICAncG9zdCcsXG4gICAgdHlwZTogICAgJ2h0bWwnLFxuICAgIGRhdGE6ICAgIHF1ZXJ5LFxuICAgIGNyb3NzT3JpZ2luOiB0cnVlXG4gIH0pLmZhaWwoZnVuY3Rpb24gKGVycikge1xuICAgIGZhaWwoZXJyLnN0YXR1cywgZXJyLnJlc3BvbnNlVGV4dCk7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKHIpIHtcbiAgICBjYWxsYmFjayhudWxsLCByKTtcbiAgfSk7XG59O1xuXG5cbkF1dGgwLnByb3RvdHlwZS5sb2dpbiA9IEF1dGgwLnByb3RvdHlwZS5zaWduaW4gPSBmdW5jdGlvbiAob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLnVzZXJuYW1lICE9PSAndW5kZWZpbmVkJyB8fFxuICAgICAgdHlwZW9mIG9wdGlvbnMuZW1haWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRoaXMubG9naW5XaXRoVXNlcm5hbWVQYXNzd29yZChvcHRpb25zLCBjYWxsYmFjayk7XG4gIH1cblxuICBpZiAoISFvcHRpb25zLnBvcHVwKSB7XG4gICAgcmV0dXJuIHRoaXMubG9naW5XaXRoUG9wdXAob3B0aW9ucywgY2FsbGJhY2spO1xuICB9XG5cbiAgdmFyIHF1ZXJ5ID0geHRlbmQoXG4gICAgdGhpcy5fZ2V0TW9kZSgpLFxuICAgIG9wdGlvbnMsXG4gICAgeyBjbGllbnRfaWQ6IHRoaXMuX2NsaWVudElELCByZWRpcmVjdF91cmk6IHRoaXMuX2NhbGxiYWNrVVJMIH0pO1xuXG4gIHRoaXMuX3JlZGlyZWN0KCdodHRwczovLycgKyB0aGlzLl9kb21haW4gKyAnL2F1dGhvcml6ZT8nICsgcXMuc3RyaW5naWZ5KHF1ZXJ5KSk7XG59O1xuXG5cbkF1dGgwLnByb3RvdHlwZS5sb2dpbldpdGhQb3B1cCA9IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHF1ZXJ5ID0geHRlbmQoXG4gICAgdGhpcy5fZ2V0TW9kZSgpLFxuICAgIG9wdGlvbnMsXG4gICAgeyBjbGllbnRfaWQ6IHRoaXMuX2NsaWVudElELCByZWRpcmVjdF91cmk6IHRoaXMuX2NhbGxiYWNrVVJMIH0pO1xuXG4gIHZhciBwb3B1cFVybCA9ICdodHRwczovLycgKyB0aGlzLl9kb21haW4gKyAnL2F1dGhvcml6ZT8nICsgcXMuc3RyaW5naWZ5KHF1ZXJ5KTtcbiAgdmFyIHBvcHVwT3B0aW9ucyA9IHh0ZW5kKFxuICAgIHsgd2lkdGg6IDUwMCwgaGVpZ2h0OiA2MDAgfSxcbiAgICBvcHRpb25zLnBvcHVwT3B0aW9ucyk7XG5cbiAgaWYgKCFjYWxsYmFjaykge1xuICAgIHRocm93IG5ldyBFcnJvcigncG9wdXAgbW9kZSBzaG91bGQgcmVjZWl2ZSBhIG1hbmRhdG9yeSBjYWxsYmFjaycpO1xuICB9XG5cbiAgdmFyIHBvcHVwID0gd2luZG93Lm9wZW4ocG9wdXBVcmwsIG51bGwsIHN0cmluZ2lmeVBvcHVwU2V0dGluZ3MocG9wdXBPcHRpb25zKSk7XG4gIGlmICghcG9wdXApIHsgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcignVW5hYmxlIHRvIG9wZW4gcG9wdXAnKSk7IH1cblxuICB2YXIgcG9wdXBSZWFkeVRpbWVyID0gc2V0SW50ZXJ2YWwocG9wdXBSZWFkeUNoZWNrLCA1MCk7XG4gIHBvcHVwLmZvY3VzKCk7XG5cbiAgZnVuY3Rpb24gcG9wdXBSZWFkeUNoZWNrKCkge1xuICAgIGlmICghcG9wdXApIHtcbiAgICAgIC8vIGRvdWJsZSBjaGVjayBwb3B1cCBleGlzdHMgaW4gY2FzZVxuICAgICAgLy8gY2hlY2sgaXMgY2FsbGVkIGJlZm9yZSByZWxvYWQgYW5kXG4gICAgICAvLyBhZnRlciBgcG9wdXAgPSBudWxsYCBjbGVhciBhc3NpZ25tZW50XG4gICAgICByZXR1cm4gY2xlYXJJbnRlcnZhbChwb3B1cFJlYWR5VGltZXIpO1xuICAgIH1cblxuICAgIGlmICghKHBvcHVwLnRvcCB8fCBwb3B1cC53aW5kb3cpKSB7XG4gICAgICAvLyBwb3B1cCB3YXMgY2xvc2VkIHRoZXJlZm9yZSBzdG9wIGNoZWNrXG4gICAgICBjbGVhckludGVydmFsKHBvcHVwUmVhZHlUaW1lcik7XG4gICAgICBwb3B1cCA9IG51bGw7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGhhc2ggPSAnJztcbiAgICB0cnkge1xuICAgICAgLy8gQXZvaWRzIGVycm9yIHRocm93aW5nIHdoZW4gcHJvdG9jb2xzIG9yXG4gICAgICAvLyBYLU9yaWdpbiByZXN0cmljdGlvbiBicm93c2VyIHBvbGljaWVzXG4gICAgICAvLyBibG9jayBhY2Nlc3MgdG8gYHBvcHVwYCB3aW5kb3cgcHJvcGVydGllc1xuICAgICAgaWYgKC8jYWNjZXNzX3Rva2VuLy50ZXN0KHBvcHVwLmxvY2F0aW9uLmhyZWYpKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwocG9wdXBSZWFkeVRpbWVyKTtcbiAgICAgICAgaGFzaCA9IHBvcHVwLmxvY2F0aW9uLmhhc2g7XG4gICAgICAgIHBvcHVwLmNsb3NlKCk7XG4gICAgICAgIHB1cHVwID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmICgvXFw/ZXJyb3IvLnRlc3QocG9wdXAubG9jYXRpb24uaHJlZikpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChwb3B1cFJlYWR5VGltZXIpO1xuICAgICAgICBoYXNoID0gXCIjXCIgKyBwb3B1cC5sb2NhdGlvbi5zZWFyY2guc2xpY2UoMSk7XG4gICAgICAgIHBvcHVwLmNsb3NlKCk7XG4gICAgICAgIHBvcHVwID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHsgfVxuXG4gICAgaWYgKGhhc2gubGVuZ3RoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gc2VsZi5wYXJzZUhhc2goaGFzaCk7XG5cbiAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LmlkX3Rva2VuKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmdldFByb2ZpbGUocmVzdWx0LmlkX3Rva2VuLCBmdW5jdGlvbiAoZXJyLCBwcm9maWxlKSB7XG4gICAgICAgICAgY2FsbGJhY2soZXJyLCBwcm9maWxlLCByZXN1bHQuaWRfdG9rZW4sIHJlc3VsdC5hY2Nlc3NfdG9rZW4sIHJlc3VsdC5zdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBOb3RoaW5nIGZvdW5kIGF0IHRoZSBVUkwsIHdpbGwgY2hlY2tcbiAgICAgIC8vIG9uIG5leHQgY3ljbGVcblxuICAgIH1cbiAgfVxuXG59O1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlQb3B1cFNldHRpbmdzKHBvcHVwT3B0aW9ucykge1xuICAvLyBTdHJpbmdpZnkgcG9wdXAgb3B0aW9ucyBvYmplY3QgaW50b1xuICAvLyBgd2luZG93Lm9wZW5gIHN0cmluZyBvcHRpb25zIGZvcm1hdFxuICB2YXIgc2V0dGluZ3MgPSAnJztcblxuICBmb3IgKHZhciBrZXkgaW4gcG9wdXBPcHRpb25zKSB7XG4gICAgc2V0dGluZ3MgKz0ga2V5ICsgJz0nICsgcG9wdXBPcHRpb25zW2tleV0gKyAnLCc7XG4gIH1cblxuICByZXR1cm4gc2V0dGluZ3Muc2xpY2UoMCwgLTEpO1xufVxuXG5cbkF1dGgwLnByb3RvdHlwZS5sb2dpbldpdGhSZXNvdXJjZU93bmVyID0gZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHF1ZXJ5ID0geHRlbmQoXG4gICAgdGhpcy5fZ2V0TW9kZSgpLFxuICAgIG9wdGlvbnMsXG4gICAge1xuICAgICAgY2xpZW50X2lkOiAgICB0aGlzLl9jbGllbnRJRCxcbiAgICAgIHVzZXJuYW1lOiAgICAgb3B0aW9ucy51c2VybmFtZSB8fCBvcHRpb25zLmVtYWlsLFxuICAgICAgZ3JhbnRfdHlwZTogICAncGFzc3dvcmQnXG4gICAgfSk7XG5cbiAgdmFyIGVuZHBvaW50ID0gJy9vYXV0aC9ybyc7XG5cbiAgZnVuY3Rpb24gZW5yaWNoR2V0UHJvZmlsZShyZXNwLCBjYWxsYmFjaykge1xuICAgIHNlbGYuZ2V0UHJvZmlsZShyZXNwLmlkX3Rva2VuLCBmdW5jdGlvbiAoZXJyLCBwcm9maWxlKSB7XG4gICAgICBjYWxsYmFjayhlcnIsIHByb2ZpbGUsIHJlc3AuaWRfdG9rZW4sIHJlc3AuYWNjZXNzX3Rva2VuLCByZXNwLnN0YXRlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICh0aGlzLl91c2VKU09OUCkge1xuICAgIHJldHVybiBqc29ucCgnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgZW5kcG9pbnQgKyAnPycgKyBxcy5zdHJpbmdpZnkocXVlcnkpLCB7XG4gICAgICBwYXJhbTogJ2NieCcsXG4gICAgICB0aW1lb3V0OiAxNTAwMFxuICAgIH0sIGZ1bmN0aW9uIChlcnIsIHJlc3ApIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG4gICAgICBpZignZXJyb3InIGluIHJlc3ApIHtcbiAgICAgICAgdmFyIGVycm9yID0gbmV3IExvZ2luRXJyb3IocmVzcC5zdGF0dXMsIHJlc3AuZXJyb3IpO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyb3IpO1xuICAgICAgfVxuICAgICAgZW5yaWNoR2V0UHJvZmlsZShyZXNwLCBjYWxsYmFjayk7XG4gICAgfSk7XG4gIH1cblxuICByZXF3ZXN0KHtcbiAgICB1cmw6ICAgICAnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgZW5kcG9pbnQsXG4gICAgbWV0aG9kOiAgJ3Bvc3QnLFxuICAgIHR5cGU6ICAgICdqc29uJyxcbiAgICBkYXRhOiAgICBxdWVyeSxcbiAgICBjcm9zc09yaWdpbjogdHJ1ZSxcbiAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcCkge1xuICAgICAgZW5yaWNoR2V0UHJvZmlsZShyZXNwLCBjYWxsYmFjayk7XG4gICAgfVxuICB9KS5mYWlsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICB2YXIgZXIgPSBlcnI7XG4gICAgaWYgKCFlci5zdGF0dXMgfHwgZXIuc3RhdHVzID09PSAwKSB7IC8vaWUxMCB0cmlja1xuICAgICAgZXIgPSB7fTtcbiAgICAgIGVyLnN0YXR1cyA9IDQwMTtcbiAgICAgIGVyLnJlc3BvbnNlVGV4dCA9IHtcbiAgICAgICAgY29kZTogJ2ludmFsaWRfdXNlcl9wYXNzd29yZCdcbiAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZXIucmVzcG9uc2VUZXh0ID0gZXJyO1xuICAgIH1cbiAgICB2YXIgZXJyb3IgPSBuZXcgTG9naW5FcnJvcihlci5zdGF0dXMsIGVyLnJlc3BvbnNlVGV4dCk7XG4gICAgY2FsbGJhY2soZXJyb3IpO1xuICB9KTtcbn07XG5cbkF1dGgwLnByb3RvdHlwZS5sb2dpbldpdGhVc2VybmFtZVBhc3N3b3JkID0gZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmIChjYWxsYmFjayAmJiBjYWxsYmFjay5sZW5ndGggPiAxKSB7XG4gICAgcmV0dXJuIHRoaXMubG9naW5XaXRoUmVzb3VyY2VPd25lcihvcHRpb25zLCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBwb3B1cDtcblxuICBpZiAob3B0aW9ucy5wb3B1cCAgJiYgIXRoaXMuX2NhbGxiYWNrT25Mb2NhdGlvbkhhc2gpIHtcbiAgICB2YXIgcG9wdXBPcHRpb25zID0gc3RyaW5naWZ5UG9wdXBTZXR0aW5ncyh4dGVuZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHdpZHRoOiA1MDAsIGhlaWdodDogNjAwIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG9wdGlvbnMucG9wdXBPcHRpb25zIHx8IHt9KSkpO1xuICAgIHBvcHVwID0gd2luZG93Lm9wZW4oJ2Fib3V0OmJsYW5rJywgJ2F1dGgwX3NpZ251cF9wb3B1cCcscG9wdXBPcHRpb25zKTtcbiAgfVxuXG4gIHZhciBxdWVyeSA9IHh0ZW5kKFxuICAgIHRoaXMuX2dldE1vZGUoKSxcbiAgICBvcHRpb25zLFxuICAgIHtcbiAgICAgIGNsaWVudF9pZDogdGhpcy5fY2xpZW50SUQsXG4gICAgICByZWRpcmVjdF91cmk6IHRoaXMuX2NhbGxiYWNrVVJMLFxuICAgICAgdXNlcm5hbWU6IG9wdGlvbnMudXNlcm5hbWUgfHwgb3B0aW9ucy5lbWFpbCxcbiAgICAgIHRlbmFudDogdGhpcy5fZG9tYWluLnNwbGl0KCcuJylbMF1cbiAgICB9KTtcblxuICB2YXIgZW5kcG9pbnQgPSAnL3VzZXJuYW1lcGFzc3dvcmQvbG9naW4nO1xuXG4gIGlmICh0aGlzLl91c2VKU09OUCkge1xuICAgIHJldHVybiBqc29ucCgnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgZW5kcG9pbnQgKyAnPycgKyBxcy5zdHJpbmdpZnkocXVlcnkpLCB7XG4gICAgICBwYXJhbTogJ2NieCcsXG4gICAgICB0aW1lb3V0OiAxNTAwMFxuICAgIH0sIGZ1bmN0aW9uIChlcnIsIHJlc3ApIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgaWYgKHBvcHVwKSBwb3B1cC5jbG9zZSgpO1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgIH1cbiAgICAgIGlmKCdlcnJvcicgaW4gcmVzcCkge1xuICAgICAgICBpZiAocG9wdXApIHBvcHVwLmNsb3NlKCk7XG4gICAgICAgIHZhciBlcnJvciA9IG5ldyBMb2dpbkVycm9yKHJlc3Auc3RhdHVzLCByZXNwLmVycm9yKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgIH1cbiAgICAgIHNlbGYuX3JlbmRlckFuZFN1Ym1pdFdTRmVkRm9ybShvcHRpb25zLCByZXNwLmZvcm0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmV0dXJuX2Vycm9yIChlcnJvcikge1xuICAgIGlmIChjYWxsYmFjaykgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIHJlcXdlc3Qoe1xuICAgIHVybDogICAgICdodHRwczovLycgKyB0aGlzLl9kb21haW4gKyBlbmRwb2ludCxcbiAgICBtZXRob2Q6ICAncG9zdCcsXG4gICAgdHlwZTogICAgJ2h0bWwnLFxuICAgIGRhdGE6ICAgIHF1ZXJ5LFxuICAgIGNyb3NzT3JpZ2luOiB0cnVlLFxuICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgICBzZWxmLl9yZW5kZXJBbmRTdWJtaXRXU0ZlZEZvcm0ob3B0aW9ucywgcmVzcCk7XG4gICAgfVxuICB9KS5mYWlsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICB2YXIgZXIgPSBlcnI7XG4gICAgaWYgKHBvcHVwKSBwb3B1cC5jbG9zZSgpO1xuICAgIGlmICghZXIuc3RhdHVzIHx8IGVyLnN0YXR1cyA9PT0gMCkgeyAvL2llMTAgdHJpY2tcbiAgICAgIGVyID0ge307XG4gICAgICBlci5zdGF0dXMgPSA0MDE7XG4gICAgICBlci5yZXNwb25zZVRleHQgPSB7XG4gICAgICAgIGNvZGU6ICdpbnZhbGlkX3VzZXJfcGFzc3dvcmQnXG4gICAgICB9O1xuICAgIH1cbiAgICB2YXIgZXJyb3IgPSBuZXcgTG9naW5FcnJvcihlci5zdGF0dXMsIGVyLnJlc3BvbnNlVGV4dCk7XG4gICAgcmV0dXJuIHJldHVybl9lcnJvcihlcnJvcik7XG4gIH0pO1xufTtcblxuQXV0aDAucHJvdG90eXBlLmdldERlbGVnYXRpb25Ub2tlbiA9IGZ1bmN0aW9uICh0YXJnZXRDbGllbnRJZCwgaWRfdG9rZW4sIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBvcHRpb25zLmlkX3Rva2VuID0gaWRfdG9rZW47XG5cbiAgdmFyIHF1ZXJ5ID0geHRlbmQoe1xuICAgIGdyYW50X3R5cGU6ICd1cm46aWV0ZjpwYXJhbXM6b2F1dGg6Z3JhbnQtdHlwZTpqd3QtYmVhcmVyJyxcbiAgICB0YXJnZXQ6ICAgICB0YXJnZXRDbGllbnRJZCxcbiAgICBjbGllbnRfaWQ6ICB0aGlzLl9jbGllbnRJRFxuICB9LCBvcHRpb25zKTtcblxuICB2YXIgZW5kcG9pbnQgPSAnL2RlbGVnYXRpb24nO1xuXG4gIGlmICh0aGlzLl91c2VKU09OUCkge1xuICAgIHJldHVybiBqc29ucCgnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgZW5kcG9pbnQgKyAnPycgKyBxcy5zdHJpbmdpZnkocXVlcnkpLCB7XG4gICAgICBwYXJhbTogJ2NieCcsXG4gICAgICB0aW1lb3V0OiAxNTAwMFxuICAgIH0sIGZ1bmN0aW9uIChlcnIsIHJlc3ApIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICB9XG4gICAgICBpZignZXJyb3InIGluIHJlc3ApIHtcbiAgICAgICAgdmFyIGVycm9yID0gbmV3IExvZ2luRXJyb3IocmVzcC5zdGF0dXMsIHJlc3AuZXJyb3JfZGVzY3JpcHRpb24gfHwgcmVzcC5lcnJvcik7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcik7XG4gICAgICB9XG4gICAgICBjYWxsYmFjayhudWxsLCByZXNwKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlcXdlc3Qoe1xuICAgIHVybDogICAgICdodHRwczovLycgKyB0aGlzLl9kb21haW4gKyBlbmRwb2ludCxcbiAgICBtZXRob2Q6ICAncG9zdCcsXG4gICAgdHlwZTogICAgJ2pzb24nLFxuICAgIGRhdGE6ICAgIHF1ZXJ5LFxuICAgIGNyb3NzT3JpZ2luOiB0cnVlLFxuICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgICBjYWxsYmFjayhudWxsLCByZXNwKTtcbiAgICB9XG4gIH0pLmZhaWwoZnVuY3Rpb24gKGVycikge1xuICAgIHRyeSB7XG4gICAgICBjYWxsYmFjayhKU09OLnBhcnNlKGVyci5yZXNwb25zZVRleHQpKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgIHZhciBlciA9IGVycjtcbiAgICAgIGlmICghZXIuc3RhdHVzIHx8IGVyLnN0YXR1cyA9PT0gMCkgeyAvL2llMTAgdHJpY2tcbiAgICAgICAgZXIgPSB7fTtcbiAgICAgICAgZXIuc3RhdHVzID0gNDAxO1xuICAgICAgICBlci5yZXNwb25zZVRleHQgPSB7XG4gICAgICAgICAgY29kZTogJ2ludmFsaWRfb3BlcmF0aW9uJ1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY2FsbGJhY2sobmV3IExvZ2luRXJyb3IoZXIuc3RhdHVzLCBlci5yZXNwb25zZVRleHQpKTtcbiAgICB9XG4gIH0pO1xufTtcblxuQXV0aDAucHJvdG90eXBlLmxvZ291dCA9IGZ1bmN0aW9uIChxdWVyeSkge1xuICB2YXIgdXJsID0gJ2h0dHBzOi8vJyArIHRoaXMuX2RvbWFpbiArICcvbG9nb3V0JztcbiAgaWYgKHF1ZXJ5KSB7XG4gICAgdXJsICs9ICc/JyArIHFzLnN0cmluZ2lmeShxdWVyeSk7XG4gIH1cbiAgdGhpcy5fcmVkaXJlY3QodXJsKTtcbn07XG5cbkF1dGgwLnByb3RvdHlwZS5nZXRTU09EYXRhID0gZnVuY3Rpb24gKHdpdGhBY3RpdmVEaXJlY3RvcmllcywgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiB3aXRoQWN0aXZlRGlyZWN0b3JpZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWxsYmFjayA9IHdpdGhBY3RpdmVEaXJlY3RvcmllcztcbiAgICB3aXRoQWN0aXZlRGlyZWN0b3JpZXMgPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cmwgPSAnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgJy91c2VyL3Nzb2RhdGEnO1xuXG4gIGlmICh3aXRoQWN0aXZlRGlyZWN0b3JpZXMpIHtcbiAgICB1cmwgKz0gJz8nICsgcXMuc3RyaW5naWZ5KHtsZGFwczogMSwgY2xpZW50X2lkOiB0aGlzLl9jbGllbnRJRH0pO1xuICB9XG5cbiAgcmV0dXJuIGpzb25wKHVybCwge1xuICAgIHBhcmFtOiAnY2J4JyxcbiAgICB0aW1lb3V0OiAxNTAwMFxuICB9LCBmdW5jdGlvbiAoZXJyLCByZXNwKSB7XG4gICAgY2FsbGJhY2sobnVsbCwgZXJyID8ge30gOiByZXNwKTsgLy8gQWx3YXlzIHJldHVybiBPSywgcmVnYXJkbGVzcyBvZiBhbnkgZXJyb3JzXG4gIH0pO1xufTtcblxuQXV0aDAucHJvdG90eXBlLmdldENvbm5lY3Rpb25zID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHJldHVybiBqc29ucCgnaHR0cHM6Ly8nICsgdGhpcy5fZG9tYWluICsgJy9wdWJsaWMvYXBpLycgKyB0aGlzLl9jbGllbnRJRCArICcvY29ubmVjdGlvbnMnLCB7XG4gICAgcGFyYW06ICdjYngnLFxuICAgIHRpbWVvdXQ6IDE1MDAwXG4gIH0sIGNhbGxiYWNrKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0aDA7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHdpbmRvdy5KU09OID8gd2luZG93LkpTT04ucGFyc2Uoc3RyKSA6IGV2YWwoJygnICsgc3RyICsgJyknKTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB4aHIgPSB3aW5kb3cuWE1MSHR0cFJlcXVlc3QgPyBuZXcgWE1MSHR0cFJlcXVlc3QoKSA6IG51bGw7XG5cbiAgaWYgKHhociAmJiAnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoJ1hEb21haW5SZXF1ZXN0JyBpbiB3aW5kb3cgJiYgd2luZG93LmxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTsiLCI7KGZ1bmN0aW9uICgpIHtcblxuICB2YXJcbiAgICBvYmplY3QgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzLCAvLyAjODogd2ViIHdvcmtlcnNcbiAgICBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPScsXG4gICAgSU5WQUxJRF9DSEFSQUNURVJfRVJSID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGZhYnJpY2F0ZSBhIHN1aXRhYmxlIGVycm9yIG9iamVjdFxuICAgICAgdHJ5IHsgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnJCcpOyB9XG4gICAgICBjYXRjaCAoZXJyb3IpIHsgcmV0dXJuIGVycm9yOyB9fSgpKTtcblxuICAvLyBlbmNvZGVyXG4gIC8vIFtodHRwczovL2dpc3QuZ2l0aHViLmNvbS85OTkxNjZdIGJ5IFtodHRwczovL2dpdGh1Yi5jb20vbmlnbmFnXVxuICBvYmplY3QuYnRvYSB8fCAoXG4gIG9iamVjdC5idG9hID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgZm9yIChcbiAgICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgICB2YXIgYmxvY2ssIGNoYXJDb2RlLCBpZHggPSAwLCBtYXAgPSBjaGFycywgb3V0cHV0ID0gJyc7XG4gICAgICAvLyBpZiB0aGUgbmV4dCBpbnB1dCBpbmRleCBkb2VzIG5vdCBleGlzdDpcbiAgICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgICAvLyAgIGNoZWNrIGlmIGQgaGFzIG5vIGZyYWN0aW9uYWwgZGlnaXRzXG4gICAgICBpbnB1dC5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgICAvLyBcIjggLSBpZHggJSAxICogOFwiIGdlbmVyYXRlcyB0aGUgc2VxdWVuY2UgMiwgNCwgNiwgOFxuICAgICAgb3V0cHV0ICs9IG1hcC5jaGFyQXQoNjMgJiBibG9jayA+PiA4IC0gaWR4ICUgMSAqIDgpXG4gICAgKSB7XG4gICAgICBjaGFyQ29kZSA9IGlucHV0LmNoYXJDb2RlQXQoaWR4ICs9IDMvNCk7XG4gICAgICBpZiAoY2hhckNvZGUgPiAweEZGKSB0aHJvdyBJTlZBTElEX0NIQVJBQ1RFUl9FUlI7XG4gICAgICBibG9jayA9IGJsb2NrIDw8IDggfCBjaGFyQ29kZTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfSk7XG5cbiAgLy8gZGVjb2RlclxuICAvLyBbaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTAyMDM5Nl0gYnkgW2h0dHBzOi8vZ2l0aHViLmNvbS9hdGtdXG4gIG9iamVjdC5hdG9iIHx8IChcbiAgb2JqZWN0LmF0b2IgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoLz0rJC8sICcnKVxuICAgIGlmIChpbnB1dC5sZW5ndGggJSA0ID09IDEpIHRocm93IElOVkFMSURfQ0hBUkFDVEVSX0VSUjtcbiAgICBmb3IgKFxuICAgICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJzXG4gICAgICB2YXIgYmMgPSAwLCBicywgYnVmZmVyLCBpZHggPSAwLCBvdXRwdXQgPSAnJztcbiAgICAgIC8vIGdldCBuZXh0IGNoYXJhY3RlclxuICAgICAgYnVmZmVyID0gaW5wdXQuY2hhckF0KGlkeCsrKTtcbiAgICAgIC8vIGNoYXJhY3RlciBmb3VuZCBpbiB0YWJsZT8gaW5pdGlhbGl6ZSBiaXQgc3RvcmFnZSBhbmQgYWRkIGl0cyBhc2NpaSB2YWx1ZTtcbiAgICAgIH5idWZmZXIgJiYgKGJzID0gYmMgJSA0ID8gYnMgKiA2NCArIGJ1ZmZlciA6IGJ1ZmZlcixcbiAgICAgICAgLy8gYW5kIGlmIG5vdCBmaXJzdCBvZiBlYWNoIDQgY2hhcmFjdGVycyxcbiAgICAgICAgLy8gY29udmVydCB0aGUgZmlyc3QgOCBiaXRzIHRvIG9uZSBhc2NpaSBjaGFyYWN0ZXJcbiAgICAgICAgYmMrKyAlIDQpID8gb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMjU1ICYgYnMgPj4gKC0yICogYmMgJiA2KSkgOiAwXG4gICAgKSB7XG4gICAgICAvLyB0cnkgdG8gZmluZCBjaGFyYWN0ZXIgaW4gdGFibGUgKDAtNjMsIG5vdCBmb3VuZCA9PiAtMSlcbiAgICAgIGJ1ZmZlciA9IGNoYXJzLmluZGV4T2YoYnVmZmVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfSk7XG5cbn0oKSk7XG4iLCJcbi8qKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZGVidWc7XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtUeXBlfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkZWJ1ZyhuYW1lKSB7XG4gIGlmICghZGVidWcuZW5hYmxlZChuYW1lKSkgcmV0dXJuIGZ1bmN0aW9uKCl7fTtcblxuICByZXR1cm4gZnVuY3Rpb24oZm10KXtcbiAgICBmbXQgPSBjb2VyY2UoZm10KTtcblxuICAgIHZhciBjdXJyID0gbmV3IERhdGU7XG4gICAgdmFyIG1zID0gY3VyciAtIChkZWJ1Z1tuYW1lXSB8fCBjdXJyKTtcbiAgICBkZWJ1Z1tuYW1lXSA9IGN1cnI7XG5cbiAgICBmbXQgPSBuYW1lXG4gICAgICArICcgJ1xuICAgICAgKyBmbXRcbiAgICAgICsgJyArJyArIGRlYnVnLmh1bWFuaXplKG1zKTtcblxuICAgIC8vIFRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4XG4gICAgLy8gd2hlcmUgYGNvbnNvbGUubG9nYCBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICAgIHdpbmRvdy5jb25zb2xlXG4gICAgICAmJiBjb25zb2xlLmxvZ1xuICAgICAgJiYgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZS5sb2csIGNvbnNvbGUsIGFyZ3VtZW50cyk7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLlxuICovXG5cbmRlYnVnLm5hbWVzID0gW107XG5kZWJ1Zy5za2lwcyA9IFtdO1xuXG4vKipcbiAqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWUuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcbiAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZGVidWcuZW5hYmxlID0gZnVuY3Rpb24obmFtZSkge1xuICB0cnkge1xuICAgIGxvY2FsU3RvcmFnZS5kZWJ1ZyA9IG5hbWU7XG4gIH0gY2F0Y2goZSl7fVxuXG4gIHZhciBzcGxpdCA9IChuYW1lIHx8ICcnKS5zcGxpdCgvW1xccyxdKy8pXG4gICAgLCBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIG5hbWUgPSBzcGxpdFtpXS5yZXBsYWNlKCcqJywgJy4qPycpO1xuICAgIGlmIChuYW1lWzBdID09PSAnLScpIHtcbiAgICAgIGRlYnVnLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lLnN1YnN0cigxKSArICckJykpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGRlYnVnLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lICsgJyQnKSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZGVidWcuZGlzYWJsZSA9IGZ1bmN0aW9uKCl7XG4gIGRlYnVnLmVuYWJsZSgnJyk7XG59O1xuXG4vKipcbiAqIEh1bWFuaXplIHRoZSBnaXZlbiBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5kZWJ1Zy5odW1hbml6ZSA9IGZ1bmN0aW9uKG1zKSB7XG4gIHZhciBzZWMgPSAxMDAwXG4gICAgLCBtaW4gPSA2MCAqIDEwMDBcbiAgICAsIGhvdXIgPSA2MCAqIG1pbjtcblxuICBpZiAobXMgPj0gaG91cikgcmV0dXJuIChtcyAvIGhvdXIpLnRvRml4ZWQoMSkgKyAnaCc7XG4gIGlmIChtcyA+PSBtaW4pIHJldHVybiAobXMgLyBtaW4pLnRvRml4ZWQoMSkgKyAnbSc7XG4gIGlmIChtcyA+PSBzZWMpIHJldHVybiAobXMgLyBzZWMgfCAwKSArICdzJztcbiAgcmV0dXJuIG1zICsgJ21zJztcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5kZWJ1Zy5lbmFibGVkID0gZnVuY3Rpb24obmFtZSkge1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZGVidWcuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZGVidWcuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZGVidWcubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZGVidWcubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICovXG5cbmZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICByZXR1cm4gdmFsO1xufVxuXG4vLyBwZXJzaXN0XG5cbnRyeSB7XG4gIGlmICh3aW5kb3cubG9jYWxTdG9yYWdlKSBkZWJ1Zy5lbmFibGUobG9jYWxTdG9yYWdlLmRlYnVnKTtcbn0gY2F0Y2goZSl7fVxuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdqc29ucCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0ganNvbnA7XG5cbi8qKlxuICogQ2FsbGJhY2sgaW5kZXguXG4gKi9cblxudmFyIGNvdW50ID0gMDtcblxuLyoqXG4gKiBOb29wIGZ1bmN0aW9uLlxuICovXG5cbmZ1bmN0aW9uIG5vb3AoKXt9O1xuXG4vKipcbiAqIEpTT05QIGhhbmRsZXJcbiAqXG4gKiBPcHRpb25zOlxuICogIC0gcGFyYW0ge1N0cmluZ30gcXMgcGFyYW1ldGVyIChgY2FsbGJhY2tgKVxuICogIC0gdGltZW91dCB7TnVtYmVyfSBob3cgbG9uZyBhZnRlciBhIHRpbWVvdXQgZXJyb3IgaXMgZW1pdHRlZCAoYDYwMDAwYClcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge09iamVjdHxGdW5jdGlvbn0gb3B0aW9uYWwgb3B0aW9ucyAvIGNhbGxiYWNrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25hbCBjYWxsYmFja1xuICovXG5cbmZ1bmN0aW9uIGpzb25wKHVybCwgb3B0cywgZm4pe1xuICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2Ygb3B0cykge1xuICAgIGZuID0gb3B0cztcbiAgICBvcHRzID0ge307XG4gIH1cblxuICB2YXIgb3B0cyA9IG9wdHMgfHwge307XG4gIHZhciBwYXJhbSA9IG9wdHMucGFyYW0gfHwgJ2NhbGxiYWNrJztcbiAgdmFyIHRpbWVvdXQgPSBudWxsICE9IG9wdHMudGltZW91dCA/IG9wdHMudGltZW91dCA6IDYwMDAwO1xuICB2YXIgZW5jID0gZW5jb2RlVVJJQ29tcG9uZW50O1xuICB2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICB2YXIgc2NyaXB0O1xuICB2YXIgdGltZXI7XG5cbiAgLy8gZ2VuZXJhdGUgYSB1bmlxdWUgaWQgZm9yIHRoaXMgcmVxdWVzdFxuICB2YXIgaWQgPSBjb3VudCsrO1xuXG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICBjbGVhbnVwKCk7XG4gICAgICBmbiAmJiBmbihuZXcgRXJyb3IoJ1RpbWVvdXQnKSk7XG4gICAgfSwgdGltZW91dCk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhbnVwKCl7XG4gICAgdGFyZ2V0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICB3aW5kb3dbJ19fanAnICsgaWRdID0gbm9vcDtcbiAgfVxuXG4gIHdpbmRvd1snX19qcCcgKyBpZF0gPSBmdW5jdGlvbihkYXRhKXtcbiAgICBkZWJ1ZygnanNvbnAgZ290JywgZGF0YSk7XG4gICAgaWYgKHRpbWVyKSBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIGNsZWFudXAoKTtcbiAgICBmbiAmJiBmbihudWxsLCBkYXRhKTtcbiAgfTtcblxuICAvLyBhZGQgcXMgY29tcG9uZW50XG4gIHVybCArPSAofnVybC5pbmRleE9mKCc/JykgPyAnJicgOiAnPycpICsgcGFyYW0gKyAnPScgKyBlbmMoJ19fanAnICsgaWQgKyAnJyk7XG4gIHVybCA9IHVybC5yZXBsYWNlKCc/JicsICc/Jyk7XG5cbiAgZGVidWcoJ2pzb25wIHJlcSBcIiVzXCInLCB1cmwpO1xuXG4gIC8vIGNyZWF0ZSBzY3JpcHRcbiAgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gIHNjcmlwdC5zcmMgPSB1cmw7XG4gIHRhcmdldC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIHRhcmdldCk7XG59O1xuIiwiLyoqXG4gKiBPYmplY3QjdG9TdHJpbmcoKSByZWYgZm9yIHN0cmluZ2lmeSgpLlxuICovXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogT2JqZWN0I2hhc093blByb3BlcnR5IHJlZlxuICovXG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogc2VlIGlzc3VlICM3MFxuICovXG52YXIgaXNSZXN0b3JhYmxlUHJvdG8gPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgbztcblxuICBpZiAoIU9iamVjdC5jcmVhdGUpIHJldHVybiBmYWxzZTtcblxuICBvID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgby5fX3Byb3RvX18gPSBPYmplY3QucHJvdG90eXBlO1xuXG4gIHJldHVybiBvLmhhc093blByb3BlcnR5ID09PSBoYXNPd25Qcm9wZXJ0eTtcbn0pKCk7XG5cbi8qKlxuICogQXJyYXkjaW5kZXhPZiBzaGltLlxuICovXG5cbnZhciBpbmRleE9mID0gdHlwZW9mIEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nXG4gID8gZnVuY3Rpb24oYXJyLCBlbCkgeyByZXR1cm4gYXJyLmluZGV4T2YoZWwpOyB9XG4gIDogZnVuY3Rpb24oYXJyLCBlbCkge1xuICAgICAgaWYgKHR5cGVvZiBhcnIgPT0gJ3N0cmluZycgJiYgdHlwZW9mIFwiYVwiWzBdID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGFyciA9IGFyci5zcGxpdCgnJyk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYXJyW2ldID09PSBlbCkgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfTtcblxuLyoqXG4gKiBBcnJheS5pc0FycmF5IHNoaW0uXG4gKi9cblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG4vKipcbiAqIE9iamVjdC5rZXlzIHNoaW0uXG4gKi9cblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbihvYmopIHtcbiAgdmFyIHJldCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxuLyoqXG4gKiBBcnJheSNmb3JFYWNoIHNoaW0uXG4gKi9cblxudmFyIGZvckVhY2ggPSB0eXBlb2YgQXJyYXkucHJvdG90eXBlLmZvckVhY2ggPT09ICdmdW5jdGlvbidcbiAgPyBmdW5jdGlvbihhcnIsIGZuKSB7IHJldHVybiBhcnIuZm9yRWFjaChmbik7IH1cbiAgOiBmdW5jdGlvbihhcnIsIGZuKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykgZm4oYXJyW2ldKTtcbiAgICB9O1xuXG4vKipcbiAqIEFycmF5I3JlZHVjZSBzaGltLlxuICovXG5cbnZhciByZWR1Y2UgPSBmdW5jdGlvbihhcnIsIGZuLCBpbml0aWFsKSB7XG4gIGlmICh0eXBlb2YgYXJyLnJlZHVjZSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGFyci5yZWR1Y2UoZm4sIGluaXRpYWwpO1xuICB2YXIgcmVzID0gaW5pdGlhbDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHJlcyA9IGZuKHJlcywgYXJyW2ldKTtcbiAgcmV0dXJuIHJlcztcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgbnVsbGFyeSBvYmplY3QgaWYgcG9zc2libGVcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVPYmplY3QoKSB7XG4gIHJldHVybiBpc1Jlc3RvcmFibGVQcm90b1xuICAgID8gT2JqZWN0LmNyZWF0ZShudWxsKVxuICAgIDoge307XG59XG5cbi8qKlxuICogQ2FjaGUgbm9uLWludGVnZXIgdGVzdCByZWdleHAuXG4gKi9cblxudmFyIGlzaW50ID0gL15bMC05XSskLztcblxuZnVuY3Rpb24gcHJvbW90ZShwYXJlbnQsIGtleSkge1xuICBpZiAocGFyZW50W2tleV0ubGVuZ3RoID09IDApIHJldHVybiBwYXJlbnRba2V5XSA9IGNyZWF0ZU9iamVjdCgpO1xuICB2YXIgdCA9IGNyZWF0ZU9iamVjdCgpO1xuICBmb3IgKHZhciBpIGluIHBhcmVudFtrZXldKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocGFyZW50W2tleV0sIGkpKSB7XG4gICAgICB0W2ldID0gcGFyZW50W2tleV1baV07XG4gICAgfVxuICB9XG4gIHBhcmVudFtrZXldID0gdDtcbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIHBhcnNlKHBhcnRzLCBwYXJlbnQsIGtleSwgdmFsKSB7XG4gIHZhciBwYXJ0ID0gcGFydHMuc2hpZnQoKTtcbiAgLy8gZW5kXG4gIGlmICghcGFydCkge1xuICAgIGlmIChpc0FycmF5KHBhcmVudFtrZXldKSkge1xuICAgICAgcGFyZW50W2tleV0ucHVzaCh2YWwpO1xuICAgIH0gZWxzZSBpZiAoJ29iamVjdCcgPT0gdHlwZW9mIHBhcmVudFtrZXldKSB7XG4gICAgICBwYXJlbnRba2V5XSA9IHZhbDtcbiAgICB9IGVsc2UgaWYgKCd1bmRlZmluZWQnID09IHR5cGVvZiBwYXJlbnRba2V5XSkge1xuICAgICAgcGFyZW50W2tleV0gPSB2YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudFtrZXldID0gW3BhcmVudFtrZXldLCB2YWxdO1xuICAgIH1cbiAgICAvLyBhcnJheVxuICB9IGVsc2Uge1xuICAgIHZhciBvYmogPSBwYXJlbnRba2V5XSA9IHBhcmVudFtrZXldIHx8IFtdO1xuICAgIGlmICgnXScgPT0gcGFydCkge1xuICAgICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICBpZiAoJycgIT0gdmFsKSBvYmoucHVzaCh2YWwpO1xuICAgICAgfSBlbHNlIGlmICgnb2JqZWN0JyA9PSB0eXBlb2Ygb2JqKSB7XG4gICAgICAgIG9ialtvYmplY3RLZXlzKG9iaikubGVuZ3RoXSA9IHZhbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iaiA9IHBhcmVudFtrZXldID0gW3BhcmVudFtrZXldLCB2YWxdO1xuICAgICAgfVxuICAgICAgLy8gcHJvcFxuICAgIH0gZWxzZSBpZiAofmluZGV4T2YocGFydCwgJ10nKSkge1xuICAgICAgcGFydCA9IHBhcnQuc3Vic3RyKDAsIHBhcnQubGVuZ3RoIC0gMSk7XG4gICAgICBpZiAoIWlzaW50LnRlc3QocGFydCkgJiYgaXNBcnJheShvYmopKSBvYmogPSBwcm9tb3RlKHBhcmVudCwga2V5KTtcbiAgICAgIHBhcnNlKHBhcnRzLCBvYmosIHBhcnQsIHZhbCk7XG4gICAgICAvLyBrZXlcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFpc2ludC50ZXN0KHBhcnQpICYmIGlzQXJyYXkob2JqKSkgb2JqID0gcHJvbW90ZShwYXJlbnQsIGtleSk7XG4gICAgICBwYXJzZShwYXJ0cywgb2JqLCBwYXJ0LCB2YWwpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIHBhcmVudCBrZXkvdmFsIHBhaXIuXG4gKi9cblxuZnVuY3Rpb24gbWVyZ2UocGFyZW50LCBrZXksIHZhbCl7XG4gIGlmICh+aW5kZXhPZihrZXksICddJykpIHtcbiAgICB2YXIgcGFydHMgPSBrZXkuc3BsaXQoJ1snKVxuICAgICAgLCBsZW4gPSBwYXJ0cy5sZW5ndGhcbiAgICAgICwgbGFzdCA9IGxlbiAtIDE7XG4gICAgcGFyc2UocGFydHMsIHBhcmVudCwgJ2Jhc2UnLCB2YWwpO1xuICAgIC8vIG9wdGltaXplXG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpc2ludC50ZXN0KGtleSkgJiYgaXNBcnJheShwYXJlbnQuYmFzZSkpIHtcbiAgICAgIHZhciB0ID0gY3JlYXRlT2JqZWN0KCk7XG4gICAgICBmb3IgKHZhciBrIGluIHBhcmVudC5iYXNlKSB0W2tdID0gcGFyZW50LmJhc2Vba107XG4gICAgICBwYXJlbnQuYmFzZSA9IHQ7XG4gICAgfVxuICAgIHNldChwYXJlbnQuYmFzZSwga2V5LCB2YWwpO1xuICB9XG5cbiAgcmV0dXJuIHBhcmVudDtcbn1cblxuLyoqXG4gKiBDb21wYWN0IHNwYXJzZSBhcnJheXMuXG4gKi9cblxuZnVuY3Rpb24gY29tcGFjdChvYmopIHtcbiAgaWYgKCdvYmplY3QnICE9IHR5cGVvZiBvYmopIHJldHVybiBvYmo7XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIHZhciByZXQgPSBbXTtcblxuICAgIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSB7XG4gICAgICAgIHJldC5wdXNoKG9ialtpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBvYmpba2V5XSA9IGNvbXBhY3Qob2JqW2tleV0pO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBSZXN0b3JlIE9iamVjdC5wcm90b3R5cGUuXG4gKiBzZWUgcHVsbC1yZXF1ZXN0ICM1OFxuICovXG5cbmZ1bmN0aW9uIHJlc3RvcmVQcm90byhvYmopIHtcbiAgaWYgKCFpc1Jlc3RvcmFibGVQcm90bykgcmV0dXJuIG9iajtcbiAgaWYgKGlzQXJyYXkob2JqKSkgcmV0dXJuIG9iajtcbiAgaWYgKG9iaiAmJiAnb2JqZWN0JyAhPSB0eXBlb2Ygb2JqKSByZXR1cm4gb2JqO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIG9ialtrZXldID0gcmVzdG9yZVByb3RvKG9ialtrZXldKTtcbiAgICB9XG4gIH1cblxuICBvYmouX19wcm90b19fID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gb2JqLlxuICovXG5cbmZ1bmN0aW9uIHBhcnNlT2JqZWN0KG9iail7XG4gIHZhciByZXQgPSB7IGJhc2U6IHt9IH07XG5cbiAgZm9yRWFjaChvYmplY3RLZXlzKG9iaiksIGZ1bmN0aW9uKG5hbWUpe1xuICAgIG1lcmdlKHJldCwgbmFtZSwgb2JqW25hbWVdKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbXBhY3QocmV0LmJhc2UpO1xufVxuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBzdHIuXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VTdHJpbmcoc3RyKXtcbiAgdmFyIHJldCA9IHJlZHVjZShTdHJpbmcoc3RyKS5zcGxpdCgnJicpLCBmdW5jdGlvbihyZXQsIHBhaXIpe1xuICAgIHZhciBlcWwgPSBpbmRleE9mKHBhaXIsICc9JylcbiAgICAgICwgYnJhY2UgPSBsYXN0QnJhY2VJbktleShwYWlyKVxuICAgICAgLCBrZXkgPSBwYWlyLnN1YnN0cigwLCBicmFjZSB8fCBlcWwpXG4gICAgICAsIHZhbCA9IHBhaXIuc3Vic3RyKGJyYWNlIHx8IGVxbCwgcGFpci5sZW5ndGgpXG4gICAgICAsIHZhbCA9IHZhbC5zdWJzdHIoaW5kZXhPZih2YWwsICc9JykgKyAxLCB2YWwubGVuZ3RoKTtcblxuICAgIC8vID9mb29cbiAgICBpZiAoJycgPT0ga2V5KSBrZXkgPSBwYWlyLCB2YWwgPSAnJztcbiAgICBpZiAoJycgPT0ga2V5KSByZXR1cm4gcmV0O1xuXG4gICAgcmV0dXJuIG1lcmdlKHJldCwgZGVjb2RlKGtleSksIGRlY29kZSh2YWwpKTtcbiAgfSwgeyBiYXNlOiBjcmVhdGVPYmplY3QoKSB9KS5iYXNlO1xuXG4gIHJldHVybiByZXN0b3JlUHJvdG8oY29tcGFjdChyZXQpKTtcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gcXVlcnkgYHN0cmAgb3IgYG9iamAsIHJldHVybmluZyBhbiBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciB8IHtPYmplY3R9IG9ialxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnBhcnNlID0gZnVuY3Rpb24oc3RyKXtcbiAgaWYgKG51bGwgPT0gc3RyIHx8ICcnID09IHN0cikgcmV0dXJuIHt9O1xuICByZXR1cm4gJ29iamVjdCcgPT0gdHlwZW9mIHN0clxuICAgID8gcGFyc2VPYmplY3Qoc3RyKVxuICAgIDogcGFyc2VTdHJpbmcoc3RyKTtcbn07XG5cbi8qKlxuICogVHVybiB0aGUgZ2l2ZW4gYG9iamAgaW50byBhIHF1ZXJ5IHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cblxudmFyIHN0cmluZ2lmeSA9IGV4cG9ydHMuc3RyaW5naWZ5ID0gZnVuY3Rpb24ob2JqLCBwcmVmaXgpIHtcbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlBcnJheShvYmosIHByZWZpeCk7XG4gIH0gZWxzZSBpZiAoJ1tvYmplY3QgT2JqZWN0XScgPT0gdG9TdHJpbmcuY2FsbChvYmopKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdChvYmosIHByZWZpeCk7XG4gIH0gZWxzZSBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIG9iaikge1xuICAgIHJldHVybiBzdHJpbmdpZnlTdHJpbmcob2JqLCBwcmVmaXgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcmVmaXggKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKG9iaikpO1xuICB9XG59O1xuXG4vKipcbiAqIFN0cmluZ2lmeSB0aGUgZ2l2ZW4gYHN0cmAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtTdHJpbmd9IHByZWZpeFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc3RyaW5naWZ5U3RyaW5nKHN0ciwgcHJlZml4KSB7XG4gIGlmICghcHJlZml4KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdzdHJpbmdpZnkgZXhwZWN0cyBhbiBvYmplY3QnKTtcbiAgcmV0dXJuIHByZWZpeCArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChzdHIpO1xufVxuXG4vKipcbiAqIFN0cmluZ2lmeSB0aGUgZ2l2ZW4gYGFycmAuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJlZml4XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlBcnJheShhcnIsIHByZWZpeCkge1xuICB2YXIgcmV0ID0gW107XG4gIGlmICghcHJlZml4KSB0aHJvdyBuZXcgVHlwZUVycm9yKCdzdHJpbmdpZnkgZXhwZWN0cyBhbiBvYmplY3QnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICByZXQucHVzaChzdHJpbmdpZnkoYXJyW2ldLCBwcmVmaXggKyAnWycgKyBpICsgJ10nKSk7XG4gIH1cbiAgcmV0dXJuIHJldC5qb2luKCcmJyk7XG59XG5cbi8qKlxuICogU3RyaW5naWZ5IHRoZSBnaXZlbiBgb2JqYC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJlZml4XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3Qob2JqLCBwcmVmaXgpIHtcbiAgdmFyIHJldCA9IFtdXG4gICAgLCBrZXlzID0gb2JqZWN0S2V5cyhvYmopXG4gICAgLCBrZXk7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGtleXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICgnJyA9PSBrZXkpIGNvbnRpbnVlO1xuICAgIGlmIChudWxsID09IG9ialtrZXldKSB7XG4gICAgICByZXQucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICc9Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldC5wdXNoKHN0cmluZ2lmeShvYmpba2V5XSwgcHJlZml4XG4gICAgICAgID8gcHJlZml4ICsgJ1snICsgZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnXSdcbiAgICAgICAgOiBlbmNvZGVVUklDb21wb25lbnQoa2V5KSkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXQuam9pbignJicpO1xufVxuXG4vKipcbiAqIFNldCBgb2JqYCdzIGBrZXlgIHRvIGB2YWxgIHJlc3BlY3RpbmdcbiAqIHRoZSB3ZWlyZCBhbmQgd29uZGVyZnVsIHN5bnRheCBvZiBhIHFzLFxuICogd2hlcmUgXCJmb289YmFyJmZvbz1iYXpcIiBiZWNvbWVzIGFuIGFycmF5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWxcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNldChvYmosIGtleSwgdmFsKSB7XG4gIHZhciB2ID0gb2JqW2tleV07XG4gIGlmICh1bmRlZmluZWQgPT09IHYpIHtcbiAgICBvYmpba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmIChpc0FycmF5KHYpKSB7XG4gICAgdi5wdXNoKHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSBbdiwgdmFsXTtcbiAgfVxufVxuXG4vKipcbiAqIExvY2F0ZSBsYXN0IGJyYWNlIGluIGBzdHJgIHdpdGhpbiB0aGUga2V5LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxhc3RCcmFjZUluS2V5KHN0cikge1xuICB2YXIgbGVuID0gc3RyLmxlbmd0aFxuICAgICwgYnJhY2VcbiAgICAsIGM7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBjID0gc3RyW2ldO1xuICAgIGlmICgnXScgPT0gYykgYnJhY2UgPSBmYWxzZTtcbiAgICBpZiAoJ1snID09IGMpIGJyYWNlID0gdHJ1ZTtcbiAgICBpZiAoJz0nID09IGMgJiYgIWJyYWNlKSByZXR1cm4gaTtcbiAgfVxufVxuXG4vKipcbiAqIERlY29kZSBgc3RyYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBkZWNvZGUoc3RyKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHIucmVwbGFjZSgvXFwrL2csICcgJykpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG4iLCIvKiEgdmVyc2lvbjogMC45LjdcbiAgKiBSZXF3ZXN0ISBBIGdlbmVyYWwgcHVycG9zZSBYSFIgY29ubmVjdGlvbiBtYW5hZ2VyXG4gICogbGljZW5zZSBNSVQgKGMpIER1c3RpbiBEaWF6IDIwMTNcbiAgKiBodHRwczovL2dpdGh1Yi5jb20vZGVkL3JlcXdlc3RcbiAgKi9cblxuIWZ1bmN0aW9uIChuYW1lLCBjb250ZXh0LCBkZWZpbml0aW9uKSB7XG4gIGlmICh0eXBlb2YgbW9kdWxlICE9ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSBtb2R1bGUuZXhwb3J0cyA9IGRlZmluaXRpb24oKVxuICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgZGVmaW5lKGRlZmluaXRpb24pXG4gIGVsc2UgY29udGV4dFtuYW1lXSA9IGRlZmluaXRpb24oKVxufSgncmVxd2VzdCcsIHRoaXMsIGZ1bmN0aW9uICgpIHtcblxuICB2YXIgd2luID0gd2luZG93XG4gICAgLCBkb2MgPSBkb2N1bWVudFxuICAgICwgdHdvSHVuZG8gPSAvXigyMFxcZHwxMjIzKSQvXG4gICAgLCBieVRhZyA9ICdnZXRFbGVtZW50c0J5VGFnTmFtZSdcbiAgICAsIHJlYWR5U3RhdGUgPSAncmVhZHlTdGF0ZSdcbiAgICAsIGNvbnRlbnRUeXBlID0gJ0NvbnRlbnQtVHlwZSdcbiAgICAsIHJlcXVlc3RlZFdpdGggPSAnWC1SZXF1ZXN0ZWQtV2l0aCdcbiAgICAsIGhlYWQgPSBkb2NbYnlUYWddKCdoZWFkJylbMF1cbiAgICAsIHVuaXFpZCA9IDBcbiAgICAsIGNhbGxiYWNrUHJlZml4ID0gJ3JlcXdlc3RfJyArICgrbmV3IERhdGUoKSlcbiAgICAsIGxhc3RWYWx1ZSAvLyBkYXRhIHN0b3JlZCBieSB0aGUgbW9zdCByZWNlbnQgSlNPTlAgY2FsbGJhY2tcbiAgICAsIHhtbEh0dHBSZXF1ZXN0ID0gJ1hNTEh0dHBSZXF1ZXN0J1xuICAgICwgeERvbWFpblJlcXVlc3QgPSAnWERvbWFpblJlcXVlc3QnXG4gICAgLCBub29wID0gZnVuY3Rpb24gKCkge31cblxuICAgICwgaXNBcnJheSA9IHR5cGVvZiBBcnJheS5pc0FycmF5ID09ICdmdW5jdGlvbidcbiAgICAgICAgPyBBcnJheS5pc0FycmF5XG4gICAgICAgIDogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIHJldHVybiBhIGluc3RhbmNlb2YgQXJyYXlcbiAgICAgICAgICB9XG5cbiAgICAsIGRlZmF1bHRIZWFkZXJzID0ge1xuICAgICAgICAgICdjb250ZW50VHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gICAgICAgICwgJ3JlcXVlc3RlZFdpdGgnOiB4bWxIdHRwUmVxdWVzdFxuICAgICAgICAsICdhY2NlcHQnOiB7XG4gICAgICAgICAgICAgICcqJzogICd0ZXh0L2phdmFzY3JpcHQsIHRleHQvaHRtbCwgYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbCwgKi8qJ1xuICAgICAgICAgICAgLCAneG1sJzogICdhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sJ1xuICAgICAgICAgICAgLCAnaHRtbCc6ICd0ZXh0L2h0bWwnXG4gICAgICAgICAgICAsICd0ZXh0JzogJ3RleHQvcGxhaW4nXG4gICAgICAgICAgICAsICdqc29uJzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCdcbiAgICAgICAgICAgICwgJ2pzJzogICAnYXBwbGljYXRpb24vamF2YXNjcmlwdCwgdGV4dC9qYXZhc2NyaXB0J1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICwgeGhyID0gZnVuY3Rpb24obykge1xuICAgICAgICAvLyBpcyBpdCB4LWRvbWFpblxuICAgICAgICBpZiAob1snY3Jvc3NPcmlnaW4nXSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHZhciB4aHIgPSB3aW5beG1sSHR0cFJlcXVlc3RdID8gbmV3IFhNTEh0dHBSZXF1ZXN0KCkgOiBudWxsXG4gICAgICAgICAgaWYgKHhociAmJiAnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICAgICAgICAgIHJldHVybiB4aHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHdpblt4RG9tYWluUmVxdWVzdF0pIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgWERvbWFpblJlcXVlc3QoKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBjcm9zcy1vcmlnaW4gcmVxdWVzdHMnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh3aW5beG1sSHR0cFJlcXVlc3RdKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCdNaWNyb3NvZnQuWE1MSFRUUCcpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAsIGdsb2JhbFNldHVwT3B0aW9ucyA9IHtcbiAgICAgICAgZGF0YUZpbHRlcjogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUmVhZHlTdGF0ZShyLCBzdWNjZXNzLCBlcnJvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyB1c2UgX2Fib3J0ZWQgdG8gbWl0aWdhdGUgYWdhaW5zdCBJRSBlcnIgYzAwYzAyM2ZcbiAgICAgIC8vIChjYW4ndCByZWFkIHByb3BzIG9uIGFib3J0ZWQgcmVxdWVzdCBvYmplY3RzKVxuICAgICAgaWYgKHIuX2Fib3J0ZWQpIHJldHVybiBlcnJvcihyLnJlcXVlc3QpXG4gICAgICBpZiAoci5yZXF1ZXN0ICYmIHIucmVxdWVzdFtyZWFkeVN0YXRlXSA9PSA0KSB7XG4gICAgICAgIHIucmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBub29wXG4gICAgICAgIGlmICh0d29IdW5kby50ZXN0KHIucmVxdWVzdC5zdGF0dXMpKVxuICAgICAgICAgIHN1Y2Nlc3Moci5yZXF1ZXN0KVxuICAgICAgICBlbHNlXG4gICAgICAgICAgZXJyb3Ioci5yZXF1ZXN0KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEhlYWRlcnMoaHR0cCwgbykge1xuICAgIHZhciBoZWFkZXJzID0gb1snaGVhZGVycyddIHx8IHt9XG4gICAgICAsIGhcblxuICAgIGhlYWRlcnNbJ0FjY2VwdCddID0gaGVhZGVyc1snQWNjZXB0J11cbiAgICAgIHx8IGRlZmF1bHRIZWFkZXJzWydhY2NlcHQnXVtvWyd0eXBlJ11dXG4gICAgICB8fCBkZWZhdWx0SGVhZGVyc1snYWNjZXB0J11bJyonXVxuXG4gICAgLy8gYnJlYWtzIGNyb3NzLW9yaWdpbiByZXF1ZXN0cyB3aXRoIGxlZ2FjeSBicm93c2Vyc1xuICAgIGlmICghb1snY3Jvc3NPcmlnaW4nXSAmJiAhaGVhZGVyc1tyZXF1ZXN0ZWRXaXRoXSkgaGVhZGVyc1tyZXF1ZXN0ZWRXaXRoXSA9IGRlZmF1bHRIZWFkZXJzWydyZXF1ZXN0ZWRXaXRoJ11cbiAgICBpZiAoIWhlYWRlcnNbY29udGVudFR5cGVdKSBoZWFkZXJzW2NvbnRlbnRUeXBlXSA9IG9bJ2NvbnRlbnRUeXBlJ10gfHwgZGVmYXVsdEhlYWRlcnNbJ2NvbnRlbnRUeXBlJ11cbiAgICBmb3IgKGggaW4gaGVhZGVycylcbiAgICAgIGhlYWRlcnMuaGFzT3duUHJvcGVydHkoaCkgJiYgJ3NldFJlcXVlc3RIZWFkZXInIGluIGh0dHAgJiYgaHR0cC5zZXRSZXF1ZXN0SGVhZGVyKGgsIGhlYWRlcnNbaF0pXG4gIH1cblxuICBmdW5jdGlvbiBzZXRDcmVkZW50aWFscyhodHRwLCBvKSB7XG4gICAgaWYgKHR5cGVvZiBvWyd3aXRoQ3JlZGVudGlhbHMnXSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGh0dHAud2l0aENyZWRlbnRpYWxzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaHR0cC53aXRoQ3JlZGVudGlhbHMgPSAhIW9bJ3dpdGhDcmVkZW50aWFscyddXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuZXJhbENhbGxiYWNrKGRhdGEpIHtcbiAgICBsYXN0VmFsdWUgPSBkYXRhXG4gIH1cblxuICBmdW5jdGlvbiB1cmxhcHBlbmQgKHVybCwgcykge1xuICAgIHJldHVybiB1cmwgKyAoL1xcPy8udGVzdCh1cmwpID8gJyYnIDogJz8nKSArIHNcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUpzb25wKG8sIGZuLCBlcnIsIHVybCkge1xuICAgIHZhciByZXFJZCA9IHVuaXFpZCsrXG4gICAgICAsIGNia2V5ID0gb1snanNvbnBDYWxsYmFjayddIHx8ICdjYWxsYmFjaycgLy8gdGhlICdjYWxsYmFjaycga2V5XG4gICAgICAsIGNidmFsID0gb1snanNvbnBDYWxsYmFja05hbWUnXSB8fCByZXF3ZXN0LmdldGNhbGxiYWNrUHJlZml4KHJlcUlkKVxuICAgICAgLy8gLCBjYnZhbCA9IG9bJ2pzb25wQ2FsbGJhY2tOYW1lJ10gfHwgKCdyZXF3ZXN0XycgKyByZXFJZCkgLy8gdGhlICdjYWxsYmFjaycgdmFsdWVcbiAgICAgICwgY2JyZWcgPSBuZXcgUmVnRXhwKCcoKF58XFxcXD98JiknICsgY2JrZXkgKyAnKT0oW14mXSspJylcbiAgICAgICwgbWF0Y2ggPSB1cmwubWF0Y2goY2JyZWcpXG4gICAgICAsIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuICAgICAgLCBsb2FkZWQgPSAwXG4gICAgICAsIGlzSUUxMCA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTVNJRSAxMC4wJykgIT09IC0xXG5cbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIGlmIChtYXRjaFszXSA9PT0gJz8nKSB7XG4gICAgICAgIHVybCA9IHVybC5yZXBsYWNlKGNicmVnLCAnJDE9JyArIGNidmFsKSAvLyB3aWxkY2FyZCBjYWxsYmFjayBmdW5jIG5hbWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNidmFsID0gbWF0Y2hbM10gLy8gcHJvdmlkZWQgY2FsbGJhY2sgZnVuYyBuYW1lXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHVybCA9IHVybGFwcGVuZCh1cmwsIGNia2V5ICsgJz0nICsgY2J2YWwpIC8vIG5vIGNhbGxiYWNrIGRldGFpbHMsIGFkZCAnZW1cbiAgICB9XG5cbiAgICB3aW5bY2J2YWxdID0gZ2VuZXJhbENhbGxiYWNrXG5cbiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgc2NyaXB0LnNyYyA9IHVybFxuICAgIHNjcmlwdC5hc3luYyA9IHRydWVcbiAgICBpZiAodHlwZW9mIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgIT09ICd1bmRlZmluZWQnICYmICFpc0lFMTApIHtcbiAgICAgIC8vIG5lZWQgdGhpcyBmb3IgSUUgZHVlIHRvIG91dC1vZi1vcmRlciBvbnJlYWR5c3RhdGVjaGFuZ2UoKSwgYmluZGluZyBzY3JpcHRcbiAgICAgIC8vIGV4ZWN1dGlvbiB0byBhbiBldmVudCBsaXN0ZW5lciBnaXZlcyB1cyBjb250cm9sIG92ZXIgd2hlbiB0aGUgc2NyaXB0XG4gICAgICAvLyBpcyBleGVjdXRlZC4gU2VlIGh0dHA6Ly9qYXVib3VyZy5uZXQvMjAxMC8wNy9sb2FkaW5nLXNjcmlwdC1hcy1vbmNsaWNrLWhhbmRsZXItb2YuaHRtbFxuICAgICAgLy9cbiAgICAgIC8vIGlmIHRoaXMgaGFjayBpcyB1c2VkIGluIElFMTAganNvbnAgY2FsbGJhY2sgYXJlIG5ldmVyIGNhbGxlZFxuICAgICAgc2NyaXB0LmV2ZW50ID0gJ29uY2xpY2snXG4gICAgICBzY3JpcHQuaHRtbEZvciA9IHNjcmlwdC5pZCA9ICdfcmVxd2VzdF8nICsgcmVxSWRcbiAgICB9XG5cbiAgICBzY3JpcHQub25sb2FkID0gc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICgoc2NyaXB0W3JlYWR5U3RhdGVdICYmIHNjcmlwdFtyZWFkeVN0YXRlXSAhPT0gJ2NvbXBsZXRlJyAmJiBzY3JpcHRbcmVhZHlTdGF0ZV0gIT09ICdsb2FkZWQnKSB8fCBsb2FkZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBzY3JpcHQub25sb2FkID0gc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGxcbiAgICAgIHNjcmlwdC5vbmNsaWNrICYmIHNjcmlwdC5vbmNsaWNrKClcbiAgICAgIC8vIENhbGwgdGhlIHVzZXIgY2FsbGJhY2sgd2l0aCB0aGUgbGFzdCB2YWx1ZSBzdG9yZWQgYW5kIGNsZWFuIHVwIHZhbHVlcyBhbmQgc2NyaXB0cy5cbiAgICAgIGZuKGxhc3RWYWx1ZSlcbiAgICAgIGxhc3RWYWx1ZSA9IHVuZGVmaW5lZFxuICAgICAgaGVhZC5yZW1vdmVDaGlsZChzY3JpcHQpXG4gICAgICBsb2FkZWQgPSAxXG4gICAgfVxuXG4gICAgLy8gQWRkIHRoZSBzY3JpcHQgdG8gdGhlIERPTSBoZWFkXG4gICAgaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpXG5cbiAgICAvLyBFbmFibGUgSlNPTlAgdGltZW91dFxuICAgIHJldHVybiB7XG4gICAgICBhYm9ydDogZnVuY3Rpb24gKCkge1xuICAgICAgICBzY3JpcHQub25sb2FkID0gc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGxcbiAgICAgICAgZXJyKHt9LCAnUmVxdWVzdCBpcyBhYm9ydGVkOiB0aW1lb3V0Jywge30pXG4gICAgICAgIGxhc3RWYWx1ZSA9IHVuZGVmaW5lZFxuICAgICAgICBoZWFkLnJlbW92ZUNoaWxkKHNjcmlwdClcbiAgICAgICAgbG9hZGVkID0gMVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJlcXVlc3QoZm4sIGVycikge1xuICAgIHZhciBvID0gdGhpcy5vXG4gICAgICAsIG1ldGhvZCA9IChvWydtZXRob2QnXSB8fCAnR0VUJykudG9VcHBlckNhc2UoKVxuICAgICAgLCB1cmwgPSB0eXBlb2YgbyA9PT0gJ3N0cmluZycgPyBvIDogb1sndXJsJ11cbiAgICAgIC8vIGNvbnZlcnQgbm9uLXN0cmluZyBvYmplY3RzIHRvIHF1ZXJ5LXN0cmluZyBmb3JtIHVubGVzcyBvWydwcm9jZXNzRGF0YSddIGlzIGZhbHNlXG4gICAgICAsIGRhdGEgPSAob1sncHJvY2Vzc0RhdGEnXSAhPT0gZmFsc2UgJiYgb1snZGF0YSddICYmIHR5cGVvZiBvWydkYXRhJ10gIT09ICdzdHJpbmcnKVxuICAgICAgICA/IHJlcXdlc3QudG9RdWVyeVN0cmluZyhvWydkYXRhJ10pXG4gICAgICAgIDogKG9bJ2RhdGEnXSB8fCBudWxsKVxuICAgICAgLCBodHRwXG4gICAgICAsIHNlbmRXYWl0ID0gZmFsc2VcblxuICAgIC8vIGlmIHdlJ3JlIHdvcmtpbmcgb24gYSBHRVQgcmVxdWVzdCBhbmQgd2UgaGF2ZSBkYXRhIHRoZW4gd2Ugc2hvdWxkIGFwcGVuZFxuICAgIC8vIHF1ZXJ5IHN0cmluZyB0byBlbmQgb2YgVVJMIGFuZCBub3QgcG9zdCBkYXRhXG4gICAgaWYgKChvWyd0eXBlJ10gPT0gJ2pzb25wJyB8fCBtZXRob2QgPT0gJ0dFVCcpICYmIGRhdGEpIHtcbiAgICAgIHVybCA9IHVybGFwcGVuZCh1cmwsIGRhdGEpXG4gICAgICBkYXRhID0gbnVsbFxuICAgIH1cblxuICAgIGlmIChvWyd0eXBlJ10gPT0gJ2pzb25wJykgcmV0dXJuIGhhbmRsZUpzb25wKG8sIGZuLCBlcnIsIHVybClcblxuICAgIC8vIGdldCB0aGUgeGhyIGZyb20gdGhlIGZhY3RvcnkgaWYgcGFzc2VkXG4gICAgLy8gaWYgdGhlIGZhY3RvcnkgcmV0dXJucyBudWxsLCBmYWxsLWJhY2sgdG8gb3Vyc1xuICAgIGh0dHAgPSAoby54aHIgJiYgby54aHIobykpIHx8IHhocihvKVxuXG4gICAgaHR0cC5vcGVuKG1ldGhvZCwgdXJsLCBvWydhc3luYyddID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZSlcbiAgICBzZXRIZWFkZXJzKGh0dHAsIG8pXG4gICAgc2V0Q3JlZGVudGlhbHMoaHR0cCwgbylcbiAgICBpZiAod2luW3hEb21haW5SZXF1ZXN0XSAmJiBodHRwIGluc3RhbmNlb2Ygd2luW3hEb21haW5SZXF1ZXN0XSkge1xuICAgICAgICBodHRwLm9ubG9hZCA9IGZuXG4gICAgICAgIGh0dHAub25lcnJvciA9IGVyclxuICAgICAgICAvLyBOT1RFOiBzZWVcbiAgICAgICAgLy8gaHR0cDovL3NvY2lhbC5tc2RuLm1pY3Jvc29mdC5jb20vRm9ydW1zL2VuLVVTL2lld2ViZGV2ZWxvcG1lbnQvdGhyZWFkLzMwZWYzYWRkLTc2N2MtNDQzNi1iOGE5LWYxY2ExOWI0ODEyZVxuICAgICAgICBodHRwLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbigpIHt9XG4gICAgICAgIHNlbmRXYWl0ID0gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICBodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGhhbmRsZVJlYWR5U3RhdGUodGhpcywgZm4sIGVycilcbiAgICB9XG4gICAgb1snYmVmb3JlJ10gJiYgb1snYmVmb3JlJ10oaHR0cClcbiAgICBpZiAoc2VuZFdhaXQpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBodHRwLnNlbmQoZGF0YSlcbiAgICAgIH0sIDIwMClcbiAgICB9IGVsc2Uge1xuICAgICAgaHR0cC5zZW5kKGRhdGEpXG4gICAgfVxuICAgIHJldHVybiBodHRwXG4gIH1cblxuICBmdW5jdGlvbiBSZXF3ZXN0KG8sIGZuKSB7XG4gICAgdGhpcy5vID0gb1xuICAgIHRoaXMuZm4gPSBmblxuXG4gICAgaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gIH1cblxuICBmdW5jdGlvbiBzZXRUeXBlKHVybCkge1xuICAgIHZhciBtID0gdXJsLm1hdGNoKC9cXC4oanNvbnxqc29ucHxodG1sfHhtbCkoXFw/fCQpLylcbiAgICByZXR1cm4gbSA/IG1bMV0gOiAnanMnXG4gIH1cblxuICBmdW5jdGlvbiBpbml0KG8sIGZuKSB7XG5cbiAgICB0aGlzLnVybCA9IHR5cGVvZiBvID09ICdzdHJpbmcnID8gbyA6IG9bJ3VybCddXG4gICAgdGhpcy50aW1lb3V0ID0gbnVsbFxuXG4gICAgLy8gd2hldGhlciByZXF1ZXN0IGhhcyBiZWVuIGZ1bGZpbGxlZCBmb3IgcHVycG9zZVxuICAgIC8vIG9mIHRyYWNraW5nIHRoZSBQcm9taXNlc1xuICAgIHRoaXMuX2Z1bGZpbGxlZCA9IGZhbHNlXG4gICAgLy8gc3VjY2VzcyBoYW5kbGVyc1xuICAgIHRoaXMuX3N1Y2Nlc3NIYW5kbGVyID0gZnVuY3Rpb24oKXt9XG4gICAgdGhpcy5fZnVsZmlsbG1lbnRIYW5kbGVycyA9IFtdXG4gICAgLy8gZXJyb3IgaGFuZGxlcnNcbiAgICB0aGlzLl9lcnJvckhhbmRsZXJzID0gW11cbiAgICAvLyBjb21wbGV0ZSAoYm90aCBzdWNjZXNzIGFuZCBmYWlsKSBoYW5kbGVyc1xuICAgIHRoaXMuX2NvbXBsZXRlSGFuZGxlcnMgPSBbXVxuICAgIHRoaXMuX2VycmVkID0gZmFsc2VcbiAgICB0aGlzLl9yZXNwb25zZUFyZ3MgPSB7fVxuXG4gICAgdmFyIHNlbGYgPSB0aGlzXG4gICAgICAsIHR5cGUgPSBvWyd0eXBlJ10gfHwgc2V0VHlwZSh0aGlzLnVybClcblxuICAgIGZuID0gZm4gfHwgZnVuY3Rpb24gKCkge31cblxuICAgIGlmIChvWyd0aW1lb3V0J10pIHtcbiAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBzZWxmLmFib3J0KClcbiAgICAgIH0sIG9bJ3RpbWVvdXQnXSlcbiAgICB9XG5cbiAgICBpZiAob1snc3VjY2VzcyddKSB7XG4gICAgICB0aGlzLl9zdWNjZXNzSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb1snc3VjY2VzcyddLmFwcGx5KG8sIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob1snZXJyb3InXSkge1xuICAgICAgdGhpcy5fZXJyb3JIYW5kbGVycy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb1snZXJyb3InXS5hcHBseShvLCBhcmd1bWVudHMpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmIChvWydjb21wbGV0ZSddKSB7XG4gICAgICB0aGlzLl9jb21wbGV0ZUhhbmRsZXJzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICBvWydjb21wbGV0ZSddLmFwcGx5KG8sIGFyZ3VtZW50cylcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGxldGUgKHJlc3ApIHtcbiAgICAgIG9bJ3RpbWVvdXQnXSAmJiBjbGVhclRpbWVvdXQoc2VsZi50aW1lb3V0KVxuICAgICAgc2VsZi50aW1lb3V0ID0gbnVsbFxuICAgICAgd2hpbGUgKHNlbGYuX2NvbXBsZXRlSGFuZGxlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBzZWxmLl9jb21wbGV0ZUhhbmRsZXJzLnNoaWZ0KCkocmVzcClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdWNjZXNzIChyZXNwKSB7XG4gICAgICByZXNwID0gKHR5cGUgIT09ICdqc29ucCcpID8gc2VsZi5yZXF1ZXN0IDogcmVzcFxuICAgICAgLy8gdXNlIGdsb2JhbCBkYXRhIGZpbHRlciBvbiByZXNwb25zZSB0ZXh0XG4gICAgICB2YXIgZmlsdGVyZWRSZXNwb25zZSA9IGdsb2JhbFNldHVwT3B0aW9ucy5kYXRhRmlsdGVyKHJlc3AucmVzcG9uc2VUZXh0LCB0eXBlKVxuICAgICAgICAsIHIgPSBmaWx0ZXJlZFJlc3BvbnNlXG4gICAgICB0cnkge1xuICAgICAgICByZXNwLnJlc3BvbnNlVGV4dCA9IHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gY2FuJ3QgYXNzaWduIHRoaXMgaW4gSUU8PTgsIGp1c3QgaWdub3JlXG4gICAgICB9XG4gICAgICBpZiAocikge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnanNvbic6XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3AgPSB3aW4uSlNPTiA/IHdpbi5KU09OLnBhcnNlKHIpIDogZXZhbCgnKCcgKyByICsgJyknKVxuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yKHJlc3AsICdDb3VsZCBub3QgcGFyc2UgSlNPTiBpbiByZXNwb25zZScsIGVycilcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnanMnOlxuICAgICAgICAgIHJlc3AgPSBldmFsKHIpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnaHRtbCc6XG4gICAgICAgICAgcmVzcCA9IHJcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICd4bWwnOlxuICAgICAgICAgIHJlc3AgPSByZXNwLnJlc3BvbnNlWE1MXG4gICAgICAgICAgICAgICYmIHJlc3AucmVzcG9uc2VYTUwucGFyc2VFcnJvciAvLyBJRSB0cm9sb2xvXG4gICAgICAgICAgICAgICYmIHJlc3AucmVzcG9uc2VYTUwucGFyc2VFcnJvci5lcnJvckNvZGVcbiAgICAgICAgICAgICAgJiYgcmVzcC5yZXNwb25zZVhNTC5wYXJzZUVycm9yLnJlYXNvblxuICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICA6IHJlc3AucmVzcG9uc2VYTUxcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNlbGYuX3Jlc3BvbnNlQXJncy5yZXNwID0gcmVzcFxuICAgICAgc2VsZi5fZnVsZmlsbGVkID0gdHJ1ZVxuICAgICAgZm4ocmVzcClcbiAgICAgIHNlbGYuX3N1Y2Nlc3NIYW5kbGVyKHJlc3ApXG4gICAgICB3aGlsZSAoc2VsZi5fZnVsZmlsbG1lbnRIYW5kbGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJlc3AgPSBzZWxmLl9mdWxmaWxsbWVudEhhbmRsZXJzLnNoaWZ0KCkocmVzcClcbiAgICAgIH1cblxuICAgICAgY29tcGxldGUocmVzcClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcnJvcihyZXNwLCBtc2csIHQpIHtcbiAgICAgIHJlc3AgPSBzZWxmLnJlcXVlc3RcbiAgICAgIHNlbGYuX3Jlc3BvbnNlQXJncy5yZXNwID0gcmVzcFxuICAgICAgc2VsZi5fcmVzcG9uc2VBcmdzLm1zZyA9IG1zZ1xuICAgICAgc2VsZi5fcmVzcG9uc2VBcmdzLnQgPSB0XG4gICAgICBzZWxmLl9lcnJlZCA9IHRydWVcbiAgICAgIHdoaWxlIChzZWxmLl9lcnJvckhhbmRsZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc2VsZi5fZXJyb3JIYW5kbGVycy5zaGlmdCgpKHJlc3AsIG1zZywgdClcbiAgICAgIH1cbiAgICAgIGNvbXBsZXRlKHJlc3ApXG4gICAgfVxuXG4gICAgdGhpcy5yZXF1ZXN0ID0gZ2V0UmVxdWVzdC5jYWxsKHRoaXMsIHN1Y2Nlc3MsIGVycm9yKVxuICB9XG5cbiAgUmVxd2VzdC5wcm90b3R5cGUgPSB7XG4gICAgYWJvcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX2Fib3J0ZWQgPSB0cnVlXG4gICAgICB0aGlzLnJlcXVlc3QuYWJvcnQoKVxuICAgIH1cblxuICAsIHJldHJ5OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpbml0LmNhbGwodGhpcywgdGhpcy5vLCB0aGlzLmZuKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNtYWxsIGRldmlhdGlvbiBmcm9tIHRoZSBQcm9taXNlcyBBIENvbW1vbkpzIHNwZWNpZmljYXRpb25cbiAgICAgKiBodHRwOi8vd2lraS5jb21tb25qcy5vcmcvd2lraS9Qcm9taXNlcy9BXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBgdGhlbmAgd2lsbCBleGVjdXRlIHVwb24gc3VjY2Vzc2Z1bCByZXF1ZXN0c1xuICAgICAqL1xuICAsIHRoZW46IGZ1bmN0aW9uIChzdWNjZXNzLCBmYWlsKSB7XG4gICAgICBzdWNjZXNzID0gc3VjY2VzcyB8fCBmdW5jdGlvbiAoKSB7fVxuICAgICAgZmFpbCA9IGZhaWwgfHwgZnVuY3Rpb24gKCkge31cbiAgICAgIGlmICh0aGlzLl9mdWxmaWxsZWQpIHtcbiAgICAgICAgdGhpcy5fcmVzcG9uc2VBcmdzLnJlc3AgPSBzdWNjZXNzKHRoaXMuX3Jlc3BvbnNlQXJncy5yZXNwKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9lcnJlZCkge1xuICAgICAgICBmYWlsKHRoaXMuX3Jlc3BvbnNlQXJncy5yZXNwLCB0aGlzLl9yZXNwb25zZUFyZ3MubXNnLCB0aGlzLl9yZXNwb25zZUFyZ3MudClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2Z1bGZpbGxtZW50SGFuZGxlcnMucHVzaChzdWNjZXNzKVxuICAgICAgICB0aGlzLl9lcnJvckhhbmRsZXJzLnB1c2goZmFpbClcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYGFsd2F5c2Agd2lsbCBleGVjdXRlIHdoZXRoZXIgdGhlIHJlcXVlc3Qgc3VjY2VlZHMgb3IgZmFpbHNcbiAgICAgKi9cbiAgLCBhbHdheXM6IGZ1bmN0aW9uIChmbikge1xuICAgICAgaWYgKHRoaXMuX2Z1bGZpbGxlZCB8fCB0aGlzLl9lcnJlZCkge1xuICAgICAgICBmbih0aGlzLl9yZXNwb25zZUFyZ3MucmVzcClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2NvbXBsZXRlSGFuZGxlcnMucHVzaChmbilcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYGZhaWxgIHdpbGwgZXhlY3V0ZSB3aGVuIHRoZSByZXF1ZXN0IGZhaWxzXG4gICAgICovXG4gICwgZmFpbDogZnVuY3Rpb24gKGZuKSB7XG4gICAgICBpZiAodGhpcy5fZXJyZWQpIHtcbiAgICAgICAgZm4odGhpcy5fcmVzcG9uc2VBcmdzLnJlc3AsIHRoaXMuX3Jlc3BvbnNlQXJncy5tc2csIHRoaXMuX3Jlc3BvbnNlQXJncy50KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZXJyb3JIYW5kbGVycy5wdXNoKGZuKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXF3ZXN0KG8sIGZuKSB7XG4gICAgcmV0dXJuIG5ldyBSZXF3ZXN0KG8sIGZuKVxuICB9XG5cbiAgLy8gbm9ybWFsaXplIG5ld2xpbmUgdmFyaWFudHMgYWNjb3JkaW5nIHRvIHNwZWMgLT4gQ1JMRlxuICBmdW5jdGlvbiBub3JtYWxpemUocykge1xuICAgIHJldHVybiBzID8gcy5yZXBsYWNlKC9cXHI/XFxuL2csICdcXHJcXG4nKSA6ICcnXG4gIH1cblxuICBmdW5jdGlvbiBzZXJpYWwoZWwsIGNiKSB7XG4gICAgdmFyIG4gPSBlbC5uYW1lXG4gICAgICAsIHQgPSBlbC50YWdOYW1lLnRvTG93ZXJDYXNlKClcbiAgICAgICwgb3B0Q2IgPSBmdW5jdGlvbiAobykge1xuICAgICAgICAgIC8vIElFIGdpdmVzIHZhbHVlPVwiXCIgZXZlbiB3aGVyZSB0aGVyZSBpcyBubyB2YWx1ZSBhdHRyaWJ1dGVcbiAgICAgICAgICAvLyAnc3BlY2lmaWVkJyByZWY6IGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUNvcmUvY29yZS5odG1sI0lELTg2MjUyOTI3M1xuICAgICAgICAgIGlmIChvICYmICFvWydkaXNhYmxlZCddKVxuICAgICAgICAgICAgY2Iobiwgbm9ybWFsaXplKG9bJ2F0dHJpYnV0ZXMnXVsndmFsdWUnXSAmJiBvWydhdHRyaWJ1dGVzJ11bJ3ZhbHVlJ11bJ3NwZWNpZmllZCddID8gb1sndmFsdWUnXSA6IG9bJ3RleHQnXSkpXG4gICAgICAgIH1cbiAgICAgICwgY2gsIHJhLCB2YWwsIGlcblxuICAgIC8vIGRvbid0IHNlcmlhbGl6ZSBlbGVtZW50cyB0aGF0IGFyZSBkaXNhYmxlZCBvciB3aXRob3V0IGEgbmFtZVxuICAgIGlmIChlbC5kaXNhYmxlZCB8fCAhbikgcmV0dXJuXG5cbiAgICBzd2l0Y2ggKHQpIHtcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICBpZiAoIS9yZXNldHxidXR0b258aW1hZ2V8ZmlsZS9pLnRlc3QoZWwudHlwZSkpIHtcbiAgICAgICAgY2ggPSAvY2hlY2tib3gvaS50ZXN0KGVsLnR5cGUpXG4gICAgICAgIHJhID0gL3JhZGlvL2kudGVzdChlbC50eXBlKVxuICAgICAgICB2YWwgPSBlbC52YWx1ZVxuICAgICAgICAvLyBXZWJLaXQgZ2l2ZXMgdXMgXCJcIiBpbnN0ZWFkIG9mIFwib25cIiBpZiBhIGNoZWNrYm94IGhhcyBubyB2YWx1ZSwgc28gY29ycmVjdCBpdCBoZXJlXG4gICAgICAgIDsoIShjaCB8fCByYSkgfHwgZWwuY2hlY2tlZCkgJiYgY2Iobiwgbm9ybWFsaXplKGNoICYmIHZhbCA9PT0gJycgPyAnb24nIDogdmFsKSlcbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgY2Iobiwgbm9ybWFsaXplKGVsLnZhbHVlKSlcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIGlmIChlbC50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3Qtb25lJykge1xuICAgICAgICBvcHRDYihlbC5zZWxlY3RlZEluZGV4ID49IDAgPyBlbC5vcHRpb25zW2VsLnNlbGVjdGVkSW5kZXhdIDogbnVsbClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGVsLmxlbmd0aCAmJiBpIDwgZWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBlbC5vcHRpb25zW2ldLnNlbGVjdGVkICYmIG9wdENiKGVsLm9wdGlvbnNbaV0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgLy8gY29sbGVjdCB1cCBhbGwgZm9ybSBlbGVtZW50cyBmb3VuZCBmcm9tIHRoZSBwYXNzZWQgYXJndW1lbnQgZWxlbWVudHMgYWxsXG4gIC8vIHRoZSB3YXkgZG93biB0byBjaGlsZCBlbGVtZW50czsgcGFzcyBhICc8Zm9ybT4nIG9yIGZvcm0gZmllbGRzLlxuICAvLyBjYWxsZWQgd2l0aCAndGhpcyc9Y2FsbGJhY2sgdG8gdXNlIGZvciBzZXJpYWwoKSBvbiBlYWNoIGVsZW1lbnRcbiAgZnVuY3Rpb24gZWFjaEZvcm1FbGVtZW50KCkge1xuICAgIHZhciBjYiA9IHRoaXNcbiAgICAgICwgZSwgaVxuICAgICAgLCBzZXJpYWxpemVTdWJ0YWdzID0gZnVuY3Rpb24gKGUsIHRhZ3MpIHtcbiAgICAgICAgICB2YXIgaSwgaiwgZmFcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZmEgPSBlW2J5VGFnXSh0YWdzW2ldKVxuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGZhLmxlbmd0aDsgaisrKSBzZXJpYWwoZmFbal0sIGNiKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgZSA9IGFyZ3VtZW50c1tpXVxuICAgICAgaWYgKC9pbnB1dHxzZWxlY3R8dGV4dGFyZWEvaS50ZXN0KGUudGFnTmFtZSkpIHNlcmlhbChlLCBjYilcbiAgICAgIHNlcmlhbGl6ZVN1YnRhZ3MoZSwgWyAnaW5wdXQnLCAnc2VsZWN0JywgJ3RleHRhcmVhJyBdKVxuICAgIH1cbiAgfVxuXG4gIC8vIHN0YW5kYXJkIHF1ZXJ5IHN0cmluZyBzdHlsZSBzZXJpYWxpemF0aW9uXG4gIGZ1bmN0aW9uIHNlcmlhbGl6ZVF1ZXJ5U3RyaW5nKCkge1xuICAgIHJldHVybiByZXF3ZXN0LnRvUXVlcnlTdHJpbmcocmVxd2VzdC5zZXJpYWxpemVBcnJheS5hcHBseShudWxsLCBhcmd1bWVudHMpKVxuICB9XG5cbiAgLy8geyAnbmFtZSc6ICd2YWx1ZScsIC4uLiB9IHN0eWxlIHNlcmlhbGl6YXRpb25cbiAgZnVuY3Rpb24gc2VyaWFsaXplSGFzaCgpIHtcbiAgICB2YXIgaGFzaCA9IHt9XG4gICAgZWFjaEZvcm1FbGVtZW50LmFwcGx5KGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgaWYgKG5hbWUgaW4gaGFzaCkge1xuICAgICAgICBoYXNoW25hbWVdICYmICFpc0FycmF5KGhhc2hbbmFtZV0pICYmIChoYXNoW25hbWVdID0gW2hhc2hbbmFtZV1dKVxuICAgICAgICBoYXNoW25hbWVdLnB1c2godmFsdWUpXG4gICAgICB9IGVsc2UgaGFzaFtuYW1lXSA9IHZhbHVlXG4gICAgfSwgYXJndW1lbnRzKVxuICAgIHJldHVybiBoYXNoXG4gIH1cblxuICAvLyBbIHsgbmFtZTogJ25hbWUnLCB2YWx1ZTogJ3ZhbHVlJyB9LCAuLi4gXSBzdHlsZSBzZXJpYWxpemF0aW9uXG4gIHJlcXdlc3Quc2VyaWFsaXplQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyciA9IFtdXG4gICAgZWFjaEZvcm1FbGVtZW50LmFwcGx5KGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgICAgYXJyLnB1c2goe25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0pXG4gICAgfSwgYXJndW1lbnRzKVxuICAgIHJldHVybiBhcnJcbiAgfVxuXG4gIHJlcXdlc3Quc2VyaWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgICB2YXIgb3B0LCBmblxuICAgICAgLCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKVxuXG4gICAgb3B0ID0gYXJncy5wb3AoKVxuICAgIG9wdCAmJiBvcHQubm9kZVR5cGUgJiYgYXJncy5wdXNoKG9wdCkgJiYgKG9wdCA9IG51bGwpXG4gICAgb3B0ICYmIChvcHQgPSBvcHQudHlwZSlcblxuICAgIGlmIChvcHQgPT0gJ21hcCcpIGZuID0gc2VyaWFsaXplSGFzaFxuICAgIGVsc2UgaWYgKG9wdCA9PSAnYXJyYXknKSBmbiA9IHJlcXdlc3Quc2VyaWFsaXplQXJyYXlcbiAgICBlbHNlIGZuID0gc2VyaWFsaXplUXVlcnlTdHJpbmdcblxuICAgIHJldHVybiBmbi5hcHBseShudWxsLCBhcmdzKVxuICB9XG5cbiAgcmVxd2VzdC50b1F1ZXJ5U3RyaW5nID0gZnVuY3Rpb24gKG8sIHRyYWQpIHtcbiAgICB2YXIgcHJlZml4LCBpXG4gICAgICAsIHRyYWRpdGlvbmFsID0gdHJhZCB8fCBmYWxzZVxuICAgICAgLCBzID0gW11cbiAgICAgICwgZW5jID0gZW5jb2RlVVJJQ29tcG9uZW50XG4gICAgICAsIGFkZCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgLy8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCByZXR1cm4gaXRzIHZhbHVlXG4gICAgICAgICAgdmFsdWUgPSAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHZhbHVlKSA/IHZhbHVlKCkgOiAodmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWUpXG4gICAgICAgICAgc1tzLmxlbmd0aF0gPSBlbmMoa2V5KSArICc9JyArIGVuYyh2YWx1ZSlcbiAgICAgICAgfVxuICAgIC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG4gICAgaWYgKGlzQXJyYXkobykpIHtcbiAgICAgIGZvciAoaSA9IDA7IG8gJiYgaSA8IG8ubGVuZ3RoOyBpKyspIGFkZChvW2ldWyduYW1lJ10sIG9baV1bJ3ZhbHVlJ10pXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG4gICAgICAvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cbiAgICAgIGZvciAocHJlZml4IGluIG8pIHtcbiAgICAgICAgaWYgKG8uaGFzT3duUHJvcGVydHkocHJlZml4KSkgYnVpbGRQYXJhbXMocHJlZml4LCBvW3ByZWZpeF0sIHRyYWRpdGlvbmFsLCBhZGQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc3BhY2VzIHNob3VsZCBiZSArIGFjY29yZGluZyB0byBzcGVjXG4gICAgcmV0dXJuIHMuam9pbignJicpLnJlcGxhY2UoLyUyMC9nLCAnKycpXG4gIH1cblxuICBmdW5jdGlvbiBidWlsZFBhcmFtcyhwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCkge1xuICAgIHZhciBuYW1lLCBpLCB2XG4gICAgICAsIHJicmFja2V0ID0gL1xcW1xcXSQvXG5cbiAgICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgICAvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cbiAgICAgIGZvciAoaSA9IDA7IG9iaiAmJiBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHYgPSBvYmpbaV1cbiAgICAgICAgaWYgKHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QocHJlZml4KSkge1xuICAgICAgICAgIC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cbiAgICAgICAgICBhZGQocHJlZml4LCB2KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJ1aWxkUGFyYW1zKHByZWZpeCArICdbJyArICh0eXBlb2YgdiA9PT0gJ29iamVjdCcgPyBpIDogJycpICsgJ10nLCB2LCB0cmFkaXRpb25hbCwgYWRkKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvYmogJiYgb2JqLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICAvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG4gICAgICBmb3IgKG5hbWUgaW4gb2JqKSB7XG4gICAgICAgIGJ1aWxkUGFyYW1zKHByZWZpeCArICdbJyArIG5hbWUgKyAnXScsIG9ialtuYW1lXSwgdHJhZGl0aW9uYWwsIGFkZClcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG4gICAgICBhZGQocHJlZml4LCBvYmopXG4gICAgfVxuICB9XG5cbiAgcmVxd2VzdC5nZXRjYWxsYmFja1ByZWZpeCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2FsbGJhY2tQcmVmaXhcbiAgfVxuXG4gIC8vIGpRdWVyeSBhbmQgWmVwdG8gY29tcGF0aWJpbGl0eSwgZGlmZmVyZW5jZXMgY2FuIGJlIHJlbWFwcGVkIGhlcmUgc28geW91IGNhbiBjYWxsXG4gIC8vIC5hamF4LmNvbXBhdChvcHRpb25zLCBjYWxsYmFjaylcbiAgcmVxd2VzdC5jb21wYXQgPSBmdW5jdGlvbiAobywgZm4pIHtcbiAgICBpZiAobykge1xuICAgICAgb1sndHlwZSddICYmIChvWydtZXRob2QnXSA9IG9bJ3R5cGUnXSkgJiYgZGVsZXRlIG9bJ3R5cGUnXVxuICAgICAgb1snZGF0YVR5cGUnXSAmJiAob1sndHlwZSddID0gb1snZGF0YVR5cGUnXSlcbiAgICAgIG9bJ2pzb25wQ2FsbGJhY2snXSAmJiAob1snanNvbnBDYWxsYmFja05hbWUnXSA9IG9bJ2pzb25wQ2FsbGJhY2snXSkgJiYgZGVsZXRlIG9bJ2pzb25wQ2FsbGJhY2snXVxuICAgICAgb1snanNvbnAnXSAmJiAob1snanNvbnBDYWxsYmFjayddID0gb1snanNvbnAnXSlcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSZXF3ZXN0KG8sIGZuKVxuICB9XG5cbiAgcmVxd2VzdC5hamF4U2V0dXAgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gICAgZm9yICh2YXIgayBpbiBvcHRpb25zKSB7XG4gICAgICBnbG9iYWxTZXR1cE9wdGlvbnNba10gPSBvcHRpb25zW2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcXdlc3Rcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBoYXNLZXlzXG5cbmZ1bmN0aW9uIGhhc0tleXMoc291cmNlKSB7XG4gICAgcmV0dXJuIHNvdXJjZSAhPT0gbnVsbCAmJlxuICAgICAgICAodHlwZW9mIHNvdXJjZSA9PT0gXCJvYmplY3RcIiB8fFxuICAgICAgICB0eXBlb2Ygc291cmNlID09PSBcImZ1bmN0aW9uXCIpXG59XG4iLCJ2YXIgS2V5cyA9IHJlcXVpcmUoXCJvYmplY3Qta2V5c1wiKVxudmFyIGhhc0tleXMgPSByZXF1aXJlKFwiLi9oYXMta2V5c1wiKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4dGVuZFxuXG5mdW5jdGlvbiBleHRlbmQoKSB7XG4gICAgdmFyIHRhcmdldCA9IHt9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldXG5cbiAgICAgICAgaWYgKCFoYXNLZXlzKHNvdXJjZSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IEtleXMoc291cmNlKVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwga2V5cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBrZXlzW2pdXG4gICAgICAgICAgICB0YXJnZXRbbmFtZV0gPSBzb3VyY2VbbmFtZV1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRcbn1cbiIsInZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIGlzRnVuYyA9ICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgIShmbiBpbnN0YW5jZW9mIFJlZ0V4cCkpIHx8IHRvU3RyaW5nLmNhbGwoZm4pID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXHRpZiAoIWlzRnVuYyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuXHRcdGlzRnVuYyA9IGZuID09PSB3aW5kb3cuc2V0VGltZW91dCB8fCBmbiA9PT0gd2luZG93LmFsZXJ0IHx8IGZuID09PSB3aW5kb3cuY29uZmlybSB8fCBmbiA9PT0gd2luZG93LnByb21wdDtcblx0fVxuXHRyZXR1cm4gaXNGdW5jO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcblx0aWYgKCFpc0Z1bmN0aW9uKGZuKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2l0ZXJhdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHR9XG5cdHZhciBpLCBrLFxuXHRcdGlzU3RyaW5nID0gdHlwZW9mIG9iaiA9PT0gJ3N0cmluZycsXG5cdFx0bCA9IG9iai5sZW5ndGgsXG5cdFx0Y29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogbnVsbDtcblx0aWYgKGwgPT09ICtsKSB7XG5cdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHRcdFx0aWYgKGNvbnRleHQgPT09IG51bGwpIHtcblx0XHRcdFx0Zm4oaXNTdHJpbmcgPyBvYmouY2hhckF0KGkpIDogb2JqW2ldLCBpLCBvYmopO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm4uY2FsbChjb250ZXh0LCBpc1N0cmluZyA/IG9iai5jaGFyQXQoaSkgOiBvYmpbaV0sIGksIG9iaik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGZvciAoayBpbiBvYmopIHtcblx0XHRcdGlmIChoYXNPd24uY2FsbChvYmosIGspKSB7XG5cdFx0XHRcdGlmIChjb250ZXh0ID09PSBudWxsKSB7XG5cdFx0XHRcdFx0Zm4ob2JqW2tdLCBrLCBvYmopO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGZuLmNhbGwoY29udGV4dCwgb2JqW2tdLCBrLCBvYmopO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IHJlcXVpcmUoJy4vc2hpbScpO1xuXG4iLCJ2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdHZhciBzdHIgPSB0b1N0cmluZy5jYWxsKHZhbHVlKTtcblx0dmFyIGlzQXJndW1lbnRzID0gc3RyID09PSAnW29iamVjdCBBcmd1bWVudHNdJztcblx0aWYgKCFpc0FyZ3VtZW50cykge1xuXHRcdGlzQXJndW1lbnRzID0gc3RyICE9PSAnW29iamVjdCBBcnJheV0nXG5cdFx0XHQmJiB2YWx1ZSAhPT0gbnVsbFxuXHRcdFx0JiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0J1xuXHRcdFx0JiYgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcidcblx0XHRcdCYmIHZhbHVlLmxlbmd0aCA+PSAwXG5cdFx0XHQmJiB0b1N0cmluZy5jYWxsKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdH1cblx0cmV0dXJuIGlzQXJndW1lbnRzO1xufTtcblxuIiwiKGZ1bmN0aW9uICgpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0Ly8gbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL2VzNS1zaGltXG5cdHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuXHRcdHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcblx0XHRmb3JFYWNoID0gcmVxdWlyZSgnLi9mb3JlYWNoJyksXG5cdFx0aXNBcmdzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuXHRcdGhhc0RvbnRFbnVtQnVnID0gISh7J3RvU3RyaW5nJzogbnVsbH0pLnByb3BlcnR5SXNFbnVtZXJhYmxlKCd0b1N0cmluZycpLFxuXHRcdGhhc1Byb3RvRW51bUJ1ZyA9IChmdW5jdGlvbiAoKSB7fSkucHJvcGVydHlJc0VudW1lcmFibGUoJ3Byb3RvdHlwZScpLFxuXHRcdGRvbnRFbnVtcyA9IFtcblx0XHRcdFwidG9TdHJpbmdcIixcblx0XHRcdFwidG9Mb2NhbGVTdHJpbmdcIixcblx0XHRcdFwidmFsdWVPZlwiLFxuXHRcdFx0XCJoYXNPd25Qcm9wZXJ0eVwiLFxuXHRcdFx0XCJpc1Byb3RvdHlwZU9mXCIsXG5cdFx0XHRcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIsXG5cdFx0XHRcImNvbnN0cnVjdG9yXCJcblx0XHRdLFxuXHRcdGtleXNTaGltO1xuXG5cdGtleXNTaGltID0gZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcblx0XHR2YXIgaXNPYmplY3QgPSBvYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcsXG5cdFx0XHRpc0Z1bmN0aW9uID0gdG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBGdW5jdGlvbl0nLFxuXHRcdFx0aXNBcmd1bWVudHMgPSBpc0FyZ3Mob2JqZWN0KSxcblx0XHRcdHRoZUtleXMgPSBbXTtcblxuXHRcdGlmICghaXNPYmplY3QgJiYgIWlzRnVuY3Rpb24gJiYgIWlzQXJndW1lbnRzKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0LmtleXMgY2FsbGVkIG9uIGEgbm9uLW9iamVjdFwiKTtcblx0XHR9XG5cblx0XHRpZiAoaXNBcmd1bWVudHMpIHtcblx0XHRcdGZvckVhY2gob2JqZWN0LCBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKHZhbHVlKTtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgbmFtZSxcblx0XHRcdFx0c2tpcFByb3RvID0gaGFzUHJvdG9FbnVtQnVnICYmIGlzRnVuY3Rpb247XG5cblx0XHRcdGZvciAobmFtZSBpbiBvYmplY3QpIHtcblx0XHRcdFx0aWYgKCEoc2tpcFByb3RvICYmIG5hbWUgPT09ICdwcm90b3R5cGUnKSAmJiBoYXMuY2FsbChvYmplY3QsIG5hbWUpKSB7XG5cdFx0XHRcdFx0dGhlS2V5cy5wdXNoKG5hbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGhhc0RvbnRFbnVtQnVnKSB7XG5cdFx0XHR2YXIgY3RvciA9IG9iamVjdC5jb25zdHJ1Y3Rvcixcblx0XHRcdFx0c2tpcENvbnN0cnVjdG9yID0gY3RvciAmJiBjdG9yLnByb3RvdHlwZSA9PT0gb2JqZWN0O1xuXG5cdFx0XHRmb3JFYWNoKGRvbnRFbnVtcywgZnVuY3Rpb24gKGRvbnRFbnVtKSB7XG5cdFx0XHRcdGlmICghKHNraXBDb25zdHJ1Y3RvciAmJiBkb250RW51bSA9PT0gJ2NvbnN0cnVjdG9yJykgJiYgaGFzLmNhbGwob2JqZWN0LCBkb250RW51bSkpIHtcblx0XHRcdFx0XHR0aGVLZXlzLnB1c2goZG9udEVudW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoZUtleXM7XG5cdH07XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBrZXlzU2hpbTtcbn0oKSk7XG5cbiIsIi8qIVxuICAqIEJlYW4gLSBjb3B5cmlnaHQgKGMpIEphY29iIFRob3JudG9uIDIwMTEtMjAxMlxuICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYXQvYmVhblxuICAqIE1JVCBsaWNlbnNlXG4gICovXG4oZnVuY3Rpb24gKG5hbWUsIGNvbnRleHQsIGRlZmluaXRpb24pIHtcbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIG1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbigpXG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSBkZWZpbmUoZGVmaW5pdGlvbilcbiAgZWxzZSBjb250ZXh0W25hbWVdID0gZGVmaW5pdGlvbigpXG59KSgnYmVhbicsIHRoaXMsIGZ1bmN0aW9uIChuYW1lLCBjb250ZXh0KSB7XG4gIG5hbWUgICAgPSBuYW1lICAgIHx8ICdiZWFuJ1xuICBjb250ZXh0ID0gY29udGV4dCB8fCB0aGlzXG5cbiAgdmFyIHdpbiAgICAgICAgICAgID0gd2luZG93XG4gICAgLCBvbGQgICAgICAgICAgICA9IGNvbnRleHRbbmFtZV1cbiAgICAsIG5hbWVzcGFjZVJlZ2V4ID0gL1teXFwuXSooPz1cXC4uKilcXC58LiovXG4gICAgLCBuYW1lUmVnZXggICAgICA9IC9cXC4uKi9cbiAgICAsIGFkZEV2ZW50ICAgICAgID0gJ2FkZEV2ZW50TGlzdGVuZXInXG4gICAgLCByZW1vdmVFdmVudCAgICA9ICdyZW1vdmVFdmVudExpc3RlbmVyJ1xuICAgICwgZG9jICAgICAgICAgICAgPSBkb2N1bWVudCB8fCB7fVxuICAgICwgcm9vdCAgICAgICAgICAgPSBkb2MuZG9jdW1lbnRFbGVtZW50IHx8IHt9XG4gICAgLCBXM0NfTU9ERUwgICAgICA9IHJvb3RbYWRkRXZlbnRdXG4gICAgLCBldmVudFN1cHBvcnQgICA9IFczQ19NT0RFTCA/IGFkZEV2ZW50IDogJ2F0dGFjaEV2ZW50J1xuICAgICwgT05FICAgICAgICAgICAgPSB7fSAvLyBzaW5nbGV0b24gZm9yIHF1aWNrIG1hdGNoaW5nIG1ha2luZyBhZGQoKSBkbyBvbmUoKVxuXG4gICAgLCBzbGljZSAgICAgICAgICA9IEFycmF5LnByb3RvdHlwZS5zbGljZVxuICAgICwgc3RyMmFyciAgICAgICAgPSBmdW5jdGlvbiAocywgZCkgeyByZXR1cm4gcy5zcGxpdChkIHx8ICcgJykgfVxuICAgICwgaXNTdHJpbmcgICAgICAgPSBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG8gPT0gJ3N0cmluZycgfVxuICAgICwgaXNGdW5jdGlvbiAgICAgPSBmdW5jdGlvbiAobykgeyByZXR1cm4gdHlwZW9mIG8gPT0gJ2Z1bmN0aW9uJyB9XG5cbiAgICAgIC8vIGV2ZW50cyB0aGF0IHdlIGNvbnNpZGVyIHRvIGJlICduYXRpdmUnLCBhbnl0aGluZyBub3QgaW4gdGhpcyBsaXN0IHdpbGxcbiAgICAgIC8vIGJlIHRyZWF0ZWQgYXMgYSBjdXN0b20gZXZlbnRcbiAgICAsIHN0YW5kYXJkTmF0aXZlRXZlbnRzID1cbiAgICAgICAgJ2NsaWNrIGRibGNsaWNrIG1vdXNldXAgbW91c2Vkb3duIGNvbnRleHRtZW51ICcgICAgICAgICAgICAgICAgICArIC8vIG1vdXNlIGJ1dHRvbnNcbiAgICAgICAgJ21vdXNld2hlZWwgbW91c2VtdWx0aXdoZWVsIERPTU1vdXNlU2Nyb2xsICcgICAgICAgICAgICAgICAgICAgICArIC8vIG1vdXNlIHdoZWVsXG4gICAgICAgICdtb3VzZW92ZXIgbW91c2VvdXQgbW91c2Vtb3ZlIHNlbGVjdHN0YXJ0IHNlbGVjdGVuZCAnICAgICAgICAgICAgKyAvLyBtb3VzZSBtb3ZlbWVudFxuICAgICAgICAna2V5ZG93biBrZXlwcmVzcyBrZXl1cCAnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgLy8ga2V5Ym9hcmRcbiAgICAgICAgJ29yaWVudGF0aW9uY2hhbmdlICcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIC8vIG1vYmlsZVxuICAgICAgICAnZm9jdXMgYmx1ciBjaGFuZ2UgcmVzZXQgc2VsZWN0IHN1Ym1pdCAnICAgICAgICAgICAgICAgICAgICAgICAgICsgLy8gZm9ybSBlbGVtZW50c1xuICAgICAgICAnbG9hZCB1bmxvYWQgYmVmb3JldW5sb2FkIHJlc2l6ZSBtb3ZlIERPTUNvbnRlbnRMb2FkZWQgJyAgICAgICAgICsgLy8gd2luZG93XG4gICAgICAgICdyZWFkeXN0YXRlY2hhbmdlIG1lc3NhZ2UgJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAvLyB3aW5kb3dcbiAgICAgICAgJ2Vycm9yIGFib3J0IHNjcm9sbCAnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1pc2NcbiAgICAgIC8vIGVsZW1lbnQuZmlyZUV2ZW50KCdvblhZWicuLi4gaXMgbm90IGZvcmdpdmluZyBpZiB3ZSB0cnkgdG8gZmlyZSBhbiBldmVudFxuICAgICAgLy8gdGhhdCBkb2Vzbid0IGFjdHVhbGx5IGV4aXN0LCBzbyBtYWtlIHN1cmUgd2Ugb25seSBkbyB0aGVzZSBvbiBuZXdlciBicm93c2Vyc1xuICAgICwgdzNjTmF0aXZlRXZlbnRzID1cbiAgICAgICAgJ3Nob3cgJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIC8vIG1vdXNlIGJ1dHRvbnNcbiAgICAgICAgJ2lucHV0IGludmFsaWQgJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIC8vIGZvcm0gZWxlbWVudHNcbiAgICAgICAgJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsICcgICAgICAgICAgICAgICAgICAgICArIC8vIHRvdWNoXG4gICAgICAgICdnZXN0dXJlc3RhcnQgZ2VzdHVyZWNoYW5nZSBnZXN0dXJlZW5kICcgICAgICAgICAgICAgICAgICAgICAgICAgKyAvLyBnZXN0dXJlXG4gICAgICAgICd0ZXh0aW5wdXQnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAvLyBUZXh0RXZlbnRcbiAgICAgICAgJ3JlYWR5c3RhdGVjaGFuZ2UgcGFnZXNob3cgcGFnZWhpZGUgcG9wc3RhdGUgJyAgICAgICAgICAgICAgICAgICArIC8vIHdpbmRvd1xuICAgICAgICAnaGFzaGNoYW5nZSBvZmZsaW5lIG9ubGluZSAnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgLy8gd2luZG93XG4gICAgICAgICdhZnRlcnByaW50IGJlZm9yZXByaW50ICcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAvLyBwcmludGluZ1xuICAgICAgICAnZHJhZ3N0YXJ0IGRyYWdlbnRlciBkcmFnb3ZlciBkcmFnbGVhdmUgZHJhZyBkcm9wIGRyYWdlbmQgJyAgICAgICsgLy8gZG5kXG4gICAgICAgICdsb2Fkc3RhcnQgcHJvZ3Jlc3Mgc3VzcGVuZCBlbXB0aWVkIHN0YWxsZWQgbG9hZG1ldGFkYXRhICcgICAgICAgKyAvLyBtZWRpYVxuICAgICAgICAnbG9hZGVkZGF0YSBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIHBsYXlpbmcgd2FpdGluZyBzZWVraW5nICcgICAgICsgLy8gbWVkaWFcbiAgICAgICAgJ3NlZWtlZCBlbmRlZCBkdXJhdGlvbmNoYW5nZSB0aW1ldXBkYXRlIHBsYXkgcGF1c2UgcmF0ZWNoYW5nZSAnICArIC8vIG1lZGlhXG4gICAgICAgICd2b2x1bWVjaGFuZ2UgY3VlY2hhbmdlICcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAvLyBtZWRpYVxuICAgICAgICAnY2hlY2tpbmcgbm91cGRhdGUgZG93bmxvYWRpbmcgY2FjaGVkIHVwZGF0ZXJlYWR5IG9ic29sZXRlICcgICAgICAgLy8gYXBwY2FjaGVcblxuICAgICAgLy8gY29udmVydCB0byBhIGhhc2ggZm9yIHF1aWNrIGxvb2t1cHNcbiAgICAsIG5hdGl2ZUV2ZW50cyA9IChmdW5jdGlvbiAoaGFzaCwgZXZlbnRzLCBpKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIGV2ZW50c1tpXSAmJiAoaGFzaFtldmVudHNbaV1dID0gMSlcbiAgICAgICAgcmV0dXJuIGhhc2hcbiAgICAgIH0oe30sIHN0cjJhcnIoc3RhbmRhcmROYXRpdmVFdmVudHMgKyAoVzNDX01PREVMID8gdzNjTmF0aXZlRXZlbnRzIDogJycpKSkpXG5cbiAgICAgIC8vIGN1c3RvbSBldmVudHMgYXJlIGV2ZW50cyB0aGF0IHdlICpmYWtlKiwgdGhleSBhcmUgbm90IHByb3ZpZGVkIG5hdGl2ZWx5IGJ1dFxuICAgICAgLy8gd2UgY2FuIHVzZSBuYXRpdmUgZXZlbnRzIHRvIGdlbmVyYXRlIHRoZW1cbiAgICAsIGN1c3RvbUV2ZW50cyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpc0FuY2VzdG9yID0gJ2NvbXBhcmVEb2N1bWVudFBvc2l0aW9uJyBpbiByb290XG4gICAgICAgICAgICAgID8gZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiAoY29udGFpbmVyLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGVsZW1lbnQpICYgMTYpID09PSAxNlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgOiAnY29udGFpbnMnIGluIHJvb3RcbiAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uIChlbGVtZW50LCBjb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyID0gY29udGFpbmVyLm5vZGVUeXBlID09PSA5IHx8IGNvbnRhaW5lciA9PT0gd2luZG93ID8gcm9vdCA6IGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29udGFpbmVyICE9PSBlbGVtZW50ICYmIGNvbnRhaW5lci5jb250YWlucyhlbGVtZW50KVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSkgaWYgKGVsZW1lbnQgPT09IGNvbnRhaW5lcikgcmV0dXJuIDFcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDBcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAsIGNoZWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldFxuICAgICAgICAgICAgICByZXR1cm4gIXJlbGF0ZWRcbiAgICAgICAgICAgICAgICA/IHJlbGF0ZWQgPT0gbnVsbFxuICAgICAgICAgICAgICAgIDogKHJlbGF0ZWQgIT09IHRoaXMgJiYgcmVsYXRlZC5wcmVmaXggIT09ICd4dWwnICYmICEvZG9jdW1lbnQvLnRlc3QodGhpcy50b1N0cmluZygpKVxuICAgICAgICAgICAgICAgICAgICAmJiAhaXNBbmNlc3RvcihyZWxhdGVkLCB0aGlzKSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbW91c2VlbnRlcjogeyBiYXNlOiAnbW91c2VvdmVyJywgY29uZGl0aW9uOiBjaGVjayB9XG4gICAgICAgICAgLCBtb3VzZWxlYXZlOiB7IGJhc2U6ICdtb3VzZW91dCcsIGNvbmRpdGlvbjogY2hlY2sgfVxuICAgICAgICAgICwgbW91c2V3aGVlbDogeyBiYXNlOiAvRmlyZWZveC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSA/ICdET01Nb3VzZVNjcm9sbCcgOiAnbW91c2V3aGVlbCcgfVxuICAgICAgICB9XG4gICAgICB9KCkpXG5cbiAgICAgIC8vIHdlIHByb3ZpZGUgYSBjb25zaXN0ZW50IEV2ZW50IG9iamVjdCBhY3Jvc3MgYnJvd3NlcnMgYnkgdGFraW5nIHRoZSBhY3R1YWwgRE9NXG4gICAgICAvLyBldmVudCBvYmplY3QgYW5kIGdlbmVyYXRpbmcgYSBuZXcgb25lIGZyb20gaXRzIHByb3BlcnRpZXMuXG4gICAgLCBFdmVudCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBhIHdoaXRlbGlzdCBvZiBwcm9wZXJ0aWVzIChmb3IgZGlmZmVyZW50IGV2ZW50IHR5cGVzKSB0ZWxscyB1cyB3aGF0IHRvIGNoZWNrIGZvciBhbmQgY29weVxuICAgICAgICB2YXIgY29tbW9uUHJvcHMgID0gc3RyMmFycignYWx0S2V5IGF0dHJDaGFuZ2UgYXR0ck5hbWUgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCAnICtcbiAgICAgICAgICAgICAgJ2RldGFpbCBldmVudFBoYXNlIGdldE1vZGlmaWVyU3RhdGUgaXNUcnVzdGVkIG1ldGFLZXkgcmVsYXRlZE5vZGUgcmVsYXRlZFRhcmdldCBzaGlmdEtleSAnICArXG4gICAgICAgICAgICAgICdzcmNFbGVtZW50IHRhcmdldCB0aW1lU3RhbXAgdHlwZSB2aWV3IHdoaWNoIHByb3BlcnR5TmFtZScpXG4gICAgICAgICAgLCBtb3VzZVByb3BzICAgPSBjb21tb25Qcm9wcy5jb25jYXQoc3RyMmFycignYnV0dG9uIGJ1dHRvbnMgY2xpZW50WCBjbGllbnRZIGRhdGFUcmFuc2ZlciAnICAgICAgK1xuICAgICAgICAgICAgICAnZnJvbUVsZW1lbnQgb2Zmc2V0WCBvZmZzZXRZIHBhZ2VYIHBhZ2VZIHNjcmVlblggc2NyZWVuWSB0b0VsZW1lbnQnKSlcbiAgICAgICAgICAsIG1vdXNlV2hlZWxQcm9wcyA9IG1vdXNlUHJvcHMuY29uY2F0KHN0cjJhcnIoJ3doZWVsRGVsdGEgd2hlZWxEZWx0YVggd2hlZWxEZWx0YVkgd2hlZWxEZWx0YVogJyArXG4gICAgICAgICAgICAgICdheGlzJykpIC8vICdheGlzJyBpcyBGRiBzcGVjaWZpY1xuICAgICAgICAgICwga2V5UHJvcHMgICAgID0gY29tbW9uUHJvcHMuY29uY2F0KHN0cjJhcnIoJ2NoYXIgY2hhckNvZGUga2V5IGtleUNvZGUga2V5SWRlbnRpZmllciAnICAgICAgICAgICtcbiAgICAgICAgICAgICAgJ2tleUxvY2F0aW9uIGxvY2F0aW9uJykpXG4gICAgICAgICAgLCB0ZXh0UHJvcHMgICAgPSBjb21tb25Qcm9wcy5jb25jYXQoc3RyMmFycignZGF0YScpKVxuICAgICAgICAgICwgdG91Y2hQcm9wcyAgID0gY29tbW9uUHJvcHMuY29uY2F0KHN0cjJhcnIoJ3RvdWNoZXMgdGFyZ2V0VG91Y2hlcyBjaGFuZ2VkVG91Y2hlcyBzY2FsZSByb3RhdGlvbicpKVxuICAgICAgICAgICwgbWVzc2FnZVByb3BzID0gY29tbW9uUHJvcHMuY29uY2F0KHN0cjJhcnIoJ2RhdGEgb3JpZ2luIHNvdXJjZScpKVxuICAgICAgICAgICwgc3RhdGVQcm9wcyAgID0gY29tbW9uUHJvcHMuY29uY2F0KHN0cjJhcnIoJ3N0YXRlJykpXG4gICAgICAgICAgLCBvdmVyT3V0UmVnZXggPSAvb3ZlcnxvdXQvXG4gICAgICAgICAgICAvLyBzb21lIGV2ZW50IHR5cGVzIG5lZWQgc3BlY2lhbCBoYW5kbGluZyBhbmQgc29tZSBuZWVkIHNwZWNpYWwgcHJvcGVydGllcywgZG8gdGhhdCBhbGwgaGVyZVxuICAgICAgICAgICwgdHlwZUZpeGVycyAgID0gW1xuICAgICAgICAgICAgICAgIHsgLy8ga2V5IGV2ZW50c1xuICAgICAgICAgICAgICAgICAgICByZWc6IC9rZXkvaVxuICAgICAgICAgICAgICAgICAgLCBmaXg6IGZ1bmN0aW9uIChldmVudCwgbmV3RXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBuZXdFdmVudC5rZXlDb2RlID0gZXZlbnQua2V5Q29kZSB8fCBldmVudC53aGljaFxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXlQcm9wc1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAsIHsgLy8gbW91c2UgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgIHJlZzogL2NsaWNrfG1vdXNlKD8hKC4qd2hlZWx8c2Nyb2xsKSl8bWVudXxkcmFnfGRyb3AvaVxuICAgICAgICAgICAgICAgICAgLCBmaXg6IGZ1bmN0aW9uIChldmVudCwgbmV3RXZlbnQsIHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBuZXdFdmVudC5yaWdodENsaWNrID0gZXZlbnQud2hpY2ggPT09IDMgfHwgZXZlbnQuYnV0dG9uID09PSAyXG4gICAgICAgICAgICAgICAgICAgICAgbmV3RXZlbnQucG9zID0geyB4OiAwLCB5OiAwIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQucGFnZVggfHwgZXZlbnQucGFnZVkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0V2ZW50LmNsaWVudFggPSBldmVudC5wYWdlWFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RXZlbnQuY2xpZW50WSA9IGV2ZW50LnBhZ2VZXG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5jbGllbnRYIHx8IGV2ZW50LmNsaWVudFkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0V2ZW50LmNsaWVudFggPSBldmVudC5jbGllbnRYICsgZG9jLmJvZHkuc2Nyb2xsTGVmdCArIHJvb3Quc2Nyb2xsTGVmdFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RXZlbnQuY2xpZW50WSA9IGV2ZW50LmNsaWVudFkgKyBkb2MuYm9keS5zY3JvbGxUb3AgKyByb290LnNjcm9sbFRvcFxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBpZiAob3Zlck91dFJlZ2V4LnRlc3QodHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0V2ZW50LnJlbGF0ZWRUYXJnZXQgPSBldmVudC5yZWxhdGVkVGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGV2ZW50Wyh0eXBlID09ICdtb3VzZW92ZXInID8gJ2Zyb20nIDogJ3RvJykgKyAnRWxlbWVudCddXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtb3VzZVByb3BzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICwgeyAvLyBtb3VzZSB3aGVlbCBldmVudHNcbiAgICAgICAgICAgICAgICAgICAgcmVnOiAvbW91c2UuKih3aGVlbHxzY3JvbGwpL2lcbiAgICAgICAgICAgICAgICAgICwgZml4OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtb3VzZVdoZWVsUHJvcHMgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLCB7IC8vIFRleHRFdmVudFxuICAgICAgICAgICAgICAgICAgICByZWc6IC9edGV4dC9pXG4gICAgICAgICAgICAgICAgICAsIGZpeDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGV4dFByb3BzIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICwgeyAvLyB0b3VjaCBhbmQgZ2VzdHVyZSBldmVudHNcbiAgICAgICAgICAgICAgICAgICAgcmVnOiAvXnRvdWNofF5nZXN0dXJlL2lcbiAgICAgICAgICAgICAgICAgICwgZml4OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0b3VjaFByb3BzIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICwgeyAvLyBtZXNzYWdlIGV2ZW50c1xuICAgICAgICAgICAgICAgICAgICByZWc6IC9ebWVzc2FnZSQvaVxuICAgICAgICAgICAgICAgICAgLCBmaXg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lc3NhZ2VQcm9wcyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAsIHsgLy8gcG9wc3RhdGUgZXZlbnRzXG4gICAgICAgICAgICAgICAgICAgIHJlZzogL15wb3BzdGF0ZSQvaVxuICAgICAgICAgICAgICAgICAgLCBmaXg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0YXRlUHJvcHMgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLCB7IC8vIGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZWc6IC8uKi9cbiAgICAgICAgICAgICAgICAgICwgZml4OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb21tb25Qcm9wcyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICAgICwgdHlwZUZpeGVyTWFwID0ge30gLy8gdXNlZCB0byBtYXAgZXZlbnQgdHlwZXMgdG8gZml4ZXIgZnVuY3Rpb25zIChhYm92ZSksIGEgYmFzaWMgY2FjaGUgbWVjaGFuaXNtXG5cbiAgICAgICAgICAsIEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50LCBlbGVtZW50LCBpc05hdGl2ZSkge1xuICAgICAgICAgICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVyblxuICAgICAgICAgICAgICBldmVudCA9IGV2ZW50IHx8ICgoZWxlbWVudC5vd25lckRvY3VtZW50IHx8IGVsZW1lbnQuZG9jdW1lbnQgfHwgZWxlbWVudCkucGFyZW50V2luZG93IHx8IHdpbikuZXZlbnRcbiAgICAgICAgICAgICAgdGhpcy5vcmlnaW5hbEV2ZW50ID0gZXZlbnRcbiAgICAgICAgICAgICAgdGhpcy5pc05hdGl2ZSAgICAgICA9IGlzTmF0aXZlXG4gICAgICAgICAgICAgIHRoaXMuaXNCZWFuICAgICAgICAgPSB0cnVlXG5cbiAgICAgICAgICAgICAgaWYgKCFldmVudCkgcmV0dXJuXG5cbiAgICAgICAgICAgICAgdmFyIHR5cGUgICA9IGV2ZW50LnR5cGVcbiAgICAgICAgICAgICAgICAsIHRhcmdldCA9IGV2ZW50LnRhcmdldCB8fCBldmVudC5zcmNFbGVtZW50XG4gICAgICAgICAgICAgICAgLCBpLCBsLCBwLCBwcm9wcywgZml4ZXJcblxuICAgICAgICAgICAgICB0aGlzLnRhcmdldCA9IHRhcmdldCAmJiB0YXJnZXQubm9kZVR5cGUgPT09IDMgPyB0YXJnZXQucGFyZW50Tm9kZSA6IHRhcmdldFxuXG4gICAgICAgICAgICAgIGlmIChpc05hdGl2ZSkgeyAvLyB3ZSBvbmx5IG5lZWQgYmFzaWMgYXVnbWVudGF0aW9uIG9uIGN1c3RvbSBldmVudHMsIHRoZSByZXN0IGV4cGVuc2l2ZSAmIHBvaW50bGVzc1xuICAgICAgICAgICAgICAgIGZpeGVyID0gdHlwZUZpeGVyTWFwW3R5cGVdXG4gICAgICAgICAgICAgICAgaWYgKCFmaXhlcikgeyAvLyBoYXZlbid0IGVuY291bnRlcmVkIHRoaXMgZXZlbnQgdHlwZSBiZWZvcmUsIG1hcCBhIGZpeGVyIGZ1bmN0aW9uIGZvciBpdFxuICAgICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHR5cGVGaXhlcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlRml4ZXJzW2ldLnJlZy50ZXN0KHR5cGUpKSB7IC8vIGd1YXJhbnRlZWQgdG8gbWF0Y2ggYXQgbGVhc3Qgb25lLCBsYXN0IGlzIC4qXG4gICAgICAgICAgICAgICAgICAgICAgdHlwZUZpeGVyTWFwW3R5cGVdID0gZml4ZXIgPSB0eXBlRml4ZXJzW2ldLmZpeFxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwcm9wcyA9IGZpeGVyKGV2ZW50LCB0aGlzLCB0eXBlKVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IHByb3BzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgICAgICAgaWYgKCEoKHAgPSBwcm9wc1tpXSkgaW4gdGhpcykgJiYgcCBpbiBldmVudCkgdGhpc1twXSA9IGV2ZW50W3BdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgLy8gcHJldmVudERlZmF1bHQoKSBhbmQgc3RvcFByb3BhZ2F0aW9uKCkgYXJlIGEgY29uc2lzdGVudCBpbnRlcmZhY2UgdG8gdGhvc2UgZnVuY3Rpb25zXG4gICAgICAgIC8vIG9uIHRoZSBET00sIHN0b3AoKSBpcyBhbiBhbGlhcyBmb3IgYm90aCBvZiB0aGVtIHRvZ2V0aGVyXG4gICAgICAgIEV2ZW50LnByb3RvdHlwZS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodGhpcy5vcmlnaW5hbEV2ZW50LnByZXZlbnREZWZhdWx0KSB0aGlzLm9yaWdpbmFsRXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgIGVsc2UgdGhpcy5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICBFdmVudC5wcm90b3R5cGUuc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh0aGlzLm9yaWdpbmFsRXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB0aGlzLm9yaWdpbmFsRXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICBlbHNlIHRoaXMub3JpZ2luYWxFdmVudC5jYW5jZWxCdWJibGUgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgRXZlbnQucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgdGhpcy5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICAgIHRoaXMuc3RvcHBlZCA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICAvLyBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSBoYXMgdG8gYmUgaGFuZGxlZCBpbnRlcm5hbGx5IGJlY2F1c2Ugd2UgbWFuYWdlIHRoZSBldmVudCBsaXN0IGZvclxuICAgICAgICAvLyBlYWNoIGVsZW1lbnRcbiAgICAgICAgLy8gbm90ZSB0aGF0IG9yaWdpbmFsRWxlbWVudCBtYXkgYmUgYSBCZWFuI0V2ZW50IG9iamVjdCBpbiBzb21lIHNpdHVhdGlvbnNcbiAgICAgICAgRXZlbnQucHJvdG90eXBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodGhpcy5vcmlnaW5hbEV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbikgdGhpcy5vcmlnaW5hbEV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG4gICAgICAgICAgdGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWUgfVxuICAgICAgICB9XG4gICAgICAgIEV2ZW50LnByb3RvdHlwZS5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkICYmIHRoaXMub3JpZ2luYWxFdmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpXG4gICAgICAgIH1cbiAgICAgICAgRXZlbnQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKGN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgICAvL1RPRE86IHRoaXMgaXMgcmlwZSBmb3Igb3B0aW1pc2F0aW9uLCBuZXcgZXZlbnRzIGFyZSAqZXhwZW5zaXZlKlxuICAgICAgICAgIC8vIGltcHJvdmluZyB0aGlzIHdpbGwgc3BlZWQgdXAgZGVsZWdhdGVkIGV2ZW50c1xuICAgICAgICAgIHZhciBuZSA9IG5ldyBFdmVudCh0aGlzLCB0aGlzLmVsZW1lbnQsIHRoaXMuaXNOYXRpdmUpXG4gICAgICAgICAgbmUuY3VycmVudFRhcmdldCA9IGN1cnJlbnRUYXJnZXRcbiAgICAgICAgICByZXR1cm4gbmVcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBFdmVudFxuICAgICAgfSgpKVxuXG4gICAgICAvLyBpZiB3ZSdyZSBpbiBvbGQgSUUgd2UgY2FuJ3QgZG8gb25wcm9wZXJ0eWNoYW5nZSBvbiBkb2Mgb3Igd2luIHNvIHdlIHVzZSBkb2MuZG9jdW1lbnRFbGVtZW50IGZvciBib3RoXG4gICAgLCB0YXJnZXRFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGlzTmF0aXZlKSB7XG4gICAgICAgIHJldHVybiAhVzNDX01PREVMICYmICFpc05hdGl2ZSAmJiAoZWxlbWVudCA9PT0gZG9jIHx8IGVsZW1lbnQgPT09IHdpbikgPyByb290IDogZWxlbWVudFxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAgKiBCZWFuIG1haW50YWlucyBhbiBpbnRlcm5hbCByZWdpc3RyeSBmb3IgZXZlbnQgbGlzdGVuZXJzLiBXZSBkb24ndCB0b3VjaCBlbGVtZW50cywgb2JqZWN0c1xuICAgICAgICAqIG9yIGZ1bmN0aW9ucyB0byBpZGVudGlmeSB0aGVtLCBpbnN0ZWFkIHdlIHN0b3JlIGV2ZXJ5dGhpbmcgaW4gdGhlIHJlZ2lzdHJ5LlxuICAgICAgICAqIEVhY2ggZXZlbnQgbGlzdGVuZXIgaGFzIGEgUmVnRW50cnkgb2JqZWN0LCB3ZSBoYXZlIG9uZSAncmVnaXN0cnknIGZvciB0aGUgd2hvbGUgaW5zdGFuY2UuXG4gICAgICAgICovXG4gICAgLCBSZWdFbnRyeSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGVhY2ggaGFuZGxlciBpcyB3cmFwcGVkIHNvIHdlIGNhbiBoYW5kbGUgZGVsZWdhdGlvbiBhbmQgY3VzdG9tIGV2ZW50c1xuICAgICAgICB2YXIgd3JhcHBlZEhhbmRsZXIgPSBmdW5jdGlvbiAoZWxlbWVudCwgZm4sIGNvbmRpdGlvbiwgYXJncykge1xuICAgICAgICAgICAgdmFyIGNhbGwgPSBmdW5jdGlvbiAoZXZlbnQsIGVhcmdzKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkoZWxlbWVudCwgYXJncyA/IHNsaWNlLmNhbGwoZWFyZ3MsIGV2ZW50ID8gMCA6IDEpLmNvbmNhdChhcmdzKSA6IGVhcmdzKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLCBmaW5kVGFyZ2V0ID0gZnVuY3Rpb24gKGV2ZW50LCBldmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmbi5fX2JlYW5EZWwgPyBmbi5fX2JlYW5EZWwuZnQoZXZlbnQudGFyZ2V0LCBlbGVtZW50KSA6IGV2ZW50RWxlbWVudFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLCBoYW5kbGVyID0gY29uZGl0aW9uXG4gICAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBmaW5kVGFyZ2V0KGV2ZW50LCB0aGlzKSAvLyBkZWxlYXRlZCBldmVudFxuICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25kaXRpb24uYXBwbHkodGFyZ2V0LCBhcmd1bWVudHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQpIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSB0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsKGV2ZW50LCBhcmd1bWVudHMpXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChmbi5fX2JlYW5EZWwpIGV2ZW50ID0gZXZlbnQuY2xvbmUoZmluZFRhcmdldChldmVudCkpIC8vIGRlbGVnYXRlZCBldmVudCwgZml4IHRoZSBmaXhcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbChldmVudCwgYXJndW1lbnRzKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBoYW5kbGVyLl9fYmVhbkRlbCA9IGZuLl9fYmVhbkRlbFxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXJcbiAgICAgICAgICB9XG5cbiAgICAgICAgLCBSZWdFbnRyeSA9IGZ1bmN0aW9uIChlbGVtZW50LCB0eXBlLCBoYW5kbGVyLCBvcmlnaW5hbCwgbmFtZXNwYWNlcywgYXJncywgcm9vdCkge1xuICAgICAgICAgICAgdmFyIGN1c3RvbVR5cGUgICAgID0gY3VzdG9tRXZlbnRzW3R5cGVdXG4gICAgICAgICAgICAgICwgaXNOYXRpdmVcblxuICAgICAgICAgICAgaWYgKHR5cGUgPT0gJ3VubG9hZCcpIHtcbiAgICAgICAgICAgICAgLy8gc2VsZiBjbGVhbi11cFxuICAgICAgICAgICAgICBoYW5kbGVyID0gb25jZShyZW1vdmVMaXN0ZW5lciwgZWxlbWVudCwgdHlwZSwgaGFuZGxlciwgb3JpZ2luYWwpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjdXN0b21UeXBlKSB7XG4gICAgICAgICAgICAgIGlmIChjdXN0b21UeXBlLmNvbmRpdGlvbikge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSB3cmFwcGVkSGFuZGxlcihlbGVtZW50LCBoYW5kbGVyLCBjdXN0b21UeXBlLmNvbmRpdGlvbiwgYXJncylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0eXBlID0gY3VzdG9tVHlwZS5iYXNlIHx8IHR5cGVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5pc05hdGl2ZSAgICAgID0gaXNOYXRpdmUgPSBuYXRpdmVFdmVudHNbdHlwZV0gJiYgISFlbGVtZW50W2V2ZW50U3VwcG9ydF1cbiAgICAgICAgICAgIHRoaXMuY3VzdG9tVHlwZSAgICA9ICFXM0NfTU9ERUwgJiYgIWlzTmF0aXZlICYmIHR5cGVcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudCAgICAgICA9IGVsZW1lbnRcbiAgICAgICAgICAgIHRoaXMudHlwZSAgICAgICAgICA9IHR5cGVcbiAgICAgICAgICAgIHRoaXMub3JpZ2luYWwgICAgICA9IG9yaWdpbmFsXG4gICAgICAgICAgICB0aGlzLm5hbWVzcGFjZXMgICAgPSBuYW1lc3BhY2VzXG4gICAgICAgICAgICB0aGlzLmV2ZW50VHlwZSAgICAgPSBXM0NfTU9ERUwgfHwgaXNOYXRpdmUgPyB0eXBlIDogJ3Byb3BlcnR5Y2hhbmdlJ1xuICAgICAgICAgICAgdGhpcy50YXJnZXQgICAgICAgID0gdGFyZ2V0RWxlbWVudChlbGVtZW50LCBpc05hdGl2ZSlcbiAgICAgICAgICAgIHRoaXNbZXZlbnRTdXBwb3J0XSA9ICEhdGhpcy50YXJnZXRbZXZlbnRTdXBwb3J0XVxuICAgICAgICAgICAgdGhpcy5yb290ICAgICAgICAgID0gcm9vdFxuICAgICAgICAgICAgdGhpcy5oYW5kbGVyICAgICAgID0gd3JhcHBlZEhhbmRsZXIoZWxlbWVudCwgaGFuZGxlciwgbnVsbCwgYXJncylcbiAgICAgICAgICB9XG5cbiAgICAgICAgLy8gZ2l2ZW4gYSBsaXN0IG9mIG5hbWVzcGFjZXMsIGlzIG91ciBlbnRyeSBpbiBhbnkgb2YgdGhlbT9cbiAgICAgICAgUmVnRW50cnkucHJvdG90eXBlLmluTmFtZXNwYWNlcyA9IGZ1bmN0aW9uIChjaGVja05hbWVzcGFjZXMpIHtcbiAgICAgICAgICB2YXIgaSwgaiwgYyA9IDBcbiAgICAgICAgICBpZiAoIWNoZWNrTmFtZXNwYWNlcykgcmV0dXJuIHRydWVcbiAgICAgICAgICBpZiAoIXRoaXMubmFtZXNwYWNlcykgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgZm9yIChpID0gY2hlY2tOYW1lc3BhY2VzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgZm9yIChqID0gdGhpcy5uYW1lc3BhY2VzLmxlbmd0aDsgai0tOykge1xuICAgICAgICAgICAgICBpZiAoY2hlY2tOYW1lc3BhY2VzW2ldID09IHRoaXMubmFtZXNwYWNlc1tqXSkgYysrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjaGVja05hbWVzcGFjZXMubGVuZ3RoID09PSBjXG4gICAgICAgIH1cblxuICAgICAgICAvLyBtYXRjaCBieSBlbGVtZW50LCBvcmlnaW5hbCBmbiAob3B0KSwgaGFuZGxlciBmbiAob3B0KVxuICAgICAgICBSZWdFbnRyeS5wcm90b3R5cGUubWF0Y2hlcyA9IGZ1bmN0aW9uIChjaGVja0VsZW1lbnQsIGNoZWNrT3JpZ2luYWwsIGNoZWNrSGFuZGxlcikge1xuICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQgPT09IGNoZWNrRWxlbWVudCAmJlxuICAgICAgICAgICAgKCFjaGVja09yaWdpbmFsIHx8IHRoaXMub3JpZ2luYWwgPT09IGNoZWNrT3JpZ2luYWwpICYmXG4gICAgICAgICAgICAoIWNoZWNrSGFuZGxlciB8fCB0aGlzLmhhbmRsZXIgPT09IGNoZWNrSGFuZGxlcilcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBSZWdFbnRyeVxuICAgICAgfSgpKVxuXG4gICAgLCByZWdpc3RyeSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIG91ciBtYXAgc3RvcmVzIGFycmF5cyBieSBldmVudCB0eXBlLCBqdXN0IGJlY2F1c2UgaXQncyBiZXR0ZXIgdGhhbiBzdG9yaW5nXG4gICAgICAgIC8vIGV2ZXJ5dGhpbmcgaW4gYSBzaW5nbGUgYXJyYXkuXG4gICAgICAgIC8vIHVzZXMgJyQnIGFzIGEgcHJlZml4IGZvciB0aGUga2V5cyBmb3Igc2FmZXR5IGFuZCAncicgYXMgYSBzcGVjaWFsIHByZWZpeCBmb3JcbiAgICAgICAgLy8gcm9vdExpc3RlbmVycyBzbyB3ZSBjYW4gbG9vayB0aGVtIHVwIGZhc3RcbiAgICAgICAgdmFyIG1hcCA9IHt9XG5cbiAgICAgICAgICAvLyBnZW5lcmljIGZ1bmN0aW9uYWwgc2VhcmNoIG9mIG91ciByZWdpc3RyeSBmb3IgbWF0Y2hpbmcgbGlzdGVuZXJzLFxuICAgICAgICAgIC8vIGBmbmAgcmV0dXJucyBmYWxzZSB0byBicmVhayBvdXQgb2YgdGhlIGxvb3BcbiAgICAgICAgICAsIGZvckFsbCA9IGZ1bmN0aW9uIChlbGVtZW50LCB0eXBlLCBvcmlnaW5hbCwgaGFuZGxlciwgcm9vdCwgZm4pIHtcbiAgICAgICAgICAgICAgdmFyIHBmeCA9IHJvb3QgPyAncicgOiAnJCdcbiAgICAgICAgICAgICAgaWYgKCF0eXBlIHx8IHR5cGUgPT0gJyonKSB7XG4gICAgICAgICAgICAgICAgLy8gc2VhcmNoIHRoZSB3aG9sZSByZWdpc3RyeVxuICAgICAgICAgICAgICAgIGZvciAodmFyIHQgaW4gbWFwKSB7XG4gICAgICAgICAgICAgICAgICBpZiAodC5jaGFyQXQoMCkgPT0gcGZ4KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvckFsbChlbGVtZW50LCB0LnN1YnN0cigxKSwgb3JpZ2luYWwsIGhhbmRsZXIsIHJvb3QsIGZuKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IDAsIGwsIGxpc3QgPSBtYXBbcGZ4ICsgdHlwZV0sIGFsbCA9IGVsZW1lbnQgPT0gJyonXG4gICAgICAgICAgICAgICAgaWYgKCFsaXN0KSByZXR1cm5cbiAgICAgICAgICAgICAgICBmb3IgKGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgaWYgKChhbGwgfHwgbGlzdFtpXS5tYXRjaGVzKGVsZW1lbnQsIG9yaWdpbmFsLCBoYW5kbGVyKSkgJiYgIWZuKGxpc3RbaV0sIGxpc3QsIGksIHR5cGUpKSByZXR1cm5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICwgaGFzID0gZnVuY3Rpb24gKGVsZW1lbnQsIHR5cGUsIG9yaWdpbmFsLCByb290KSB7XG4gICAgICAgICAgICAgIC8vIHdlJ3JlIG5vdCB1c2luZyBmb3JBbGwgaGVyZSBzaW1wbHkgYmVjYXVzZSBpdCdzIGEgYml0IHNsb3dlciBhbmQgdGhpc1xuICAgICAgICAgICAgICAvLyBuZWVkcyB0byBiZSBmYXN0XG4gICAgICAgICAgICAgIHZhciBpLCBsaXN0ID0gbWFwWyhyb290ID8gJ3InIDogJyQnKSArIHR5cGVdXG4gICAgICAgICAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgICAgICAgIGlmICghbGlzdFtpXS5yb290ICYmIGxpc3RbaV0ubWF0Y2hlcyhlbGVtZW50LCBvcmlnaW5hbCwgbnVsbCkpIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgLCBnZXQgPSBmdW5jdGlvbiAoZWxlbWVudCwgdHlwZSwgb3JpZ2luYWwsIHJvb3QpIHtcbiAgICAgICAgICAgICAgdmFyIGVudHJpZXMgPSBbXVxuICAgICAgICAgICAgICBmb3JBbGwoZWxlbWVudCwgdHlwZSwgb3JpZ2luYWwsIG51bGwsIHJvb3QsIGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyaWVzLnB1c2goZW50cnkpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIHJldHVybiBlbnRyaWVzXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAsIHB1dCA9IGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgICB2YXIgaGFzID0gIWVudHJ5LnJvb3QgJiYgIXRoaXMuaGFzKGVudHJ5LmVsZW1lbnQsIGVudHJ5LnR5cGUsIG51bGwsIGZhbHNlKVxuICAgICAgICAgICAgICAgICwga2V5ID0gKGVudHJ5LnJvb3QgPyAncicgOiAnJCcpICsgZW50cnkudHlwZVxuICAgICAgICAgICAgICA7KG1hcFtrZXldIHx8IChtYXBba2V5XSA9IFtdKSkucHVzaChlbnRyeSlcbiAgICAgICAgICAgICAgcmV0dXJuIGhhc1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgLCBkZWwgPSBmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgZm9yQWxsKGVudHJ5LmVsZW1lbnQsIGVudHJ5LnR5cGUsIG51bGwsIGVudHJ5LmhhbmRsZXIsIGVudHJ5LnJvb3QsIGZ1bmN0aW9uIChlbnRyeSwgbGlzdCwgaSkge1xuICAgICAgICAgICAgICAgIGxpc3Quc3BsaWNlKGksIDEpXG4gICAgICAgICAgICAgICAgZW50cnkucmVtb3ZlZCA9IHRydWVcbiAgICAgICAgICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDApIGRlbGV0ZSBtYXBbKGVudHJ5LnJvb3QgPyAncicgOiAnJCcpICsgZW50cnkudHlwZV1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZHVtcCBhbGwgZW50cmllcywgdXNlZCBmb3Igb251bmxvYWRcbiAgICAgICAgICAsIGVudHJpZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciB0LCBlbnRyaWVzID0gW11cbiAgICAgICAgICAgICAgZm9yICh0IGluIG1hcCkge1xuICAgICAgICAgICAgICAgIGlmICh0LmNoYXJBdCgwKSA9PSAnJCcpIGVudHJpZXMgPSBlbnRyaWVzLmNvbmNhdChtYXBbdF0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGVudHJpZXNcbiAgICAgICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBoYXM6IGhhcywgZ2V0OiBnZXQsIHB1dDogcHV0LCBkZWw6IGRlbCwgZW50cmllczogZW50cmllcyB9XG4gICAgICB9KCkpXG5cbiAgICAgIC8vIHdlIG5lZWQgYSBzZWxlY3RvciBlbmdpbmUgZm9yIGRlbGVnYXRlZCBldmVudHMsIHVzZSBxdWVyeVNlbGVjdG9yQWxsIGlmIGl0IGV4aXN0c1xuICAgICAgLy8gYnV0IGZvciBvbGRlciBicm93c2VycyB3ZSBuZWVkIFF3ZXJ5LCBTaXp6bGUgb3Igc2ltaWxhclxuICAgICwgc2VsZWN0b3JFbmdpbmVcbiAgICAsIHNldFNlbGVjdG9yRW5naW5lID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgc2VsZWN0b3JFbmdpbmUgPSBkb2MucXVlcnlTZWxlY3RvckFsbFxuICAgICAgICAgICAgPyBmdW5jdGlvbiAocywgcikge1xuICAgICAgICAgICAgICAgIHJldHVybiByLnF1ZXJ5U2VsZWN0b3JBbGwocylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdCZWFuOiBObyBzZWxlY3RvciBlbmdpbmUgaW5zdGFsbGVkJykgLy8gZWVla1xuICAgICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZWN0b3JFbmdpbmUgPSBlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gd2UgYXR0YWNoIHRoaXMgbGlzdGVuZXIgdG8gZWFjaCBET00gZXZlbnQgdGhhdCB3ZSBuZWVkIHRvIGxpc3RlbiB0bywgb25seSBvbmNlXG4gICAgICAvLyBwZXIgZXZlbnQgdHlwZSBwZXIgRE9NIGVsZW1lbnRcbiAgICAsIHJvb3RMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCwgdHlwZSkge1xuICAgICAgICBpZiAoIVczQ19NT0RFTCAmJiB0eXBlICYmIGV2ZW50ICYmIGV2ZW50LnByb3BlcnR5TmFtZSAhPSAnX29uJyArIHR5cGUpIHJldHVyblxuXG4gICAgICAgIHZhciBsaXN0ZW5lcnMgPSByZWdpc3RyeS5nZXQodGhpcywgdHlwZSB8fCBldmVudC50eXBlLCBudWxsLCBmYWxzZSlcbiAgICAgICAgICAsIGwgPSBsaXN0ZW5lcnMubGVuZ3RoXG4gICAgICAgICAgLCBpID0gMFxuXG4gICAgICAgIGV2ZW50ID0gbmV3IEV2ZW50KGV2ZW50LCB0aGlzLCB0cnVlKVxuICAgICAgICBpZiAodHlwZSkgZXZlbnQudHlwZSA9IHR5cGVcblxuICAgICAgICAvLyBpdGVyYXRlIHRocm91Z2ggYWxsIGhhbmRsZXJzIHJlZ2lzdGVyZWQgZm9yIHRoaXMgdHlwZSwgY2FsbGluZyB0aGVtIHVubGVzcyB0aGV5IGhhdmVcbiAgICAgICAgLy8gYmVlbiByZW1vdmVkIGJ5IGEgcHJldmlvdXMgaGFuZGxlciBvciBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSBoYXMgYmVlbiBjYWxsZWRcbiAgICAgICAgZm9yICg7IGkgPCBsICYmICFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpOyBpKyspIHtcbiAgICAgICAgICBpZiAoIWxpc3RlbmVyc1tpXS5yZW1vdmVkKSBsaXN0ZW5lcnNbaV0uaGFuZGxlci5jYWxsKHRoaXMsIGV2ZW50KVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGFkZCBhbmQgcmVtb3ZlIGxpc3RlbmVycyB0byBET00gZWxlbWVudHNcbiAgICAsIGxpc3RlbmVyID0gVzNDX01PREVMXG4gICAgICAgID8gZnVuY3Rpb24gKGVsZW1lbnQsIHR5cGUsIGFkZCkge1xuICAgICAgICAgICAgLy8gbmV3IGJyb3dzZXJzXG4gICAgICAgICAgICBlbGVtZW50W2FkZCA/IGFkZEV2ZW50IDogcmVtb3ZlRXZlbnRdKHR5cGUsIHJvb3RMaXN0ZW5lciwgZmFsc2UpXG4gICAgICAgICAgfVxuICAgICAgICA6IGZ1bmN0aW9uIChlbGVtZW50LCB0eXBlLCBhZGQsIGN1c3RvbSkge1xuICAgICAgICAgICAgLy8gSUU4IGFuZCBiZWxvdywgdXNlIGF0dGFjaEV2ZW50L2RldGFjaEV2ZW50IGFuZCB3ZSBoYXZlIHRvIHBpZ2d5LWJhY2sgcHJvcGVydHljaGFuZ2UgZXZlbnRzXG4gICAgICAgICAgICAvLyB0byBzaW11bGF0ZSBldmVudCBidWJibGluZyBldGMuXG4gICAgICAgICAgICB2YXIgZW50cnlcbiAgICAgICAgICAgIGlmIChhZGQpIHtcbiAgICAgICAgICAgICAgcmVnaXN0cnkucHV0KGVudHJ5ID0gbmV3IFJlZ0VudHJ5KFxuICAgICAgICAgICAgICAgICAgZWxlbWVudFxuICAgICAgICAgICAgICAgICwgY3VzdG9tIHx8IHR5cGVcbiAgICAgICAgICAgICAgICAsIGZ1bmN0aW9uIChldmVudCkgeyAvLyBoYW5kbGVyXG4gICAgICAgICAgICAgICAgICAgIHJvb3RMaXN0ZW5lci5jYWxsKGVsZW1lbnQsIGV2ZW50LCBjdXN0b20pXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLCByb290TGlzdGVuZXJcbiAgICAgICAgICAgICAgICAsIG51bGxcbiAgICAgICAgICAgICAgICAsIG51bGxcbiAgICAgICAgICAgICAgICAsIHRydWUgLy8gaXMgcm9vdFxuICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICBpZiAoY3VzdG9tICYmIGVsZW1lbnRbJ19vbicgKyBjdXN0b21dID09IG51bGwpIGVsZW1lbnRbJ19vbicgKyBjdXN0b21dID0gMFxuICAgICAgICAgICAgICBlbnRyeS50YXJnZXQuYXR0YWNoRXZlbnQoJ29uJyArIGVudHJ5LmV2ZW50VHlwZSwgZW50cnkuaGFuZGxlcilcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVudHJ5ID0gcmVnaXN0cnkuZ2V0KGVsZW1lbnQsIGN1c3RvbSB8fCB0eXBlLCByb290TGlzdGVuZXIsIHRydWUpWzBdXG4gICAgICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgICAgIGVudHJ5LnRhcmdldC5kZXRhY2hFdmVudCgnb24nICsgZW50cnkuZXZlbnRUeXBlLCBlbnRyeS5oYW5kbGVyKVxuICAgICAgICAgICAgICAgIHJlZ2lzdHJ5LmRlbChlbnRyeSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICwgb25jZSA9IGZ1bmN0aW9uIChybSwgZWxlbWVudCwgdHlwZSwgZm4sIG9yaWdpbmFsRm4pIHtcbiAgICAgICAgLy8gd3JhcCB0aGUgaGFuZGxlciBpbiBhIGhhbmRsZXIgdGhhdCBkb2VzIGEgcmVtb3ZlIGFzIHdlbGxcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgICAgcm0oZWxlbWVudCwgdHlwZSwgb3JpZ2luYWxGbilcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgLCByZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcmdUeXBlLCBoYW5kbGVyLCBuYW1lc3BhY2VzKSB7XG4gICAgICAgIHZhciB0eXBlICAgICA9IG9yZ1R5cGUgJiYgb3JnVHlwZS5yZXBsYWNlKG5hbWVSZWdleCwgJycpXG4gICAgICAgICAgLCBoYW5kbGVycyA9IHJlZ2lzdHJ5LmdldChlbGVtZW50LCB0eXBlLCBudWxsLCBmYWxzZSlcbiAgICAgICAgICAsIHJlbW92ZWQgID0ge31cbiAgICAgICAgICAsIGksIGxcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKCghaGFuZGxlciB8fCBoYW5kbGVyc1tpXS5vcmlnaW5hbCA9PT0gaGFuZGxlcikgJiYgaGFuZGxlcnNbaV0uaW5OYW1lc3BhY2VzKG5hbWVzcGFjZXMpKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiB0aGlzIGlzIHByb2JsZW1hdGljLCB3ZSBoYXZlIGEgcmVnaXN0cnkuZ2V0KCkgYW5kIHJlZ2lzdHJ5LmRlbCgpIHRoYXRcbiAgICAgICAgICAgIC8vIGJvdGggZG8gcmVnaXN0cnkgc2VhcmNoZXMgc28gd2Ugd2FzdGUgY3ljbGVzIGRvaW5nIHRoaXMuIE5lZWRzIHRvIGJlIHJvbGxlZCBpbnRvXG4gICAgICAgICAgICAvLyBhIHNpbmdsZSByZWdpc3RyeS5mb3JBbGwoZm4pIHRoYXQgcmVtb3ZlcyB3aGlsZSBmaW5kaW5nLCBidXQgdGhlIGNhdGNoIGlzIHRoYXRcbiAgICAgICAgICAgIC8vIHdlJ2xsIGJlIHNwbGljaW5nIHRoZSBhcnJheXMgdGhhdCB3ZSdyZSBpdGVyYXRpbmcgb3Zlci4gTmVlZHMgZXh0cmEgdGVzdHMgdG9cbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBkb24ndCBzY3JldyBpdCB1cC4gQHJ2YWdnXG4gICAgICAgICAgICByZWdpc3RyeS5kZWwoaGFuZGxlcnNbaV0pXG4gICAgICAgICAgICBpZiAoIXJlbW92ZWRbaGFuZGxlcnNbaV0uZXZlbnRUeXBlXSAmJiBoYW5kbGVyc1tpXVtldmVudFN1cHBvcnRdKVxuICAgICAgICAgICAgICByZW1vdmVkW2hhbmRsZXJzW2ldLmV2ZW50VHlwZV0gPSB7IHQ6IGhhbmRsZXJzW2ldLmV2ZW50VHlwZSwgYzogaGFuZGxlcnNbaV0udHlwZSB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGNoZWNrIGVhY2ggdHlwZS9lbGVtZW50IGZvciByZW1vdmVkIGxpc3RlbmVycyBhbmQgcmVtb3ZlIHRoZSByb290TGlzdGVuZXIgd2hlcmUgaXQncyBubyBsb25nZXIgbmVlZGVkXG4gICAgICAgIGZvciAoaSBpbiByZW1vdmVkKSB7XG4gICAgICAgICAgaWYgKCFyZWdpc3RyeS5oYXMoZWxlbWVudCwgcmVtb3ZlZFtpXS50LCBudWxsLCBmYWxzZSkpIHtcbiAgICAgICAgICAgIC8vIGxhc3QgbGlzdGVuZXIgb2YgdGhpcyB0eXBlLCByZW1vdmUgdGhlIHJvb3RMaXN0ZW5lclxuICAgICAgICAgICAgbGlzdGVuZXIoZWxlbWVudCwgcmVtb3ZlZFtpXS50LCBmYWxzZSwgcmVtb3ZlZFtpXS5jKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBzZXQgdXAgYSBkZWxlZ2F0ZSBoZWxwZXIgdXNpbmcgdGhlIGdpdmVuIHNlbGVjdG9yLCB3cmFwIHRoZSBoYW5kbGVyIGZ1bmN0aW9uXG4gICAgLCBkZWxlZ2F0ZSA9IGZ1bmN0aW9uIChzZWxlY3RvciwgZm4pIHtcbiAgICAgICAgLy9UT0RPOiBmaW5kVGFyZ2V0ICh0aGVyZWZvcmUgJCkgaXMgY2FsbGVkIHR3aWNlLCBvbmNlIGZvciBtYXRjaCBhbmQgb25jZSBmb3JcbiAgICAgICAgLy8gc2V0dGluZyBlLmN1cnJlbnRUYXJnZXQsIGZpeCB0aGlzIHNvIGl0J3Mgb25seSBuZWVkZWQgb25jZVxuICAgICAgICB2YXIgZmluZFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQsIHJvb3QpIHtcbiAgICAgICAgICAgICAgdmFyIGksIGFycmF5ID0gaXNTdHJpbmcoc2VsZWN0b3IpID8gc2VsZWN0b3JFbmdpbmUoc2VsZWN0b3IsIHJvb3QpIDogc2VsZWN0b3JcbiAgICAgICAgICAgICAgZm9yICg7IHRhcmdldCAmJiB0YXJnZXQgIT09IHJvb3Q7IHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gYXJyYXkubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoYXJyYXlbaV0gPT09IHRhcmdldCkgcmV0dXJuIHRhcmdldFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICwgaGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgIHZhciBtYXRjaCA9IGZpbmRUYXJnZXQoZS50YXJnZXQsIHRoaXMpXG4gICAgICAgICAgICAgIGlmIChtYXRjaCkgZm4uYXBwbHkobWF0Y2gsIGFyZ3VtZW50cylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAvLyBfX2JlYW5EZWwgaXNuJ3QgcGxlYXNhbnQgYnV0IGl0J3MgYSBwcml2YXRlIGZ1bmN0aW9uLCBub3QgZXhwb3NlZCBvdXRzaWRlIG9mIEJlYW5cbiAgICAgICAgaGFuZGxlci5fX2JlYW5EZWwgPSB7XG4gICAgICAgICAgICBmdCAgICAgICA6IGZpbmRUYXJnZXQgLy8gYXR0YWNoIGl0IGhlcmUgZm9yIGN1c3RvbUV2ZW50cyB0byB1c2UgdG9vXG4gICAgICAgICAgLCBzZWxlY3RvciA6IHNlbGVjdG9yXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhhbmRsZXJcbiAgICAgIH1cblxuICAgICwgZmlyZUxpc3RlbmVyID0gVzNDX01PREVMID8gZnVuY3Rpb24gKGlzTmF0aXZlLCB0eXBlLCBlbGVtZW50KSB7XG4gICAgICAgIC8vIG1vZGVybiBicm93c2VycywgZG8gYSBwcm9wZXIgZGlzcGF0Y2hFdmVudCgpXG4gICAgICAgIHZhciBldnQgPSBkb2MuY3JlYXRlRXZlbnQoaXNOYXRpdmUgPyAnSFRNTEV2ZW50cycgOiAnVUlFdmVudHMnKVxuICAgICAgICBldnRbaXNOYXRpdmUgPyAnaW5pdEV2ZW50JyA6ICdpbml0VUlFdmVudCddKHR5cGUsIHRydWUsIHRydWUsIHdpbiwgMSlcbiAgICAgICAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2dClcbiAgICAgIH0gOiBmdW5jdGlvbiAoaXNOYXRpdmUsIHR5cGUsIGVsZW1lbnQpIHtcbiAgICAgICAgLy8gb2xkIGJyb3dzZXIgdXNlIG9ucHJvcGVydHljaGFuZ2UsIGp1c3QgaW5jcmVtZW50IGEgY3VzdG9tIHByb3BlcnR5IHRvIHRyaWdnZXIgdGhlIGV2ZW50XG4gICAgICAgIGVsZW1lbnQgPSB0YXJnZXRFbGVtZW50KGVsZW1lbnQsIGlzTmF0aXZlKVxuICAgICAgICBpc05hdGl2ZSA/IGVsZW1lbnQuZmlyZUV2ZW50KCdvbicgKyB0eXBlLCBkb2MuY3JlYXRlRXZlbnRPYmplY3QoKSkgOiBlbGVtZW50Wydfb24nICsgdHlwZV0rK1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAgKiBQdWJsaWMgQVBJOiBvZmYoKSwgb24oKSwgYWRkKCksIChyZW1vdmUoKSksIG9uZSgpLCBmaXJlKCksIGNsb25lKClcbiAgICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgICogb2ZmKGVsZW1lbnRbLCBldmVudFR5cGUocylbLCBoYW5kbGVyIF1dKVxuICAgICAgICAqL1xuICAgICwgb2ZmID0gZnVuY3Rpb24gKGVsZW1lbnQsIHR5cGVTcGVjLCBmbikge1xuICAgICAgICB2YXIgaXNUeXBlU3RyID0gaXNTdHJpbmcodHlwZVNwZWMpXG4gICAgICAgICAgLCBrLCB0eXBlLCBuYW1lc3BhY2VzLCBpXG5cbiAgICAgICAgaWYgKGlzVHlwZVN0ciAmJiB0eXBlU3BlYy5pbmRleE9mKCcgJykgPiAwKSB7XG4gICAgICAgICAgLy8gb2ZmKGVsLCAndDEgdDIgdDMnLCBmbikgb3Igb2ZmKGVsLCAndDEgdDIgdDMnKVxuICAgICAgICAgIHR5cGVTcGVjID0gc3RyMmFycih0eXBlU3BlYylcbiAgICAgICAgICBmb3IgKGkgPSB0eXBlU3BlYy5sZW5ndGg7IGktLTspXG4gICAgICAgICAgICBvZmYoZWxlbWVudCwgdHlwZVNwZWNbaV0sIGZuKVxuICAgICAgICAgIHJldHVybiBlbGVtZW50XG4gICAgICAgIH1cblxuICAgICAgICB0eXBlID0gaXNUeXBlU3RyICYmIHR5cGVTcGVjLnJlcGxhY2UobmFtZVJlZ2V4LCAnJylcbiAgICAgICAgaWYgKHR5cGUgJiYgY3VzdG9tRXZlbnRzW3R5cGVdKSB0eXBlID0gY3VzdG9tRXZlbnRzW3R5cGVdLmJhc2VcblxuICAgICAgICBpZiAoIXR5cGVTcGVjIHx8IGlzVHlwZVN0cikge1xuICAgICAgICAgIC8vIG9mZihlbCkgb3Igb2ZmKGVsLCB0MS5ucykgb3Igb2ZmKGVsLCAubnMpIG9yIG9mZihlbCwgLm5zMS5uczIubnMzKVxuICAgICAgICAgIGlmIChuYW1lc3BhY2VzID0gaXNUeXBlU3RyICYmIHR5cGVTcGVjLnJlcGxhY2UobmFtZXNwYWNlUmVnZXgsICcnKSkgbmFtZXNwYWNlcyA9IHN0cjJhcnIobmFtZXNwYWNlcywgJy4nKVxuICAgICAgICAgIHJlbW92ZUxpc3RlbmVyKGVsZW1lbnQsIHR5cGUsIGZuLCBuYW1lc3BhY2VzKVxuICAgICAgICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24odHlwZVNwZWMpKSB7XG4gICAgICAgICAgLy8gb2ZmKGVsLCBmbilcbiAgICAgICAgICByZW1vdmVMaXN0ZW5lcihlbGVtZW50LCBudWxsLCB0eXBlU3BlYylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBvZmYoZWwsIHsgdDE6IGZuMSwgdDIsIGZuMiB9KVxuICAgICAgICAgIGZvciAoayBpbiB0eXBlU3BlYykge1xuICAgICAgICAgICAgaWYgKHR5cGVTcGVjLmhhc093blByb3BlcnR5KGspKSBvZmYoZWxlbWVudCwgaywgdHlwZVNwZWNba10pXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsZW1lbnRcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgICogb24oZWxlbWVudCwgZXZlbnRUeXBlKHMpWywgc2VsZWN0b3JdLCBoYW5kbGVyWywgYXJncyBdKVxuICAgICAgICAqL1xuICAgICwgb24gPSBmdW5jdGlvbihlbGVtZW50LCBldmVudHMsIHNlbGVjdG9yLCBmbikge1xuICAgICAgICB2YXIgb3JpZ2luYWxGbiwgdHlwZSwgdHlwZXMsIGksIGFyZ3MsIGVudHJ5LCBmaXJzdFxuXG4gICAgICAgIC8vVE9ETzogdGhlIHVuZGVmaW5lZCBjaGVjayBtZWFucyB5b3UgY2FuJ3QgcGFzcyBhbiAnYXJncycgYXJndW1lbnQsIGZpeCB0aGlzIHBlcmhhcHM/XG4gICAgICAgIGlmIChzZWxlY3RvciA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBldmVudHMgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAvL1RPRE86IHRoaXMgY2FuJ3QgaGFuZGxlIGRlbGVnYXRlZCBldmVudHNcbiAgICAgICAgICBmb3IgKHR5cGUgaW4gZXZlbnRzKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KHR5cGUpKSB7XG4gICAgICAgICAgICAgIG9uLmNhbGwodGhpcywgZWxlbWVudCwgdHlwZSwgZXZlbnRzW3R5cGVdKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNGdW5jdGlvbihzZWxlY3RvcikpIHtcbiAgICAgICAgICAvLyBkZWxlZ2F0ZWQgZXZlbnRcbiAgICAgICAgICBvcmlnaW5hbEZuID0gZm5cbiAgICAgICAgICBhcmdzICAgICAgID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDQpXG4gICAgICAgICAgZm4gICAgICAgICA9IGRlbGVnYXRlKHNlbGVjdG9yLCBvcmlnaW5hbEZuLCBzZWxlY3RvckVuZ2luZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhcmdzICAgICAgID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDMpXG4gICAgICAgICAgZm4gICAgICAgICA9IG9yaWdpbmFsRm4gPSBzZWxlY3RvclxuICAgICAgICB9XG5cbiAgICAgICAgdHlwZXMgPSBzdHIyYXJyKGV2ZW50cylcblxuICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIG9uZSgpLCB3cmFwIGluIGEgc2VsZi1yZW1vdmluZyBoYW5kbGVyXG4gICAgICAgIGlmICh0aGlzID09PSBPTkUpIHtcbiAgICAgICAgICBmbiA9IG9uY2Uob2ZmLCBlbGVtZW50LCBldmVudHMsIGZuLCBvcmlnaW5hbEZuKVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gdHlwZXMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgLy8gYWRkIG5ldyBoYW5kbGVyIHRvIHRoZSByZWdpc3RyeSBhbmQgY2hlY2sgaWYgaXQncyB0aGUgZmlyc3QgZm9yIHRoaXMgZWxlbWVudC90eXBlXG4gICAgICAgICAgZmlyc3QgPSByZWdpc3RyeS5wdXQoZW50cnkgPSBuZXcgUmVnRW50cnkoXG4gICAgICAgICAgICAgIGVsZW1lbnRcbiAgICAgICAgICAgICwgdHlwZXNbaV0ucmVwbGFjZShuYW1lUmVnZXgsICcnKSAvLyBldmVudCB0eXBlXG4gICAgICAgICAgICAsIGZuXG4gICAgICAgICAgICAsIG9yaWdpbmFsRm5cbiAgICAgICAgICAgICwgc3RyMmFycih0eXBlc1tpXS5yZXBsYWNlKG5hbWVzcGFjZVJlZ2V4LCAnJyksICcuJykgLy8gbmFtZXNwYWNlc1xuICAgICAgICAgICAgLCBhcmdzXG4gICAgICAgICAgICAsIGZhbHNlIC8vIG5vdCByb290XG4gICAgICAgICAgKSlcbiAgICAgICAgICBpZiAoZW50cnlbZXZlbnRTdXBwb3J0XSAmJiBmaXJzdCkge1xuICAgICAgICAgICAgLy8gZmlyc3QgZXZlbnQgb2YgdGhpcyB0eXBlIG9uIHRoaXMgZWxlbWVudCwgYWRkIHJvb3QgbGlzdGVuZXJcbiAgICAgICAgICAgIGxpc3RlbmVyKGVsZW1lbnQsIGVudHJ5LmV2ZW50VHlwZSwgdHJ1ZSwgZW50cnkuY3VzdG9tVHlwZSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWxlbWVudFxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAgKiBhZGQoZWxlbWVudFssIHNlbGVjdG9yXSwgZXZlbnRUeXBlKHMpLCBoYW5kbGVyWywgYXJncyBdKVxuICAgICAgICAqXG4gICAgICAgICogRGVwcmVjYXRlZDoga2VwdCAoZm9yIG5vdykgZm9yIGJhY2t3YXJkLWNvbXBhdGliaWxpdHlcbiAgICAgICAgKi9cbiAgICAsIGFkZCA9IGZ1bmN0aW9uIChlbGVtZW50LCBldmVudHMsIGZuLCBkZWxmbikge1xuICAgICAgICByZXR1cm4gb24uYXBwbHkoXG4gICAgICAgICAgICBudWxsXG4gICAgICAgICAgLCAhaXNTdHJpbmcoZm4pXG4gICAgICAgICAgICAgID8gc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgICAgICAgICAgIDogWyBlbGVtZW50LCBmbiwgZXZlbnRzLCBkZWxmbiBdLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoID4gMyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCA1KSA6IFtdKVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICAqIG9uZShlbGVtZW50LCBldmVudFR5cGUocylbLCBzZWxlY3Rvcl0sIGhhbmRsZXJbLCBhcmdzIF0pXG4gICAgICAgICovXG4gICAgLCBvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBvbi5hcHBseShPTkUsIGFyZ3VtZW50cylcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgICogZmlyZShlbGVtZW50LCBldmVudFR5cGUocylbLCBhcmdzIF0pXG4gICAgICAgICpcbiAgICAgICAgKiBUaGUgb3B0aW9uYWwgJ2FyZ3MnIGFyZ3VtZW50IG11c3QgYmUgYW4gYXJyYXksIGlmIG5vICdhcmdzJyBhcmd1bWVudCBpcyBwcm92aWRlZFxuICAgICAgICAqIHRoZW4gd2UgY2FuIHVzZSB0aGUgYnJvd3NlcidzIERPTSBldmVudCBzeXN0ZW0sIG90aGVyd2lzZSB3ZSB0cmlnZ2VyIGhhbmRsZXJzIG1hbnVhbGx5XG4gICAgICAgICovXG4gICAgLCBmaXJlID0gZnVuY3Rpb24gKGVsZW1lbnQsIHR5cGUsIGFyZ3MpIHtcbiAgICAgICAgdmFyIHR5cGVzID0gc3RyMmFycih0eXBlKVxuICAgICAgICAgICwgaSwgaiwgbCwgbmFtZXMsIGhhbmRsZXJzXG5cbiAgICAgICAgZm9yIChpID0gdHlwZXMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgdHlwZSA9IHR5cGVzW2ldLnJlcGxhY2UobmFtZVJlZ2V4LCAnJylcbiAgICAgICAgICBpZiAobmFtZXMgPSB0eXBlc1tpXS5yZXBsYWNlKG5hbWVzcGFjZVJlZ2V4LCAnJykpIG5hbWVzID0gc3RyMmFycihuYW1lcywgJy4nKVxuICAgICAgICAgIGlmICghbmFtZXMgJiYgIWFyZ3MgJiYgZWxlbWVudFtldmVudFN1cHBvcnRdKSB7XG4gICAgICAgICAgICBmaXJlTGlzdGVuZXIobmF0aXZlRXZlbnRzW3R5cGVdLCB0eXBlLCBlbGVtZW50KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBub24tbmF0aXZlIGV2ZW50LCBlaXRoZXIgYmVjYXVzZSBvZiBhIG5hbWVzcGFjZSwgYXJndW1lbnRzIG9yIGEgbm9uIERPTSBlbGVtZW50XG4gICAgICAgICAgICAvLyBpdGVyYXRlIG92ZXIgYWxsIGxpc3RlbmVycyBhbmQgbWFudWFsbHkgJ2ZpcmUnXG4gICAgICAgICAgICBoYW5kbGVycyA9IHJlZ2lzdHJ5LmdldChlbGVtZW50LCB0eXBlLCBudWxsLCBmYWxzZSlcbiAgICAgICAgICAgIGFyZ3MgPSBbZmFsc2VdLmNvbmNhdChhcmdzKVxuICAgICAgICAgICAgZm9yIChqID0gMCwgbCA9IGhhbmRsZXJzLmxlbmd0aDsgaiA8IGw7IGorKykge1xuICAgICAgICAgICAgICBpZiAoaGFuZGxlcnNbal0uaW5OYW1lc3BhY2VzKG5hbWVzKSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZXJzW2pdLmhhbmRsZXIuYXBwbHkoZWxlbWVudCwgYXJncylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxlbWVudFxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAgKiBjbG9uZShkc3RFbGVtZW50LCBzcmNFbGVtZW50WywgZXZlbnRUeXBlIF0pXG4gICAgICAgICpcbiAgICAgICAgKiBUT0RPOiBwZXJoYXBzIGZvciBjb25zaXN0ZW5jeSB3ZSBzaG91bGQgYWxsb3cgdGhlIHNhbWUgZmxleGliaWxpdHkgaW4gdHlwZSBzcGVjaWZpZXJzP1xuICAgICAgICAqL1xuICAgICwgY2xvbmUgPSBmdW5jdGlvbiAoZWxlbWVudCwgZnJvbSwgdHlwZSkge1xuICAgICAgICB2YXIgaGFuZGxlcnMgPSByZWdpc3RyeS5nZXQoZnJvbSwgdHlwZSwgbnVsbCwgZmFsc2UpXG4gICAgICAgICAgLCBsID0gaGFuZGxlcnMubGVuZ3RoXG4gICAgICAgICAgLCBpID0gMFxuICAgICAgICAgICwgYXJncywgYmVhbkRlbFxuXG4gICAgICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGhhbmRsZXJzW2ldLm9yaWdpbmFsKSB7XG4gICAgICAgICAgICBhcmdzID0gWyBlbGVtZW50LCBoYW5kbGVyc1tpXS50eXBlIF1cbiAgICAgICAgICAgIGlmIChiZWFuRGVsID0gaGFuZGxlcnNbaV0uaGFuZGxlci5fX2JlYW5EZWwpIGFyZ3MucHVzaChiZWFuRGVsLnNlbGVjdG9yKVxuICAgICAgICAgICAgYXJncy5wdXNoKGhhbmRsZXJzW2ldLm9yaWdpbmFsKVxuICAgICAgICAgICAgb24uYXBwbHkobnVsbCwgYXJncylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsZW1lbnRcbiAgICAgIH1cblxuICAgICwgYmVhbiA9IHtcbiAgICAgICAgICAnb24nICAgICAgICAgICAgICAgIDogb25cbiAgICAgICAgLCAnYWRkJyAgICAgICAgICAgICAgIDogYWRkXG4gICAgICAgICwgJ29uZScgICAgICAgICAgICAgICA6IG9uZVxuICAgICAgICAsICdvZmYnICAgICAgICAgICAgICAgOiBvZmZcbiAgICAgICAgLCAncmVtb3ZlJyAgICAgICAgICAgIDogb2ZmXG4gICAgICAgICwgJ2Nsb25lJyAgICAgICAgICAgICA6IGNsb25lXG4gICAgICAgICwgJ2ZpcmUnICAgICAgICAgICAgICA6IGZpcmVcbiAgICAgICAgLCAnRXZlbnQnICAgICAgICAgICAgIDogRXZlbnRcbiAgICAgICAgLCAnc2V0U2VsZWN0b3JFbmdpbmUnIDogc2V0U2VsZWN0b3JFbmdpbmVcbiAgICAgICAgLCAnbm9Db25mbGljdCcgICAgICAgIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29udGV4dFtuYW1lXSA9IG9sZFxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgLy8gZm9yIElFLCBjbGVhbiB1cCBvbiB1bmxvYWQgdG8gYXZvaWQgbGVha3NcbiAgaWYgKHdpbi5hdHRhY2hFdmVudCkge1xuICAgIHZhciBjbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGksIGVudHJpZXMgPSByZWdpc3RyeS5lbnRyaWVzKClcbiAgICAgIGZvciAoaSBpbiBlbnRyaWVzKSB7XG4gICAgICAgIGlmIChlbnRyaWVzW2ldLnR5cGUgJiYgZW50cmllc1tpXS50eXBlICE9PSAndW5sb2FkJykgb2ZmKGVudHJpZXNbaV0uZWxlbWVudCwgZW50cmllc1tpXS50eXBlKVxuICAgICAgfVxuICAgICAgd2luLmRldGFjaEV2ZW50KCdvbnVubG9hZCcsIGNsZWFudXApXG4gICAgICB3aW4uQ29sbGVjdEdhcmJhZ2UgJiYgd2luLkNvbGxlY3RHYXJiYWdlKClcbiAgICB9XG4gICAgd2luLmF0dGFjaEV2ZW50KCdvbnVubG9hZCcsIGNsZWFudXApXG4gIH1cblxuICAvLyBpbml0aWFsaXplIHNlbGVjdG9yIGVuZ2luZSB0byBpbnRlcm5hbCBkZWZhdWx0IChxU0Egb3IgdGhyb3cgRXJyb3IpXG4gIHNldFNlbGVjdG9yRW5naW5lKClcblxuICByZXR1cm4gYmVhblxufSk7IiwiLyohXG4gICogQm9uem86IERPTSBVdGlsaXR5IChjKSBEdXN0aW4gRGlheiAyMDEyXG4gICogaHR0cHM6Ly9naXRodWIuY29tL2RlZC9ib256b1xuICAqIExpY2Vuc2UgTUlUXG4gICovXG4oZnVuY3Rpb24gKG5hbWUsIGNvbnRleHQsIGRlZmluaXRpb24pIHtcbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIG1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbigpXG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSBkZWZpbmUoZGVmaW5pdGlvbilcbiAgZWxzZSBjb250ZXh0W25hbWVdID0gZGVmaW5pdGlvbigpXG59KSgnYm9uem8nLCB0aGlzLCBmdW5jdGlvbigpIHtcbiAgdmFyIHdpbiA9IHdpbmRvd1xuICAgICwgZG9jID0gd2luLmRvY3VtZW50XG4gICAgLCBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudFxuICAgICwgcGFyZW50Tm9kZSA9ICdwYXJlbnROb2RlJ1xuICAgICwgc3BlY2lhbEF0dHJpYnV0ZXMgPSAvXihjaGVja2VkfHZhbHVlfHNlbGVjdGVkfGRpc2FibGVkKSQvaVxuICAgICAgLy8gdGFncyB0aGF0IHdlIGhhdmUgdHJvdWJsZSBpbnNlcnRpbmcgKmludG8qXG4gICAgLCBzcGVjaWFsVGFncyA9IC9eKHNlbGVjdHxmaWVsZHNldHx0YWJsZXx0Ym9keXx0Zm9vdHx0ZHx0cnxjb2xncm91cCkkL2lcbiAgICAsIHNpbXBsZVNjcmlwdFRhZ1JlID0gL1xccyo8c2NyaXB0ICtzcmM9WydcIl0oW14nXCJdKylbJ1wiXT4vXG4gICAgLCB0YWJsZSA9IFsnPHRhYmxlPicsICc8L3RhYmxlPicsIDFdXG4gICAgLCB0ZCA9IFsnPHRhYmxlPjx0Ym9keT48dHI+JywgJzwvdHI+PC90Ym9keT48L3RhYmxlPicsIDNdXG4gICAgLCBvcHRpb24gPSBbJzxzZWxlY3Q+JywgJzwvc2VsZWN0PicsIDFdXG4gICAgLCBub3Njb3BlID0gWydfJywgJycsIDAsIDFdXG4gICAgLCB0YWdNYXAgPSB7IC8vIHRhZ3MgdGhhdCB3ZSBoYXZlIHRyb3VibGUgKmluc2VydGluZypcbiAgICAgICAgICB0aGVhZDogdGFibGUsIHRib2R5OiB0YWJsZSwgdGZvb3Q6IHRhYmxlLCBjb2xncm91cDogdGFibGUsIGNhcHRpb246IHRhYmxlXG4gICAgICAgICwgdHI6IFsnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPicsIDJdXG4gICAgICAgICwgdGg6IHRkICwgdGQ6IHRkXG4gICAgICAgICwgY29sOiBbJzx0YWJsZT48Y29sZ3JvdXA+JywgJzwvY29sZ3JvdXA+PC90YWJsZT4nLCAyXVxuICAgICAgICAsIGZpZWxkc2V0OiBbJzxmb3JtPicsICc8L2Zvcm0+JywgMV1cbiAgICAgICAgLCBsZWdlbmQ6IFsnPGZvcm0+PGZpZWxkc2V0PicsICc8L2ZpZWxkc2V0PjwvZm9ybT4nLCAyXVxuICAgICAgICAsIG9wdGlvbjogb3B0aW9uLCBvcHRncm91cDogb3B0aW9uXG4gICAgICAgICwgc2NyaXB0OiBub3Njb3BlLCBzdHlsZTogbm9zY29wZSwgbGluazogbm9zY29wZSwgcGFyYW06IG5vc2NvcGUsIGJhc2U6IG5vc2NvcGVcbiAgICAgIH1cbiAgICAsIHN0YXRlQXR0cmlidXRlcyA9IC9eKGNoZWNrZWR8c2VsZWN0ZWR8ZGlzYWJsZWQpJC9cbiAgICAsIGllID0gL21zaWUvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpXG4gICAgLCBoYXNDbGFzcywgYWRkQ2xhc3MsIHJlbW92ZUNsYXNzXG4gICAgLCB1aWRNYXAgPSB7fVxuICAgICwgdXVpZHMgPSAwXG4gICAgLCBkaWdpdCA9IC9eLT9bXFxkXFwuXSskL1xuICAgICwgZGF0dHIgPSAvXmRhdGEtKC4rKSQvXG4gICAgLCBweCA9ICdweCdcbiAgICAsIHNldEF0dHJpYnV0ZSA9ICdzZXRBdHRyaWJ1dGUnXG4gICAgLCBnZXRBdHRyaWJ1dGUgPSAnZ2V0QXR0cmlidXRlJ1xuICAgICwgYnlUYWcgPSAnZ2V0RWxlbWVudHNCeVRhZ05hbWUnXG4gICAgLCBmZWF0dXJlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdwJylcbiAgICAgICAgZS5pbm5lckhUTUwgPSAnPGEgaHJlZj1cIiN4XCI+eDwvYT48dGFibGUgc3R5bGU9XCJmbG9hdDpsZWZ0O1wiPjwvdGFibGU+J1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWZFeHRlbmRlZDogZVtieVRhZ10oJ2EnKVswXVtnZXRBdHRyaWJ1dGVdKCdocmVmJykgIT0gJyN4JyAvLyBJRSA8IDhcbiAgICAgICAgLCBhdXRvVGJvZHk6IGVbYnlUYWddKCd0Ym9keScpLmxlbmd0aCAhPT0gMCAvLyBJRSA8IDhcbiAgICAgICAgLCBjb21wdXRlZFN0eWxlOiBkb2MuZGVmYXVsdFZpZXcgJiYgZG9jLmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcbiAgICAgICAgLCBjc3NGbG9hdDogZVtieVRhZ10oJ3RhYmxlJylbMF0uc3R5bGUuc3R5bGVGbG9hdCA/ICdzdHlsZUZsb2F0JyA6ICdjc3NGbG9hdCdcbiAgICAgICAgLCB0cmFuc2Zvcm06IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IFsndHJhbnNmb3JtJywgJ3dlYmtpdFRyYW5zZm9ybScsICdNb3pUcmFuc2Zvcm0nLCAnT1RyYW5zZm9ybScsICdtc1RyYW5zZm9ybSddLCBpXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKHByb3BzW2ldIGluIGUuc3R5bGUpIHJldHVybiBwcm9wc1tpXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0oKVxuICAgICAgICAsIGNsYXNzTGlzdDogJ2NsYXNzTGlzdCcgaW4gZVxuICAgICAgICAsIG9wYXNpdHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZG9jLmNyZWF0ZUVsZW1lbnQoJ2EnKS5zdHlsZS5vcGFjaXR5ICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgIH0oKVxuICAgICAgICB9XG4gICAgICB9KClcbiAgICAsIHRyaW1SZXBsYWNlID0gLyheXFxzKnxcXHMqJCkvZ1xuICAgICwgd2hpdGVzcGFjZVJlZ2V4ID0gL1xccysvXG4gICAgLCB0b1N0cmluZyA9IFN0cmluZy5wcm90b3R5cGUudG9TdHJpbmdcbiAgICAsIHVuaXRsZXNzID0geyBsaW5lSGVpZ2h0OiAxLCB6b29tOiAxLCB6SW5kZXg6IDEsIG9wYWNpdHk6IDEsIGJveEZsZXg6IDEsIFdlYmtpdEJveEZsZXg6IDEsIE1vekJveEZsZXg6IDEgfVxuICAgICwgcXVlcnkgPSBkb2MucXVlcnlTZWxlY3RvckFsbCAmJiBmdW5jdGlvbiAoc2VsZWN0b3IpIHsgcmV0dXJuIGRvYy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSB9XG4gICAgLCB0cmltID0gU3RyaW5nLnByb3RvdHlwZS50cmltID9cbiAgICAgICAgZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICByZXR1cm4gcy50cmltKClcbiAgICAgICAgfSA6XG4gICAgICAgIGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSh0cmltUmVwbGFjZSwgJycpXG4gICAgICAgIH1cblxuICAgICwgZ2V0U3R5bGUgPSBmZWF0dXJlcy5jb21wdXRlZFN0eWxlXG4gICAgICAgID8gZnVuY3Rpb24gKGVsLCBwcm9wZXJ0eSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gbnVsbFxuICAgICAgICAgICAgICAsIGNvbXB1dGVkID0gZG9jLmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWwsICcnKVxuICAgICAgICAgICAgY29tcHV0ZWQgJiYgKHZhbHVlID0gY29tcHV0ZWRbcHJvcGVydHldKVxuICAgICAgICAgICAgcmV0dXJuIGVsLnN0eWxlW3Byb3BlcnR5XSB8fCB2YWx1ZVxuICAgICAgICAgIH1cbiAgICAgICAgOiAhKGllICYmIGh0bWwuY3VycmVudFN0eWxlKVxuICAgICAgICAgID8gZnVuY3Rpb24gKGVsLCBwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICByZXR1cm4gZWwuc3R5bGVbcHJvcGVydHldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgOlxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAgICAgICAgICAgKiBAcmV0dXJuIHtzdHJpbmd8bnVtYmVyfVxuICAgICAgICAgICAqL1xuICAgICAgICAgIGZ1bmN0aW9uIChlbCwgcHJvcGVydHkpIHtcbiAgICAgICAgICAgIHZhciB2YWwsIHZhbHVlXG4gICAgICAgICAgICBpZiAocHJvcGVydHkgPT0gJ29wYWNpdHknICYmICFmZWF0dXJlcy5vcGFzaXR5KSB7XG4gICAgICAgICAgICAgIHZhbCA9IDEwMFxuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhbCA9IGVsWydmaWx0ZXJzJ11bJ0RYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkFscGhhJ10ub3BhY2l0eVxuICAgICAgICAgICAgICB9IGNhdGNoIChlMSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICB2YWwgPSBlbFsnZmlsdGVycyddKCdhbHBoYScpLm9wYWNpdHlcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlMikge31cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gdmFsIC8gMTAwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZSA9IGVsLmN1cnJlbnRTdHlsZSA/IGVsLmN1cnJlbnRTdHlsZVtwcm9wZXJ0eV0gOiBudWxsXG4gICAgICAgICAgICByZXR1cm4gZWwuc3R5bGVbcHJvcGVydHldIHx8IHZhbHVlXG4gICAgICAgICAgfVxuXG4gIGZ1bmN0aW9uIGlzTm9kZShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUgJiYgbm9kZS5ub2RlTmFtZSAmJiAobm9kZS5ub2RlVHlwZSA9PSAxIHx8IG5vZGUubm9kZVR5cGUgPT0gMTEpXG4gIH1cblxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZShub2RlLCBob3N0LCBjbG9uZSkge1xuICAgIHZhciBpLCBsLCByZXRcbiAgICBpZiAodHlwZW9mIG5vZGUgPT0gJ3N0cmluZycpIHJldHVybiBib256by5jcmVhdGUobm9kZSlcbiAgICBpZiAoaXNOb2RlKG5vZGUpKSBub2RlID0gWyBub2RlIF1cbiAgICBpZiAoY2xvbmUpIHtcbiAgICAgIHJldCA9IFtdIC8vIGRvbid0IGNoYW5nZSBvcmlnaW5hbCBhcnJheVxuICAgICAgZm9yIChpID0gMCwgbCA9IG5vZGUubGVuZ3RoOyBpIDwgbDsgaSsrKSByZXRbaV0gPSBjbG9uZU5vZGUoaG9zdCwgbm9kZVtpXSlcbiAgICAgIHJldHVybiByZXRcbiAgICB9XG4gICAgcmV0dXJuIG5vZGVcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYyBhIGNsYXNzIG5hbWUgdG8gdGVzdFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZnVuY3Rpb24gY2xhc3NSZWcoYykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKCcoXnxcXFxccyspJyArIGMgKyAnKFxcXFxzK3wkKScpXG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0JvbnpvfEFycmF5fSBhclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKE9iamVjdCwgbnVtYmVyLCAoQm9uem98QXJyYXkpKX0gZm5cbiAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfc2NvcGVcbiAgICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3JldlxuICAgKiBAcmV0dXJuIHtCb256b3xBcnJheX1cbiAgICovXG4gIGZ1bmN0aW9uIGVhY2goYXIsIGZuLCBvcHRfc2NvcGUsIG9wdF9yZXYpIHtcbiAgICB2YXIgaW5kLCBpID0gMCwgbCA9IGFyLmxlbmd0aFxuICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpbmQgPSBvcHRfcmV2ID8gYXIubGVuZ3RoIC0gaSAtIDEgOiBpXG4gICAgICBmbi5jYWxsKG9wdF9zY29wZSB8fCBhcltpbmRdLCBhcltpbmRdLCBpbmQsIGFyKVxuICAgIH1cbiAgICByZXR1cm4gYXJcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Qm9uem98QXJyYXl9IGFyXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24oT2JqZWN0LCBudW1iZXIsIChCb256b3xBcnJheSkpfSBmblxuICAgKiBAcGFyYW0ge09iamVjdD19IG9wdF9zY29wZVxuICAgKiBAcmV0dXJuIHtCb256b3xBcnJheX1cbiAgICovXG4gIGZ1bmN0aW9uIGRlZXBFYWNoKGFyLCBmbiwgb3B0X3Njb3BlKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChpc05vZGUoYXJbaV0pKSB7XG4gICAgICAgIGRlZXBFYWNoKGFyW2ldLmNoaWxkTm9kZXMsIGZuLCBvcHRfc2NvcGUpXG4gICAgICAgIGZuLmNhbGwob3B0X3Njb3BlIHx8IGFyW2ldLCBhcltpXSwgaSwgYXIpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhclxuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gY2FtZWxpemUocykge1xuICAgIHJldHVybiBzLnJlcGxhY2UoLy0oLikvZywgZnVuY3Rpb24gKG0sIG0xKSB7XG4gICAgICByZXR1cm4gbTEudG9VcHBlckNhc2UoKVxuICAgIH0pXG4gIH1cblxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBmdW5jdGlvbiBkZWNhbWVsaXplKHMpIHtcbiAgICByZXR1cm4gcyA/IHMucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgJyQxLSQyJykudG9Mb3dlckNhc2UoKSA6IHNcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICogQHJldHVybiB7Kn1cbiAgICovXG4gIGZ1bmN0aW9uIGRhdGEoZWwpIHtcbiAgICBlbFtnZXRBdHRyaWJ1dGVdKCdkYXRhLW5vZGUtdWlkJykgfHwgZWxbc2V0QXR0cmlidXRlXSgnZGF0YS1ub2RlLXVpZCcsICsrdXVpZHMpXG4gICAgdmFyIHVpZCA9IGVsW2dldEF0dHJpYnV0ZV0oJ2RhdGEtbm9kZS11aWQnKVxuICAgIHJldHVybiB1aWRNYXBbdWlkXSB8fCAodWlkTWFwW3VpZF0gPSB7fSlcbiAgfVxuXG5cbiAgLyoqXG4gICAqIHJlbW92ZXMgdGhlIGRhdGEgYXNzb2NpYXRlZCB3aXRoIGFuIGVsZW1lbnRcbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKi9cbiAgZnVuY3Rpb24gY2xlYXJEYXRhKGVsKSB7XG4gICAgdmFyIHVpZCA9IGVsW2dldEF0dHJpYnV0ZV0oJ2RhdGEtbm9kZS11aWQnKVxuICAgIGlmICh1aWQpIGRlbGV0ZSB1aWRNYXBbdWlkXVxuICB9XG5cblxuICBmdW5jdGlvbiBkYXRhVmFsdWUoZCkge1xuICAgIHZhciBmXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZCA9PT0gbnVsbCB8fCBkID09PSB1bmRlZmluZWQpID8gdW5kZWZpbmVkIDpcbiAgICAgICAgZCA9PT0gJ3RydWUnID8gdHJ1ZSA6XG4gICAgICAgICAgZCA9PT0gJ2ZhbHNlJyA/IGZhbHNlIDpcbiAgICAgICAgICAgIGQgPT09ICdudWxsJyA/IG51bGwgOlxuICAgICAgICAgICAgICAoZiA9IHBhcnNlRmxvYXQoZCkpID09IGQgPyBmIDogZDtcbiAgICB9IGNhdGNoKGUpIHt9XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cblxuICAvKipcbiAgICogQHBhcmFtIHtCb256b3xBcnJheX0gYXJcbiAgICogQHBhcmFtIHtmdW5jdGlvbihPYmplY3QsIG51bWJlciwgKEJvbnpvfEFycmF5KSl9IGZuXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X3Njb3BlXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgYHNvbWVgdGhpbmcgd2FzIGZvdW5kXG4gICAqL1xuICBmdW5jdGlvbiBzb21lKGFyLCBmbiwgb3B0X3Njb3BlKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBhci5sZW5ndGg7IGkgPCBqOyArK2kpIGlmIChmbi5jYWxsKG9wdF9zY29wZSB8fCBudWxsLCBhcltpXSwgaSwgYXIpKSByZXR1cm4gdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cblxuICAvKipcbiAgICogdGhpcyBjb3VsZCBiZSBhIGdpYW50IGVudW0gb2YgQ1NTIHByb3BlcnRpZXNcbiAgICogYnV0IGluIGZhdm9yIG9mIGZpbGUgc2l6ZSBzYW5zLWNsb3N1cmUgZGVhZGNvZGUgb3B0aW1pemF0aW9uc1xuICAgKiB3ZSdyZSBqdXN0IGFza2luZyBmb3IgYW55IG9sIHN0cmluZ1xuICAgKiB0aGVuIGl0IGdldHMgdHJhbnNmb3JtZWQgaW50byB0aGUgYXBwcm9wcmlhdGUgc3R5bGUgcHJvcGVydHkgZm9yIEpTIGFjY2Vzc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBmdW5jdGlvbiBzdHlsZVByb3BlcnR5KHApIHtcbiAgICAgIChwID09ICd0cmFuc2Zvcm0nICYmIChwID0gZmVhdHVyZXMudHJhbnNmb3JtKSkgfHxcbiAgICAgICAgKC9edHJhbnNmb3JtLT9bT29dcmlnaW4kLy50ZXN0KHApICYmIChwID0gZmVhdHVyZXMudHJhbnNmb3JtICsgJ09yaWdpbicpKSB8fFxuICAgICAgICAocCA9PSAnZmxvYXQnICYmIChwID0gZmVhdHVyZXMuY3NzRmxvYXQpKVxuICAgICAgcmV0dXJuIHAgPyBjYW1lbGl6ZShwKSA6IG51bGxcbiAgfVxuXG4gIC8vIHRoaXMgaW5zZXJ0IG1ldGhvZCBpcyBpbnRlbnNlXG4gIGZ1bmN0aW9uIGluc2VydCh0YXJnZXQsIGhvc3QsIGZuLCByZXYpIHtcbiAgICB2YXIgaSA9IDAsIHNlbGYgPSBob3N0IHx8IHRoaXMsIHIgPSBbXVxuICAgICAgLy8gdGFyZ2V0IG5vZGVzIGNvdWxkIGJlIGEgY3NzIHNlbGVjdG9yIGlmIGl0J3MgYSBzdHJpbmcgYW5kIGEgc2VsZWN0b3IgZW5naW5lIGlzIHByZXNlbnRcbiAgICAgIC8vIG90aGVyd2lzZSwganVzdCB1c2UgdGFyZ2V0XG4gICAgICAsIG5vZGVzID0gcXVlcnkgJiYgdHlwZW9mIHRhcmdldCA9PSAnc3RyaW5nJyAmJiB0YXJnZXQuY2hhckF0KDApICE9ICc8JyA/IHF1ZXJ5KHRhcmdldCkgOiB0YXJnZXRcbiAgICAvLyBub3JtYWxpemUgZWFjaCBub2RlIGluIGNhc2UgaXQncyBzdGlsbCBhIHN0cmluZyBhbmQgd2UgbmVlZCB0byBjcmVhdGUgbm9kZXMgb24gdGhlIGZseVxuICAgIGVhY2gobm9ybWFsaXplKG5vZGVzKSwgZnVuY3Rpb24gKHQsIGopIHtcbiAgICAgIGVhY2goc2VsZiwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIGZuKHQsIHJbaSsrXSA9IGogPiAwID8gY2xvbmVOb2RlKHNlbGYsIGVsKSA6IGVsKVxuICAgICAgfSwgbnVsbCwgcmV2KVxuICAgIH0sIHRoaXMsIHJldilcbiAgICBzZWxmLmxlbmd0aCA9IGlcbiAgICBlYWNoKHIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBzZWxmWy0taV0gPSBlXG4gICAgfSwgbnVsbCwgIXJldilcbiAgICByZXR1cm4gc2VsZlxuICB9XG5cblxuICAvKipcbiAgICogc2V0cyBhbiBlbGVtZW50IHRvIGFuIGV4cGxpY2l0IHgveSBwb3NpdGlvbiBvbiB0aGUgcGFnZVxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAqIEBwYXJhbSB7P251bWJlcn0geFxuICAgKiBAcGFyYW0gez9udW1iZXJ9IHlcbiAgICovXG4gIGZ1bmN0aW9uIHh5KGVsLCB4LCB5KSB7XG4gICAgdmFyICRlbCA9IGJvbnpvKGVsKVxuICAgICAgLCBzdHlsZSA9ICRlbC5jc3MoJ3Bvc2l0aW9uJylcbiAgICAgICwgb2Zmc2V0ID0gJGVsLm9mZnNldCgpXG4gICAgICAsIHJlbCA9ICdyZWxhdGl2ZSdcbiAgICAgICwgaXNSZWwgPSBzdHlsZSA9PSByZWxcbiAgICAgICwgZGVsdGEgPSBbcGFyc2VJbnQoJGVsLmNzcygnbGVmdCcpLCAxMCksIHBhcnNlSW50KCRlbC5jc3MoJ3RvcCcpLCAxMCldXG5cbiAgICBpZiAoc3R5bGUgPT0gJ3N0YXRpYycpIHtcbiAgICAgICRlbC5jc3MoJ3Bvc2l0aW9uJywgcmVsKVxuICAgICAgc3R5bGUgPSByZWxcbiAgICB9XG5cbiAgICBpc05hTihkZWx0YVswXSkgJiYgKGRlbHRhWzBdID0gaXNSZWwgPyAwIDogZWwub2Zmc2V0TGVmdClcbiAgICBpc05hTihkZWx0YVsxXSkgJiYgKGRlbHRhWzFdID0gaXNSZWwgPyAwIDogZWwub2Zmc2V0VG9wKVxuXG4gICAgeCAhPSBudWxsICYmIChlbC5zdHlsZS5sZWZ0ID0geCAtIG9mZnNldC5sZWZ0ICsgZGVsdGFbMF0gKyBweClcbiAgICB5ICE9IG51bGwgJiYgKGVsLnN0eWxlLnRvcCA9IHkgLSBvZmZzZXQudG9wICsgZGVsdGFbMV0gKyBweClcblxuICB9XG5cbiAgLy8gY2xhc3NMaXN0IHN1cHBvcnQgZm9yIGNsYXNzIG1hbmFnZW1lbnRcbiAgLy8gYWx0aG8gdG8gYmUgZmFpciwgdGhlIGFwaSBzdWNrcyBiZWNhdXNlIGl0IHdvbid0IGFjY2VwdCBtdWx0aXBsZSBjbGFzc2VzIGF0IG9uY2VcbiAgaWYgKGZlYXR1cmVzLmNsYXNzTGlzdCkge1xuICAgIGhhc0NsYXNzID0gZnVuY3Rpb24gKGVsLCBjKSB7XG4gICAgICByZXR1cm4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGMpXG4gICAgfVxuICAgIGFkZENsYXNzID0gZnVuY3Rpb24gKGVsLCBjKSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGMpXG4gICAgfVxuICAgIHJlbW92ZUNsYXNzID0gZnVuY3Rpb24gKGVsLCBjKSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpXG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGhhc0NsYXNzID0gZnVuY3Rpb24gKGVsLCBjKSB7XG4gICAgICByZXR1cm4gY2xhc3NSZWcoYykudGVzdChlbC5jbGFzc05hbWUpXG4gICAgfVxuICAgIGFkZENsYXNzID0gZnVuY3Rpb24gKGVsLCBjKSB7XG4gICAgICBlbC5jbGFzc05hbWUgPSB0cmltKGVsLmNsYXNzTmFtZSArICcgJyArIGMpXG4gICAgfVxuICAgIHJlbW92ZUNsYXNzID0gZnVuY3Rpb24gKGVsLCBjKSB7XG4gICAgICBlbC5jbGFzc05hbWUgPSB0cmltKGVsLmNsYXNzTmFtZS5yZXBsYWNlKGNsYXNzUmVnKGMpLCAnICcpKVxuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIHRoaXMgYWxsb3dzIG1ldGhvZCBjYWxsaW5nIGZvciBzZXR0aW5nIHZhbHVlc1xuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBib256byhlbGVtZW50cykuY3NzKCdjb2xvcicsIGZ1bmN0aW9uIChlbCkge1xuICAgKiAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtY29sb3InKVxuICAgKiB9KVxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb24gKEVsZW1lbnQpfHN0cmluZ31cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZnVuY3Rpb24gc2V0dGVyKGVsLCB2KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09ICdmdW5jdGlvbicgPyB2KGVsKSA6IHZcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjcm9sbCh4LCB5LCB0eXBlKSB7XG4gICAgdmFyIGVsID0gdGhpc1swXVxuICAgIGlmICghZWwpIHJldHVybiB0aGlzXG4gICAgaWYgKHggPT0gbnVsbCAmJiB5ID09IG51bGwpIHtcbiAgICAgIHJldHVybiAoaXNCb2R5KGVsKSA/IGdldFdpbmRvd1Njcm9sbCgpIDogeyB4OiBlbC5zY3JvbGxMZWZ0LCB5OiBlbC5zY3JvbGxUb3AgfSlbdHlwZV1cbiAgICB9XG4gICAgaWYgKGlzQm9keShlbCkpIHtcbiAgICAgIHdpbi5zY3JvbGxUbyh4LCB5KVxuICAgIH0gZWxzZSB7XG4gICAgICB4ICE9IG51bGwgJiYgKGVsLnNjcm9sbExlZnQgPSB4KVxuICAgICAgeSAhPSBudWxsICYmIChlbC5zY3JvbGxUb3AgPSB5KVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge0FycmF5LjxFbGVtZW50PnxFbGVtZW50fE5vZGV8c3RyaW5nfSBlbGVtZW50c1xuICAgKi9cbiAgZnVuY3Rpb24gQm9uem8oZWxlbWVudHMpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDBcbiAgICBpZiAoZWxlbWVudHMpIHtcbiAgICAgIGVsZW1lbnRzID0gdHlwZW9mIGVsZW1lbnRzICE9PSAnc3RyaW5nJyAmJlxuICAgICAgICAhZWxlbWVudHMubm9kZVR5cGUgJiZcbiAgICAgICAgdHlwZW9mIGVsZW1lbnRzLmxlbmd0aCAhPT0gJ3VuZGVmaW5lZCcgP1xuICAgICAgICAgIGVsZW1lbnRzIDpcbiAgICAgICAgICBbZWxlbWVudHNdXG4gICAgICB0aGlzLmxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aFxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykgdGhpc1tpXSA9IGVsZW1lbnRzW2ldXG4gICAgfVxuICB9XG5cbiAgQm9uem8ucHJvdG90eXBlID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICAgICAgICogQHJldHVybiB7RWxlbWVudHxOb2RlfVxuICAgICAgICovXG4gICAgICBnZXQ6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpc1tpbmRleF0gfHwgbnVsbFxuICAgICAgfVxuXG4gICAgICAvLyBpdGV0YXRvcnNcbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihFbGVtZW50fE5vZGUpfSBmblxuICAgICAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfc2NvcGVcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfVxuICAgICAgICovXG4gICAgLCBlYWNoOiBmdW5jdGlvbiAoZm4sIG9wdF9zY29wZSkge1xuICAgICAgICByZXR1cm4gZWFjaCh0aGlzLCBmbiwgb3B0X3Njb3BlKVxuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gICAgICAgKiBAcGFyYW0ge09iamVjdD19IG9wdF9zY29wZVxuICAgICAgICogQHJldHVybiB7Qm9uem99XG4gICAgICAgKi9cbiAgICAsIGRlZXBFYWNoOiBmdW5jdGlvbiAoZm4sIG9wdF9zY29wZSkge1xuICAgICAgICByZXR1cm4gZGVlcEVhY2godGhpcywgZm4sIG9wdF9zY29wZSlcbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gb3B0X3JlamVjdFxuICAgICAgICogQHJldHVybiB7QXJyYXl9XG4gICAgICAgKi9cbiAgICAsIG1hcDogZnVuY3Rpb24gKGZuLCBvcHRfcmVqZWN0KSB7XG4gICAgICAgIHZhciBtID0gW10sIG4sIGlcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBuID0gZm4uY2FsbCh0aGlzLCB0aGlzW2ldLCBpKVxuICAgICAgICAgIG9wdF9yZWplY3QgPyAob3B0X3JlamVjdChuKSAmJiBtLnB1c2gobikpIDogbS5wdXNoKG4pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1cbiAgICAgIH1cblxuICAgIC8vIHRleHQgYW5kIGh0bWwgaW5zZXJ0ZXJzIVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGggdGhlIEhUTUwgdG8gaW5zZXJ0XG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gb3B0X3RleHQgd2hldGhlciB0byBzZXQgb3IgZ2V0IHRleHQgY29udGVudFxuICAgICAqIEByZXR1cm4ge0JvbnpvfHN0cmluZ31cbiAgICAgKi9cbiAgICAsIGh0bWw6IGZ1bmN0aW9uIChoLCBvcHRfdGV4dCkge1xuICAgICAgICB2YXIgbWV0aG9kID0gb3B0X3RleHRcbiAgICAgICAgICAgICAgPyBodG1sLnRleHRDb250ZW50ID09PSB1bmRlZmluZWQgPyAnaW5uZXJUZXh0JyA6ICd0ZXh0Q29udGVudCdcbiAgICAgICAgICAgICAgOiAnaW5uZXJIVE1MJ1xuICAgICAgICAgICwgdGhhdCA9IHRoaXNcbiAgICAgICAgICAsIGFwcGVuZCA9IGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICAgICAgICBlYWNoKG5vcm1hbGl6ZShoLCB0aGF0LCBpKSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBlbC5hcHBlbmRDaGlsZChub2RlKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICwgdXBkYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRfdGV4dCB8fCAodHlwZW9mIGggPT0gJ3N0cmluZycgJiYgIXNwZWNpYWxUYWdzLnRlc3QoZWwudGFnTmFtZSkpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZWxbbWV0aG9kXSA9IGhcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICAgIGFwcGVuZChlbCwgaSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGVvZiBoICE9ICd1bmRlZmluZWQnXG4gICAgICAgICAgPyB0aGlzLmVtcHR5KCkuZWFjaCh1cGRhdGVFbGVtZW50KVxuICAgICAgICAgIDogdGhpc1swXSA/IHRoaXNbMF1bbWV0aG9kXSA6ICcnXG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfdGV4dCB0aGUgdGV4dCB0byBzZXQsIG90aGVyd2lzZSB0aGlzIGlzIGEgZ2V0dGVyXG4gICAgICAgKiBAcmV0dXJuIHtCb256b3xzdHJpbmd9XG4gICAgICAgKi9cbiAgICAsIHRleHQ6IGZ1bmN0aW9uIChvcHRfdGV4dCkge1xuICAgICAgICByZXR1cm4gdGhpcy5odG1sKG9wdF90ZXh0LCB0cnVlKVxuICAgICAgfVxuXG4gICAgICAvLyBtb3JlIHJlbGF0ZWQgaW5zZXJ0aW9uIG1ldGhvZHNcblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge0JvbnpvfHN0cmluZ3xFbGVtZW50fEFycmF5fSBub2RlXG4gICAgICAgKiBAcmV0dXJuIHtCb256b31cbiAgICAgICAqL1xuICAgICwgYXBwZW5kOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoZWwsIGkpIHtcbiAgICAgICAgICBlYWNoKG5vcm1hbGl6ZShub2RlLCB0aGF0LCBpKSwgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGkpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7Qm9uem98c3RyaW5nfEVsZW1lbnR8QXJyYXl9IG5vZGVcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfVxuICAgICAgICovXG4gICAgLCBwcmVwZW5kOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoZWwsIGkpIHtcbiAgICAgICAgICB2YXIgZmlyc3QgPSBlbC5maXJzdENoaWxkXG4gICAgICAgICAgZWFjaChub3JtYWxpemUobm9kZSwgdGhhdCwgaSksIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICBlbC5pbnNlcnRCZWZvcmUoaSwgZmlyc3QpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7Qm9uem98c3RyaW5nfEVsZW1lbnR8QXJyYXl9IHRhcmdldCB0aGUgbG9jYXRpb24gZm9yIHdoaWNoIHlvdSdsbCBpbnNlcnQgeW91ciBuZXcgY29udGVudFxuICAgICAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfaG9zdCBhbiBvcHRpb25hbCBob3N0IHNjb3BlIChwcmltYXJpbHkgdXNlZCB3aGVuIGludGVncmF0ZWQgd2l0aCBFbmRlcilcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfVxuICAgICAgICovXG4gICAgLCBhcHBlbmRUbzogZnVuY3Rpb24gKHRhcmdldCwgb3B0X2hvc3QpIHtcbiAgICAgICAgcmV0dXJuIGluc2VydC5jYWxsKHRoaXMsIHRhcmdldCwgb3B0X2hvc3QsIGZ1bmN0aW9uICh0LCBlbCkge1xuICAgICAgICAgIHQuYXBwZW5kQ2hpbGQoZWwpXG4gICAgICAgIH0pXG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge0JvbnpvfHN0cmluZ3xFbGVtZW50fEFycmF5fSB0YXJnZXQgdGhlIGxvY2F0aW9uIGZvciB3aGljaCB5b3UnbGwgaW5zZXJ0IHlvdXIgbmV3IGNvbnRlbnRcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2hvc3QgYW4gb3B0aW9uYWwgaG9zdCBzY29wZSAocHJpbWFyaWx5IHVzZWQgd2hlbiBpbnRlZ3JhdGVkIHdpdGggRW5kZXIpXG4gICAgICAgKiBAcmV0dXJuIHtCb256b31cbiAgICAgICAqL1xuICAgICwgcHJlcGVuZFRvOiBmdW5jdGlvbiAodGFyZ2V0LCBvcHRfaG9zdCkge1xuICAgICAgICByZXR1cm4gaW5zZXJ0LmNhbGwodGhpcywgdGFyZ2V0LCBvcHRfaG9zdCwgZnVuY3Rpb24gKHQsIGVsKSB7XG4gICAgICAgICAgdC5pbnNlcnRCZWZvcmUoZWwsIHQuZmlyc3RDaGlsZClcbiAgICAgICAgfSwgMSlcbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7Qm9uem98c3RyaW5nfEVsZW1lbnR8QXJyYXl9IG5vZGVcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfVxuICAgICAgICovXG4gICAgLCBiZWZvcmU6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpc1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICAgIGVhY2gobm9ybWFsaXplKG5vZGUsIHRoYXQsIGkpLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgZWxbcGFyZW50Tm9kZV0uaW5zZXJ0QmVmb3JlKGksIGVsKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge0JvbnpvfHN0cmluZ3xFbGVtZW50fEFycmF5fSBub2RlXG4gICAgICAgKiBAcmV0dXJuIHtCb256b31cbiAgICAgICAqL1xuICAgICwgYWZ0ZXI6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpc1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICAgIGVhY2gobm9ybWFsaXplKG5vZGUsIHRoYXQsIGkpLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgZWxbcGFyZW50Tm9kZV0uaW5zZXJ0QmVmb3JlKGksIGVsLm5leHRTaWJsaW5nKVxuICAgICAgICAgIH0sIG51bGwsIDEpXG4gICAgICAgIH0pXG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge0JvbnpvfHN0cmluZ3xFbGVtZW50fEFycmF5fSB0YXJnZXQgdGhlIGxvY2F0aW9uIGZvciB3aGljaCB5b3UnbGwgaW5zZXJ0IHlvdXIgbmV3IGNvbnRlbnRcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2hvc3QgYW4gb3B0aW9uYWwgaG9zdCBzY29wZSAocHJpbWFyaWx5IHVzZWQgd2hlbiBpbnRlZ3JhdGVkIHdpdGggRW5kZXIpXG4gICAgICAgKiBAcmV0dXJuIHtCb256b31cbiAgICAgICAqL1xuICAgICwgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbiAodGFyZ2V0LCBvcHRfaG9zdCkge1xuICAgICAgICByZXR1cm4gaW5zZXJ0LmNhbGwodGhpcywgdGFyZ2V0LCBvcHRfaG9zdCwgZnVuY3Rpb24gKHQsIGVsKSB7XG4gICAgICAgICAgdFtwYXJlbnROb2RlXS5pbnNlcnRCZWZvcmUoZWwsIHQpXG4gICAgICAgIH0pXG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge0JvbnpvfHN0cmluZ3xFbGVtZW50fEFycmF5fSB0YXJnZXQgdGhlIGxvY2F0aW9uIGZvciB3aGljaCB5b3UnbGwgaW5zZXJ0IHlvdXIgbmV3IGNvbnRlbnRcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2hvc3QgYW4gb3B0aW9uYWwgaG9zdCBzY29wZSAocHJpbWFyaWx5IHVzZWQgd2hlbiBpbnRlZ3JhdGVkIHdpdGggRW5kZXIpXG4gICAgICAgKiBAcmV0dXJuIHtCb256b31cbiAgICAgICAqL1xuICAgICwgaW5zZXJ0QWZ0ZXI6IGZ1bmN0aW9uICh0YXJnZXQsIG9wdF9ob3N0KSB7XG4gICAgICAgIHJldHVybiBpbnNlcnQuY2FsbCh0aGlzLCB0YXJnZXQsIG9wdF9ob3N0LCBmdW5jdGlvbiAodCwgZWwpIHtcbiAgICAgICAgICB2YXIgc2libGluZyA9IHQubmV4dFNpYmxpbmdcbiAgICAgICAgICBzaWJsaW5nID9cbiAgICAgICAgICAgIHRbcGFyZW50Tm9kZV0uaW5zZXJ0QmVmb3JlKGVsLCBzaWJsaW5nKSA6XG4gICAgICAgICAgICB0W3BhcmVudE5vZGVdLmFwcGVuZENoaWxkKGVsKVxuICAgICAgICB9LCAxKVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtCb256b3xzdHJpbmd8RWxlbWVudHxBcnJheX0gbm9kZVxuICAgICAgICogQHJldHVybiB7Qm9uem99XG4gICAgICAgKi9cbiAgICAsIHJlcGxhY2VXaXRoOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBib256byhub3JtYWxpemUobm9kZSkpLmluc2VydEFmdGVyKHRoaXMpXG4gICAgICAgIHJldHVybiB0aGlzLnJlbW92ZSgpXG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfaG9zdCBhbiBvcHRpb25hbCBob3N0IHNjb3BlIChwcmltYXJpbHkgdXNlZCB3aGVuIGludGVncmF0ZWQgd2l0aCBFbmRlcilcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfVxuICAgICAgICovXG4gICAgLCBjbG9uZTogZnVuY3Rpb24gKG9wdF9ob3N0KSB7XG4gICAgICAgIHZhciByZXQgPSBbXSAvLyBkb24ndCBjaGFuZ2Ugb3JpZ2luYWwgYXJyYXlcbiAgICAgICAgICAsIGwsIGlcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSByZXRbaV0gPSBjbG9uZU5vZGUob3B0X2hvc3QgfHwgdGhpcywgdGhpc1tpXSlcbiAgICAgICAgcmV0dXJuIGJvbnpvKHJldClcbiAgICAgIH1cblxuICAgICAgLy8gY2xhc3MgbWFuYWdlbWVudFxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjXG4gICAgICAgKiBAcmV0dXJuIHtCb256b31cbiAgICAgICAqL1xuICAgICwgYWRkQ2xhc3M6IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGMgPSB0b1N0cmluZy5jYWxsKGMpLnNwbGl0KHdoaXRlc3BhY2VSZWdleClcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAvLyB3ZSBgZWFjaGAgaGVyZSBzbyB5b3UgY2FuIGRvICRlbC5hZGRDbGFzcygnZm9vIGJhcicpXG4gICAgICAgICAgZWFjaChjLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgaWYgKGMgJiYgIWhhc0NsYXNzKGVsLCBzZXR0ZXIoZWwsIGMpKSlcbiAgICAgICAgICAgICAgYWRkQ2xhc3MoZWwsIHNldHRlcihlbCwgYykpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjXG4gICAgICAgKiBAcmV0dXJuIHtCb256b31cbiAgICAgICAqL1xuICAgICwgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGMgPSB0b1N0cmluZy5jYWxsKGMpLnNwbGl0KHdoaXRlc3BhY2VSZWdleClcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICBlYWNoKGMsIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICBpZiAoYyAmJiBoYXNDbGFzcyhlbCwgc2V0dGVyKGVsLCBjKSkpXG4gICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGVsLCBzZXR0ZXIoZWwsIGMpKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY1xuICAgICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgICAqL1xuICAgICwgaGFzQ2xhc3M6IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGMgPSB0b1N0cmluZy5jYWxsKGMpLnNwbGl0KHdoaXRlc3BhY2VSZWdleClcbiAgICAgICAgcmV0dXJuIHNvbWUodGhpcywgZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgcmV0dXJuIHNvbWUoYywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHJldHVybiBjICYmIGhhc0NsYXNzKGVsLCBjKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gYyBjbGFzc25hbWUgdG8gdG9nZ2xlXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfY29uZGl0aW9uIHdoZXRoZXIgdG8gYWRkIG9yIHJlbW92ZSB0aGUgY2xhc3Mgc3RyYWlnaHQgYXdheVxuICAgICAgICogQHJldHVybiB7Qm9uem99XG4gICAgICAgKi9cbiAgICAsIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiAoYywgb3B0X2NvbmRpdGlvbikge1xuICAgICAgICBjID0gdG9TdHJpbmcuY2FsbChjKS5zcGxpdCh3aGl0ZXNwYWNlUmVnZXgpXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgZWFjaChjLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgaWYgKGMpIHtcbiAgICAgICAgICAgICAgdHlwZW9mIG9wdF9jb25kaXRpb24gIT09ICd1bmRlZmluZWQnID9cbiAgICAgICAgICAgICAgICBvcHRfY29uZGl0aW9uID8gIWhhc0NsYXNzKGVsLCBjKSAmJiBhZGRDbGFzcyhlbCwgYykgOiByZW1vdmVDbGFzcyhlbCwgYykgOlxuICAgICAgICAgICAgICAgIGhhc0NsYXNzKGVsLCBjKSA/IHJlbW92ZUNsYXNzKGVsLCBjKSA6IGFkZENsYXNzKGVsLCBjKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIC8vIGRpc3BsYXkgdG9nZ2xlcnNcblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF90eXBlIHVzZWZ1bCB0byBzZXQgYmFjayB0byBhbnl0aGluZyBvdGhlciB0aGFuIGFuIGVtcHR5IHN0cmluZ1xuICAgICAgICogQHJldHVybiB7Qm9uem99XG4gICAgICAgKi9cbiAgICAsIHNob3c6IGZ1bmN0aW9uIChvcHRfdHlwZSkge1xuICAgICAgICBvcHRfdHlwZSA9IHR5cGVvZiBvcHRfdHlwZSA9PSAnc3RyaW5nJyA/IG9wdF90eXBlIDogJydcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gb3B0X3R5cGVcbiAgICAgICAgfSlcbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfVxuICAgICAgICovXG4gICAgLCBoaWRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJ1xuICAgICAgICB9KVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtGdW5jdGlvbj19IG9wdF9jYWxsYmFja1xuICAgICAgICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfdHlwZVxuICAgICAgICogQHJldHVybiB7Qm9uem99XG4gICAgICAgKi9cbiAgICAsIHRvZ2dsZTogZnVuY3Rpb24gKG9wdF9jYWxsYmFjaywgb3B0X3R5cGUpIHtcbiAgICAgICAgb3B0X3R5cGUgPSB0eXBlb2Ygb3B0X3R5cGUgPT0gJ3N0cmluZycgPyBvcHRfdHlwZSA6ICcnO1xuICAgICAgICB0eXBlb2Ygb3B0X2NhbGxiYWNrICE9ICdmdW5jdGlvbicgJiYgKG9wdF9jYWxsYmFjayA9IG51bGwpXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IChlbC5vZmZzZXRXaWR0aCB8fCBlbC5vZmZzZXRIZWlnaHQpID8gJ25vbmUnIDogb3B0X3R5cGU7XG4gICAgICAgICAgb3B0X2NhbGxiYWNrICYmIG9wdF9jYWxsYmFjay5jYWxsKGVsKVxuICAgICAgICB9KVxuICAgICAgfVxuXG5cbiAgICAgIC8vIERPTSBXYWxrZXJzICYgZ2V0dGVyc1xuXG4gICAgICAvKipcbiAgICAgICAqIEByZXR1cm4ge0VsZW1lbnR8Tm9kZX1cbiAgICAgICAqL1xuICAgICwgZmlyc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGJvbnpvKHRoaXMubGVuZ3RoID8gdGhpc1swXSA6IFtdKVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHJldHVybiB7RWxlbWVudHxOb2RlfVxuICAgICAgICovXG4gICAgLCBsYXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBib256byh0aGlzLmxlbmd0aCA/IHRoaXNbdGhpcy5sZW5ndGggLSAxXSA6IFtdKVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHJldHVybiB7RWxlbWVudHxOb2RlfVxuICAgICAgICovXG4gICAgLCBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbGF0ZWQoJ25leHRTaWJsaW5nJylcbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIEByZXR1cm4ge0VsZW1lbnR8Tm9kZX1cbiAgICAgICAqL1xuICAgICwgcHJldmlvdXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVsYXRlZCgncHJldmlvdXNTaWJsaW5nJylcbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIEByZXR1cm4ge0VsZW1lbnR8Tm9kZX1cbiAgICAgICAqL1xuICAgICwgcGFyZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVsYXRlZChwYXJlbnROb2RlKVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgdGhlIGRpcmVjdGlvbmFsIERPTSBtZXRob2RcbiAgICAgICAqIEByZXR1cm4ge0VsZW1lbnR8Tm9kZX1cbiAgICAgICAqL1xuICAgICwgcmVsYXRlZDogZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gYm9uem8odGhpcy5tYXAoXG4gICAgICAgICAgZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICBlbCA9IGVsW21ldGhvZF1cbiAgICAgICAgICAgIHdoaWxlIChlbCAmJiBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgICAgICAgICBlbCA9IGVsW21ldGhvZF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbCB8fCAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBlbFxuICAgICAgICAgIH1cbiAgICAgICAgKSlcbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfVxuICAgICAgICovXG4gICAgLCBmb2N1czogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxlbmd0aCAmJiB0aGlzWzBdLmZvY3VzKClcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfVxuICAgICAgICovXG4gICAgLCBibHVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubGVuZ3RoICYmIHRoaXNbMF0uYmx1cigpXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICB9XG5cbiAgICAgIC8vIHN0eWxlIGdldHRlciBzZXR0ZXIgJiByZWxhdGVkIG1ldGhvZHNcblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge09iamVjdHxzdHJpbmd9IG9cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X3ZcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfHN0cmluZ31cbiAgICAgICAqL1xuICAgICwgY3NzOiBmdW5jdGlvbiAobywgb3B0X3YpIHtcbiAgICAgICAgdmFyIHAsIGl0ZXIgPSBvXG4gICAgICAgIC8vIGlzIHRoaXMgYSByZXF1ZXN0IGZvciBqdXN0IGdldHRpbmcgYSBzdHlsZT9cbiAgICAgICAgaWYgKG9wdF92ID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG8gPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAvLyByZXB1cnBvc2UgJ3YnXG4gICAgICAgICAgb3B0X3YgPSB0aGlzWzBdXG4gICAgICAgICAgaWYgKCFvcHRfdikgcmV0dXJuIG51bGxcbiAgICAgICAgICBpZiAob3B0X3YgPT09IGRvYyB8fCBvcHRfdiA9PT0gd2luKSB7XG4gICAgICAgICAgICBwID0gKG9wdF92ID09PSBkb2MpID8gYm9uem8uZG9jKCkgOiBib256by52aWV3cG9ydCgpXG4gICAgICAgICAgICByZXR1cm4gbyA9PSAnd2lkdGgnID8gcC53aWR0aCA6IG8gPT0gJ2hlaWdodCcgPyBwLmhlaWdodCA6ICcnXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAobyA9IHN0eWxlUHJvcGVydHkobykpID8gZ2V0U3R5bGUob3B0X3YsIG8pIDogbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaXRlciA9IHt9XG4gICAgICAgICAgaXRlcltvXSA9IG9wdF92XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWZlYXR1cmVzLm9wYXNpdHkgJiYgJ29wYWNpdHknIGluIGl0ZXIpIHtcbiAgICAgICAgICAvLyBvaCB0aGlzICdvbCBnYW11dFxuICAgICAgICAgIGl0ZXIuZmlsdGVyID0gaXRlci5vcGFjaXR5ICE9IG51bGwgJiYgaXRlci5vcGFjaXR5ICE9PSAnJ1xuICAgICAgICAgICAgPyAnYWxwaGEob3BhY2l0eT0nICsgKGl0ZXIub3BhY2l0eSAqIDEwMCkgKyAnKSdcbiAgICAgICAgICAgIDogJydcbiAgICAgICAgICAvLyBnaXZlIGl0IGxheW91dFxuICAgICAgICAgIGl0ZXIuem9vbSA9IG8uem9vbSB8fCAxXG4gICAgICAgICAgO2RlbGV0ZSBpdGVyLm9wYWNpdHlcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGZuKGVsLCBwLCB2KSB7XG4gICAgICAgICAgZm9yICh2YXIgayBpbiBpdGVyKSB7XG4gICAgICAgICAgICBpZiAoaXRlci5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICB2ID0gaXRlcltrXTtcbiAgICAgICAgICAgICAgLy8gY2hhbmdlIFwiNVwiIHRvIFwiNXB4XCIgLSB1bmxlc3MgeW91J3JlIGxpbmUtaGVpZ2h0LCB3aGljaCBpcyBhbGxvd2VkXG4gICAgICAgICAgICAgIChwID0gc3R5bGVQcm9wZXJ0eShrKSkgJiYgZGlnaXQudGVzdCh2KSAmJiAhKHAgaW4gdW5pdGxlc3MpICYmICh2ICs9IHB4KVxuICAgICAgICAgICAgICB0cnkgeyBlbC5zdHlsZVtwXSA9IHNldHRlcihlbCwgdikgfSBjYXRjaChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZuKVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvcHRfeFxuICAgICAgICogQHBhcmFtIHtudW1iZXI9fSBvcHRfeVxuICAgICAgICogQHJldHVybiB7Qm9uem98bnVtYmVyfVxuICAgICAgICovXG4gICAgLCBvZmZzZXQ6IGZ1bmN0aW9uIChvcHRfeCwgb3B0X3kpIHtcbiAgICAgICAgaWYgKG9wdF94ICYmIHR5cGVvZiBvcHRfeCA9PSAnb2JqZWN0JyAmJiAodHlwZW9mIG9wdF94LnRvcCA9PSAnbnVtYmVyJyB8fCB0eXBlb2Ygb3B0X3gubGVmdCA9PSAnbnVtYmVyJykpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgeHkoZWwsIG9wdF94LmxlZnQsIG9wdF94LnRvcClcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRfeCA9PSAnbnVtYmVyJyB8fCB0eXBlb2Ygb3B0X3kgPT0gJ251bWJlcicpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgeHkoZWwsIG9wdF94LCBvcHRfeSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpc1swXSkgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvcDogMFxuICAgICAgICAgICwgbGVmdDogMFxuICAgICAgICAgICwgaGVpZ2h0OiAwXG4gICAgICAgICAgLCB3aWR0aDogMFxuICAgICAgICB9XG4gICAgICAgIHZhciBlbCA9IHRoaXNbMF1cbiAgICAgICAgICAsIGRlID0gZWwub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnRcbiAgICAgICAgICAsIGJjciA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgICAgLCBzY3JvbGwgPSBnZXRXaW5kb3dTY3JvbGwoKVxuICAgICAgICAgICwgd2lkdGggPSBlbC5vZmZzZXRXaWR0aFxuICAgICAgICAgICwgaGVpZ2h0ID0gZWwub2Zmc2V0SGVpZ2h0XG4gICAgICAgICAgLCB0b3AgPSBiY3IudG9wICsgc2Nyb2xsLnkgLSBNYXRoLm1heCgwLCBkZSAmJiBkZS5jbGllbnRUb3AsIGRvYy5ib2R5LmNsaWVudFRvcClcbiAgICAgICAgICAsIGxlZnQgPSBiY3IubGVmdCArIHNjcm9sbC54IC0gTWF0aC5tYXgoMCwgZGUgJiYgZGUuY2xpZW50TGVmdCwgZG9jLmJvZHkuY2xpZW50TGVmdClcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9wOiB0b3BcbiAgICAgICAgICAsIGxlZnQ6IGxlZnRcbiAgICAgICAgICAsIGhlaWdodDogaGVpZ2h0XG4gICAgICAgICAgLCB3aWR0aDogd2lkdGhcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAgICovXG4gICAgLCBkaW06IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmxlbmd0aCkgcmV0dXJuIHsgaGVpZ2h0OiAwLCB3aWR0aDogMCB9XG4gICAgICAgIHZhciBlbCA9IHRoaXNbMF1cbiAgICAgICAgICAsIGRlID0gZWwubm9kZVR5cGUgPT0gOSAmJiBlbC5kb2N1bWVudEVsZW1lbnQgLy8gZG9jdW1lbnRcbiAgICAgICAgICAsIG9yaWcgPSAhZGUgJiYgISFlbC5zdHlsZSAmJiAhZWwub2Zmc2V0V2lkdGggJiYgIWVsLm9mZnNldEhlaWdodCA/XG4gICAgICAgICAgICAgLy8gZWwgaXNuJ3QgdmlzaWJsZSwgY2FuJ3QgYmUgbWVhc3VyZWQgcHJvcGVybHksIHNvIGZpeCB0aGF0XG4gICAgICAgICAgICAgZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgICAgIHZhciBzID0ge1xuICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBlbC5zdHlsZS5wb3NpdGlvbiB8fCAnJ1xuICAgICAgICAgICAgICAgICAsIHZpc2liaWxpdHk6IGVsLnN0eWxlLnZpc2liaWxpdHkgfHwgJydcbiAgICAgICAgICAgICAgICAgLCBkaXNwbGF5OiBlbC5zdHlsZS5kaXNwbGF5IHx8ICcnXG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICB0LmZpcnN0KCkuY3NzKHtcbiAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgICAgICAgICAgICAgICAsIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgICAgICAgICAgICAgICwgZGlzcGxheTogJ2Jsb2NrJ1xuICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgIHJldHVybiBzXG4gICAgICAgICAgICB9KHRoaXMpIDogbnVsbFxuICAgICAgICAgICwgd2lkdGggPSBkZVxuICAgICAgICAgICAgICA/IE1hdGgubWF4KGVsLmJvZHkuc2Nyb2xsV2lkdGgsIGVsLmJvZHkub2Zmc2V0V2lkdGgsIGRlLnNjcm9sbFdpZHRoLCBkZS5vZmZzZXRXaWR0aCwgZGUuY2xpZW50V2lkdGgpXG4gICAgICAgICAgICAgIDogZWwub2Zmc2V0V2lkdGhcbiAgICAgICAgICAsIGhlaWdodCA9IGRlXG4gICAgICAgICAgICAgID8gTWF0aC5tYXgoZWwuYm9keS5zY3JvbGxIZWlnaHQsIGVsLmJvZHkub2Zmc2V0SGVpZ2h0LCBkZS5zY3JvbGxIZWlnaHQsIGRlLm9mZnNldEhlaWdodCwgZGUuY2xpZW50SGVpZ2h0KVxuICAgICAgICAgICAgICA6IGVsLm9mZnNldEhlaWdodFxuXG4gICAgICAgIG9yaWcgJiYgdGhpcy5maXJzdCgpLmNzcyhvcmlnKVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgICAsIHdpZHRoOiB3aWR0aFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGF0dHJpYnV0ZXMgYXJlIGhhcmQuIGdvIHNob3BwaW5nXG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGsgYW4gYXR0cmlidXRlIHRvIGdldCBvciBzZXRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X3YgdGhlIHZhbHVlIHRvIHNldFxuICAgICAgICogQHJldHVybiB7Qm9uem98c3RyaW5nfVxuICAgICAgICovXG4gICAgLCBhdHRyOiBmdW5jdGlvbiAoaywgb3B0X3YpIHtcbiAgICAgICAgdmFyIGVsID0gdGhpc1swXVxuICAgICAgICAgICwgblxuXG4gICAgICAgIGlmICh0eXBlb2YgayAhPSAnc3RyaW5nJyAmJiAhKGsgaW5zdGFuY2VvZiBTdHJpbmcpKSB7XG4gICAgICAgICAgZm9yIChuIGluIGspIHtcbiAgICAgICAgICAgIGsuaGFzT3duUHJvcGVydHkobikgJiYgdGhpcy5hdHRyKG4sIGtbbl0pXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHlwZW9mIG9wdF92ID09ICd1bmRlZmluZWQnID9cbiAgICAgICAgICAhZWwgPyBudWxsIDogc3BlY2lhbEF0dHJpYnV0ZXMudGVzdChrKSA/XG4gICAgICAgICAgICBzdGF0ZUF0dHJpYnV0ZXMudGVzdChrKSAmJiB0eXBlb2YgZWxba10gPT0gJ3N0cmluZycgP1xuICAgICAgICAgICAgICB0cnVlIDogZWxba10gOiAoayA9PSAnaHJlZicgfHwgayA9PSdzcmMnKSAmJiBmZWF0dXJlcy5ocmVmRXh0ZW5kZWQgP1xuICAgICAgICAgICAgICAgIGVsW2dldEF0dHJpYnV0ZV0oaywgMikgOiBlbFtnZXRBdHRyaWJ1dGVdKGspIDpcbiAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICBzcGVjaWFsQXR0cmlidXRlcy50ZXN0KGspID8gKGVsW2tdID0gc2V0dGVyKGVsLCBvcHRfdikpIDogZWxbc2V0QXR0cmlidXRlXShrLCBzZXR0ZXIoZWwsIG9wdF92KSlcbiAgICAgICAgICB9KVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtcbiAgICAgICAqIEByZXR1cm4ge0JvbnpvfVxuICAgICAgICovXG4gICAgLCByZW1vdmVBdHRyOiBmdW5jdGlvbiAoaykge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgIHN0YXRlQXR0cmlidXRlcy50ZXN0KGspID8gKGVsW2tdID0gZmFsc2UpIDogZWwucmVtb3ZlQXR0cmlidXRlKGspXG4gICAgICAgIH0pXG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IG9wdF9zXG4gICAgICAgKiBAcmV0dXJuIHtCb256b3xzdHJpbmd9XG4gICAgICAgKi9cbiAgICAsIHZhbDogZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgcyA9PSAnc3RyaW5nJyB8fCB0eXBlb2YgcyA9PSAnbnVtYmVyJykgP1xuICAgICAgICAgIHRoaXMuYXR0cigndmFsdWUnLCBzKSA6XG4gICAgICAgICAgdGhpcy5sZW5ndGggPyB0aGlzWzBdLnZhbHVlIDogbnVsbFxuICAgICAgfVxuXG4gICAgICAvLyB1c2Ugd2l0aCBjYXJlIGFuZCBrbm93bGVkZ2UuIHRoaXMgZGF0YSgpIG1ldGhvZCB1c2VzIGRhdGEgYXR0cmlidXRlcyBvbiB0aGUgRE9NIG5vZGVzXG4gICAgICAvLyB0byBkbyB0aGlzIGRpZmZlcmVudGx5IGNvc3RzIGEgbG90IG1vcmUgY29kZS4gYydlc3QgbGEgdmllXG4gICAgICAvKipcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdD19IG9wdF9rIHRoZSBrZXkgZm9yIHdoaWNoIHRvIGdldCBvciBzZXQgZGF0YVxuICAgICAgICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfdlxuICAgICAgICogQHJldHVybiB7Qm9uem98T2JqZWN0fVxuICAgICAgICovXG4gICAgLCBkYXRhOiBmdW5jdGlvbiAob3B0X2ssIG9wdF92KSB7XG4gICAgICAgIHZhciBlbCA9IHRoaXNbMF0sIG8sIG1cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRfdiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBpZiAoIWVsKSByZXR1cm4gbnVsbFxuICAgICAgICAgIG8gPSBkYXRhKGVsKVxuICAgICAgICAgIGlmICh0eXBlb2Ygb3B0X2sgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBlYWNoKGVsLmF0dHJpYnV0ZXMsIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgIChtID0gKCcnICsgYS5uYW1lKS5tYXRjaChkYXR0cikpICYmIChvW2NhbWVsaXplKG1bMV0pXSA9IGRhdGFWYWx1ZShhLnZhbHVlKSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICByZXR1cm4gb1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9bb3B0X2tdID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgICAgb1tvcHRfa10gPSBkYXRhVmFsdWUodGhpcy5hdHRyKCdkYXRhLScgKyBkZWNhbWVsaXplKG9wdF9rKSkpXG4gICAgICAgICAgICByZXR1cm4gb1tvcHRfa11cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoZWwpIHsgZGF0YShlbClbb3B0X2tdID0gb3B0X3YgfSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBET00gZGV0YWNobWVudCAmIHJlbGF0ZWRcblxuICAgICAgLyoqXG4gICAgICAgKiBAcmV0dXJuIHtCb256b31cbiAgICAgICAqL1xuICAgICwgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGVlcEVhY2goY2xlYXJEYXRhKVxuICAgICAgICByZXR1cm4gdGhpcy5kZXRhY2goKVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHJldHVybiB7Qm9uem99XG4gICAgICAgKi9cbiAgICAsIGVtcHR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgZGVlcEVhY2goZWwuY2hpbGROb2RlcywgY2xlYXJEYXRhKVxuXG4gICAgICAgICAgd2hpbGUgKGVsLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUNoaWxkKGVsLmZpcnN0Q2hpbGQpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHJldHVybiB7Qm9uem99XG4gICAgICAgKi9cbiAgICAsIGRldGFjaDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgIGVsW3BhcmVudE5vZGVdICYmIGVsW3BhcmVudE5vZGVdLnJlbW92ZUNoaWxkKGVsKVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICAvLyB3aG8gdXNlcyBhIG1vdXNlIGFueXdheT8gb2ggcmlnaHQuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICAgICAqL1xuICAgICwgc2Nyb2xsVG9wOiBmdW5jdGlvbiAoeSkge1xuICAgICAgICByZXR1cm4gc2Nyb2xsLmNhbGwodGhpcywgbnVsbCwgeSwgJ3knKVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICAgICAqL1xuICAgICwgc2Nyb2xsTGVmdDogZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHNjcm9sbC5jYWxsKHRoaXMsIHgsIG51bGwsICd4JylcbiAgICAgIH1cblxuICB9XG5cblxuICBmdW5jdGlvbiBjbG9uZU5vZGUoaG9zdCwgZWwpIHtcbiAgICB2YXIgYyA9IGVsLmNsb25lTm9kZSh0cnVlKVxuICAgICAgLCBjbG9uZUVsZW1zXG4gICAgICAsIGVsRWxlbXNcbiAgICAgICwgaVxuXG4gICAgLy8gY2hlY2sgZm9yIGV4aXN0ZW5jZSBvZiBhbiBldmVudCBjbG9uZXJcbiAgICAvLyBwcmVmZXJhYmx5IGh0dHBzOi8vZ2l0aHViLmNvbS9mYXQvYmVhblxuICAgIC8vIG90aGVyd2lzZSBCb256byB3b24ndCBkbyB0aGlzIGZvciB5b3VcbiAgICBpZiAoaG9zdC4kICYmIHR5cGVvZiBob3N0LmNsb25lRXZlbnRzID09ICdmdW5jdGlvbicpIHtcbiAgICAgIGhvc3QuJChjKS5jbG9uZUV2ZW50cyhlbClcblxuICAgICAgLy8gY2xvbmUgZXZlbnRzIGZyb20gZXZlcnkgY2hpbGQgbm9kZVxuICAgICAgY2xvbmVFbGVtcyA9IGhvc3QuJChjKS5maW5kKCcqJylcbiAgICAgIGVsRWxlbXMgPSBob3N0LiQoZWwpLmZpbmQoJyonKVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZWxFbGVtcy5sZW5ndGg7IGkrKylcbiAgICAgICAgaG9zdC4kKGNsb25lRWxlbXNbaV0pLmNsb25lRXZlbnRzKGVsRWxlbXNbaV0pXG4gICAgfVxuICAgIHJldHVybiBjXG4gIH1cblxuICBmdW5jdGlvbiBpc0JvZHkoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50ID09PSB3aW4gfHwgKC9eKD86Ym9keXxodG1sKSQvaSkudGVzdChlbGVtZW50LnRhZ05hbWUpXG4gIH1cblxuICBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGwoKSB7XG4gICAgcmV0dXJuIHsgeDogd2luLnBhZ2VYT2Zmc2V0IHx8IGh0bWwuc2Nyb2xsTGVmdCwgeTogd2luLnBhZ2VZT2Zmc2V0IHx8IGh0bWwuc2Nyb2xsVG9wIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVNjcmlwdEZyb21IdG1sKGh0bWwpIHtcbiAgICB2YXIgc2NyaXB0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKVxuICAgICAgLCBtYXRjaGVzID0gaHRtbC5tYXRjaChzaW1wbGVTY3JpcHRUYWdSZSlcbiAgICBzY3JpcHRFbC5zcmMgPSBtYXRjaGVzWzFdXG4gICAgcmV0dXJuIHNjcmlwdEVsXG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtBcnJheS48RWxlbWVudD58RWxlbWVudHxOb2RlfHN0cmluZ30gZWxzXG4gICAqIEByZXR1cm4ge0JvbnpvfVxuICAgKi9cbiAgZnVuY3Rpb24gYm9uem8oZWxzKSB7XG4gICAgcmV0dXJuIG5ldyBCb256byhlbHMpXG4gIH1cblxuICBib256by5zZXRRdWVyeUVuZ2luZSA9IGZ1bmN0aW9uIChxKSB7XG4gICAgcXVlcnkgPSBxO1xuICAgIGRlbGV0ZSBib256by5zZXRRdWVyeUVuZ2luZVxuICB9XG5cbiAgYm9uem8uYXVnID0gZnVuY3Rpb24gKG8sIHRhcmdldCkge1xuICAgIC8vIGZvciB0aG9zZSBzdGFuZGFsb25lIGJvbnpvIHVzZXJzLiB0aGlzIGxvdmUgaXMgZm9yIHlvdS5cbiAgICBmb3IgKHZhciBrIGluIG8pIHtcbiAgICAgIG8uaGFzT3duUHJvcGVydHkoaykgJiYgKCh0YXJnZXQgfHwgQm9uem8ucHJvdG90eXBlKVtrXSA9IG9ba10pXG4gICAgfVxuICB9XG5cbiAgYm9uem8uY3JlYXRlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAvLyBoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaFxuICAgIHJldHVybiB0eXBlb2Ygbm9kZSA9PSAnc3RyaW5nJyAmJiBub2RlICE9PSAnJyA/XG4gICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzaW1wbGVTY3JpcHRUYWdSZS50ZXN0KG5vZGUpKSByZXR1cm4gW2NyZWF0ZVNjcmlwdEZyb21IdG1sKG5vZGUpXVxuICAgICAgICB2YXIgdGFnID0gbm9kZS5tYXRjaCgvXlxccyo8KFteXFxzPl0rKS8pXG4gICAgICAgICAgLCBlbCA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgICAgICAgICwgZWxzID0gW11cbiAgICAgICAgICAsIHAgPSB0YWcgPyB0YWdNYXBbdGFnWzFdLnRvTG93ZXJDYXNlKCldIDogbnVsbFxuICAgICAgICAgICwgZGVwID0gcCA/IHBbMl0gKyAxIDogMVxuICAgICAgICAgICwgbnMgPSBwICYmIHBbM11cbiAgICAgICAgICAsIHBuID0gcGFyZW50Tm9kZVxuICAgICAgICAgICwgdGIgPSBmZWF0dXJlcy5hdXRvVGJvZHkgJiYgcCAmJiBwWzBdID09ICc8dGFibGU+JyAmJiAhKC88dGJvZHkvaSkudGVzdChub2RlKVxuXG4gICAgICAgIGVsLmlubmVySFRNTCA9IHAgPyAocFswXSArIG5vZGUgKyBwWzFdKSA6IG5vZGVcbiAgICAgICAgd2hpbGUgKGRlcC0tKSBlbCA9IGVsLmZpcnN0Q2hpbGRcbiAgICAgICAgLy8gZm9yIElFIE5vU2NvcGUsIHdlIG1heSBpbnNlcnQgY3J1ZnQgYXQgdGhlIGJlZ2luaW5nIGp1c3QgdG8gZ2V0IGl0IHRvIHdvcmtcbiAgICAgICAgaWYgKG5zICYmIGVsICYmIGVsLm5vZGVUeXBlICE9PSAxKSBlbCA9IGVsLm5leHRTaWJsaW5nXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAvLyB0Ym9keSBzcGVjaWFsIGNhc2UgZm9yIElFPDgsIGNyZWF0ZXMgdGJvZHkgb24gYW55IGVtcHR5IHRhYmxlXG4gICAgICAgICAgLy8gd2UgZG9uJ3Qgd2FudCBpdCBpZiB3ZSdyZSBqdXN0IGFmdGVyIGEgPHRoZWFkPiwgPGNhcHRpb24+LCBldGMuXG4gICAgICAgICAgaWYgKCghdGFnIHx8IGVsLm5vZGVUeXBlID09IDEpICYmICghdGIgfHwgKGVsLnRhZ05hbWUgJiYgZWwudGFnTmFtZSAhPSAnVEJPRFknKSkpIHtcbiAgICAgICAgICAgIGVscy5wdXNoKGVsKVxuICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoZWwgPSBlbC5uZXh0U2libGluZylcbiAgICAgICAgLy8gSUUgPCA5IGdpdmVzIHVzIGEgcGFyZW50Tm9kZSB3aGljaCBtZXNzZXMgdXAgaW5zZXJ0KCkgY2hlY2sgZm9yIGNsb25pbmdcbiAgICAgICAgLy8gYGRlcGAgPiAxIGNhbiBhbHNvIGNhdXNlIHByb2JsZW1zIHdpdGggdGhlIGluc2VydCgpIGNoZWNrIChtdXN0IGRvIHRoaXMgbGFzdClcbiAgICAgICAgZWFjaChlbHMsIGZ1bmN0aW9uKGVsKSB7IGVsW3BuXSAmJiBlbFtwbl0ucmVtb3ZlQ2hpbGQoZWwpIH0pXG4gICAgICAgIHJldHVybiBlbHNcbiAgICAgIH0oKSA6IGlzTm9kZShub2RlKSA/IFtub2RlLmNsb25lTm9kZSh0cnVlKV0gOiBbXVxuICB9XG5cbiAgYm9uem8uZG9jID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2cCA9IGJvbnpvLnZpZXdwb3J0KClcbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogTWF0aC5tYXgoZG9jLmJvZHkuc2Nyb2xsV2lkdGgsIGh0bWwuc2Nyb2xsV2lkdGgsIHZwLndpZHRoKVxuICAgICAgLCBoZWlnaHQ6IE1hdGgubWF4KGRvYy5ib2R5LnNjcm9sbEhlaWdodCwgaHRtbC5zY3JvbGxIZWlnaHQsIHZwLmhlaWdodClcbiAgICB9XG4gIH1cblxuICBib256by5maXJzdENoaWxkID0gZnVuY3Rpb24gKGVsKSB7XG4gICAgZm9yICh2YXIgYyA9IGVsLmNoaWxkTm9kZXMsIGkgPSAwLCBqID0gKGMgJiYgYy5sZW5ndGgpIHx8IDAsIGU7IGkgPCBqOyBpKyspIHtcbiAgICAgIGlmIChjW2ldLm5vZGVUeXBlID09PSAxKSBlID0gY1tqID0gaV1cbiAgICB9XG4gICAgcmV0dXJuIGVcbiAgfVxuXG4gIGJvbnpvLnZpZXdwb3J0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiBpZSA/IGh0bWwuY2xpZW50V2lkdGggOiB3aW4uaW5uZXJXaWR0aFxuICAgICAgLCBoZWlnaHQ6IGllID8gaHRtbC5jbGllbnRIZWlnaHQgOiB3aW4uaW5uZXJIZWlnaHRcbiAgICB9XG4gIH1cblxuICBib256by5pc0FuY2VzdG9yID0gJ2NvbXBhcmVEb2N1bWVudFBvc2l0aW9uJyBpbiBodG1sID9cbiAgICBmdW5jdGlvbiAoY29udGFpbmVyLCBlbGVtZW50KSB7XG4gICAgICByZXR1cm4gKGNvbnRhaW5lci5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbGVtZW50KSAmIDE2KSA9PSAxNlxuICAgIH0gOiAnY29udGFpbnMnIGluIGh0bWwgP1xuICAgIGZ1bmN0aW9uIChjb250YWluZXIsIGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBjb250YWluZXIgIT09IGVsZW1lbnQgJiYgY29udGFpbmVyLmNvbnRhaW5zKGVsZW1lbnQpO1xuICAgIH0gOlxuICAgIGZ1bmN0aW9uIChjb250YWluZXIsIGVsZW1lbnQpIHtcbiAgICAgIHdoaWxlIChlbGVtZW50ID0gZWxlbWVudFtwYXJlbnROb2RlXSkge1xuICAgICAgICBpZiAoZWxlbWVudCA9PT0gY29udGFpbmVyKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gIHJldHVybiBib256b1xufSk7IC8vIHRoZSBvbmx5IGxpbmUgd2UgY2FyZSBhYm91dCB1c2luZyBhIHNlbWktY29sb24uIHBsYWNlZCBoZXJlIGZvciBjb25jYXRlbmF0aW9uIHRvb2xzXG4iLCJcblxuLy9cbi8vIFRoZSBzaGltcyBpbiB0aGlzIGZpbGUgYXJlIG5vdCBmdWxseSBpbXBsZW1lbnRlZCBzaGltcyBmb3IgdGhlIEVTNVxuLy8gZmVhdHVyZXMsIGJ1dCBkbyB3b3JrIGZvciB0aGUgcGFydGljdWxhciB1c2VjYXNlcyB0aGVyZSBpcyBpblxuLy8gdGhlIG90aGVyIG1vZHVsZXMuXG4vL1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLy8gQXJyYXkuaXNBcnJheSBpcyBzdXBwb3J0ZWQgaW4gSUU5XG5mdW5jdGlvbiBpc0FycmF5KHhzKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHhzKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cbmV4cG9ydHMuaXNBcnJheSA9IHR5cGVvZiBBcnJheS5pc0FycmF5ID09PSAnZnVuY3Rpb24nID8gQXJyYXkuaXNBcnJheSA6IGlzQXJyYXk7XG5cbi8vIEFycmF5LnByb3RvdHlwZS5pbmRleE9mIGlzIHN1cHBvcnRlZCBpbiBJRTlcbmV4cG9ydHMuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgaWYgKHhzLmluZGV4T2YpIHJldHVybiB4cy5pbmRleE9mKHgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHggPT09IHhzW2ldKSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59O1xuXG4vLyBBcnJheS5wcm90b3R5cGUuZmlsdGVyIGlzIHN1cHBvcnRlZCBpbiBJRTlcbmV4cG9ydHMuZmlsdGVyID0gZnVuY3Rpb24gZmlsdGVyKHhzLCBmbikge1xuICBpZiAoeHMuZmlsdGVyKSByZXR1cm4geHMuZmlsdGVyKGZuKTtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGZuKHhzW2ldLCBpLCB4cykpIHJlcy5wdXNoKHhzW2ldKTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcblxuLy8gQXJyYXkucHJvdG90eXBlLmZvckVhY2ggaXMgc3VwcG9ydGVkIGluIElFOVxuZXhwb3J0cy5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaCh4cywgZm4sIHNlbGYpIHtcbiAgaWYgKHhzLmZvckVhY2gpIHJldHVybiB4cy5mb3JFYWNoKGZuLCBzZWxmKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgIGZuLmNhbGwoc2VsZiwgeHNbaV0sIGksIHhzKTtcbiAgfVxufTtcblxuLy8gQXJyYXkucHJvdG90eXBlLm1hcCBpcyBzdXBwb3J0ZWQgaW4gSUU5XG5leHBvcnRzLm1hcCA9IGZ1bmN0aW9uIG1hcCh4cywgZm4pIHtcbiAgaWYgKHhzLm1hcCkgcmV0dXJuIHhzLm1hcChmbik7XG4gIHZhciBvdXQgPSBuZXcgQXJyYXkoeHMubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgIG91dFtpXSA9IGZuKHhzW2ldLCBpLCB4cyk7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbi8vIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UgaXMgc3VwcG9ydGVkIGluIElFOVxuZXhwb3J0cy5yZWR1Y2UgPSBmdW5jdGlvbiByZWR1Y2UoYXJyYXksIGNhbGxiYWNrLCBvcHRfaW5pdGlhbFZhbHVlKSB7XG4gIGlmIChhcnJheS5yZWR1Y2UpIHJldHVybiBhcnJheS5yZWR1Y2UoY2FsbGJhY2ssIG9wdF9pbml0aWFsVmFsdWUpO1xuICB2YXIgdmFsdWUsIGlzVmFsdWVTZXQgPSBmYWxzZTtcblxuICBpZiAoMiA8IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB2YWx1ZSA9IG9wdF9pbml0aWFsVmFsdWU7XG4gICAgaXNWYWx1ZVNldCA9IHRydWU7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGwgPiBpOyArK2kpIHtcbiAgICBpZiAoYXJyYXkuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIGlmIChpc1ZhbHVlU2V0KSB7XG4gICAgICAgIHZhbHVlID0gY2FsbGJhY2sodmFsdWUsIGFycmF5W2ldLCBpLCBhcnJheSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBhcnJheVtpXTtcbiAgICAgICAgaXNWYWx1ZVNldCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuLy8gU3RyaW5nLnByb3RvdHlwZS5zdWJzdHIgLSBuZWdhdGl2ZSBpbmRleCBkb24ndCB3b3JrIGluIElFOFxuaWYgKCdhYicuc3Vic3RyKC0xKSAhPT0gJ2InKSB7XG4gIGV4cG9ydHMuc3Vic3RyID0gZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGxlbmd0aCkge1xuICAgIC8vIGRpZCB3ZSBnZXQgYSBuZWdhdGl2ZSBzdGFydCwgY2FsY3VsYXRlIGhvdyBtdWNoIGl0IGlzIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgc3RyaW5nXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSBzdHIubGVuZ3RoICsgc3RhcnQ7XG5cbiAgICAvLyBjYWxsIHRoZSBvcmlnaW5hbCBmdW5jdGlvblxuICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW5ndGgpO1xuICB9O1xufSBlbHNlIHtcbiAgZXhwb3J0cy5zdWJzdHIgPSBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsIGxlbmd0aCk7XG4gIH07XG59XG5cbi8vIFN0cmluZy5wcm90b3R5cGUudHJpbSBpcyBzdXBwb3J0ZWQgaW4gSUU5XG5leHBvcnRzLnRyaW0gPSBmdW5jdGlvbiAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKCk7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufTtcblxuLy8gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgaXMgc3VwcG9ydGVkIGluIElFOVxuZXhwb3J0cy5iaW5kID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gIHZhciBmbiA9IGFyZ3Muc2hpZnQoKTtcbiAgaWYgKGZuLmJpbmQpIHJldHVybiBmbi5iaW5kLmFwcGx5KGZuLCBhcmdzKTtcbiAgdmFyIHNlbGYgPSBhcmdzLnNoaWZ0KCk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm4uYXBwbHkoc2VsZiwgYXJncy5jb25jYXQoW0FycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyldKSk7XG4gIH07XG59O1xuXG4vLyBPYmplY3QuY3JlYXRlIGlzIHN1cHBvcnRlZCBpbiBJRTlcbmZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcbiAgdmFyIG9iamVjdDtcbiAgaWYgKHByb3RvdHlwZSA9PT0gbnVsbCkge1xuICAgIG9iamVjdCA9IHsgJ19fcHJvdG9fXycgOiBudWxsIH07XG4gIH1cbiAgZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBwcm90b3R5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAndHlwZW9mIHByb3RvdHlwZVsnICsgKHR5cGVvZiBwcm90b3R5cGUpICsgJ10gIT0gXFwnb2JqZWN0XFwnJ1xuICAgICAgKTtcbiAgICB9XG4gICAgdmFyIFR5cGUgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICBUeXBlLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgICBvYmplY3QgPSBuZXcgVHlwZSgpO1xuICAgIG9iamVjdC5fX3Byb3RvX18gPSBwcm90b3R5cGU7XG4gIH1cbiAgaWYgKHR5cGVvZiBwcm9wZXJ0aWVzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QuZGVmaW5lUHJvcGVydGllcykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iamVjdCwgcHJvcGVydGllcyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cbmV4cG9ydHMuY3JlYXRlID0gdHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicgPyBPYmplY3QuY3JlYXRlIDogY3JlYXRlO1xuXG4vLyBPYmplY3Qua2V5cyBhbmQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgaXMgc3VwcG9ydGVkIGluIElFOSBob3dldmVyXG4vLyB0aGV5IGRvIHNob3cgYSBkZXNjcmlwdGlvbiBhbmQgbnVtYmVyIHByb3BlcnR5IG9uIEVycm9yIG9iamVjdHNcbmZ1bmN0aW9uIG5vdE9iamVjdChvYmplY3QpIHtcbiAgcmV0dXJuICgodHlwZW9mIG9iamVjdCAhPSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmplY3QgIT0gXCJmdW5jdGlvblwiKSB8fCBvYmplY3QgPT09IG51bGwpO1xufVxuXG5mdW5jdGlvbiBrZXlzU2hpbShvYmplY3QpIHtcbiAgaWYgKG5vdE9iamVjdChvYmplY3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdC5rZXlzIGNhbGxlZCBvbiBhIG5vbi1vYmplY3RcIik7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBuYW1lKSkge1xuICAgICAgcmVzdWx0LnB1c2gobmFtZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIGdldE93blByb3BlcnR5TmFtZXMgaXMgYWxtb3N0IHRoZSBzYW1lIGFzIE9iamVjdC5rZXlzIG9uZSBrZXkgZmVhdHVyZVxuLy8gIGlzIHRoYXQgaXQgcmV0dXJucyBoaWRkZW4gcHJvcGVydGllcywgc2luY2UgdGhhdCBjYW4ndCBiZSBpbXBsZW1lbnRlZCxcbi8vICB0aGlzIGZlYXR1cmUgZ2V0cyByZWR1Y2VkIHNvIGl0IGp1c3Qgc2hvd3MgdGhlIGxlbmd0aCBwcm9wZXJ0eSBvbiBhcnJheXNcbmZ1bmN0aW9uIHByb3BlcnR5U2hpbShvYmplY3QpIHtcbiAgaWYgKG5vdE9iamVjdChvYmplY3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIGNhbGxlZCBvbiBhIG5vbi1vYmplY3RcIik7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0ga2V5c1NoaW0ob2JqZWN0KTtcbiAgaWYgKGV4cG9ydHMuaXNBcnJheShvYmplY3QpICYmIGV4cG9ydHMuaW5kZXhPZihvYmplY3QsICdsZW5ndGgnKSA9PT0gLTEpIHtcbiAgICByZXN1bHQucHVzaCgnbGVuZ3RoJyk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIGtleXMgPSB0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgPyBPYmplY3Qua2V5cyA6IGtleXNTaGltO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPT09ICdmdW5jdGlvbicgP1xuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyA6IHByb3BlcnR5U2hpbTtcblxuaWYgKG5ldyBFcnJvcigpLmhhc093blByb3BlcnR5KCdkZXNjcmlwdGlvbicpKSB7XG4gIHZhciBFUlJPUl9QUk9QRVJUWV9GSUxURVIgPSBmdW5jdGlvbiAob2JqLCBhcnJheSkge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEVycm9yXScpIHtcbiAgICAgIGFycmF5ID0gZXhwb3J0cy5maWx0ZXIoYXJyYXksIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBuYW1lICE9PSAnZGVzY3JpcHRpb24nICYmIG5hbWUgIT09ICdudW1iZXInICYmIG5hbWUgIT09ICdtZXNzYWdlJztcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH07XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiBFUlJPUl9QUk9QRVJUWV9GSUxURVIob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICB9O1xuICBleHBvcnRzLmdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIEVSUk9SX1BST1BFUlRZX0ZJTFRFUihvYmplY3QsIGdldE93blByb3BlcnR5TmFtZXMob2JqZWN0KSk7XG4gIH07XG59IGVsc2Uge1xuICBleHBvcnRzLmtleXMgPSBrZXlzO1xuICBleHBvcnRzLmdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzO1xufVxuXG4vLyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIC0gc3VwcG9ydGVkIGluIElFOCBidXQgb25seSBvbiBkb20gZWxlbWVudHNcbmZ1bmN0aW9uIHZhbHVlT2JqZWN0KHZhbHVlLCBrZXkpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlW2tleV0gfTtcbn1cblxuaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih7J2EnOiAxfSwgJ2EnKTtcbiAgICBleHBvcnRzLmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRTggZG9tIGVsZW1lbnQgaXNzdWUgLSB1c2UgYSB0cnkgY2F0Y2ggYW5kIGRlZmF1bHQgdG8gdmFsdWVPYmplY3RcbiAgICBleHBvcnRzLmdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlT2JqZWN0KHZhbHVlLCBrZXkpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn0gZWxzZSB7XG4gIGV4cG9ydHMuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gdmFsdWVPYmplY3Q7XG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7XG4gIGlmICghdXRpbC5pc051bWJlcihuKSB8fCBuIDwgMClcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicpO1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGVyLCBoYW5kbGVyLCBsZW4sIGFyZ3MsIGksIGxpc3RlbmVycztcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmICh0eXBlID09PSAnZXJyb3InKSB7XG4gICAgaWYgKCF0aGlzLl9ldmVudHMuZXJyb3IgfHxcbiAgICAgICAgKHV0aWwuaXNPYmplY3QodGhpcy5fZXZlbnRzLmVycm9yKSAmJiAhdGhpcy5fZXZlbnRzLmVycm9yLmxlbmd0aCkpIHtcbiAgICAgIGVyID0gYXJndW1lbnRzWzFdO1xuICAgICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCBcImVycm9yXCIgZXZlbnQuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAodXRpbC5pc1VuZGVmaW5lZChoYW5kbGVyKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHV0aWwuaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gZmFzdCBjYXNlc1xuICAgICAgY2FzZSAxOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gc2xvd2VyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspXG4gICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHV0aWwuaXNPYmplY3QoaGFuZGxlcikpIHtcbiAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSsrKVxuICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG5cbiAgICBsaXN0ZW5lcnMgPSBoYW5kbGVyLnNsaWNlKCk7XG4gICAgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbTtcblxuICBpZiAoIXV0aWwuaXNGdW5jdGlvbihsaXN0ZW5lcikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCdsaXN0ZW5lciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50cylcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gIGlmICh0aGlzLl9ldmVudHMubmV3TGlzdGVuZXIpXG4gICAgdGhpcy5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgIHV0aWwuaXNGdW5jdGlvbihsaXN0ZW5lci5saXN0ZW5lcikgP1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgZWxzZSBpZiAodXRpbC5pc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gIGVsc2VcbiAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBbdGhpcy5fZXZlbnRzW3R5cGVdLCBsaXN0ZW5lcl07XG5cbiAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgaWYgKHV0aWwuaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSAmJiAhdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCkge1xuICAgIHZhciBtO1xuICAgIGlmICghdXRpbC5pc1VuZGVmaW5lZCh0aGlzLl9tYXhMaXN0ZW5lcnMpKSB7XG4gICAgICBtID0gdGhpcy5fbWF4TGlzdGVuZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gICAgfVxuXG4gICAgaWYgKG0gJiYgbSA+IDAgJiYgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCA+IG0pIHtcbiAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcignKG5vZGUpIHdhcm5pbmc6IHBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgJyArXG4gICAgICAgICAgICAgICAgICAgICdsZWFrIGRldGVjdGVkLiAlZCBsaXN0ZW5lcnMgYWRkZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAnVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQuJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCk7XG4gICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKCF1dGlsLmlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgZnVuY3Rpb24gZygpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGcpO1xuICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHRoaXMub24odHlwZSwgZyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZFxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBsaXN0LCBwb3NpdGlvbiwgbGVuZ3RoLCBpO1xuXG4gIGlmICghdXRpbC5pc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgbGlzdCA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIHBvc2l0aW9uID0gLTE7XG5cbiAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8XG4gICAgICAodXRpbC5pc0Z1bmN0aW9uKGxpc3QubGlzdGVuZXIpICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG5cbiAgfSBlbHNlIGlmICh1dGlsLmlzT2JqZWN0KGxpc3QpKSB7XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gPiAwOykge1xuICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XG4gICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICBsaXN0Lmxlbmd0aCA9IDA7XG4gICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaXN0LnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICB2YXIga2V5LCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICBpZiAoIXRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgZWxzZSBpZiAodGhpcy5fZXZlbnRzW3R5cGVdKVxuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGZvciAoa2V5IGluIHRoaXMuX2V2ZW50cykge1xuICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGxpc3RlbmVycyA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICBpZiAodXRpbC5pc0Z1bmN0aW9uKGxpc3RlbmVycykpIHtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTElGTyBvcmRlclxuICAgIHdoaWxlIChsaXN0ZW5lcnMubGVuZ3RoKVxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbbGlzdGVuZXJzLmxlbmd0aCAtIDFdKTtcbiAgfVxuICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciByZXQ7XG4gIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pXG4gICAgcmV0ID0gW107XG4gIGVsc2UgaWYgKHV0aWwuaXNGdW5jdGlvbih0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IFt0aGlzLl9ldmVudHNbdHlwZV1dO1xuICBlbHNlXG4gICAgcmV0ID0gdGhpcy5fZXZlbnRzW3R5cGVdLnNsaWNlKCk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgdmFyIHJldDtcbiAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1t0eXBlXSlcbiAgICByZXQgPSAwO1xuICBlbHNlIGlmICh1dGlsLmlzRnVuY3Rpb24oZW1pdHRlci5fZXZlbnRzW3R5cGVdKSlcbiAgICByZXQgPSAxO1xuICBlbHNlXG4gICAgcmV0ID0gZW1pdHRlci5fZXZlbnRzW3R5cGVdLmxlbmd0aDtcbiAgcmV0dXJuIHJldDtcbn07IiwiXG4vLyBub3QgaW1wbGVtZW50ZWRcbi8vIFRoZSByZWFzb24gZm9yIGhhdmluZyBhbiBlbXB0eSBmaWxlIGFuZCBub3QgdGhyb3dpbmcgaXMgdG8gYWxsb3dcbi8vIHVudHJhZGl0aW9uYWwgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBtb2R1bGUuXG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIHNoaW1zID0gcmVxdWlyZSgnX3NoaW1zJyk7XG5cbnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzZGolXS9nO1xuZXhwb3J0cy5mb3JtYXQgPSBmdW5jdGlvbihmKSB7XG4gIGlmICghaXNTdHJpbmcoZikpIHtcbiAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdHMuam9pbignICcpO1xuICB9XG5cbiAgdmFyIGkgPSAxO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgc3RyID0gU3RyaW5nKGYpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbih4KSB7XG4gICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XG4gICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDtcbiAgICBzd2l0Y2ggKHgpIHtcbiAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWQnOiByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclaic6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geDtcbiAgICB9XG4gIH0pO1xuICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xuICAgIGlmIChpc051bGwoeCkgfHwgIWlzT2JqZWN0KHgpKSB7XG4gICAgICBzdHIgKz0gJyAnICsgeDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyICs9ICcgJyArIGluc3BlY3QoeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5mdW5jdGlvbiBpbnNwZWN0KG9iaiwgb3B0cykge1xuICAvLyBkZWZhdWx0IG9wdGlvbnNcbiAgdmFyIGN0eCA9IHtcbiAgICBzZWVuOiBbXSxcbiAgICBzdHlsaXplOiBzdHlsaXplTm9Db2xvclxuICB9O1xuICAvLyBsZWdhY3kuLi5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gMykgY3R4LmRlcHRoID0gYXJndW1lbnRzWzJdO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSA0KSBjdHguY29sb3JzID0gYXJndW1lbnRzWzNdO1xuICBpZiAoaXNCb29sZWFuKG9wdHMpKSB7XG4gICAgLy8gbGVnYWN5Li4uXG4gICAgY3R4LnNob3dIaWRkZW4gPSBvcHRzO1xuICB9IGVsc2UgaWYgKG9wdHMpIHtcbiAgICAvLyBnb3QgYW4gXCJvcHRpb25zXCIgb2JqZWN0XG4gICAgZXhwb3J0cy5fZXh0ZW5kKGN0eCwgb3B0cyk7XG4gIH1cbiAgLy8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LnNob3dIaWRkZW4pKSBjdHguc2hvd0hpZGRlbiA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmRlcHRoKSkgY3R4LmRlcHRoID0gMjtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jb2xvcnMpKSBjdHguY29sb3JzID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY3VzdG9tSW5zcGVjdCkpIGN0eC5jdXN0b21JbnNwZWN0ID0gdHJ1ZTtcbiAgaWYgKGN0eC5jb2xvcnMpIGN0eC5zdHlsaXplID0gc3R5bGl6ZVdpdGhDb2xvcjtcbiAgcmV0dXJuIGZvcm1hdFZhbHVlKGN0eCwgb2JqLCBjdHguZGVwdGgpO1xufVxuZXhwb3J0cy5pbnNwZWN0ID0gaW5zcGVjdDtcblxuXG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUjZ3JhcGhpY3Ncbmluc3BlY3QuY29sb3JzID0ge1xuICAnYm9sZCcgOiBbMSwgMjJdLFxuICAnaXRhbGljJyA6IFszLCAyM10sXG4gICd1bmRlcmxpbmUnIDogWzQsIDI0XSxcbiAgJ2ludmVyc2UnIDogWzcsIDI3XSxcbiAgJ3doaXRlJyA6IFszNywgMzldLFxuICAnZ3JleScgOiBbOTAsIDM5XSxcbiAgJ2JsYWNrJyA6IFszMCwgMzldLFxuICAnYmx1ZScgOiBbMzQsIDM5XSxcbiAgJ2N5YW4nIDogWzM2LCAzOV0sXG4gICdncmVlbicgOiBbMzIsIDM5XSxcbiAgJ21hZ2VudGEnIDogWzM1LCAzOV0sXG4gICdyZWQnIDogWzMxLCAzOV0sXG4gICd5ZWxsb3cnIDogWzMzLCAzOV1cbn07XG5cbi8vIERvbid0IHVzZSAnYmx1ZScgbm90IHZpc2libGUgb24gY21kLmV4ZVxuaW5zcGVjdC5zdHlsZXMgPSB7XG4gICdzcGVjaWFsJzogJ2N5YW4nLFxuICAnbnVtYmVyJzogJ3llbGxvdycsXG4gICdib29sZWFuJzogJ3llbGxvdycsXG4gICd1bmRlZmluZWQnOiAnZ3JleScsXG4gICdudWxsJzogJ2JvbGQnLFxuICAnc3RyaW5nJzogJ2dyZWVuJyxcbiAgJ2RhdGUnOiAnbWFnZW50YScsXG4gIC8vIFwibmFtZVwiOiBpbnRlbnRpb25hbGx5IG5vdCBzdHlsaW5nXG4gICdyZWdleHAnOiAncmVkJ1xufTtcblxuXG5mdW5jdGlvbiBzdHlsaXplV2l0aENvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHZhciBzdHlsZSA9IGluc3BlY3Quc3R5bGVzW3N0eWxlVHlwZV07XG5cbiAgaWYgKHN0eWxlKSB7XG4gICAgcmV0dXJuICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMF0gKyAnbScgKyBzdHIgK1xuICAgICAgICAgICAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzFdICsgJ20nO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBzdHlsaXplTm9Db2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICByZXR1cm4gc3RyO1xufVxuXG5cbmZ1bmN0aW9uIGFycmF5VG9IYXNoKGFycmF5KSB7XG4gIHZhciBoYXNoID0ge307XG5cbiAgc2hpbXMuZm9yRWFjaChhcnJheSwgZnVuY3Rpb24odmFsLCBpZHgpIHtcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzaDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbiAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmXG4gICAgICB2YWx1ZSAmJlxuICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJlxuICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBleHBvcnRzLmluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcyk7XG4gICAgaWYgKCFpc1N0cmluZyhyZXQpKSB7XG4gICAgICByZXQgPSBmb3JtYXRWYWx1ZShjdHgsIHJldCwgcmVjdXJzZVRpbWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIFByaW1pdGl2ZSB0eXBlcyBjYW5ub3QgaGF2ZSBwcm9wZXJ0aWVzXG4gIHZhciBwcmltaXRpdmUgPSBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSk7XG4gIGlmIChwcmltaXRpdmUpIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlO1xuICB9XG5cbiAgLy8gTG9vayB1cCB0aGUga2V5cyBvZiB0aGUgb2JqZWN0LlxuICB2YXIga2V5cyA9IHNoaW1zLmtleXModmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcbiAgICBrZXlzID0gc2hpbXMuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddO1xuXG4gIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgYXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJztcbiAgfVxuXG4gIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblxuICB2YXIgb3V0cHV0O1xuICBpZiAoYXJyYXkpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGN0eC5zZWVuLnBvcCgpO1xuXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcbiAgfVxuICBpZiAoaXNOdW1iZXIodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG4gIGlmIChpc051bGwodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cblxuICBzaGltcy5mb3JFYWNoKGtleXMsIGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgdmFyIG5hbWUsIHN0ciwgZGVzYztcbiAgZGVzYyA9IHNoaW1zLmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWhhc093blByb3BlcnR5KHZpc2libGVLZXlzLCBrZXkpKSB7XG4gICAgbmFtZSA9ICdbJyArIGtleSArICddJztcbiAgfVxuICBpZiAoIXN0cikge1xuICAgIGlmIChzaGltcy5pbmRleE9mKGN0eC5zZWVuLCBkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gc2hpbXMucmVkdWNlKG91dHB1dCwgZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgbnVtTGluZXNFc3QrKztcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIG51bUxpbmVzRXN0Kys7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csICcnKS5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIHNoaW1zLmlzQXJyYXkoYXIpO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmIG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7XG4gIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCdcbiAgICAmJiB0eXBlb2YgYXJnLmNvcHkgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLmZpbGwgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLmJpbmFyeVNsaWNlID09PSAnZnVuY3Rpb24nXG4gIDtcbn1cbmV4cG9ydHMuaXNCdWZmZXIgPSBpc0J1ZmZlcjtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5cbmZ1bmN0aW9uIHBhZChuKSB7XG4gIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuLnRvU3RyaW5nKDEwKSA6IG4udG9TdHJpbmcoMTApO1xufVxuXG5cbnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJyxcbiAgICAgICAgICAgICAgJ09jdCcsICdOb3YnLCAnRGVjJ107XG5cbi8vIDI2IEZlYiAxNjoxOTozNFxuZnVuY3Rpb24gdGltZXN0YW1wKCkge1xuICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRNaW51dGVzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRTZWNvbmRzKCkpXS5qb2luKCc6Jyk7XG4gIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7XG59XG5cblxuLy8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBwcmVwZW5kcyBhIHRpbWVzdGFtcFxuZXhwb3J0cy5sb2cgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAoKSwgZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKSk7XG59O1xuXG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyLlxuICpcbiAqIFRoZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMgZnJvbSBsYW5nLmpzIHJld3JpdHRlbiBhcyBhIHN0YW5kYWxvbmVcbiAqIGZ1bmN0aW9uIChub3Qgb24gRnVuY3Rpb24ucHJvdG90eXBlKS4gTk9URTogSWYgdGhpcyBmaWxlIGlzIHRvIGJlIGxvYWRlZFxuICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmVcbiAqIGZ1bmN0aW9ucyBhcyBwcm90b3R5cGUgc2V0dXAgdXNpbmcgbm9ybWFsIEphdmFTY3JpcHQgZG9lcyBub3Qgd29yayBhc1xuICogZXhwZWN0ZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgKHNlZSBtaXJyb3IuanMgaW4gcjExNDkwMykuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBpbmhlcml0IHRoZVxuICogICAgIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxuICovXG5leHBvcnRzLmluaGVyaXRzID0gZnVuY3Rpb24oY3Rvciwgc3VwZXJDdG9yKSB7XG4gIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICBjdG9yLnByb3RvdHlwZSA9IHNoaW1zLmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG59O1xuXG5leHBvcnRzLl9leHRlbmQgPSBmdW5jdGlvbihvcmlnaW4sIGFkZCkge1xuICAvLyBEb24ndCBkbyBhbnl0aGluZyBpZiBhZGQgaXNuJ3QgYW4gb2JqZWN0XG4gIGlmICghYWRkIHx8ICFpc09iamVjdChhZGQpKSByZXR1cm4gb3JpZ2luO1xuXG4gIHZhciBrZXlzID0gc2hpbXMua2V5cyhhZGQpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgb3JpZ2luW2tleXNbaV1dID0gYWRkW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBvcmlnaW47XG59O1xuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuIiwiLyohXG4gICogZG9tcmVhZHkgKGMpIER1c3RpbiBEaWF6IDIwMTIgLSBMaWNlbnNlIE1JVFxuICAqL1xuIWZ1bmN0aW9uIChuYW1lLCBkZWZpbml0aW9uKSB7XG4gIGlmICh0eXBlb2YgbW9kdWxlICE9ICd1bmRlZmluZWQnKSBtb2R1bGUuZXhwb3J0cyA9IGRlZmluaXRpb24oKVxuICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcpIGRlZmluZShkZWZpbml0aW9uKVxuICBlbHNlIHRoaXNbbmFtZV0gPSBkZWZpbml0aW9uKClcbn0oJ2RvbXJlYWR5JywgZnVuY3Rpb24gKHJlYWR5KSB7XG5cbiAgdmFyIGZucyA9IFtdLCBmbiwgZiA9IGZhbHNlXG4gICAgLCBkb2MgPSBkb2N1bWVudFxuICAgICwgdGVzdEVsID0gZG9jLmRvY3VtZW50RWxlbWVudFxuICAgICwgaGFjayA9IHRlc3RFbC5kb1Njcm9sbFxuICAgICwgZG9tQ29udGVudExvYWRlZCA9ICdET01Db250ZW50TG9hZGVkJ1xuICAgICwgYWRkRXZlbnRMaXN0ZW5lciA9ICdhZGRFdmVudExpc3RlbmVyJ1xuICAgICwgb25yZWFkeXN0YXRlY2hhbmdlID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSdcbiAgICAsIHJlYWR5U3RhdGUgPSAncmVhZHlTdGF0ZSdcbiAgICAsIGxvYWRlZFJneCA9IGhhY2sgPyAvXmxvYWRlZHxeYy8gOiAvXmxvYWRlZHxjL1xuICAgICwgbG9hZGVkID0gbG9hZGVkUmd4LnRlc3QoZG9jW3JlYWR5U3RhdGVdKVxuXG4gIGZ1bmN0aW9uIGZsdXNoKGYpIHtcbiAgICBsb2FkZWQgPSAxXG4gICAgd2hpbGUgKGYgPSBmbnMuc2hpZnQoKSkgZigpXG4gIH1cblxuICBkb2NbYWRkRXZlbnRMaXN0ZW5lcl0gJiYgZG9jW2FkZEV2ZW50TGlzdGVuZXJdKGRvbUNvbnRlbnRMb2FkZWQsIGZuID0gZnVuY3Rpb24gKCkge1xuICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKGRvbUNvbnRlbnRMb2FkZWQsIGZuLCBmKVxuICAgIGZsdXNoKClcbiAgfSwgZilcblxuXG4gIGhhY2sgJiYgZG9jLmF0dGFjaEV2ZW50KG9ucmVhZHlzdGF0ZWNoYW5nZSwgZm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKC9eYy8udGVzdChkb2NbcmVhZHlTdGF0ZV0pKSB7XG4gICAgICBkb2MuZGV0YWNoRXZlbnQob25yZWFkeXN0YXRlY2hhbmdlLCBmbilcbiAgICAgIGZsdXNoKClcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIChyZWFkeSA9IGhhY2sgP1xuICAgIGZ1bmN0aW9uIChmbikge1xuICAgICAgc2VsZiAhPSB0b3AgP1xuICAgICAgICBsb2FkZWQgPyBmbigpIDogZm5zLnB1c2goZm4pIDpcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0ZXN0RWwuZG9TY3JvbGwoJ2xlZnQnKVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyByZWFkeShmbikgfSwgNTApXG4gICAgICAgICAgfVxuICAgICAgICAgIGZuKClcbiAgICAgICAgfSgpXG4gICAgfSA6XG4gICAgZnVuY3Rpb24gKGZuKSB7XG4gICAgICBsb2FkZWQgPyBmbigpIDogZm5zLnB1c2goZm4pXG4gICAgfSlcbn0pXG4iLCIvKipcbiAqIFRoaXMgd2lsbCBzdG9yZSB0aGUgcHJvcGVydHkgdGhhdCB0aGUgY3VycmVudFxuICogYnJvd3NlciB1c2VzIGZvciB0cmFuc2l0aW9uRHVyYXRpb25cbiAqL1xudmFyIHByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBwcm9wZXJ0aWVzIHdlJ2xsIGNoZWNrIG9uIGFuIGVsZW1lbnRcbiAqIHRvIGRldGVybWluZSBpZiBpdCBhY3R1YWxseSBoYXMgdHJhbnNpdGlvbnNcbiAqIFdlIHVzZSBkdXJhdGlvbiBhcyB0aGlzIGlzIHRoZSBvbmx5IHByb3BlcnR5XG4gKiBuZWVkZWQgdG8gdGVjaG5pY2FsbHkgaGF2ZSB0cmFuc2l0aW9uc1xuICogQHR5cGUge0FycmF5fVxuICovXG52YXIgdHlwZXMgPSBbXG4gIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsXG4gIFwiTW96VHJhbnNpdGlvbkR1cmF0aW9uXCIsXG4gIFwid2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uXCIsXG4gIFwibXNUcmFuc2l0aW9uRHVyYXRpb25cIixcbiAgXCJLaHRtbFRyYW5zaXRpb25EdXJhdGlvblwiLFxuICBcIk9UcmFuc2l0aW9uRHVyYXRpb25cIlxuXTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgdGhlIGNvcnJlY3QgcHJvcGVydHkgZm9yIHRoaXMgYnJvd3NlclxuICoganVzdCBvbmNlIHNvIHdlIGRvbmUgbmVlZCB0byBjaGVjayBldmVyeSB0aW1lXG4gKi9cbndoaWxlKHR5cGVzLmxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVzLnNoaWZ0KCk7XG4gIGlmKHR5cGUgaW4gZG9jdW1lbnQuYm9keS5zdHlsZSkge1xuICAgIHByb3BlcnR5ID0gdHlwZTtcbiAgfVxufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0cmFuc2l0aW9ucyBvclxuICogaWYgYW4gZWxlbWVudCBoYXMgdHJhbnNpdGlvbnMgYXQgYWxsLlxuICogQHBhcmFtICB7RWxlbWVudH0gIGVsIE9wdGlvbmFsLiBSZXR1cm5zIGJyb3dzZXIgc3VwcG9ydCBpZiBub3QgaW5jbHVkZWRcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGhhc1RyYW5zaXRpb25zKGVsKXtcbiAgaWYoIXByb3BlcnR5KSB7XG4gICAgcmV0dXJuIGZhbHNlOyAvLyBObyBicm93c2VyIHN1cHBvcnQgZm9yIHRyYW5zaXRpb25zXG4gIH1cbiAgaWYoIWVsKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5ICE9IG51bGw7IC8vIFdlIGp1c3Qgd2FudCB0byBrbm93IGlmIGJyb3dzZXJzIHN1cHBvcnQgaXRcbiAgfVxuICB2YXIgZHVyYXRpb24gPSBnZXRDb21wdXRlZFN0eWxlKGVsKVtwcm9wZXJ0eV07XG4gIHJldHVybiBkdXJhdGlvbiAhPT0gXCJcIiAmJiBwYXJzZUZsb2F0KGR1cmF0aW9uKSAhPT0gMDsgLy8gRG9lcyB0aGlzIGVsZW1lbnQgaGF2ZSB0cmFuc2l0aW9ucz9cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNUcmFuc2l0aW9ucztcbiIsIi8qIVxuICAqIEBwcmVzZXJ2ZSBRd2VyeSAtIEEgQmxhemluZyBGYXN0IHF1ZXJ5IHNlbGVjdG9yIGVuZ2luZVxuICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWQvcXdlcnlcbiAgKiBjb3B5cmlnaHQgRHVzdGluIERpYXogMjAxMlxuICAqIE1JVCBMaWNlbnNlXG4gICovXG5cbihmdW5jdGlvbiAobmFtZSwgY29udGV4dCwgZGVmaW5pdGlvbikge1xuICBpZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKClcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIGRlZmluZShkZWZpbml0aW9uKVxuICBlbHNlIGNvbnRleHRbbmFtZV0gPSBkZWZpbml0aW9uKClcbn0pKCdxd2VyeScsIHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIGRvYyA9IGRvY3VtZW50XG4gICAgLCBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudFxuICAgICwgYnlDbGFzcyA9ICdnZXRFbGVtZW50c0J5Q2xhc3NOYW1lJ1xuICAgICwgYnlUYWcgPSAnZ2V0RWxlbWVudHNCeVRhZ05hbWUnXG4gICAgLCBxU0EgPSAncXVlcnlTZWxlY3RvckFsbCdcbiAgICAsIHVzZU5hdGl2ZVFTQSA9ICd1c2VOYXRpdmVRU0EnXG4gICAgLCB0YWdOYW1lID0gJ3RhZ05hbWUnXG4gICAgLCBub2RlVHlwZSA9ICdub2RlVHlwZSdcbiAgICAsIHNlbGVjdCAvLyBtYWluIHNlbGVjdCgpIG1ldGhvZCwgYXNzaWduIGxhdGVyXG5cbiAgICAsIGlkID0gLyMoW1xcd1xcLV0rKS9cbiAgICAsIGNsYXMgPSAvXFwuW1xcd1xcLV0rL2dcbiAgICAsIGlkT25seSA9IC9eIyhbXFx3XFwtXSspJC9cbiAgICAsIGNsYXNzT25seSA9IC9eXFwuKFtcXHdcXC1dKykkL1xuICAgICwgdGFnT25seSA9IC9eKFtcXHdcXC1dKykkL1xuICAgICwgdGFnQW5kT3JDbGFzcyA9IC9eKFtcXHddKyk/XFwuKFtcXHdcXC1dKykkL1xuICAgICwgc3BsaXR0YWJsZSA9IC8oXnwsKVxccypbPn4rXS9cbiAgICAsIG5vcm1hbGl6ciA9IC9eXFxzK3xcXHMqKFssXFxzXFwrXFx+Pl18JClcXHMqL2dcbiAgICAsIHNwbGl0dGVycyA9IC9bXFxzXFw+XFwrXFx+XS9cbiAgICAsIHNwbGl0dGVyc01vcmUgPSAvKD8hW1xcc1xcd1xcLVxcL1xcP1xcJlxcPVxcOlxcLlxcKFxcKVxcISxAIyU8Plxce1xcfVxcJFxcKlxcXidcIl0qXFxdfFtcXHNcXHdcXCtcXC1dKlxcKSkvXG4gICAgLCBzcGVjaWFsQ2hhcnMgPSAvKFsuKis/XFxePSE6JHt9KCl8XFxbXFxdXFwvXFxcXF0pL2dcbiAgICAsIHNpbXBsZSA9IC9eKFxcKnxbYS16MC05XSspPyg/OihbXFwuXFwjXStbXFx3XFwtXFwuI10rKT8pL1xuICAgICwgYXR0ciA9IC9cXFsoW1xcd1xcLV0rKSg/OihbXFx8XFxeXFwkXFwqXFx+XT9cXD0pWydcIl0/KFsgXFx3XFwtXFwvXFw/XFwmXFw9XFw6XFwuXFwoXFwpXFwhLEAjJTw+XFx7XFx9XFwkXFwqXFxeXSspW1wiJ10/KT9cXF0vXG4gICAgLCBwc2V1ZG8gPSAvOihbXFx3XFwtXSspKFxcKFsnXCJdPyhbXigpXSspWydcIl0/XFwpKT8vXG4gICAgLCBlYXN5ID0gbmV3IFJlZ0V4cChpZE9ubHkuc291cmNlICsgJ3wnICsgdGFnT25seS5zb3VyY2UgKyAnfCcgKyBjbGFzc09ubHkuc291cmNlKVxuICAgICwgZGl2aWRlcnMgPSBuZXcgUmVnRXhwKCcoJyArIHNwbGl0dGVycy5zb3VyY2UgKyAnKScgKyBzcGxpdHRlcnNNb3JlLnNvdXJjZSwgJ2cnKVxuICAgICwgdG9rZW5penIgPSBuZXcgUmVnRXhwKHNwbGl0dGVycy5zb3VyY2UgKyBzcGxpdHRlcnNNb3JlLnNvdXJjZSlcbiAgICAsIGNodW5rZXIgPSBuZXcgUmVnRXhwKHNpbXBsZS5zb3VyY2UgKyAnKCcgKyBhdHRyLnNvdXJjZSArICcpPycgKyAnKCcgKyBwc2V1ZG8uc291cmNlICsgJyk/JylcblxuICB2YXIgd2Fsa2VyID0ge1xuICAgICAgJyAnOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZSAmJiBub2RlICE9PSBodG1sICYmIG5vZGUucGFyZW50Tm9kZVxuICAgICAgfVxuICAgICwgJz4nOiBmdW5jdGlvbiAobm9kZSwgY29udGVzdGFudCkge1xuICAgICAgICByZXR1cm4gbm9kZSAmJiBub2RlLnBhcmVudE5vZGUgPT0gY29udGVzdGFudC5wYXJlbnROb2RlICYmIG5vZGUucGFyZW50Tm9kZVxuICAgICAgfVxuICAgICwgJ34nOiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZSAmJiBub2RlLnByZXZpb3VzU2libGluZ1xuICAgICAgfVxuICAgICwgJysnOiBmdW5jdGlvbiAobm9kZSwgY29udGVzdGFudCwgcDEsIHAyKSB7XG4gICAgICAgIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlXG4gICAgICAgIHJldHVybiAocDEgPSBwcmV2aW91cyhub2RlKSkgJiYgKHAyID0gcHJldmlvdXMoY29udGVzdGFudCkpICYmIHAxID09IHAyICYmIHAxXG4gICAgICB9XG4gICAgfVxuXG4gIGZ1bmN0aW9uIGNhY2hlKCkge1xuICAgIHRoaXMuYyA9IHt9XG4gIH1cbiAgY2FjaGUucHJvdG90eXBlID0ge1xuICAgIGc6IGZ1bmN0aW9uIChrKSB7XG4gICAgICByZXR1cm4gdGhpcy5jW2tdIHx8IHVuZGVmaW5lZFxuICAgIH1cbiAgLCBzOiBmdW5jdGlvbiAoaywgdiwgcikge1xuICAgICAgdiA9IHIgPyBuZXcgUmVnRXhwKHYpIDogdlxuICAgICAgcmV0dXJuICh0aGlzLmNba10gPSB2KVxuICAgIH1cbiAgfVxuXG4gIHZhciBjbGFzc0NhY2hlID0gbmV3IGNhY2hlKClcbiAgICAsIGNsZWFuQ2FjaGUgPSBuZXcgY2FjaGUoKVxuICAgICwgYXR0ckNhY2hlID0gbmV3IGNhY2hlKClcbiAgICAsIHRva2VuQ2FjaGUgPSBuZXcgY2FjaGUoKVxuXG4gIGZ1bmN0aW9uIGNsYXNzUmVnZXgoYykge1xuICAgIHJldHVybiBjbGFzc0NhY2hlLmcoYykgfHwgY2xhc3NDYWNoZS5zKGMsICcoXnxcXFxccyspJyArIGMgKyAnKFxcXFxzK3wkKScsIDEpXG4gIH1cblxuICAvLyBub3QgcXVpdGUgYXMgZmFzdCBhcyBpbmxpbmUgbG9vcHMgaW4gb2xkZXIgYnJvd3NlcnMgc28gZG9uJ3QgdXNlIGxpYmVyYWxseVxuICBmdW5jdGlvbiBlYWNoKGEsIGZuKSB7XG4gICAgdmFyIGkgPSAwLCBsID0gYS5sZW5ndGhcbiAgICBmb3IgKDsgaSA8IGw7IGkrKykgZm4oYVtpXSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsYXR0ZW4oYXIpIHtcbiAgICBmb3IgKHZhciByID0gW10sIGkgPSAwLCBsID0gYXIubGVuZ3RoOyBpIDwgbDsgKytpKSBhcnJheUxpa2UoYXJbaV0pID8gKHIgPSByLmNvbmNhdChhcltpXSkpIDogKHJbci5sZW5ndGhdID0gYXJbaV0pXG4gICAgcmV0dXJuIHJcbiAgfVxuXG4gIGZ1bmN0aW9uIGFycmF5aWZ5KGFyKSB7XG4gICAgdmFyIGkgPSAwLCBsID0gYXIubGVuZ3RoLCByID0gW11cbiAgICBmb3IgKDsgaSA8IGw7IGkrKykgcltpXSA9IGFyW2ldXG4gICAgcmV0dXJuIHJcbiAgfVxuXG4gIGZ1bmN0aW9uIHByZXZpb3VzKG4pIHtcbiAgICB3aGlsZSAobiA9IG4ucHJldmlvdXNTaWJsaW5nKSBpZiAobltub2RlVHlwZV0gPT0gMSkgYnJlYWs7XG4gICAgcmV0dXJuIG5cbiAgfVxuXG4gIGZ1bmN0aW9uIHEocXVlcnkpIHtcbiAgICByZXR1cm4gcXVlcnkubWF0Y2goY2h1bmtlcilcbiAgfVxuXG4gIC8vIGNhbGxlZCB1c2luZyBgdGhpc2AgYXMgZWxlbWVudCBhbmQgYXJndW1lbnRzIGZyb20gcmVnZXggZ3JvdXAgcmVzdWx0cy5cbiAgLy8gZ2l2ZW4gPT4gZGl2LmhlbGxvW3RpdGxlPVwid29ybGRcIl06Zm9vKCdiYXInKVxuICAvLyBkaXYuaGVsbG9bdGl0bGU9XCJ3b3JsZFwiXTpmb28oJ2JhcicpLCBkaXYsIC5oZWxsbywgW3RpdGxlPVwid29ybGRcIl0sIHRpdGxlLCA9LCB3b3JsZCwgOmZvbygnYmFyJyksIGZvbywgKCdiYXInKSwgYmFyXVxuICBmdW5jdGlvbiBpbnRlcnByZXQod2hvbGUsIHRhZywgaWRzQW5kQ2xhc3Nlcywgd2hvbGVBdHRyaWJ1dGUsIGF0dHJpYnV0ZSwgcXVhbGlmaWVyLCB2YWx1ZSwgd2hvbGVQc2V1ZG8sIHBzZXVkbywgd2hvbGVQc2V1ZG9WYWwsIHBzZXVkb1ZhbCkge1xuICAgIHZhciBpLCBtLCBrLCBvLCBjbGFzc2VzXG4gICAgaWYgKHRoaXNbbm9kZVR5cGVdICE9PSAxKSByZXR1cm4gZmFsc2VcbiAgICBpZiAodGFnICYmIHRhZyAhPT0gJyonICYmIHRoaXNbdGFnTmFtZV0gJiYgdGhpc1t0YWdOYW1lXS50b0xvd2VyQ2FzZSgpICE9PSB0YWcpIHJldHVybiBmYWxzZVxuICAgIGlmIChpZHNBbmRDbGFzc2VzICYmIChtID0gaWRzQW5kQ2xhc3Nlcy5tYXRjaChpZCkpICYmIG1bMV0gIT09IHRoaXMuaWQpIHJldHVybiBmYWxzZVxuICAgIGlmIChpZHNBbmRDbGFzc2VzICYmIChjbGFzc2VzID0gaWRzQW5kQ2xhc3Nlcy5tYXRjaChjbGFzKSkpIHtcbiAgICAgIGZvciAoaSA9IGNsYXNzZXMubGVuZ3RoOyBpLS07KSBpZiAoIWNsYXNzUmVnZXgoY2xhc3Nlc1tpXS5zbGljZSgxKSkudGVzdCh0aGlzLmNsYXNzTmFtZSkpIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAocHNldWRvICYmIHF3ZXJ5LnBzZXVkb3NbcHNldWRvXSAmJiAhcXdlcnkucHNldWRvc1twc2V1ZG9dKHRoaXMsIHBzZXVkb1ZhbCkpIHJldHVybiBmYWxzZVxuICAgIGlmICh3aG9sZUF0dHJpYnV0ZSAmJiAhdmFsdWUpIHsgLy8gc2VsZWN0IGlzIGp1c3QgZm9yIGV4aXN0YW5jZSBvZiBhdHRyaWJcbiAgICAgIG8gPSB0aGlzLmF0dHJpYnV0ZXNcbiAgICAgIGZvciAoayBpbiBvKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgaykgJiYgKG9ba10ubmFtZSB8fCBrKSA9PSBhdHRyaWJ1dGUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh3aG9sZUF0dHJpYnV0ZSAmJiAhY2hlY2tBdHRyKHF1YWxpZmllciwgZ2V0QXR0cih0aGlzLCBhdHRyaWJ1dGUpIHx8ICcnLCB2YWx1ZSkpIHtcbiAgICAgIC8vIHNlbGVjdCBpcyBmb3IgYXR0cmliIGVxdWFsaXR5XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFuKHMpIHtcbiAgICByZXR1cm4gY2xlYW5DYWNoZS5nKHMpIHx8IGNsZWFuQ2FjaGUucyhzLCBzLnJlcGxhY2Uoc3BlY2lhbENoYXJzLCAnXFxcXCQxJykpXG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0F0dHIocXVhbGlmeSwgYWN0dWFsLCB2YWwpIHtcbiAgICBzd2l0Y2ggKHF1YWxpZnkpIHtcbiAgICBjYXNlICc9JzpcbiAgICAgIHJldHVybiBhY3R1YWwgPT0gdmFsXG4gICAgY2FzZSAnXj0nOlxuICAgICAgcmV0dXJuIGFjdHVhbC5tYXRjaChhdHRyQ2FjaGUuZygnXj0nICsgdmFsKSB8fCBhdHRyQ2FjaGUucygnXj0nICsgdmFsLCAnXicgKyBjbGVhbih2YWwpLCAxKSlcbiAgICBjYXNlICckPSc6XG4gICAgICByZXR1cm4gYWN0dWFsLm1hdGNoKGF0dHJDYWNoZS5nKCckPScgKyB2YWwpIHx8IGF0dHJDYWNoZS5zKCckPScgKyB2YWwsIGNsZWFuKHZhbCkgKyAnJCcsIDEpKVxuICAgIGNhc2UgJyo9JzpcbiAgICAgIHJldHVybiBhY3R1YWwubWF0Y2goYXR0ckNhY2hlLmcodmFsKSB8fCBhdHRyQ2FjaGUucyh2YWwsIGNsZWFuKHZhbCksIDEpKVxuICAgIGNhc2UgJ349JzpcbiAgICAgIHJldHVybiBhY3R1YWwubWF0Y2goYXR0ckNhY2hlLmcoJ349JyArIHZhbCkgfHwgYXR0ckNhY2hlLnMoJ349JyArIHZhbCwgJyg/Ol58XFxcXHMrKScgKyBjbGVhbih2YWwpICsgJyg/OlxcXFxzK3wkKScsIDEpKVxuICAgIGNhc2UgJ3w9JzpcbiAgICAgIHJldHVybiBhY3R1YWwubWF0Y2goYXR0ckNhY2hlLmcoJ3w9JyArIHZhbCkgfHwgYXR0ckNhY2hlLnMoJ3w9JyArIHZhbCwgJ14nICsgY2xlYW4odmFsKSArICcoLXwkKScsIDEpKVxuICAgIH1cbiAgICByZXR1cm4gMFxuICB9XG5cbiAgLy8gZ2l2ZW4gYSBzZWxlY3RvciwgZmlyc3QgY2hlY2sgZm9yIHNpbXBsZSBjYXNlcyB0aGVuIGNvbGxlY3QgYWxsIGJhc2UgY2FuZGlkYXRlIG1hdGNoZXMgYW5kIGZpbHRlclxuICBmdW5jdGlvbiBfcXdlcnkoc2VsZWN0b3IsIF9yb290KSB7XG4gICAgdmFyIHIgPSBbXSwgcmV0ID0gW10sIGksIGwsIG0sIHRva2VuLCB0YWcsIGVscywgaW50ciwgaXRlbSwgcm9vdCA9IF9yb290XG4gICAgICAsIHRva2VucyA9IHRva2VuQ2FjaGUuZyhzZWxlY3RvcikgfHwgdG9rZW5DYWNoZS5zKHNlbGVjdG9yLCBzZWxlY3Rvci5zcGxpdCh0b2tlbml6cikpXG4gICAgICAsIGRpdmlkZWRUb2tlbnMgPSBzZWxlY3Rvci5tYXRjaChkaXZpZGVycylcblxuICAgIGlmICghdG9rZW5zLmxlbmd0aCkgcmV0dXJuIHJcblxuICAgIHRva2VuID0gKHRva2VucyA9IHRva2Vucy5zbGljZSgwKSkucG9wKCkgLy8gY29weSBjYWNoZWQgdG9rZW5zLCB0YWtlIHRoZSBsYXN0IG9uZVxuICAgIGlmICh0b2tlbnMubGVuZ3RoICYmIChtID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXS5tYXRjaChpZE9ubHkpKSkgcm9vdCA9IGJ5SWQoX3Jvb3QsIG1bMV0pXG4gICAgaWYgKCFyb290KSByZXR1cm4gclxuXG4gICAgaW50ciA9IHEodG9rZW4pXG4gICAgLy8gY29sbGVjdCBiYXNlIGNhbmRpZGF0ZXMgdG8gZmlsdGVyXG4gICAgZWxzID0gcm9vdCAhPT0gX3Jvb3QgJiYgcm9vdFtub2RlVHlwZV0gIT09IDkgJiYgZGl2aWRlZFRva2VucyAmJiAvXlsrfl0kLy50ZXN0KGRpdmlkZWRUb2tlbnNbZGl2aWRlZFRva2Vucy5sZW5ndGggLSAxXSkgP1xuICAgICAgZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgd2hpbGUgKHJvb3QgPSByb290Lm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgcm9vdFtub2RlVHlwZV0gPT0gMSAmJiAoaW50clsxXSA/IGludHJbMV0gPT0gcm9vdFt0YWdOYW1lXS50b0xvd2VyQ2FzZSgpIDogMSkgJiYgKHJbci5sZW5ndGhdID0gcm9vdClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gclxuICAgICAgfShbXSkgOlxuICAgICAgcm9vdFtieVRhZ10oaW50clsxXSB8fCAnKicpXG4gICAgLy8gZmlsdGVyIGVsZW1lbnRzIGFjY29yZGluZyB0byB0aGUgcmlnaHQtbW9zdCBwYXJ0IG9mIHRoZSBzZWxlY3RvclxuICAgIGZvciAoaSA9IDAsIGwgPSBlbHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoaXRlbSA9IGludGVycHJldC5hcHBseShlbHNbaV0sIGludHIpKSByW3IubGVuZ3RoXSA9IGl0ZW1cbiAgICB9XG4gICAgaWYgKCF0b2tlbnMubGVuZ3RoKSByZXR1cm4gclxuXG4gICAgLy8gZmlsdGVyIGZ1cnRoZXIgYWNjb3JkaW5nIHRvIHRoZSByZXN0IG9mIHRoZSBzZWxlY3RvciAodGhlIGxlZnQgc2lkZSlcbiAgICBlYWNoKHIsIGZ1bmN0aW9uIChlKSB7IGlmIChhbmNlc3Rvck1hdGNoKGUsIHRva2VucywgZGl2aWRlZFRva2VucykpIHJldFtyZXQubGVuZ3RoXSA9IGUgfSlcbiAgICByZXR1cm4gcmV0XG4gIH1cblxuICAvLyBjb21wYXJlIGVsZW1lbnQgdG8gYSBzZWxlY3RvclxuICBmdW5jdGlvbiBpcyhlbCwgc2VsZWN0b3IsIHJvb3QpIHtcbiAgICBpZiAoaXNOb2RlKHNlbGVjdG9yKSkgcmV0dXJuIGVsID09IHNlbGVjdG9yXG4gICAgaWYgKGFycmF5TGlrZShzZWxlY3RvcikpIHJldHVybiAhIX5mbGF0dGVuKHNlbGVjdG9yKS5pbmRleE9mKGVsKSAvLyBpZiBzZWxlY3RvciBpcyBhbiBhcnJheSwgaXMgZWwgYSBtZW1iZXI/XG5cbiAgICB2YXIgc2VsZWN0b3JzID0gc2VsZWN0b3Iuc3BsaXQoJywnKSwgdG9rZW5zLCBkaXZpZGVkVG9rZW5zXG4gICAgd2hpbGUgKHNlbGVjdG9yID0gc2VsZWN0b3JzLnBvcCgpKSB7XG4gICAgICB0b2tlbnMgPSB0b2tlbkNhY2hlLmcoc2VsZWN0b3IpIHx8IHRva2VuQ2FjaGUucyhzZWxlY3Rvciwgc2VsZWN0b3Iuc3BsaXQodG9rZW5penIpKVxuICAgICAgZGl2aWRlZFRva2VucyA9IHNlbGVjdG9yLm1hdGNoKGRpdmlkZXJzKVxuICAgICAgdG9rZW5zID0gdG9rZW5zLnNsaWNlKDApIC8vIGNvcHkgYXJyYXlcbiAgICAgIGlmIChpbnRlcnByZXQuYXBwbHkoZWwsIHEodG9rZW5zLnBvcCgpKSkgJiYgKCF0b2tlbnMubGVuZ3RoIHx8IGFuY2VzdG9yTWF0Y2goZWwsIHRva2VucywgZGl2aWRlZFRva2Vucywgcm9vdCkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gZ2l2ZW4gZWxlbWVudHMgbWF0Y2hpbmcgdGhlIHJpZ2h0LW1vc3QgcGFydCBvZiBhIHNlbGVjdG9yLCBmaWx0ZXIgb3V0IGFueSB0aGF0IGRvbid0IG1hdGNoIHRoZSByZXN0XG4gIGZ1bmN0aW9uIGFuY2VzdG9yTWF0Y2goZWwsIHRva2VucywgZGl2aWRlZFRva2Vucywgcm9vdCkge1xuICAgIHZhciBjYW5kXG4gICAgLy8gcmVjdXJzaXZlbHkgd29yayBiYWNrd2FyZHMgdGhyb3VnaCB0aGUgdG9rZW5zIGFuZCB1cCB0aGUgZG9tLCBjb3ZlcmluZyBhbGwgb3B0aW9uc1xuICAgIGZ1bmN0aW9uIGNyYXdsKGUsIGksIHApIHtcbiAgICAgIHdoaWxlIChwID0gd2Fsa2VyW2RpdmlkZWRUb2tlbnNbaV1dKHAsIGUpKSB7XG4gICAgICAgIGlmIChpc05vZGUocCkgJiYgKGludGVycHJldC5hcHBseShwLCBxKHRva2Vuc1tpXSkpKSkge1xuICAgICAgICAgIGlmIChpKSB7XG4gICAgICAgICAgICBpZiAoY2FuZCA9IGNyYXdsKHAsIGkgLSAxLCBwKSkgcmV0dXJuIGNhbmRcbiAgICAgICAgICB9IGVsc2UgcmV0dXJuIHBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKGNhbmQgPSBjcmF3bChlbCwgdG9rZW5zLmxlbmd0aCAtIDEsIGVsKSkgJiYgKCFyb290IHx8IGlzQW5jZXN0b3IoY2FuZCwgcm9vdCkpXG4gIH1cblxuICBmdW5jdGlvbiBpc05vZGUoZWwsIHQpIHtcbiAgICByZXR1cm4gZWwgJiYgdHlwZW9mIGVsID09PSAnb2JqZWN0JyAmJiAodCA9IGVsW25vZGVUeXBlXSkgJiYgKHQgPT0gMSB8fCB0ID09IDkpXG4gIH1cblxuICBmdW5jdGlvbiB1bmlxKGFyKSB7XG4gICAgdmFyIGEgPSBbXSwgaSwgajtcbiAgICBvOlxuICAgIGZvciAoaSA9IDA7IGkgPCBhci5sZW5ndGg7ICsraSkge1xuICAgICAgZm9yIChqID0gMDsgaiA8IGEubGVuZ3RoOyArK2opIGlmIChhW2pdID09IGFyW2ldKSBjb250aW51ZSBvXG4gICAgICBhW2EubGVuZ3RoXSA9IGFyW2ldXG4gICAgfVxuICAgIHJldHVybiBhXG4gIH1cblxuICBmdW5jdGlvbiBhcnJheUxpa2Uobykge1xuICAgIHJldHVybiAodHlwZW9mIG8gPT09ICdvYmplY3QnICYmIGlzRmluaXRlKG8ubGVuZ3RoKSlcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZVJvb3Qocm9vdCkge1xuICAgIGlmICghcm9vdCkgcmV0dXJuIGRvY1xuICAgIGlmICh0eXBlb2Ygcm9vdCA9PSAnc3RyaW5nJykgcmV0dXJuIHF3ZXJ5KHJvb3QpWzBdXG4gICAgaWYgKCFyb290W25vZGVUeXBlXSAmJiBhcnJheUxpa2Uocm9vdCkpIHJldHVybiByb290WzBdXG4gICAgcmV0dXJuIHJvb3RcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ5SWQocm9vdCwgaWQsIGVsKSB7XG4gICAgLy8gaWYgZG9jLCBxdWVyeSBvbiBpdCwgZWxzZSBxdWVyeSB0aGUgcGFyZW50IGRvYyBvciBpZiBhIGRldGFjaGVkIGZyYWdtZW50IHJld3JpdGUgdGhlIHF1ZXJ5IGFuZCBydW4gb24gdGhlIGZyYWdtZW50XG4gICAgcmV0dXJuIHJvb3Rbbm9kZVR5cGVdID09PSA5ID8gcm9vdC5nZXRFbGVtZW50QnlJZChpZCkgOlxuICAgICAgcm9vdC5vd25lckRvY3VtZW50ICYmXG4gICAgICAgICgoKGVsID0gcm9vdC5vd25lckRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSkgJiYgaXNBbmNlc3RvcihlbCwgcm9vdCkgJiYgZWwpIHx8XG4gICAgICAgICAgKCFpc0FuY2VzdG9yKHJvb3QsIHJvb3Qub3duZXJEb2N1bWVudCkgJiYgc2VsZWN0KCdbaWQ9XCInICsgaWQgKyAnXCJdJywgcm9vdClbMF0pKVxuICB9XG5cbiAgZnVuY3Rpb24gcXdlcnkoc2VsZWN0b3IsIF9yb290KSB7XG4gICAgdmFyIG0sIGVsLCByb290ID0gbm9ybWFsaXplUm9vdChfcm9vdClcblxuICAgIC8vIGVhc3ksIGZhc3QgY2FzZXMgdGhhdCB3ZSBjYW4gZGlzcGF0Y2ggd2l0aCBzaW1wbGUgRE9NIGNhbGxzXG4gICAgaWYgKCFyb290IHx8ICFzZWxlY3RvcikgcmV0dXJuIFtdXG4gICAgaWYgKHNlbGVjdG9yID09PSB3aW5kb3cgfHwgaXNOb2RlKHNlbGVjdG9yKSkge1xuICAgICAgcmV0dXJuICFfcm9vdCB8fCAoc2VsZWN0b3IgIT09IHdpbmRvdyAmJiBpc05vZGUocm9vdCkgJiYgaXNBbmNlc3RvcihzZWxlY3Rvciwgcm9vdCkpID8gW3NlbGVjdG9yXSA6IFtdXG4gICAgfVxuICAgIGlmIChzZWxlY3RvciAmJiBhcnJheUxpa2Uoc2VsZWN0b3IpKSByZXR1cm4gZmxhdHRlbihzZWxlY3RvcilcbiAgICBpZiAobSA9IHNlbGVjdG9yLm1hdGNoKGVhc3kpKSB7XG4gICAgICBpZiAobVsxXSkgcmV0dXJuIChlbCA9IGJ5SWQocm9vdCwgbVsxXSkpID8gW2VsXSA6IFtdXG4gICAgICBpZiAobVsyXSkgcmV0dXJuIGFycmF5aWZ5KHJvb3RbYnlUYWddKG1bMl0pKVxuICAgICAgaWYgKGhhc0J5Q2xhc3MgJiYgbVszXSkgcmV0dXJuIGFycmF5aWZ5KHJvb3RbYnlDbGFzc10obVszXSkpXG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGVjdChzZWxlY3Rvciwgcm9vdClcbiAgfVxuXG4gIC8vIHdoZXJlIHRoZSByb290IGlzIG5vdCBkb2N1bWVudCBhbmQgYSByZWxhdGlvbnNoaXAgc2VsZWN0b3IgaXMgZmlyc3Qgd2UgaGF2ZSB0b1xuICAvLyBkbyBzb21lIGF3a3dhcmQgYWRqdXN0bWVudHMgdG8gZ2V0IGl0IHRvIHdvcmssIGV2ZW4gd2l0aCBxU0FcbiAgZnVuY3Rpb24gY29sbGVjdFNlbGVjdG9yKHJvb3QsIGNvbGxlY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAocykge1xuICAgICAgdmFyIG9pZCwgbmlkXG4gICAgICBpZiAoc3BsaXR0YWJsZS50ZXN0KHMpKSB7XG4gICAgICAgIGlmIChyb290W25vZGVUeXBlXSAhPT0gOSkge1xuICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgZWwgaGFzIGFuIGlkLCByZXdyaXRlIHRoZSBxdWVyeSwgc2V0IHJvb3QgdG8gZG9jIGFuZCBydW4gaXRcbiAgICAgICAgICBpZiAoIShuaWQgPSBvaWQgPSByb290LmdldEF0dHJpYnV0ZSgnaWQnKSkpIHJvb3Quc2V0QXR0cmlidXRlKCdpZCcsIG5pZCA9ICdfX3F3ZXJ5bWV1cHNjb3R0eScpXG4gICAgICAgICAgcyA9ICdbaWQ9XCInICsgbmlkICsgJ1wiXScgKyBzIC8vIGF2b2lkIGJ5SWQgYW5kIGFsbG93IHVzIHRvIG1hdGNoIGNvbnRleHQgZWxlbWVudFxuICAgICAgICAgIGNvbGxlY3Rvcihyb290LnBhcmVudE5vZGUgfHwgcm9vdCwgcywgdHJ1ZSlcbiAgICAgICAgICBvaWQgfHwgcm9vdC5yZW1vdmVBdHRyaWJ1dGUoJ2lkJylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzLmxlbmd0aCAmJiBjb2xsZWN0b3Iocm9vdCwgcywgZmFsc2UpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQW5jZXN0b3IgPSAnY29tcGFyZURvY3VtZW50UG9zaXRpb24nIGluIGh0bWwgP1xuICAgIGZ1bmN0aW9uIChlbGVtZW50LCBjb250YWluZXIpIHtcbiAgICAgIHJldHVybiAoY29udGFpbmVyLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGVsZW1lbnQpICYgMTYpID09IDE2XG4gICAgfSA6ICdjb250YWlucycgaW4gaHRtbCA/XG4gICAgZnVuY3Rpb24gKGVsZW1lbnQsIGNvbnRhaW5lcikge1xuICAgICAgY29udGFpbmVyID0gY29udGFpbmVyW25vZGVUeXBlXSA9PT0gOSB8fCBjb250YWluZXIgPT0gd2luZG93ID8gaHRtbCA6IGNvbnRhaW5lclxuICAgICAgcmV0dXJuIGNvbnRhaW5lciAhPT0gZWxlbWVudCAmJiBjb250YWluZXIuY29udGFpbnMoZWxlbWVudClcbiAgICB9IDpcbiAgICBmdW5jdGlvbiAoZWxlbWVudCwgY29udGFpbmVyKSB7XG4gICAgICB3aGlsZSAoZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSkgaWYgKGVsZW1lbnQgPT09IGNvbnRhaW5lcikgcmV0dXJuIDFcbiAgICAgIHJldHVybiAwXG4gICAgfVxuICAsIGdldEF0dHIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBkZXRlY3QgYnVnZ3kgSUUgc3JjL2hyZWYgZ2V0QXR0cmlidXRlKCkgY2FsbFxuICAgICAgdmFyIGUgPSBkb2MuY3JlYXRlRWxlbWVudCgncCcpXG4gICAgICByZXR1cm4gKChlLmlubmVySFRNTCA9ICc8YSBocmVmPVwiI3hcIj54PC9hPicpICYmIGUuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSAhPSAnI3gnKSA/XG4gICAgICAgIGZ1bmN0aW9uIChlLCBhKSB7XG4gICAgICAgICAgcmV0dXJuIGEgPT09ICdjbGFzcycgPyBlLmNsYXNzTmFtZSA6IChhID09PSAnaHJlZicgfHwgYSA9PT0gJ3NyYycpID9cbiAgICAgICAgICAgIGUuZ2V0QXR0cmlidXRlKGEsIDIpIDogZS5nZXRBdHRyaWJ1dGUoYSlcbiAgICAgICAgfSA6XG4gICAgICAgIGZ1bmN0aW9uIChlLCBhKSB7IHJldHVybiBlLmdldEF0dHJpYnV0ZShhKSB9XG4gICAgfSgpXG4gICwgaGFzQnlDbGFzcyA9ICEhZG9jW2J5Q2xhc3NdXG4gICAgLy8gaGFzIG5hdGl2ZSBxU0Egc3VwcG9ydFxuICAsIGhhc1FTQSA9IGRvYy5xdWVyeVNlbGVjdG9yICYmIGRvY1txU0FdXG4gICAgLy8gdXNlIG5hdGl2ZSBxU0FcbiAgLCBzZWxlY3RRU0EgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIHJvb3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXSwgc3MsIGVcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChyb290W25vZGVUeXBlXSA9PT0gOSB8fCAhc3BsaXR0YWJsZS50ZXN0KHNlbGVjdG9yKSkge1xuICAgICAgICAgIC8vIG1vc3Qgd29yayBpcyBkb25lIHJpZ2h0IGhlcmUsIGRlZmVyIHRvIHFTQVxuICAgICAgICAgIHJldHVybiBhcnJheWlmeShyb290W3FTQV0oc2VsZWN0b3IpKVxuICAgICAgICB9XG4gICAgICAgIC8vIHNwZWNpYWwgY2FzZSB3aGVyZSB3ZSBuZWVkIHRoZSBzZXJ2aWNlcyBvZiBgY29sbGVjdFNlbGVjdG9yKClgXG4gICAgICAgIGVhY2goc3MgPSBzZWxlY3Rvci5zcGxpdCgnLCcpLCBjb2xsZWN0U2VsZWN0b3Iocm9vdCwgZnVuY3Rpb24gKGN0eCwgcykge1xuICAgICAgICAgIGUgPSBjdHhbcVNBXShzKVxuICAgICAgICAgIGlmIChlLmxlbmd0aCA9PSAxKSByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBlLml0ZW0oMClcbiAgICAgICAgICBlbHNlIGlmIChlLmxlbmd0aCkgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdChhcnJheWlmeShlKSlcbiAgICAgICAgfSkpXG4gICAgICAgIHJldHVybiBzcy5sZW5ndGggPiAxICYmIHJlc3VsdC5sZW5ndGggPiAxID8gdW5pcShyZXN1bHQpIDogcmVzdWx0XG4gICAgICB9IGNhdGNoIChleCkgeyB9XG4gICAgICByZXR1cm4gc2VsZWN0Tm9uTmF0aXZlKHNlbGVjdG9yLCByb290KVxuICAgIH1cbiAgICAvLyBubyBuYXRpdmUgc2VsZWN0b3Igc3VwcG9ydFxuICAsIHNlbGVjdE5vbk5hdGl2ZSA9IGZ1bmN0aW9uIChzZWxlY3Rvciwgcm9vdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdLCBpdGVtcywgbSwgaSwgbCwgciwgc3NcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IucmVwbGFjZShub3JtYWxpenIsICckMScpXG4gICAgICBpZiAobSA9IHNlbGVjdG9yLm1hdGNoKHRhZ0FuZE9yQ2xhc3MpKSB7XG4gICAgICAgIHIgPSBjbGFzc1JlZ2V4KG1bMl0pXG4gICAgICAgIGl0ZW1zID0gcm9vdFtieVRhZ10obVsxXSB8fCAnKicpXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBpZiAoci50ZXN0KGl0ZW1zW2ldLmNsYXNzTmFtZSkpIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IGl0ZW1zW2ldXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgfVxuICAgICAgLy8gbW9yZSBjb21wbGV4IHNlbGVjdG9yLCBnZXQgYF9xd2VyeSgpYCB0byBkbyB0aGUgd29yayBmb3IgdXNcbiAgICAgIGVhY2goc3MgPSBzZWxlY3Rvci5zcGxpdCgnLCcpLCBjb2xsZWN0U2VsZWN0b3Iocm9vdCwgZnVuY3Rpb24gKGN0eCwgcywgcmV3cml0ZSkge1xuICAgICAgICByID0gX3F3ZXJ5KHMsIGN0eClcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IHIubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGN0eFtub2RlVHlwZV0gPT09IDkgfHwgcmV3cml0ZSB8fCBpc0FuY2VzdG9yKHJbaV0sIHJvb3QpKSByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSByW2ldXG4gICAgICAgIH1cbiAgICAgIH0pKVxuICAgICAgcmV0dXJuIHNzLmxlbmd0aCA+IDEgJiYgcmVzdWx0Lmxlbmd0aCA+IDEgPyB1bmlxKHJlc3VsdCkgOiByZXN1bHRcbiAgICB9XG4gICwgY29uZmlndXJlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIC8vIGNvbmZpZ05hdGl2ZVFTQTogdXNlIGZ1bGx5LWludGVybmFsIHNlbGVjdG9yIG9yIG5hdGl2ZSBxU0Egd2hlcmUgcHJlc2VudFxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zW3VzZU5hdGl2ZVFTQV0gIT09ICd1bmRlZmluZWQnKVxuICAgICAgICBzZWxlY3QgPSAhb3B0aW9uc1t1c2VOYXRpdmVRU0FdID8gc2VsZWN0Tm9uTmF0aXZlIDogaGFzUVNBID8gc2VsZWN0UVNBIDogc2VsZWN0Tm9uTmF0aXZlXG4gICAgfVxuXG4gIGNvbmZpZ3VyZSh7IHVzZU5hdGl2ZVFTQTogdHJ1ZSB9KVxuXG4gIHF3ZXJ5LmNvbmZpZ3VyZSA9IGNvbmZpZ3VyZVxuICBxd2VyeS51bmlxID0gdW5pcVxuICBxd2VyeS5pcyA9IGlzXG4gIHF3ZXJ5LnBzZXVkb3MgPSB7fVxuXG4gIHJldHVybiBxd2VyeVxufSk7XG4iLCIvLyAgICAgVW5kZXJzY29yZS5qcyAxLjUuMlxuLy8gICAgIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnXG4vLyAgICAgKGMpIDIwMDktMjAxMyBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuLy8gICAgIFVuZGVyc2NvcmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbihmdW5jdGlvbigpIHtcblxuICAvLyBCYXNlbGluZSBzZXR1cFxuICAvLyAtLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBvciBgZXhwb3J0c2Agb24gdGhlIHNlcnZlci5cbiAgdmFyIHJvb3QgPSB0aGlzO1xuXG4gIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgX2AgdmFyaWFibGUuXG4gIHZhciBwcmV2aW91c1VuZGVyc2NvcmUgPSByb290Ll87XG5cbiAgLy8gRXN0YWJsaXNoIHRoZSBvYmplY3QgdGhhdCBnZXRzIHJldHVybmVkIHRvIGJyZWFrIG91dCBvZiBhIGxvb3AgaXRlcmF0aW9uLlxuICB2YXIgYnJlYWtlciA9IHt9O1xuXG4gIC8vIFNhdmUgYnl0ZXMgaW4gdGhlIG1pbmlmaWVkIChidXQgbm90IGd6aXBwZWQpIHZlcnNpb246XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLCBPYmpQcm90byA9IE9iamVjdC5wcm90b3R5cGUsIEZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuICAvLyBDcmVhdGUgcXVpY2sgcmVmZXJlbmNlIHZhcmlhYmxlcyBmb3Igc3BlZWQgYWNjZXNzIHRvIGNvcmUgcHJvdG90eXBlcy5cbiAgdmFyXG4gICAgcHVzaCAgICAgICAgICAgICA9IEFycmF5UHJvdG8ucHVzaCxcbiAgICBzbGljZSAgICAgICAgICAgID0gQXJyYXlQcm90by5zbGljZSxcbiAgICBjb25jYXQgICAgICAgICAgID0gQXJyYXlQcm90by5jb25jYXQsXG4gICAgdG9TdHJpbmcgICAgICAgICA9IE9ialByb3RvLnRvU3RyaW5nLFxuICAgIGhhc093blByb3BlcnR5ICAgPSBPYmpQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAvLyBBbGwgKipFQ01BU2NyaXB0IDUqKiBuYXRpdmUgZnVuY3Rpb24gaW1wbGVtZW50YXRpb25zIHRoYXQgd2UgaG9wZSB0byB1c2VcbiAgLy8gYXJlIGRlY2xhcmVkIGhlcmUuXG4gIHZhclxuICAgIG5hdGl2ZUZvckVhY2ggICAgICA9IEFycmF5UHJvdG8uZm9yRWFjaCxcbiAgICBuYXRpdmVNYXAgICAgICAgICAgPSBBcnJheVByb3RvLm1hcCxcbiAgICBuYXRpdmVSZWR1Y2UgICAgICAgPSBBcnJheVByb3RvLnJlZHVjZSxcbiAgICBuYXRpdmVSZWR1Y2VSaWdodCAgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0LFxuICAgIG5hdGl2ZUZpbHRlciAgICAgICA9IEFycmF5UHJvdG8uZmlsdGVyLFxuICAgIG5hdGl2ZUV2ZXJ5ICAgICAgICA9IEFycmF5UHJvdG8uZXZlcnksXG4gICAgbmF0aXZlU29tZSAgICAgICAgID0gQXJyYXlQcm90by5zb21lLFxuICAgIG5hdGl2ZUluZGV4T2YgICAgICA9IEFycmF5UHJvdG8uaW5kZXhPZixcbiAgICBuYXRpdmVMYXN0SW5kZXhPZiAgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mLFxuICAgIG5hdGl2ZUlzQXJyYXkgICAgICA9IEFycmF5LmlzQXJyYXksXG4gICAgbmF0aXZlS2V5cyAgICAgICAgID0gT2JqZWN0LmtleXMsXG4gICAgbmF0aXZlQmluZCAgICAgICAgID0gRnVuY1Byb3RvLmJpbmQ7XG5cbiAgLy8gQ3JlYXRlIGEgc2FmZSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciB1c2UgYmVsb3cuXG4gIHZhciBfID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIF8pIHJldHVybiBvYmo7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIF8pKSByZXR1cm4gbmV3IF8ob2JqKTtcbiAgICB0aGlzLl93cmFwcGVkID0gb2JqO1xuICB9O1xuXG4gIC8vIEV4cG9ydCB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yICoqTm9kZS5qcyoqLCB3aXRoXG4gIC8vIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IGZvciB0aGUgb2xkIGByZXF1aXJlKClgIEFQSS4gSWYgd2UncmUgaW5cbiAgLy8gdGhlIGJyb3dzZXIsIGFkZCBgX2AgYXMgYSBnbG9iYWwgb2JqZWN0IHZpYSBhIHN0cmluZyBpZGVudGlmaWVyLFxuICAvLyBmb3IgQ2xvc3VyZSBDb21waWxlciBcImFkdmFuY2VkXCIgbW9kZS5cbiAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gXztcbiAgICB9XG4gICAgZXhwb3J0cy5fID0gXztcbiAgfSBlbHNlIHtcbiAgICByb290Ll8gPSBfO1xuICB9XG5cbiAgLy8gQ3VycmVudCB2ZXJzaW9uLlxuICBfLlZFUlNJT04gPSAnMS41LjInO1xuXG4gIC8vIENvbGxlY3Rpb24gRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gVGhlIGNvcm5lcnN0b25lLCBhbiBgZWFjaGAgaW1wbGVtZW50YXRpb24sIGFrYSBgZm9yRWFjaGAuXG4gIC8vIEhhbmRsZXMgb2JqZWN0cyB3aXRoIHRoZSBidWlsdC1pbiBgZm9yRWFjaGAsIGFycmF5cywgYW5kIHJhdyBvYmplY3RzLlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgZm9yRWFjaGAgaWYgYXZhaWxhYmxlLlxuICB2YXIgZWFjaCA9IF8uZWFjaCA9IF8uZm9yRWFjaCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybjtcbiAgICBpZiAobmF0aXZlRm9yRWFjaCAmJiBvYmouZm9yRWFjaCA9PT0gbmF0aXZlRm9yRWFjaCkge1xuICAgICAgb2JqLmZvckVhY2goaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgIH0gZWxzZSBpZiAob2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2ldLCBpLCBvYmopID09PSBicmVha2VyKSByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5c1tpXV0sIGtleXNbaV0sIG9iaikgPT09IGJyZWFrZXIpIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRvciB0byBlYWNoIGVsZW1lbnQuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBtYXBgIGlmIGF2YWlsYWJsZS5cbiAgXy5tYXAgPSBfLmNvbGxlY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHRzO1xuICAgIGlmIChuYXRpdmVNYXAgJiYgb2JqLm1hcCA9PT0gbmF0aXZlTWFwKSByZXR1cm4gb2JqLm1hcChpdGVyYXRvciwgY29udGV4dCk7XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgcmVzdWx0cy5wdXNoKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgdmFyIHJlZHVjZUVycm9yID0gJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnO1xuXG4gIC8vICoqUmVkdWNlKiogYnVpbGRzIHVwIGEgc2luZ2xlIHJlc3VsdCBmcm9tIGEgbGlzdCBvZiB2YWx1ZXMsIGFrYSBgaW5qZWN0YCxcbiAgLy8gb3IgYGZvbGRsYC4gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYHJlZHVjZWAgaWYgYXZhaWxhYmxlLlxuICBfLnJlZHVjZSA9IF8uZm9sZGwgPSBfLmluamVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIG1lbW8sIGNvbnRleHQpIHtcbiAgICB2YXIgaW5pdGlhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIGlmIChvYmogPT0gbnVsbCkgb2JqID0gW107XG4gICAgaWYgKG5hdGl2ZVJlZHVjZSAmJiBvYmoucmVkdWNlID09PSBuYXRpdmVSZWR1Y2UpIHtcbiAgICAgIGlmIChjb250ZXh0KSBpdGVyYXRvciA9IF8uYmluZChpdGVyYXRvciwgY29udGV4dCk7XG4gICAgICByZXR1cm4gaW5pdGlhbCA/IG9iai5yZWR1Y2UoaXRlcmF0b3IsIG1lbW8pIDogb2JqLnJlZHVjZShpdGVyYXRvcik7XG4gICAgfVxuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmICghaW5pdGlhbCkge1xuICAgICAgICBtZW1vID0gdmFsdWU7XG4gICAgICAgIGluaXRpYWwgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVtbyA9IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgbWVtbywgdmFsdWUsIGluZGV4LCBsaXN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWluaXRpYWwpIHRocm93IG5ldyBUeXBlRXJyb3IocmVkdWNlRXJyb3IpO1xuICAgIHJldHVybiBtZW1vO1xuICB9O1xuXG4gIC8vIFRoZSByaWdodC1hc3NvY2lhdGl2ZSB2ZXJzaW9uIG9mIHJlZHVjZSwgYWxzbyBrbm93biBhcyBgZm9sZHJgLlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgcmVkdWNlUmlnaHRgIGlmIGF2YWlsYWJsZS5cbiAgXy5yZWR1Y2VSaWdodCA9IF8uZm9sZHIgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBtZW1vLCBjb250ZXh0KSB7XG4gICAgdmFyIGluaXRpYWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICBpZiAob2JqID09IG51bGwpIG9iaiA9IFtdO1xuICAgIGlmIChuYXRpdmVSZWR1Y2VSaWdodCAmJiBvYmoucmVkdWNlUmlnaHQgPT09IG5hdGl2ZVJlZHVjZVJpZ2h0KSB7XG4gICAgICBpZiAoY29udGV4dCkgaXRlcmF0b3IgPSBfLmJpbmQoaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgICAgcmV0dXJuIGluaXRpYWwgPyBvYmoucmVkdWNlUmlnaHQoaXRlcmF0b3IsIG1lbW8pIDogb2JqLnJlZHVjZVJpZ2h0KGl0ZXJhdG9yKTtcbiAgICB9XG4gICAgdmFyIGxlbmd0aCA9IG9iai5sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCAhPT0gK2xlbmd0aCkge1xuICAgICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIH1cbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpbmRleCA9IGtleXMgPyBrZXlzWy0tbGVuZ3RoXSA6IC0tbGVuZ3RoO1xuICAgICAgaWYgKCFpbml0aWFsKSB7XG4gICAgICAgIG1lbW8gPSBvYmpbaW5kZXhdO1xuICAgICAgICBpbml0aWFsID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lbW8gPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG1lbW8sIG9ialtpbmRleF0sIGluZGV4LCBsaXN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWluaXRpYWwpIHRocm93IG5ldyBUeXBlRXJyb3IocmVkdWNlRXJyb3IpO1xuICAgIHJldHVybiBtZW1vO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgZmlyc3QgdmFsdWUgd2hpY2ggcGFzc2VzIGEgdHJ1dGggdGVzdC4gQWxpYXNlZCBhcyBgZGV0ZWN0YC5cbiAgXy5maW5kID0gXy5kZXRlY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBhbnkob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmIChpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpIHtcbiAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgdGhhdCBwYXNzIGEgdHJ1dGggdGVzdC5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYGZpbHRlcmAgaWYgYXZhaWxhYmxlLlxuICAvLyBBbGlhc2VkIGFzIGBzZWxlY3RgLlxuICBfLmZpbHRlciA9IF8uc2VsZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0cztcbiAgICBpZiAobmF0aXZlRmlsdGVyICYmIG9iai5maWx0ZXIgPT09IG5hdGl2ZUZpbHRlcikgcmV0dXJuIG9iai5maWx0ZXIoaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmIChpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpIHJlc3VsdHMucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgZm9yIHdoaWNoIGEgdHJ1dGggdGVzdCBmYWlscy5cbiAgXy5yZWplY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICByZXR1cm4gIWl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KTtcbiAgICB9LCBjb250ZXh0KTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgd2hldGhlciBhbGwgb2YgdGhlIGVsZW1lbnRzIG1hdGNoIGEgdHJ1dGggdGVzdC5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYGV2ZXJ5YCBpZiBhdmFpbGFibGUuXG4gIC8vIEFsaWFzZWQgYXMgYGFsbGAuXG4gIF8uZXZlcnkgPSBfLmFsbCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRvciB8fCAoaXRlcmF0b3IgPSBfLmlkZW50aXR5KTtcbiAgICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHQ7XG4gICAgaWYgKG5hdGl2ZUV2ZXJ5ICYmIG9iai5ldmVyeSA9PT0gbmF0aXZlRXZlcnkpIHJldHVybiBvYmouZXZlcnkoaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmICghKHJlc3VsdCA9IHJlc3VsdCAmJiBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpKSByZXR1cm4gYnJlYWtlcjtcbiAgICB9KTtcbiAgICByZXR1cm4gISFyZXN1bHQ7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIGF0IGxlYXN0IG9uZSBlbGVtZW50IGluIHRoZSBvYmplY3QgbWF0Y2hlcyBhIHRydXRoIHRlc3QuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBzb21lYCBpZiBhdmFpbGFibGUuXG4gIC8vIEFsaWFzZWQgYXMgYGFueWAuXG4gIHZhciBhbnkgPSBfLnNvbWUgPSBfLmFueSA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRvciB8fCAoaXRlcmF0b3IgPSBfLmlkZW50aXR5KTtcbiAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0O1xuICAgIGlmIChuYXRpdmVTb21lICYmIG9iai5zb21lID09PSBuYXRpdmVTb21lKSByZXR1cm4gb2JqLnNvbWUoaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmIChyZXN1bHQgfHwgKHJlc3VsdCA9IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSkpIHJldHVybiBicmVha2VyO1xuICAgIH0pO1xuICAgIHJldHVybiAhIXJlc3VsdDtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgaWYgdGhlIGFycmF5IG9yIG9iamVjdCBjb250YWlucyBhIGdpdmVuIHZhbHVlICh1c2luZyBgPT09YCkuXG4gIC8vIEFsaWFzZWQgYXMgYGluY2x1ZGVgLlxuICBfLmNvbnRhaW5zID0gXy5pbmNsdWRlID0gZnVuY3Rpb24ob2JqLCB0YXJnZXQpIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgICBpZiAobmF0aXZlSW5kZXhPZiAmJiBvYmouaW5kZXhPZiA9PT0gbmF0aXZlSW5kZXhPZikgcmV0dXJuIG9iai5pbmRleE9mKHRhcmdldCkgIT0gLTE7XG4gICAgcmV0dXJuIGFueShvYmosIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRhcmdldDtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBJbnZva2UgYSBtZXRob2QgKHdpdGggYXJndW1lbnRzKSBvbiBldmVyeSBpdGVtIGluIGEgY29sbGVjdGlvbi5cbiAgXy5pbnZva2UgPSBmdW5jdGlvbihvYmosIG1ldGhvZCkge1xuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIHZhciBpc0Z1bmMgPSBfLmlzRnVuY3Rpb24obWV0aG9kKTtcbiAgICByZXR1cm4gXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIChpc0Z1bmMgPyBtZXRob2QgOiB2YWx1ZVttZXRob2RdKS5hcHBseSh2YWx1ZSwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgbWFwYDogZmV0Y2hpbmcgYSBwcm9wZXJ0eS5cbiAgXy5wbHVjayA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUpeyByZXR1cm4gdmFsdWVba2V5XTsgfSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgZmlsdGVyYDogc2VsZWN0aW5nIG9ubHkgb2JqZWN0c1xuICAvLyBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLndoZXJlID0gZnVuY3Rpb24ob2JqLCBhdHRycywgZmlyc3QpIHtcbiAgICBpZiAoXy5pc0VtcHR5KGF0dHJzKSkgcmV0dXJuIGZpcnN0ID8gdm9pZCAwIDogW107XG4gICAgcmV0dXJuIF9bZmlyc3QgPyAnZmluZCcgOiAnZmlsdGVyJ10ob2JqLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgZm9yICh2YXIga2V5IGluIGF0dHJzKSB7XG4gICAgICAgIGlmIChhdHRyc1trZXldICE9PSB2YWx1ZVtrZXldKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaW5kYDogZ2V0dGluZyB0aGUgZmlyc3Qgb2JqZWN0XG4gIC8vIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8uZmluZFdoZXJlID0gZnVuY3Rpb24ob2JqLCBhdHRycykge1xuICAgIHJldHVybiBfLndoZXJlKG9iaiwgYXR0cnMsIHRydWUpO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbWF4aW11bSBlbGVtZW50IG9yIChlbGVtZW50LWJhc2VkIGNvbXB1dGF0aW9uKS5cbiAgLy8gQ2FuJ3Qgb3B0aW1pemUgYXJyYXlzIG9mIGludGVnZXJzIGxvbmdlciB0aGFuIDY1LDUzNSBlbGVtZW50cy5cbiAgLy8gU2VlIFtXZWJLaXQgQnVnIDgwNzk3XShodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODA3OTcpXG4gIF8ubWF4ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIGlmICghaXRlcmF0b3IgJiYgXy5pc0FycmF5KG9iaikgJiYgb2JqWzBdID09PSArb2JqWzBdICYmIG9iai5sZW5ndGggPCA2NTUzNSkge1xuICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIG9iaik7XG4gICAgfVxuICAgIGlmICghaXRlcmF0b3IgJiYgXy5pc0VtcHR5KG9iaikpIHJldHVybiAtSW5maW5pdHk7XG4gICAgdmFyIHJlc3VsdCA9IHtjb21wdXRlZCA6IC1JbmZpbml0eSwgdmFsdWU6IC1JbmZpbml0eX07XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgdmFyIGNvbXB1dGVkID0gaXRlcmF0b3IgPyBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkgOiB2YWx1ZTtcbiAgICAgIGNvbXB1dGVkID4gcmVzdWx0LmNvbXB1dGVkICYmIChyZXN1bHQgPSB7dmFsdWUgOiB2YWx1ZSwgY29tcHV0ZWQgOiBjb21wdXRlZH0pO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQudmFsdWU7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBtaW5pbXVtIGVsZW1lbnQgKG9yIGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxuICBfLm1pbiA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNBcnJheShvYmopICYmIG9ialswXSA9PT0gK29ialswXSAmJiBvYmoubGVuZ3RoIDwgNjU1MzUpIHtcbiAgICAgIHJldHVybiBNYXRoLm1pbi5hcHBseShNYXRoLCBvYmopO1xuICAgIH1cbiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNFbXB0eShvYmopKSByZXR1cm4gSW5maW5pdHk7XG4gICAgdmFyIHJlc3VsdCA9IHtjb21wdXRlZCA6IEluZmluaXR5LCB2YWx1ZTogSW5maW5pdHl9O1xuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIHZhciBjb21wdXRlZCA9IGl0ZXJhdG9yID8gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpIDogdmFsdWU7XG4gICAgICBjb21wdXRlZCA8IHJlc3VsdC5jb21wdXRlZCAmJiAocmVzdWx0ID0ge3ZhbHVlIDogdmFsdWUsIGNvbXB1dGVkIDogY29tcHV0ZWR9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0LnZhbHVlO1xuICB9O1xuXG4gIC8vIFNodWZmbGUgYW4gYXJyYXksIHVzaW5nIHRoZSBtb2Rlcm4gdmVyc2lvbiBvZiB0aGUgXG4gIC8vIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXLigJNZYXRlc19zaHVmZmxlKS5cbiAgXy5zaHVmZmxlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHJhbmQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgc2h1ZmZsZWQgPSBbXTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJhbmQgPSBfLnJhbmRvbShpbmRleCsrKTtcbiAgICAgIHNodWZmbGVkW2luZGV4IC0gMV0gPSBzaHVmZmxlZFtyYW5kXTtcbiAgICAgIHNodWZmbGVkW3JhbmRdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNodWZmbGVkO1xuICB9O1xuXG4gIC8vIFNhbXBsZSAqKm4qKiByYW5kb20gdmFsdWVzIGZyb20gYW4gYXJyYXkuXG4gIC8vIElmICoqbioqIGlzIG5vdCBzcGVjaWZpZWQsIHJldHVybnMgYSBzaW5nbGUgcmFuZG9tIGVsZW1lbnQgZnJvbSB0aGUgYXJyYXkuXG4gIC8vIFRoZSBpbnRlcm5hbCBgZ3VhcmRgIGFyZ3VtZW50IGFsbG93cyBpdCB0byB3b3JrIHdpdGggYG1hcGAuXG4gIF8uc2FtcGxlID0gZnVuY3Rpb24ob2JqLCBuLCBndWFyZCkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMiB8fCBndWFyZCkge1xuICAgICAgcmV0dXJuIG9ialtfLnJhbmRvbShvYmoubGVuZ3RoIC0gMSldO1xuICAgIH1cbiAgICByZXR1cm4gXy5zaHVmZmxlKG9iaikuc2xpY2UoMCwgTWF0aC5tYXgoMCwgbikpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIGxvb2t1cCBpdGVyYXRvcnMuXG4gIHZhciBsb29rdXBJdGVyYXRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIF8uaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZSA6IGZ1bmN0aW9uKG9iail7IHJldHVybiBvYmpbdmFsdWVdOyB9O1xuICB9O1xuXG4gIC8vIFNvcnQgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiBwcm9kdWNlZCBieSBhbiBpdGVyYXRvci5cbiAgXy5zb3J0QnkgPSBmdW5jdGlvbihvYmosIHZhbHVlLCBjb250ZXh0KSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gbG9va3VwSXRlcmF0b3IodmFsdWUpO1xuICAgIHJldHVybiBfLnBsdWNrKF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgY3JpdGVyaWE6IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KVxuICAgICAgfTtcbiAgICB9KS5zb3J0KGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgICB2YXIgYSA9IGxlZnQuY3JpdGVyaWE7XG4gICAgICB2YXIgYiA9IHJpZ2h0LmNyaXRlcmlhO1xuICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgaWYgKGEgPiBiIHx8IGEgPT09IHZvaWQgMCkgcmV0dXJuIDE7XG4gICAgICAgIGlmIChhIDwgYiB8fCBiID09PSB2b2lkIDApIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZWZ0LmluZGV4IC0gcmlnaHQuaW5kZXg7XG4gICAgfSksICd2YWx1ZScpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHVzZWQgZm9yIGFnZ3JlZ2F0ZSBcImdyb3VwIGJ5XCIgb3BlcmF0aW9ucy5cbiAgdmFyIGdyb3VwID0gZnVuY3Rpb24oYmVoYXZpb3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCB2YWx1ZSwgY29udGV4dCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgdmFyIGl0ZXJhdG9yID0gdmFsdWUgPT0gbnVsbCA/IF8uaWRlbnRpdHkgOiBsb29rdXBJdGVyYXRvcih2YWx1ZSk7XG4gICAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XG4gICAgICAgIHZhciBrZXkgPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgb2JqKTtcbiAgICAgICAgYmVoYXZpb3IocmVzdWx0LCBrZXksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEdyb3VwcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLiBQYXNzIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGVcbiAgLy8gdG8gZ3JvdXAgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjcml0ZXJpb24uXG4gIF8uZ3JvdXBCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwga2V5LCB2YWx1ZSkge1xuICAgIChfLmhhcyhyZXN1bHQsIGtleSkgPyByZXN1bHRba2V5XSA6IChyZXN1bHRba2V5XSA9IFtdKSkucHVzaCh2YWx1ZSk7XG4gIH0pO1xuXG4gIC8vIEluZGV4ZXMgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiwgc2ltaWxhciB0byBgZ3JvdXBCeWAsIGJ1dCBmb3JcbiAgLy8gd2hlbiB5b3Uga25vdyB0aGF0IHlvdXIgaW5kZXggdmFsdWVzIHdpbGwgYmUgdW5pcXVlLlxuICBfLmluZGV4QnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIGtleSwgdmFsdWUpIHtcbiAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICB9KTtcblxuICAvLyBDb3VudHMgaW5zdGFuY2VzIG9mIGFuIG9iamVjdCB0aGF0IGdyb3VwIGJ5IGEgY2VydGFpbiBjcml0ZXJpb24uIFBhc3NcbiAgLy8gZWl0aGVyIGEgc3RyaW5nIGF0dHJpYnV0ZSB0byBjb3VudCBieSwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gIC8vIGNyaXRlcmlvbi5cbiAgXy5jb3VudEJ5ID0gZ3JvdXAoZnVuY3Rpb24ocmVzdWx0LCBrZXkpIHtcbiAgICBfLmhhcyhyZXN1bHQsIGtleSkgPyByZXN1bHRba2V5XSsrIDogcmVzdWx0W2tleV0gPSAxO1xuICB9KTtcblxuICAvLyBVc2UgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoXG4gIC8vIGFuIG9iamVjdCBzaG91bGQgYmUgaW5zZXJ0ZWQgc28gYXMgdG8gbWFpbnRhaW4gb3JkZXIuIFVzZXMgYmluYXJ5IHNlYXJjaC5cbiAgXy5zb3J0ZWRJbmRleCA9IGZ1bmN0aW9uKGFycmF5LCBvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYXRvciA9PSBudWxsID8gXy5pZGVudGl0eSA6IGxvb2t1cEl0ZXJhdG9yKGl0ZXJhdG9yKTtcbiAgICB2YXIgdmFsdWUgPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9iaik7XG4gICAgdmFyIGxvdyA9IDAsIGhpZ2ggPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDE7XG4gICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIGFycmF5W21pZF0pIDwgdmFsdWUgPyBsb3cgPSBtaWQgKyAxIDogaGlnaCA9IG1pZDtcbiAgICB9XG4gICAgcmV0dXJuIGxvdztcbiAgfTtcblxuICAvLyBTYWZlbHkgY3JlYXRlIGEgcmVhbCwgbGl2ZSBhcnJheSBmcm9tIGFueXRoaW5nIGl0ZXJhYmxlLlxuICBfLnRvQXJyYXkgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuIFtdO1xuICAgIGlmIChfLmlzQXJyYXkob2JqKSkgcmV0dXJuIHNsaWNlLmNhbGwob2JqKTtcbiAgICBpZiAob2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGgpIHJldHVybiBfLm1hcChvYmosIF8uaWRlbnRpdHkpO1xuICAgIHJldHVybiBfLnZhbHVlcyhvYmopO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIGFuIG9iamVjdC5cbiAgXy5zaXplID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gMDtcbiAgICByZXR1cm4gKG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoKSA/IG9iai5sZW5ndGggOiBfLmtleXMob2JqKS5sZW5ndGg7XG4gIH07XG5cbiAgLy8gQXJyYXkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEdldCB0aGUgZmlyc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgZmlyc3QgTlxuICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LiBBbGlhc2VkIGFzIGBoZWFkYCBhbmQgYHRha2VgLiBUaGUgKipndWFyZCoqIGNoZWNrXG4gIC8vIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC5cbiAgXy5maXJzdCA9IF8uaGVhZCA9IF8udGFrZSA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgIHJldHVybiAobiA9PSBudWxsKSB8fCBndWFyZCA/IGFycmF5WzBdIDogc2xpY2UuY2FsbChhcnJheSwgMCwgbik7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgbGFzdCBlbnRyeSBvZiB0aGUgYXJyYXkuIEVzcGVjaWFsbHkgdXNlZnVsIG9uXG4gIC8vIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIGFsbCB0aGUgdmFsdWVzIGluXG4gIC8vIHRoZSBhcnJheSwgZXhjbHVkaW5nIHRoZSBsYXN0IE4uIFRoZSAqKmd1YXJkKiogY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aFxuICAvLyBgXy5tYXBgLlxuICBfLmluaXRpYWwgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgMCwgYXJyYXkubGVuZ3RoIC0gKChuID09IG51bGwpIHx8IGd1YXJkID8gMSA6IG4pKTtcbiAgfTtcblxuICAvLyBHZXQgdGhlIGxhc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgbGFzdCBOXG4gIC8vIHZhbHVlcyBpbiB0aGUgYXJyYXkuIFRoZSAqKmd1YXJkKiogY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLlxuICBfLmxhc3QgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICBpZiAoKG4gPT0gbnVsbCkgfHwgZ3VhcmQpIHtcbiAgICAgIHJldHVybiBhcnJheVthcnJheS5sZW5ndGggLSAxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHNsaWNlLmNhbGwoYXJyYXksIE1hdGgubWF4KGFycmF5Lmxlbmd0aCAtIG4sIDApKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgZmlyc3QgZW50cnkgb2YgdGhlIGFycmF5LiBBbGlhc2VkIGFzIGB0YWlsYCBhbmQgYGRyb3BgLlxuICAvLyBFc3BlY2lhbGx5IHVzZWZ1bCBvbiB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyBhbiAqKm4qKiB3aWxsIHJldHVyblxuICAvLyB0aGUgcmVzdCBOIHZhbHVlcyBpbiB0aGUgYXJyYXkuIFRoZSAqKmd1YXJkKipcbiAgLy8gY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLlxuICBfLnJlc3QgPSBfLnRhaWwgPSBfLmRyb3AgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgKG4gPT0gbnVsbCkgfHwgZ3VhcmQgPyAxIDogbik7XG4gIH07XG5cbiAgLy8gVHJpbSBvdXQgYWxsIGZhbHN5IHZhbHVlcyBmcm9tIGFuIGFycmF5LlxuICBfLmNvbXBhY3QgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgXy5pZGVudGl0eSk7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gb2YgYSByZWN1cnNpdmUgYGZsYXR0ZW5gIGZ1bmN0aW9uLlxuICB2YXIgZmxhdHRlbiA9IGZ1bmN0aW9uKGlucHV0LCBzaGFsbG93LCBvdXRwdXQpIHtcbiAgICBpZiAoc2hhbGxvdyAmJiBfLmV2ZXJ5KGlucHV0LCBfLmlzQXJyYXkpKSB7XG4gICAgICByZXR1cm4gY29uY2F0LmFwcGx5KG91dHB1dCwgaW5wdXQpO1xuICAgIH1cbiAgICBlYWNoKGlucHV0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKF8uaXNBcnJheSh2YWx1ZSkgfHwgXy5pc0FyZ3VtZW50cyh2YWx1ZSkpIHtcbiAgICAgICAgc2hhbGxvdyA/IHB1c2guYXBwbHkob3V0cHV0LCB2YWx1ZSkgOiBmbGF0dGVuKHZhbHVlLCBzaGFsbG93LCBvdXRwdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgLy8gRmxhdHRlbiBvdXQgYW4gYXJyYXksIGVpdGhlciByZWN1cnNpdmVseSAoYnkgZGVmYXVsdCksIG9yIGp1c3Qgb25lIGxldmVsLlxuICBfLmZsYXR0ZW4gPSBmdW5jdGlvbihhcnJheSwgc2hhbGxvdykge1xuICAgIHJldHVybiBmbGF0dGVuKGFycmF5LCBzaGFsbG93LCBbXSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgdmVyc2lvbiBvZiB0aGUgYXJyYXkgdGhhdCBkb2VzIG5vdCBjb250YWluIHRoZSBzcGVjaWZpZWQgdmFsdWUocykuXG4gIF8ud2l0aG91dCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgcmV0dXJuIF8uZGlmZmVyZW5jZShhcnJheSwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgfTtcblxuICAvLyBQcm9kdWNlIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiB0aGUgYXJyYXkuIElmIHRoZSBhcnJheSBoYXMgYWxyZWFkeVxuICAvLyBiZWVuIHNvcnRlZCwgeW91IGhhdmUgdGhlIG9wdGlvbiBvZiB1c2luZyBhIGZhc3RlciBhbGdvcml0aG0uXG4gIC8vIEFsaWFzZWQgYXMgYHVuaXF1ZWAuXG4gIF8udW5pcSA9IF8udW5pcXVlID0gZnVuY3Rpb24oYXJyYXksIGlzU29ydGVkLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIGlmIChfLmlzRnVuY3Rpb24oaXNTb3J0ZWQpKSB7XG4gICAgICBjb250ZXh0ID0gaXRlcmF0b3I7XG4gICAgICBpdGVyYXRvciA9IGlzU29ydGVkO1xuICAgICAgaXNTb3J0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGluaXRpYWwgPSBpdGVyYXRvciA/IF8ubWFwKGFycmF5LCBpdGVyYXRvciwgY29udGV4dCkgOiBhcnJheTtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIHZhciBzZWVuID0gW107XG4gICAgZWFjaChpbml0aWFsLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIGlmIChpc1NvcnRlZCA/ICghaW5kZXggfHwgc2VlbltzZWVuLmxlbmd0aCAtIDFdICE9PSB2YWx1ZSkgOiAhXy5jb250YWlucyhzZWVuLCB2YWx1ZSkpIHtcbiAgICAgICAgc2Vlbi5wdXNoKHZhbHVlKTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKGFycmF5W2luZGV4XSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIHRoZSB1bmlvbjogZWFjaCBkaXN0aW5jdCBlbGVtZW50IGZyb20gYWxsIG9mXG4gIC8vIHRoZSBwYXNzZWQtaW4gYXJyYXlzLlxuICBfLnVuaW9uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIF8udW5pcShfLmZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlKSk7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIGV2ZXJ5IGl0ZW0gc2hhcmVkIGJldHdlZW4gYWxsIHRoZVxuICAvLyBwYXNzZWQtaW4gYXJyYXlzLlxuICBfLmludGVyc2VjdGlvbiA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIHJlc3QgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgcmV0dXJuIF8uZmlsdGVyKF8udW5pcShhcnJheSksIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiBfLmV2ZXJ5KHJlc3QsIGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBfLmluZGV4T2Yob3RoZXIsIGl0ZW0pID49IDA7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBUYWtlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gb25lIGFycmF5IGFuZCBhIG51bWJlciBvZiBvdGhlciBhcnJheXMuXG4gIC8vIE9ubHkgdGhlIGVsZW1lbnRzIHByZXNlbnQgaW4ganVzdCB0aGUgZmlyc3QgYXJyYXkgd2lsbCByZW1haW4uXG4gIF8uZGlmZmVyZW5jZSA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIHJlc3QgPSBjb25jYXQuYXBwbHkoQXJyYXlQcm90bywgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKXsgcmV0dXJuICFfLmNvbnRhaW5zKHJlc3QsIHZhbHVlKTsgfSk7XG4gIH07XG5cbiAgLy8gWmlwIHRvZ2V0aGVyIG11bHRpcGxlIGxpc3RzIGludG8gYSBzaW5nbGUgYXJyYXkgLS0gZWxlbWVudHMgdGhhdCBzaGFyZVxuICAvLyBhbiBpbmRleCBnbyB0b2dldGhlci5cbiAgXy56aXAgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVuZ3RoID0gXy5tYXgoXy5wbHVjayhhcmd1bWVudHMsIFwibGVuZ3RoXCIpLmNvbmNhdCgwKSk7XG4gICAgdmFyIHJlc3VsdHMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRzW2ldID0gXy5wbHVjayhhcmd1bWVudHMsICcnICsgaSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIENvbnZlcnRzIGxpc3RzIGludG8gb2JqZWN0cy4gUGFzcyBlaXRoZXIgYSBzaW5nbGUgYXJyYXkgb2YgYFtrZXksIHZhbHVlXWBcbiAgLy8gcGFpcnMsIG9yIHR3byBwYXJhbGxlbCBhcnJheXMgb2YgdGhlIHNhbWUgbGVuZ3RoIC0tIG9uZSBvZiBrZXlzLCBhbmQgb25lIG9mXG4gIC8vIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgXy5vYmplY3QgPSBmdW5jdGlvbihsaXN0LCB2YWx1ZXMpIHtcbiAgICBpZiAobGlzdCA9PSBudWxsKSByZXR1cm4ge307XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodmFsdWVzKSB7XG4gICAgICAgIHJlc3VsdFtsaXN0W2ldXSA9IHZhbHVlc1tpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFtsaXN0W2ldWzBdXSA9IGxpc3RbaV1bMV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gSWYgdGhlIGJyb3dzZXIgZG9lc24ndCBzdXBwbHkgdXMgd2l0aCBpbmRleE9mIChJJ20gbG9va2luZyBhdCB5b3UsICoqTVNJRSoqKSxcbiAgLy8gd2UgbmVlZCB0aGlzIGZ1bmN0aW9uLiBSZXR1cm4gdGhlIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGFuXG4gIC8vIGl0ZW0gaW4gYW4gYXJyYXksIG9yIC0xIGlmIHRoZSBpdGVtIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXJyYXkuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBpbmRleE9mYCBpZiBhdmFpbGFibGUuXG4gIC8vIElmIHRoZSBhcnJheSBpcyBsYXJnZSBhbmQgYWxyZWFkeSBpbiBzb3J0IG9yZGVyLCBwYXNzIGB0cnVlYFxuICAvLyBmb3IgKippc1NvcnRlZCoqIHRvIHVzZSBiaW5hcnkgc2VhcmNoLlxuICBfLmluZGV4T2YgPSBmdW5jdGlvbihhcnJheSwgaXRlbSwgaXNTb3J0ZWQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIC0xO1xuICAgIHZhciBpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgIGlmIChpc1NvcnRlZCkge1xuICAgICAgaWYgKHR5cGVvZiBpc1NvcnRlZCA9PSAnbnVtYmVyJykge1xuICAgICAgICBpID0gKGlzU29ydGVkIDwgMCA/IE1hdGgubWF4KDAsIGxlbmd0aCArIGlzU29ydGVkKSA6IGlzU29ydGVkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGkgPSBfLnNvcnRlZEluZGV4KGFycmF5LCBpdGVtKTtcbiAgICAgICAgcmV0dXJuIGFycmF5W2ldID09PSBpdGVtID8gaSA6IC0xO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobmF0aXZlSW5kZXhPZiAmJiBhcnJheS5pbmRleE9mID09PSBuYXRpdmVJbmRleE9mKSByZXR1cm4gYXJyYXkuaW5kZXhPZihpdGVtLCBpc1NvcnRlZCk7XG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykgaWYgKGFycmF5W2ldID09PSBpdGVtKSByZXR1cm4gaTtcbiAgICByZXR1cm4gLTE7XG4gIH07XG5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYGxhc3RJbmRleE9mYCBpZiBhdmFpbGFibGUuXG4gIF8ubGFzdEluZGV4T2YgPSBmdW5jdGlvbihhcnJheSwgaXRlbSwgZnJvbSkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gLTE7XG4gICAgdmFyIGhhc0luZGV4ID0gZnJvbSAhPSBudWxsO1xuICAgIGlmIChuYXRpdmVMYXN0SW5kZXhPZiAmJiBhcnJheS5sYXN0SW5kZXhPZiA9PT0gbmF0aXZlTGFzdEluZGV4T2YpIHtcbiAgICAgIHJldHVybiBoYXNJbmRleCA/IGFycmF5Lmxhc3RJbmRleE9mKGl0ZW0sIGZyb20pIDogYXJyYXkubGFzdEluZGV4T2YoaXRlbSk7XG4gICAgfVxuICAgIHZhciBpID0gKGhhc0luZGV4ID8gZnJvbSA6IGFycmF5Lmxlbmd0aCk7XG4gICAgd2hpbGUgKGktLSkgaWYgKGFycmF5W2ldID09PSBpdGVtKSByZXR1cm4gaTtcbiAgICByZXR1cm4gLTE7XG4gIH07XG5cbiAgLy8gR2VuZXJhdGUgYW4gaW50ZWdlciBBcnJheSBjb250YWluaW5nIGFuIGFyaXRobWV0aWMgcHJvZ3Jlc3Npb24uIEEgcG9ydCBvZlxuICAvLyB0aGUgbmF0aXZlIFB5dGhvbiBgcmFuZ2UoKWAgZnVuY3Rpb24uIFNlZVxuICAvLyBbdGhlIFB5dGhvbiBkb2N1bWVudGF0aW9uXShodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvZnVuY3Rpb25zLmh0bWwjcmFuZ2UpLlxuICBfLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8PSAxKSB7XG4gICAgICBzdG9wID0gc3RhcnQgfHwgMDtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICB9XG4gICAgc3RlcCA9IGFyZ3VtZW50c1syXSB8fCAxO1xuXG4gICAgdmFyIGxlbmd0aCA9IE1hdGgubWF4KE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApLCAwKTtcbiAgICB2YXIgaWR4ID0gMDtcbiAgICB2YXIgcmFuZ2UgPSBuZXcgQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlKGlkeCA8IGxlbmd0aCkge1xuICAgICAgcmFuZ2VbaWR4KytdID0gc3RhcnQ7XG4gICAgICBzdGFydCArPSBzdGVwO1xuICAgIH1cblxuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICAvLyBGdW5jdGlvbiAoYWhlbSkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFJldXNhYmxlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGZvciBwcm90b3R5cGUgc2V0dGluZy5cbiAgdmFyIGN0b3IgPSBmdW5jdGlvbigpe307XG5cbiAgLy8gQ3JlYXRlIGEgZnVuY3Rpb24gYm91bmQgdG8gYSBnaXZlbiBvYmplY3QgKGFzc2lnbmluZyBgdGhpc2AsIGFuZCBhcmd1bWVudHMsXG4gIC8vIG9wdGlvbmFsbHkpLiBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgRnVuY3Rpb24uYmluZGAgaWZcbiAgLy8gYXZhaWxhYmxlLlxuICBfLmJpbmQgPSBmdW5jdGlvbihmdW5jLCBjb250ZXh0KSB7XG4gICAgdmFyIGFyZ3MsIGJvdW5kO1xuICAgIGlmIChuYXRpdmVCaW5kICYmIGZ1bmMuYmluZCA9PT0gbmF0aXZlQmluZCkgcmV0dXJuIG5hdGl2ZUJpbmQuYXBwbHkoZnVuYywgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICBpZiAoIV8uaXNGdW5jdGlvbihmdW5jKSkgdGhyb3cgbmV3IFR5cGVFcnJvcjtcbiAgICBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIHJldHVybiBib3VuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSkgcmV0dXJuIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICBjdG9yLnByb3RvdHlwZSA9IGZ1bmMucHJvdG90eXBlO1xuICAgICAgdmFyIHNlbGYgPSBuZXcgY3RvcjtcbiAgICAgIGN0b3IucHJvdG90eXBlID0gbnVsbDtcbiAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHNlbGYsIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgICAgaWYgKE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFBhcnRpYWxseSBhcHBseSBhIGZ1bmN0aW9uIGJ5IGNyZWF0aW5nIGEgdmVyc2lvbiB0aGF0IGhhcyBoYWQgc29tZSBvZiBpdHNcbiAgLy8gYXJndW1lbnRzIHByZS1maWxsZWQsIHdpdGhvdXQgY2hhbmdpbmcgaXRzIGR5bmFtaWMgYHRoaXNgIGNvbnRleHQuXG4gIF8ucGFydGlhbCA9IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEJpbmQgYWxsIG9mIGFuIG9iamVjdCdzIG1ldGhvZHMgdG8gdGhhdCBvYmplY3QuIFVzZWZ1bCBmb3IgZW5zdXJpbmcgdGhhdFxuICAvLyBhbGwgY2FsbGJhY2tzIGRlZmluZWQgb24gYW4gb2JqZWN0IGJlbG9uZyB0byBpdC5cbiAgXy5iaW5kQWxsID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGZ1bmNzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHRocm93IG5ldyBFcnJvcihcImJpbmRBbGwgbXVzdCBiZSBwYXNzZWQgZnVuY3Rpb24gbmFtZXNcIik7XG4gICAgZWFjaChmdW5jcywgZnVuY3Rpb24oZikgeyBvYmpbZl0gPSBfLmJpbmQob2JqW2ZdLCBvYmopOyB9KTtcbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIE1lbW9pemUgYW4gZXhwZW5zaXZlIGZ1bmN0aW9uIGJ5IHN0b3JpbmcgaXRzIHJlc3VsdHMuXG4gIF8ubWVtb2l6ZSA9IGZ1bmN0aW9uKGZ1bmMsIGhhc2hlcikge1xuICAgIHZhciBtZW1vID0ge307XG4gICAgaGFzaGVyIHx8IChoYXNoZXIgPSBfLmlkZW50aXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIga2V5ID0gaGFzaGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gXy5oYXMobWVtbywga2V5KSA/IG1lbW9ba2V5XSA6IChtZW1vW2tleV0gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gRGVsYXlzIGEgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCBhbmQgdGhlbiBjYWxsc1xuICAvLyBpdCB3aXRoIHRoZSBhcmd1bWVudHMgc3VwcGxpZWQuXG4gIF8uZGVsYXkgPSBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgcmV0dXJuIGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7IH0sIHdhaXQpO1xuICB9O1xuXG4gIC8vIERlZmVycyBhIGZ1bmN0aW9uLCBzY2hlZHVsaW5nIGl0IHRvIHJ1biBhZnRlciB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhc1xuICAvLyBjbGVhcmVkLlxuICBfLmRlZmVyID0gZnVuY3Rpb24oZnVuYykge1xuICAgIHJldHVybiBfLmRlbGF5LmFwcGx5KF8sIFtmdW5jLCAxXS5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCB3aGVuIGludm9rZWQsIHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgYXQgbW9zdCBvbmNlXG4gIC8vIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLiBOb3JtYWxseSwgdGhlIHRocm90dGxlZCBmdW5jdGlvbiB3aWxsIHJ1blxuICAvLyBhcyBtdWNoIGFzIGl0IGNhbiwgd2l0aG91dCBldmVyIGdvaW5nIG1vcmUgdGhhbiBvbmNlIHBlciBgd2FpdGAgZHVyYXRpb247XG4gIC8vIGJ1dCBpZiB5b3UnZCBsaWtlIHRvIGRpc2FibGUgdGhlIGV4ZWN1dGlvbiBvbiB0aGUgbGVhZGluZyBlZGdlLCBwYXNzXG4gIC8vIGB7bGVhZGluZzogZmFsc2V9YC4gVG8gZGlzYWJsZSBleGVjdXRpb24gb24gdGhlIHRyYWlsaW5nIGVkZ2UsIGRpdHRvLlxuICBfLnRocm90dGxlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgIHZhciBjb250ZXh0LCBhcmdzLCByZXN1bHQ7XG4gICAgdmFyIHRpbWVvdXQgPSBudWxsO1xuICAgIHZhciBwcmV2aW91cyA9IDA7XG4gICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHByZXZpb3VzID0gb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSA/IDAgOiBuZXcgRGF0ZTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBub3cgPSBuZXcgRGF0ZTtcbiAgICAgIGlmICghcHJldmlvdXMgJiYgb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSkgcHJldmlvdXMgPSBub3c7XG4gICAgICB2YXIgcmVtYWluaW5nID0gd2FpdCAtIChub3cgLSBwcmV2aW91cyk7XG4gICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBpZiAocmVtYWluaW5nIDw9IDApIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgcHJldmlvdXMgPSBub3c7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCByZW1haW5pbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCwgd2lsbCBub3RcbiAgLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuICAvLyBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGVcbiAgLy8gbGVhZGluZyBlZGdlLCBpbnN0ZWFkIG9mIHRoZSB0cmFpbGluZy5cbiAgXy5kZWJvdW5jZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkge1xuICAgIHZhciB0aW1lb3V0LCBhcmdzLCBjb250ZXh0LCB0aW1lc3RhbXAsIHJlc3VsdDtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpO1xuICAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBsYXN0ID0gKG5ldyBEYXRlKCkpIC0gdGltZXN0YW1wO1xuICAgICAgICBpZiAobGFzdCA8IHdhaXQpIHtcbiAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgIGlmICghaW1tZWRpYXRlKSByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4gICAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgICAgfVxuICAgICAgaWYgKGNhbGxOb3cpIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhdCBtb3N0IG9uZSB0aW1lLCBubyBtYXR0ZXIgaG93XG4gIC8vIG9mdGVuIHlvdSBjYWxsIGl0LiBVc2VmdWwgZm9yIGxhenkgaW5pdGlhbGl6YXRpb24uXG4gIF8ub25jZSA9IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICB2YXIgcmFuID0gZmFsc2UsIG1lbW87XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHJhbikgcmV0dXJuIG1lbW87XG4gICAgICByYW4gPSB0cnVlO1xuICAgICAgbWVtbyA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGZ1bmMgPSBudWxsO1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBmdW5jdGlvbiBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIHNlY29uZCxcbiAgLy8gYWxsb3dpbmcgeW91IHRvIGFkanVzdCBhcmd1bWVudHMsIHJ1biBjb2RlIGJlZm9yZSBhbmQgYWZ0ZXIsIGFuZFxuICAvLyBjb25kaXRpb25hbGx5IGV4ZWN1dGUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxuICBfLndyYXAgPSBmdW5jdGlvbihmdW5jLCB3cmFwcGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbZnVuY107XG4gICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gd3JhcHBlci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBhIGxpc3Qgb2YgZnVuY3Rpb25zLCBlYWNoXG4gIC8vIGNvbnN1bWluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiB0aGF0IGZvbGxvd3MuXG4gIF8uY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmdW5jcyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIGZvciAodmFyIGkgPSBmdW5jcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBhcmdzID0gW2Z1bmNzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcmdzWzBdO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIGFmdGVyIGJlaW5nIGNhbGxlZCBOIHRpbWVzLlxuICBfLmFmdGVyID0gZnVuY3Rpb24odGltZXMsIGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aW1lcyA8IDEpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIC8vIE9iamVjdCBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFJldHJpZXZlIHRoZSBuYW1lcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgT2JqZWN0LmtleXNgXG4gIF8ua2V5cyA9IG5hdGl2ZUtleXMgfHwgZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiAhPT0gT2JqZWN0KG9iaikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgb2JqZWN0Jyk7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSBpZiAoXy5oYXMob2JqLCBrZXkpKSBrZXlzLnB1c2goa2V5KTtcbiAgICByZXR1cm4ga2V5cztcbiAgfTtcblxuICAvLyBSZXRyaWV2ZSB0aGUgdmFsdWVzIG9mIGFuIG9iamVjdCdzIHByb3BlcnRpZXMuXG4gIF8udmFsdWVzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIHZhbHVlcyA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlc1tpXSA9IG9ialtrZXlzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfTtcblxuICAvLyBDb252ZXJ0IGFuIG9iamVjdCBpbnRvIGEgbGlzdCBvZiBgW2tleSwgdmFsdWVdYCBwYWlycy5cbiAgXy5wYWlycyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBwYWlycyA9IG5ldyBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhaXJzW2ldID0gW2tleXNbaV0sIG9ialtrZXlzW2ldXV07XG4gICAgfVxuICAgIHJldHVybiBwYWlycztcbiAgfTtcblxuICAvLyBJbnZlcnQgdGhlIGtleXMgYW5kIHZhbHVlcyBvZiBhbiBvYmplY3QuIFRoZSB2YWx1ZXMgbXVzdCBiZSBzZXJpYWxpemFibGUuXG4gIF8uaW52ZXJ0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdFtvYmpba2V5c1tpXV1dID0ga2V5c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSBzb3J0ZWQgbGlzdCBvZiB0aGUgZnVuY3Rpb24gbmFtZXMgYXZhaWxhYmxlIG9uIHRoZSBvYmplY3QuXG4gIC8vIEFsaWFzZWQgYXMgYG1ldGhvZHNgXG4gIF8uZnVuY3Rpb25zID0gXy5tZXRob2RzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIG5hbWVzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKF8uaXNGdW5jdGlvbihvYmpba2V5XSkpIG5hbWVzLnB1c2goa2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWVzLnNvcnQoKTtcbiAgfTtcblxuICAvLyBFeHRlbmQgYSBnaXZlbiBvYmplY3Qgd2l0aCBhbGwgdGhlIHByb3BlcnRpZXMgaW4gcGFzc2VkLWluIG9iamVjdChzKS5cbiAgXy5leHRlbmQgPSBmdW5jdGlvbihvYmopIHtcbiAgICBlYWNoKHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgZnVuY3Rpb24oc291cmNlKSB7XG4gICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgICAgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSBjb3B5IG9mIHRoZSBvYmplY3Qgb25seSBjb250YWluaW5nIHRoZSB3aGl0ZWxpc3RlZCBwcm9wZXJ0aWVzLlxuICBfLnBpY2sgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgY29weSA9IHt9O1xuICAgIHZhciBrZXlzID0gY29uY2F0LmFwcGx5KEFycmF5UHJvdG8sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgZWFjaChrZXlzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIGlmIChrZXkgaW4gb2JqKSBjb3B5W2tleV0gPSBvYmpba2V5XTtcbiAgICB9KTtcbiAgICByZXR1cm4gY29weTtcbiAgfTtcblxuICAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IHdpdGhvdXQgdGhlIGJsYWNrbGlzdGVkIHByb3BlcnRpZXMuXG4gIF8ub21pdCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBjb3B5ID0ge307XG4gICAgdmFyIGtleXMgPSBjb25jYXQuYXBwbHkoQXJyYXlQcm90bywgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoIV8uY29udGFpbnMoa2V5cywga2V5KSkgY29weVtrZXldID0gb2JqW2tleV07XG4gICAgfVxuICAgIHJldHVybiBjb3B5O1xuICB9O1xuXG4gIC8vIEZpbGwgaW4gYSBnaXZlbiBvYmplY3Qgd2l0aCBkZWZhdWx0IHByb3BlcnRpZXMuXG4gIF8uZGVmYXVsdHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICBlYWNoKHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgZnVuY3Rpb24oc291cmNlKSB7XG4gICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgICAgaWYgKG9ialtwcm9wXSA9PT0gdm9pZCAwKSBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIChzaGFsbG93LWNsb25lZCkgZHVwbGljYXRlIG9mIGFuIG9iamVjdC5cbiAgXy5jbG9uZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIGlmICghXy5pc09iamVjdChvYmopKSByZXR1cm4gb2JqO1xuICAgIHJldHVybiBfLmlzQXJyYXkob2JqKSA/IG9iai5zbGljZSgpIDogXy5leHRlbmQoe30sIG9iaik7XG4gIH07XG5cbiAgLy8gSW52b2tlcyBpbnRlcmNlcHRvciB3aXRoIHRoZSBvYmosIGFuZCB0aGVuIHJldHVybnMgb2JqLlxuICAvLyBUaGUgcHJpbWFyeSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwidGFwIGludG9cIiBhIG1ldGhvZCBjaGFpbiwgaW5cbiAgLy8gb3JkZXIgdG8gcGVyZm9ybSBvcGVyYXRpb25zIG9uIGludGVybWVkaWF0ZSByZXN1bHRzIHdpdGhpbiB0aGUgY2hhaW4uXG4gIF8udGFwID0gZnVuY3Rpb24ob2JqLCBpbnRlcmNlcHRvcikge1xuICAgIGludGVyY2VwdG9yKG9iaik7XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBJbnRlcm5hbCByZWN1cnNpdmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgYGlzRXF1YWxgLlxuICB2YXIgZXEgPSBmdW5jdGlvbihhLCBiLCBhU3RhY2ssIGJTdGFjaykge1xuICAgIC8vIElkZW50aWNhbCBvYmplY3RzIGFyZSBlcXVhbC4gYDAgPT09IC0wYCwgYnV0IHRoZXkgYXJlbid0IGlkZW50aWNhbC5cbiAgICAvLyBTZWUgdGhlIFtIYXJtb255IGBlZ2FsYCBwcm9wb3NhbF0oaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTplZ2FsKS5cbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIGEgIT09IDAgfHwgMSAvIGEgPT0gMSAvIGI7XG4gICAgLy8gQSBzdHJpY3QgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkgYmVjYXVzZSBgbnVsbCA9PSB1bmRlZmluZWRgLlxuICAgIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKSByZXR1cm4gYSA9PT0gYjtcbiAgICAvLyBVbndyYXAgYW55IHdyYXBwZWQgb2JqZWN0cy5cbiAgICBpZiAoYSBpbnN0YW5jZW9mIF8pIGEgPSBhLl93cmFwcGVkO1xuICAgIGlmIChiIGluc3RhbmNlb2YgXykgYiA9IGIuX3dyYXBwZWQ7XG4gICAgLy8gQ29tcGFyZSBgW1tDbGFzc11dYCBuYW1lcy5cbiAgICB2YXIgY2xhc3NOYW1lID0gdG9TdHJpbmcuY2FsbChhKTtcbiAgICBpZiAoY2xhc3NOYW1lICE9IHRvU3RyaW5nLmNhbGwoYikpIHJldHVybiBmYWxzZTtcbiAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xuICAgICAgLy8gU3RyaW5ncywgbnVtYmVycywgZGF0ZXMsIGFuZCBib29sZWFucyBhcmUgY29tcGFyZWQgYnkgdmFsdWUuXG4gICAgICBjYXNlICdbb2JqZWN0IFN0cmluZ10nOlxuICAgICAgICAvLyBQcmltaXRpdmVzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIG9iamVjdCB3cmFwcGVycyBhcmUgZXF1aXZhbGVudDsgdGh1cywgYFwiNVwiYCBpc1xuICAgICAgICAvLyBlcXVpdmFsZW50IHRvIGBuZXcgU3RyaW5nKFwiNVwiKWAuXG4gICAgICAgIHJldHVybiBhID09IFN0cmluZyhiKTtcbiAgICAgIGNhc2UgJ1tvYmplY3QgTnVtYmVyXSc6XG4gICAgICAgIC8vIGBOYU5gcyBhcmUgZXF1aXZhbGVudCwgYnV0IG5vbi1yZWZsZXhpdmUuIEFuIGBlZ2FsYCBjb21wYXJpc29uIGlzIHBlcmZvcm1lZCBmb3JcbiAgICAgICAgLy8gb3RoZXIgbnVtZXJpYyB2YWx1ZXMuXG4gICAgICAgIHJldHVybiBhICE9ICthID8gYiAhPSArYiA6IChhID09IDAgPyAxIC8gYSA9PSAxIC8gYiA6IGEgPT0gK2IpO1xuICAgICAgY2FzZSAnW29iamVjdCBEYXRlXSc6XG4gICAgICBjYXNlICdbb2JqZWN0IEJvb2xlYW5dJzpcbiAgICAgICAgLy8gQ29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1lcmljIHByaW1pdGl2ZSB2YWx1ZXMuIERhdGVzIGFyZSBjb21wYXJlZCBieSB0aGVpclxuICAgICAgICAvLyBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnMuIE5vdGUgdGhhdCBpbnZhbGlkIGRhdGVzIHdpdGggbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zXG4gICAgICAgIC8vIG9mIGBOYU5gIGFyZSBub3QgZXF1aXZhbGVudC5cbiAgICAgICAgcmV0dXJuICthID09ICtiO1xuICAgICAgLy8gUmVnRXhwcyBhcmUgY29tcGFyZWQgYnkgdGhlaXIgc291cmNlIHBhdHRlcm5zIGFuZCBmbGFncy5cbiAgICAgIGNhc2UgJ1tvYmplY3QgUmVnRXhwXSc6XG4gICAgICAgIHJldHVybiBhLnNvdXJjZSA9PSBiLnNvdXJjZSAmJlxuICAgICAgICAgICAgICAgYS5nbG9iYWwgPT0gYi5nbG9iYWwgJiZcbiAgICAgICAgICAgICAgIGEubXVsdGlsaW5lID09IGIubXVsdGlsaW5lICYmXG4gICAgICAgICAgICAgICBhLmlnbm9yZUNhc2UgPT0gYi5pZ25vcmVDYXNlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGEgIT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgIT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcbiAgICAvLyBBc3N1bWUgZXF1YWxpdHkgZm9yIGN5Y2xpYyBzdHJ1Y3R1cmVzLiBUaGUgYWxnb3JpdGhtIGZvciBkZXRlY3RpbmcgY3ljbGljXG4gICAgLy8gc3RydWN0dXJlcyBpcyBhZGFwdGVkIGZyb20gRVMgNS4xIHNlY3Rpb24gMTUuMTIuMywgYWJzdHJhY3Qgb3BlcmF0aW9uIGBKT2AuXG4gICAgdmFyIGxlbmd0aCA9IGFTdGFjay5sZW5ndGg7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAvLyBMaW5lYXIgc2VhcmNoLiBQZXJmb3JtYW5jZSBpcyBpbnZlcnNlbHkgcHJvcG9ydGlvbmFsIHRvIHRoZSBudW1iZXIgb2ZcbiAgICAgIC8vIHVuaXF1ZSBuZXN0ZWQgc3RydWN0dXJlcy5cbiAgICAgIGlmIChhU3RhY2tbbGVuZ3RoXSA9PSBhKSByZXR1cm4gYlN0YWNrW2xlbmd0aF0gPT0gYjtcbiAgICB9XG4gICAgLy8gT2JqZWN0cyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVpdmFsZW50LCBidXQgYE9iamVjdGBzXG4gICAgLy8gZnJvbSBkaWZmZXJlbnQgZnJhbWVzIGFyZS5cbiAgICB2YXIgYUN0b3IgPSBhLmNvbnN0cnVjdG9yLCBiQ3RvciA9IGIuY29uc3RydWN0b3I7XG4gICAgaWYgKGFDdG9yICE9PSBiQ3RvciAmJiAhKF8uaXNGdW5jdGlvbihhQ3RvcikgJiYgKGFDdG9yIGluc3RhbmNlb2YgYUN0b3IpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uaXNGdW5jdGlvbihiQ3RvcikgJiYgKGJDdG9yIGluc3RhbmNlb2YgYkN0b3IpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnB1c2goYSk7XG4gICAgYlN0YWNrLnB1c2goYik7XG4gICAgdmFyIHNpemUgPSAwLCByZXN1bHQgPSB0cnVlO1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgIGlmIChjbGFzc05hbWUgPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuXG4gICAgICBzaXplID0gYS5sZW5ndGg7XG4gICAgICByZXN1bHQgPSBzaXplID09IGIubGVuZ3RoO1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAvLyBEZWVwIGNvbXBhcmUgdGhlIGNvbnRlbnRzLCBpZ25vcmluZyBub24tbnVtZXJpYyBwcm9wZXJ0aWVzLlxuICAgICAgICB3aGlsZSAoc2l6ZS0tKSB7XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID0gZXEoYVtzaXplXSwgYltzaXplXSwgYVN0YWNrLCBiU3RhY2spKSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRGVlcCBjb21wYXJlIG9iamVjdHMuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gYSkge1xuICAgICAgICBpZiAoXy5oYXMoYSwga2V5KSkge1xuICAgICAgICAgIC8vIENvdW50IHRoZSBleHBlY3RlZCBudW1iZXIgb2YgcHJvcGVydGllcy5cbiAgICAgICAgICBzaXplKys7XG4gICAgICAgICAgLy8gRGVlcCBjb21wYXJlIGVhY2ggbWVtYmVyLlxuICAgICAgICAgIGlmICghKHJlc3VsdCA9IF8uaGFzKGIsIGtleSkgJiYgZXEoYVtrZXldLCBiW2tleV0sIGFTdGFjaywgYlN0YWNrKSkpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBFbnN1cmUgdGhhdCBib3RoIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBudW1iZXIgb2YgcHJvcGVydGllcy5cbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgZm9yIChrZXkgaW4gYikge1xuICAgICAgICAgIGlmIChfLmhhcyhiLCBrZXkpICYmICEoc2l6ZS0tKSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gIXNpemU7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFJlbW92ZSB0aGUgZmlyc3Qgb2JqZWN0IGZyb20gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIGFTdGFjay5wb3AoKTtcbiAgICBiU3RhY2sucG9wKCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBQZXJmb3JtIGEgZGVlcCBjb21wYXJpc29uIHRvIGNoZWNrIGlmIHR3byBvYmplY3RzIGFyZSBlcXVhbC5cbiAgXy5pc0VxdWFsID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBlcShhLCBiLCBbXSwgW10pO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gYXJyYXksIHN0cmluZywgb3Igb2JqZWN0IGVtcHR5P1xuICAvLyBBbiBcImVtcHR5XCIgb2JqZWN0IGhhcyBubyBlbnVtZXJhYmxlIG93bi1wcm9wZXJ0aWVzLlxuICBfLmlzRW1wdHkgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiB0cnVlO1xuICAgIGlmIChfLmlzQXJyYXkob2JqKSB8fCBfLmlzU3RyaW5nKG9iaikpIHJldHVybiBvYmoubGVuZ3RoID09PSAwO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgRE9NIGVsZW1lbnQ/XG4gIF8uaXNFbGVtZW50ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuICEhKG9iaiAmJiBvYmoubm9kZVR5cGUgPT09IDEpO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYW4gYXJyYXk/XG4gIC8vIERlbGVnYXRlcyB0byBFQ01BNSdzIG5hdGl2ZSBBcnJheS5pc0FycmF5XG4gIF8uaXNBcnJheSA9IG5hdGl2ZUlzQXJyYXkgfHwgZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PSAnW29iamVjdCBBcnJheV0nO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgYW4gb2JqZWN0P1xuICBfLmlzT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gT2JqZWN0KG9iaik7XG4gIH07XG5cbiAgLy8gQWRkIHNvbWUgaXNUeXBlIG1ldGhvZHM6IGlzQXJndW1lbnRzLCBpc0Z1bmN0aW9uLCBpc1N0cmluZywgaXNOdW1iZXIsIGlzRGF0ZSwgaXNSZWdFeHAuXG4gIGVhY2goWydBcmd1bWVudHMnLCAnRnVuY3Rpb24nLCAnU3RyaW5nJywgJ051bWJlcicsICdEYXRlJywgJ1JlZ0V4cCddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgX1snaXMnICsgbmFtZV0gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgJyArIG5hbWUgKyAnXSc7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gRGVmaW5lIGEgZmFsbGJhY2sgdmVyc2lvbiBvZiB0aGUgbWV0aG9kIGluIGJyb3dzZXJzIChhaGVtLCBJRSksIHdoZXJlXG4gIC8vIHRoZXJlIGlzbid0IGFueSBpbnNwZWN0YWJsZSBcIkFyZ3VtZW50c1wiIHR5cGUuXG4gIGlmICghXy5pc0FyZ3VtZW50cyhhcmd1bWVudHMpKSB7XG4gICAgXy5pc0FyZ3VtZW50cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuICEhKG9iaiAmJiBfLmhhcyhvYmosICdjYWxsZWUnKSk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIE9wdGltaXplIGBpc0Z1bmN0aW9uYCBpZiBhcHByb3ByaWF0ZS5cbiAgaWYgKHR5cGVvZiAoLy4vKSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIF8uaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbic7XG4gICAgfTtcbiAgfVxuXG4gIC8vIElzIGEgZ2l2ZW4gb2JqZWN0IGEgZmluaXRlIG51bWJlcj9cbiAgXy5pc0Zpbml0ZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBpc0Zpbml0ZShvYmopICYmICFpc05hTihwYXJzZUZsb2F0KG9iaikpO1xuICB9O1xuXG4gIC8vIElzIHRoZSBnaXZlbiB2YWx1ZSBgTmFOYD8gKE5hTiBpcyB0aGUgb25seSBudW1iZXIgd2hpY2ggZG9lcyBub3QgZXF1YWwgaXRzZWxmKS5cbiAgXy5pc05hTiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBfLmlzTnVtYmVyKG9iaikgJiYgb2JqICE9ICtvYmo7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIGJvb2xlYW4/XG4gIF8uaXNCb29sZWFuID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdHJ1ZSB8fCBvYmogPT09IGZhbHNlIHx8IHRvU3RyaW5nLmNhbGwob2JqKSA9PSAnW29iamVjdCBCb29sZWFuXSc7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBlcXVhbCB0byBudWxsP1xuICBfLmlzTnVsbCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IG51bGw7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSB1bmRlZmluZWQ/XG4gIF8uaXNVbmRlZmluZWQgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSB2b2lkIDA7XG4gIH07XG5cbiAgLy8gU2hvcnRjdXQgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBwcm9wZXJ0eSBkaXJlY3RseVxuICAvLyBvbiBpdHNlbGYgKGluIG90aGVyIHdvcmRzLCBub3Qgb24gYSBwcm90b3R5cGUpLlxuICBfLmhhcyA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xuICB9O1xuXG4gIC8vIFV0aWxpdHkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gUnVuIFVuZGVyc2NvcmUuanMgaW4gKm5vQ29uZmxpY3QqIG1vZGUsIHJldHVybmluZyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0c1xuICAvLyBwcmV2aW91cyBvd25lci4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8ubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJvb3QuXyA9IHByZXZpb3VzVW5kZXJzY29yZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBLZWVwIHRoZSBpZGVudGl0eSBmdW5jdGlvbiBhcm91bmQgZm9yIGRlZmF1bHQgaXRlcmF0b3JzLlxuICBfLmlkZW50aXR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgLy8gUnVuIGEgZnVuY3Rpb24gKipuKiogdGltZXMuXG4gIF8udGltZXMgPSBmdW5jdGlvbihuLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHZhciBhY2N1bSA9IEFycmF5KE1hdGgubWF4KDAsIG4pKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykgYWNjdW1baV0gPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIGkpO1xuICAgIHJldHVybiBhY2N1bTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiBhbmQgbWF4IChpbmNsdXNpdmUpLlxuICBfLnJhbmRvbSA9IGZ1bmN0aW9uKG1pbiwgbWF4KSB7XG4gICAgaWYgKG1heCA9PSBudWxsKSB7XG4gICAgICBtYXggPSBtaW47XG4gICAgICBtaW4gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbiAgfTtcblxuICAvLyBMaXN0IG9mIEhUTUwgZW50aXRpZXMgZm9yIGVzY2FwaW5nLlxuICB2YXIgZW50aXR5TWFwID0ge1xuICAgIGVzY2FwZToge1xuICAgICAgJyYnOiAnJmFtcDsnLFxuICAgICAgJzwnOiAnJmx0OycsXG4gICAgICAnPic6ICcmZ3Q7JyxcbiAgICAgICdcIic6ICcmcXVvdDsnLFxuICAgICAgXCInXCI6ICcmI3gyNzsnXG4gICAgfVxuICB9O1xuICBlbnRpdHlNYXAudW5lc2NhcGUgPSBfLmludmVydChlbnRpdHlNYXAuZXNjYXBlKTtcblxuICAvLyBSZWdleGVzIGNvbnRhaW5pbmcgdGhlIGtleXMgYW5kIHZhbHVlcyBsaXN0ZWQgaW1tZWRpYXRlbHkgYWJvdmUuXG4gIHZhciBlbnRpdHlSZWdleGVzID0ge1xuICAgIGVzY2FwZTogICBuZXcgUmVnRXhwKCdbJyArIF8ua2V5cyhlbnRpdHlNYXAuZXNjYXBlKS5qb2luKCcnKSArICddJywgJ2cnKSxcbiAgICB1bmVzY2FwZTogbmV3IFJlZ0V4cCgnKCcgKyBfLmtleXMoZW50aXR5TWFwLnVuZXNjYXBlKS5qb2luKCd8JykgKyAnKScsICdnJylcbiAgfTtcblxuICAvLyBGdW5jdGlvbnMgZm9yIGVzY2FwaW5nIGFuZCB1bmVzY2FwaW5nIHN0cmluZ3MgdG8vZnJvbSBIVE1MIGludGVycG9sYXRpb24uXG4gIF8uZWFjaChbJ2VzY2FwZScsICd1bmVzY2FwZSddLCBmdW5jdGlvbihtZXRob2QpIHtcbiAgICBfW21ldGhvZF0gPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIGlmIChzdHJpbmcgPT0gbnVsbCkgcmV0dXJuICcnO1xuICAgICAgcmV0dXJuICgnJyArIHN0cmluZykucmVwbGFjZShlbnRpdHlSZWdleGVzW21ldGhvZF0sIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiBlbnRpdHlNYXBbbWV0aG9kXVttYXRjaF07XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBJZiB0aGUgdmFsdWUgb2YgdGhlIG5hbWVkIGBwcm9wZXJ0eWAgaXMgYSBmdW5jdGlvbiB0aGVuIGludm9rZSBpdCB3aXRoIHRoZVxuICAvLyBgb2JqZWN0YCBhcyBjb250ZXh0OyBvdGhlcndpc2UsIHJldHVybiBpdC5cbiAgXy5yZXN1bHQgPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgIHZhciB2YWx1ZSA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgcmV0dXJuIF8uaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKG9iamVjdCkgOiB2YWx1ZTtcbiAgfTtcblxuICAvLyBBZGQgeW91ciBvd24gY3VzdG9tIGZ1bmN0aW9ucyB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8ubWl4aW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICBlYWNoKF8uZnVuY3Rpb25zKG9iaiksIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gX1tuYW1lXSA9IG9ialtuYW1lXTtcbiAgICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW3RoaXMuX3dyYXBwZWRdO1xuICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiByZXN1bHQuY2FsbCh0aGlzLCBmdW5jLmFwcGx5KF8sIGFyZ3MpKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgaW50ZWdlciBpZCAodW5pcXVlIHdpdGhpbiB0aGUgZW50aXJlIGNsaWVudCBzZXNzaW9uKS5cbiAgLy8gVXNlZnVsIGZvciB0ZW1wb3JhcnkgRE9NIGlkcy5cbiAgdmFyIGlkQ291bnRlciA9IDA7XG4gIF8udW5pcXVlSWQgPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgaWQgPSArK2lkQ291bnRlciArICcnO1xuICAgIHJldHVybiBwcmVmaXggPyBwcmVmaXggKyBpZCA6IGlkO1xuICB9O1xuXG4gIC8vIEJ5IGRlZmF1bHQsIFVuZGVyc2NvcmUgdXNlcyBFUkItc3R5bGUgdGVtcGxhdGUgZGVsaW1pdGVycywgY2hhbmdlIHRoZVxuICAvLyBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gIF8udGVtcGxhdGVTZXR0aW5ncyA9IHtcbiAgICBldmFsdWF0ZSAgICA6IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgaW50ZXJwb2xhdGUgOiAvPCU9KFtcXHNcXFNdKz8pJT4vZyxcbiAgICBlc2NhcGUgICAgICA6IC88JS0oW1xcc1xcU10rPyklPi9nXG4gIH07XG5cbiAgLy8gV2hlbiBjdXN0b21pemluZyBgdGVtcGxhdGVTZXR0aW5nc2AsIGlmIHlvdSBkb24ndCB3YW50IHRvIGRlZmluZSBhblxuICAvLyBpbnRlcnBvbGF0aW9uLCBldmFsdWF0aW9uIG9yIGVzY2FwaW5nIHJlZ2V4LCB3ZSBuZWVkIG9uZSB0aGF0IGlzXG4gIC8vIGd1YXJhbnRlZWQgbm90IHRvIG1hdGNoLlxuICB2YXIgbm9NYXRjaCA9IC8oLileLztcblxuICAvLyBDZXJ0YWluIGNoYXJhY3RlcnMgbmVlZCB0byBiZSBlc2NhcGVkIHNvIHRoYXQgdGhleSBjYW4gYmUgcHV0IGludG8gYVxuICAvLyBzdHJpbmcgbGl0ZXJhbC5cbiAgdmFyIGVzY2FwZXMgPSB7XG4gICAgXCInXCI6ICAgICAgXCInXCIsXG4gICAgJ1xcXFwnOiAgICAgJ1xcXFwnLFxuICAgICdcXHInOiAgICAgJ3InLFxuICAgICdcXG4nOiAgICAgJ24nLFxuICAgICdcXHQnOiAgICAgJ3QnLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICB2YXIgZXNjYXBlciA9IC9cXFxcfCd8XFxyfFxcbnxcXHR8XFx1MjAyOHxcXHUyMDI5L2c7XG5cbiAgLy8gSmF2YVNjcmlwdCBtaWNyby10ZW1wbGF0aW5nLCBzaW1pbGFyIHRvIEpvaG4gUmVzaWcncyBpbXBsZW1lbnRhdGlvbi5cbiAgLy8gVW5kZXJzY29yZSB0ZW1wbGF0aW5nIGhhbmRsZXMgYXJiaXRyYXJ5IGRlbGltaXRlcnMsIHByZXNlcnZlcyB3aGl0ZXNwYWNlLFxuICAvLyBhbmQgY29ycmVjdGx5IGVzY2FwZXMgcXVvdGVzIHdpdGhpbiBpbnRlcnBvbGF0ZWQgY29kZS5cbiAgXy50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHRleHQsIGRhdGEsIHNldHRpbmdzKSB7XG4gICAgdmFyIHJlbmRlcjtcbiAgICBzZXR0aW5ncyA9IF8uZGVmYXVsdHMoe30sIHNldHRpbmdzLCBfLnRlbXBsYXRlU2V0dGluZ3MpO1xuXG4gICAgLy8gQ29tYmluZSBkZWxpbWl0ZXJzIGludG8gb25lIHJlZ3VsYXIgZXhwcmVzc2lvbiB2aWEgYWx0ZXJuYXRpb24uXG4gICAgdmFyIG1hdGNoZXIgPSBuZXcgUmVnRXhwKFtcbiAgICAgIChzZXR0aW5ncy5lc2NhcGUgfHwgbm9NYXRjaCkuc291cmNlLFxuICAgICAgKHNldHRpbmdzLmludGVycG9sYXRlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5ldmFsdWF0ZSB8fCBub01hdGNoKS5zb3VyY2VcbiAgICBdLmpvaW4oJ3wnKSArICd8JCcsICdnJyk7XG5cbiAgICAvLyBDb21waWxlIHRoZSB0ZW1wbGF0ZSBzb3VyY2UsIGVzY2FwaW5nIHN0cmluZyBsaXRlcmFscyBhcHByb3ByaWF0ZWx5LlxuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHNvdXJjZSA9IFwiX19wKz0nXCI7XG4gICAgdGV4dC5yZXBsYWNlKG1hdGNoZXIsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGUsIGludGVycG9sYXRlLCBldmFsdWF0ZSwgb2Zmc2V0KSB7XG4gICAgICBzb3VyY2UgKz0gdGV4dC5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgICAgICAucmVwbGFjZShlc2NhcGVyLCBmdW5jdGlvbihtYXRjaCkgeyByZXR1cm4gJ1xcXFwnICsgZXNjYXBlc1ttYXRjaF07IH0pO1xuXG4gICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgZXNjYXBlICsgXCIpKT09bnVsbD8nJzpfLmVzY2FwZShfX3QpKStcXG4nXCI7XG4gICAgICB9XG4gICAgICBpZiAoaW50ZXJwb2xhdGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBpbnRlcnBvbGF0ZSArIFwiKSk9PW51bGw/Jyc6X190KStcXG4nXCI7XG4gICAgICB9XG4gICAgICBpZiAoZXZhbHVhdGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlICsgXCJcXG5fX3ArPSdcIjtcbiAgICAgIH1cbiAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAvLyBJZiBhIHZhcmlhYmxlIGlzIG5vdCBzcGVjaWZpZWQsIHBsYWNlIGRhdGEgdmFsdWVzIGluIGxvY2FsIHNjb3BlLlxuICAgIGlmICghc2V0dGluZ3MudmFyaWFibGUpIHNvdXJjZSA9ICd3aXRoKG9ianx8e30pe1xcbicgKyBzb3VyY2UgKyAnfVxcbic7XG5cbiAgICBzb3VyY2UgPSBcInZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixcIiArXG4gICAgICBcInByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307XFxuXCIgK1xuICAgICAgc291cmNlICsgXCJyZXR1cm4gX19wO1xcblwiO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJlbmRlciA9IG5ldyBGdW5jdGlvbihzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJywgJ18nLCBzb3VyY2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGUuc291cmNlID0gc291cmNlO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YSkgcmV0dXJuIHJlbmRlcihkYXRhLCBfKTtcbiAgICB2YXIgdGVtcGxhdGUgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gcmVuZGVyLmNhbGwodGhpcywgZGF0YSwgXyk7XG4gICAgfTtcblxuICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uIHNvdXJjZSBhcyBhIGNvbnZlbmllbmNlIGZvciBwcmVjb21waWxhdGlvbi5cbiAgICB0ZW1wbGF0ZS5zb3VyY2UgPSAnZnVuY3Rpb24oJyArIChzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJykgKyAnKXtcXG4nICsgc291cmNlICsgJ30nO1xuXG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9O1xuXG4gIC8vIEFkZCBhIFwiY2hhaW5cIiBmdW5jdGlvbiwgd2hpY2ggd2lsbCBkZWxlZ2F0ZSB0byB0aGUgd3JhcHBlci5cbiAgXy5jaGFpbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBfKG9iaikuY2hhaW4oKTtcbiAgfTtcblxuICAvLyBPT1BcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG4gIC8vIElmIFVuZGVyc2NvcmUgaXMgY2FsbGVkIGFzIGEgZnVuY3Rpb24sIGl0IHJldHVybnMgYSB3cmFwcGVkIG9iamVjdCB0aGF0XG4gIC8vIGNhbiBiZSB1c2VkIE9PLXN0eWxlLiBUaGlzIHdyYXBwZXIgaG9sZHMgYWx0ZXJlZCB2ZXJzaW9ucyBvZiBhbGwgdGhlXG4gIC8vIHVuZGVyc2NvcmUgZnVuY3Rpb25zLiBXcmFwcGVkIG9iamVjdHMgbWF5IGJlIGNoYWluZWQuXG5cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnRpbnVlIGNoYWluaW5nIGludGVybWVkaWF0ZSByZXN1bHRzLlxuICB2YXIgcmVzdWx0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoYWluID8gXyhvYmopLmNoYWluKCkgOiBvYmo7XG4gIH07XG5cbiAgLy8gQWRkIGFsbCBvZiB0aGUgVW5kZXJzY29yZSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIgb2JqZWN0LlxuICBfLm1peGluKF8pO1xuXG4gIC8vIEFkZCBhbGwgbXV0YXRvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIGVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb2JqID0gdGhpcy5fd3JhcHBlZDtcbiAgICAgIG1ldGhvZC5hcHBseShvYmosIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoKG5hbWUgPT0gJ3NoaWZ0JyB8fCBuYW1lID09ICdzcGxpY2UnKSAmJiBvYmoubGVuZ3RoID09PSAwKSBkZWxldGUgb2JqWzBdO1xuICAgICAgcmV0dXJuIHJlc3VsdC5jYWxsKHRoaXMsIG9iaik7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gQWRkIGFsbCBhY2Nlc3NvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIGVhY2goWydjb25jYXQnLCAnam9pbicsICdzbGljZSddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07XG4gICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZXN1bHQuY2FsbCh0aGlzLCBtZXRob2QuYXBwbHkodGhpcy5fd3JhcHBlZCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgXy5leHRlbmQoXy5wcm90b3R5cGUsIHtcblxuICAgIC8vIFN0YXJ0IGNoYWluaW5nIGEgd3JhcHBlZCBVbmRlcnNjb3JlIG9iamVjdC5cbiAgICBjaGFpbjogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9jaGFpbiA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gRXh0cmFjdHMgdGhlIHJlc3VsdCBmcm9tIGEgd3JhcHBlZCBhbmQgY2hhaW5lZCBvYmplY3QuXG4gICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3dyYXBwZWQ7XG4gICAgfVxuXG4gIH0pO1xuXG59KS5jYWxsKHRoaXMpO1xuIiwidmFyIGdsb2JhbD10eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge307LypcbiAqXG4gKiBUaGlzIGlzIHVzZWQgdG8gYnVpbGQgdGhlIGJ1bmRsZSB3aXRoIGJyb3dzZXJpZnkuXG4gKlxuICogVGhlIGJ1bmRsZSBpcyB1c2VkIGJ5IHBlb3BsZSB3aG8gZG9lc24ndCB1c2UgYnJvd3NlcmlmeS5yZXF1aXJlXG4gKiBUaG9zZSB3aG8gdXNlIGJyb3dzZXJpZnkgd2lsbCBpbnN0YWxsIHdpdGggbnBtIGFuZCByZXF1aXJlIHRoZSBtb2R1bGUsXG4gKiB0aGUgcGFja2FnZS5qc29uIGZpbGUgcG9pbnRzIHRvIGluZGV4LmpzLlxuICovXG52YXIgQXV0aDBXaWRnZXQgPSByZXF1aXJlKCcuL3dpZGdldCcpO1xuXG4vLyB1c2UgYW1kIG9yIGp1c3QgdGhyb3VnaHQgdG8gd2luZG93IG9iamVjdC5cbmlmICh0eXBlb2YgZ2xvYmFsLndpbmRvdy5kZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiBnbG9iYWwud2luZG93LmRlZmluZS5hbWQpIHtcbiAgZ2xvYmFsLndpbmRvdy5kZWZpbmUoJ2F1dGgwLXdpZGdldCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIEF1dGgwV2lkZ2V0OyB9KTtcbn0gZWxzZSBpZiAoZ2xvYmFsLndpbmRvdykge1xuICBnbG9iYWwud2luZG93LkF1dGgwV2lkZ2V0ID0gQXV0aDBXaWRnZXQ7XG59IiwibW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gYW5vbnltb3VzKGxvY2FscywgZmlsdGVycywgZXNjYXBlLCByZXRocm93KSB7XG5lc2NhcGUgPSBlc2NhcGUgfHwgZnVuY3Rpb24gKGh0bWwpe1xuICByZXR1cm4gU3RyaW5nKGh0bWwpXG4gICAgLnJlcGxhY2UoLyYoPyEjP1thLXpBLVowLTldKzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvJy9nLCAnJiMzOTsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59O1xudmFyIF9fc3RhY2sgPSB7IGxpbmVubzogMSwgaW5wdXQ6IFwiPCUgdmFyIGljb25fY2xhc3MgPSAhdXNlX2JpZ19idXR0b25zID8gJ2EwLWljb24nIDogJ2EwLWJsb2NrJyAlPlxcbjxkaXYgdGFiaW5kZXg9XFxcIjBcXFwiXFxuXFx0XFx0ZGF0YS1zdHJhdGVneT1cXFwiPCU9IG5hbWUgJT5cXFwiXFxuXFx0XFx0dGl0bGU9XFxcIjwlPSB0aXRsZSAlPlxcXCJcXG5cXHRcXHRjbGFzcz1cXFwiYTAtem9jaWFsIDwlPSBpY29uX2NsYXNzICU+IGEwLTwlPSBjc3MgJT4gPCU9IGxvY2Fscy5pbWFnZWljb24gPyAnYTAtaW1hZ2UtaWNvbicgOiAnJyAlPlxcXCIgZGlyPVxcXCJsdHJcXFwiPlxcblxcblxcblxcdDxzcGFuPkxvZ2luIHdpdGggPCU9IHRpdGxlICU+PC9zcGFuPlxcbjwvZGl2PlwiLCBmaWxlbmFtZTogXCIvVXNlcnMvY3Jpc3RpYW4vV29yay9hdXRoMC9hcHBzL3dpZGdldC93aWRnZXQvaHRtbC9idXR0b24uZWpzXCIgfTtcbmZ1bmN0aW9uIHJldGhyb3coZXJyLCBzdHIsIGZpbGVuYW1lLCBsaW5lbm8pe1xuICB2YXIgbGluZXMgPSBzdHIuc3BsaXQoJ1xcbicpXG4gICAgLCBzdGFydCA9IE1hdGgubWF4KGxpbmVubyAtIDMsIDApXG4gICAgLCBlbmQgPSBNYXRoLm1pbihsaW5lcy5sZW5ndGgsIGxpbmVubyArIDMpO1xuXG4gIC8vIEVycm9yIGNvbnRleHRcbiAgdmFyIGNvbnRleHQgPSBsaW5lcy5zbGljZShzdGFydCwgZW5kKS5tYXAoZnVuY3Rpb24obGluZSwgaSl7XG4gICAgdmFyIGN1cnIgPSBpICsgc3RhcnQgKyAxO1xuICAgIHJldHVybiAoY3VyciA9PSBsaW5lbm8gPyAnID4+ICcgOiAnICAgICcpXG4gICAgICArIGN1cnJcbiAgICAgICsgJ3wgJ1xuICAgICAgKyBsaW5lO1xuICB9KS5qb2luKCdcXG4nKTtcblxuICAvLyBBbHRlciBleGNlcHRpb24gbWVzc2FnZVxuICBlcnIucGF0aCA9IGZpbGVuYW1lO1xuICBlcnIubWVzc2FnZSA9IChmaWxlbmFtZSB8fCAnZWpzJykgKyAnOidcbiAgICArIGxpbmVubyArICdcXG4nXG4gICAgKyBjb250ZXh0ICsgJ1xcblxcbidcbiAgICArIGVyci5tZXNzYWdlO1xuICBcbiAgdGhyb3cgZXJyO1xufVxudHJ5IHtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJycpO19fc3RhY2subGluZW5vPTE7IHZhciBpY29uX2NsYXNzID0gIXVzZV9iaWdfYnV0dG9ucyA/ICdhMC1pY29uJyA6ICdhMC1ibG9jaycgOyBidWYucHVzaCgnXFxuPGRpdiB0YWJpbmRleD1cIjBcIlxcblx0XHRkYXRhLXN0cmF0ZWd5PVwiJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0zLCAgbmFtZSApKSwgJ1wiXFxuXHRcdHRpdGxlPVwiJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz00LCAgdGl0bGUgKSksICdcIlxcblx0XHRjbGFzcz1cImEwLXpvY2lhbCAnLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTUsICBpY29uX2NsYXNzICkpLCAnIGEwLScsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NSwgIGNzcyApKSwgJyAnLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTUsICBsb2NhbHMuaW1hZ2VpY29uID8gJ2EwLWltYWdlLWljb24nIDogJycgKSksICdcIiBkaXI9XCJsdHJcIj5cXG5cXG5cXG5cdDxzcGFuPkxvZ2luIHdpdGggJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz04LCAgdGl0bGUgKSksICc8L3NwYW4+XFxuPC9kaXY+Jyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn0gY2F0Y2ggKGVycikge1xuICByZXRocm93KGVyciwgX19zdGFjay5pbnB1dCwgX19zdGFjay5maWxlbmFtZSwgX19zdGFjay5saW5lbm8pO1xufVxufSkiLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGUsIHJldGhyb3cpIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/ISM/W2EtekEtWjAtOV0rOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC8nL2csICcmIzM5OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgX19zdGFjayA9IHsgbGluZW5vOiAxLCBpbnB1dDogXCI8ZGl2IHRhYmluZGV4PVxcXCIwXFxcIlxcblxcdFxcdGRhdGEtc3RyYXRlZ3k9XFxcIjwlPSBuYW1lICU+XFxcIlxcblxcdFxcdHRpdGxlPVxcXCI8JT0gdXNlcm5hbWUgPyAodXNlcm5hbWUgKyAnICgnICsgdGl0bGUgKyAnKScpIDogdGl0bGUgJT5cXFwiXFxuXFx0XFx0Y2xhc3M9XFxcImEwLXpvY2lhbCBhMC1ibG9jayBhMC08JT0gY3NzICU+IDwlPSBsb2NhbHMuaW1hZ2VpY29uID8gJ2EwLWltYWdlLWljb24nIDogJycgJT5cXFwiPlxcblxcdDxzcGFuPjwlPSB1c2VybmFtZSB8fCB0aXRsZSAlPjwvc3Bhbj5cXG48L2Rpdj5cIiwgZmlsZW5hbWU6IFwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvd2lkZ2V0L2h0bWwvbG9nZ2VkaW5fYnV0dG9uLmVqc1wiIH07XG5mdW5jdGlvbiByZXRocm93KGVyciwgc3RyLCBmaWxlbmFtZSwgbGluZW5vKXtcbiAgdmFyIGxpbmVzID0gc3RyLnNwbGl0KCdcXG4nKVxuICAgICwgc3RhcnQgPSBNYXRoLm1heChsaW5lbm8gLSAzLCAwKVxuICAgICwgZW5kID0gTWF0aC5taW4obGluZXMubGVuZ3RoLCBsaW5lbm8gKyAzKTtcblxuICAvLyBFcnJvciBjb250ZXh0XG4gIHZhciBjb250ZXh0ID0gbGluZXMuc2xpY2Uoc3RhcnQsIGVuZCkubWFwKGZ1bmN0aW9uKGxpbmUsIGkpe1xuICAgIHZhciBjdXJyID0gaSArIHN0YXJ0ICsgMTtcbiAgICByZXR1cm4gKGN1cnIgPT0gbGluZW5vID8gJyA+PiAnIDogJyAgICAnKVxuICAgICAgKyBjdXJyXG4gICAgICArICd8ICdcbiAgICAgICsgbGluZTtcbiAgfSkuam9pbignXFxuJyk7XG5cbiAgLy8gQWx0ZXIgZXhjZXB0aW9uIG1lc3NhZ2VcbiAgZXJyLnBhdGggPSBmaWxlbmFtZTtcbiAgZXJyLm1lc3NhZ2UgPSAoZmlsZW5hbWUgfHwgJ2VqcycpICsgJzonXG4gICAgKyBsaW5lbm8gKyAnXFxuJ1xuICAgICsgY29udGV4dCArICdcXG5cXG4nXG4gICAgKyBlcnIubWVzc2FnZTtcbiAgXG4gIHRocm93IGVycjtcbn1cbnRyeSB7XG52YXIgYnVmID0gW107XG53aXRoIChsb2NhbHMgfHwge30pIHsgKGZ1bmN0aW9uKCl7IFxuIGJ1Zi5wdXNoKCc8ZGl2IHRhYmluZGV4PVwiMFwiXFxuXHRcdGRhdGEtc3RyYXRlZ3k9XCInLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTIsICBuYW1lICkpLCAnXCJcXG5cdFx0dGl0bGU9XCInLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTMsICB1c2VybmFtZSA/ICh1c2VybmFtZSArICcgKCcgKyB0aXRsZSArICcpJykgOiB0aXRsZSApKSwgJ1wiXFxuXHRcdGNsYXNzPVwiYTAtem9jaWFsIGEwLWJsb2NrIGEwLScsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NCwgIGNzcyApKSwgJyAnLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTQsICBsb2NhbHMuaW1hZ2VpY29uID8gJ2EwLWltYWdlLWljb24nIDogJycgKSksICdcIj5cXG5cdDxzcGFuPicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NSwgIHVzZXJuYW1lIHx8IHRpdGxlICkpLCAnPC9zcGFuPlxcbjwvZGl2PicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59IGNhdGNoIChlcnIpIHtcbiAgcmV0aHJvdyhlcnIsIF9fc3RhY2suaW5wdXQsIF9fc3RhY2suZmlsZW5hbWUsIF9fc3RhY2subGluZW5vKTtcbn1cbn0pIiwibW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gYW5vbnltb3VzKGxvY2FscywgZmlsdGVycywgZXNjYXBlLCByZXRocm93KSB7XG5lc2NhcGUgPSBlc2NhcGUgfHwgZnVuY3Rpb24gKGh0bWwpe1xuICByZXR1cm4gU3RyaW5nKGh0bWwpXG4gICAgLnJlcGxhY2UoLyYoPyEjP1thLXpBLVowLTldKzspL2csICcmYW1wOycpXG4gICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAucmVwbGFjZSgvJy9nLCAnJiMzOTsnKVxuICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59O1xudmFyIF9fc3RhY2sgPSB7IGxpbmVubzogMSwgaW5wdXQ6IFwiPGRpdiBjbGFzcz1cXFwiYTAtY3JlYXRlLWFjY291bnRcXFwiPlxcbiAgPCUgaWYgKHNob3dTaWdudXApIHsgJT5cXG4gIDxhIGhyZWY9XFxcIjwlPSBsb2NhbHMuc2lnbnVwTGluayB8fCAnamF2YXNjcmlwdDoge30nICU+XFxcIlxcbiAgICBjbGFzcz1cXFwiYTAtc2lnbi11cFxcXCI+XFxuICAgIDwlPSBpMThuLnQoJ3NpZ25pbjpzaWdudXBUZXh0JykgJT5cXG4gIDwvYT5cXG4gIDwlIH0gJT5cXG4gIDwlIGlmIChzaG93U2lnbnVwICYmIHNob3dGb3Jnb3QpIHsgJT5cXG4gIDxzcGFuIGNsYXNzPVxcXCJhMC1kaXZpZGVyXFxcIj4mbmJzcDvigKImbmJzcDs8L3NwYW4+XFxuICA8JSB9ICU+XFxuICA8JSBpZiAoc2hvd0ZvcmdvdCkgeyAlPlxcbiAgPGEgaHJlZj1cXFwiPCU9IGxvY2Fscy5mb3Jnb3RMaW5rIHx8ICdqYXZhc2NyaXB0OiB7fScgJT5cXFwiXFxuICAgIGNsYXNzPVxcXCJhMC1mb3Jnb3QtcGFzc1xcXCI+PCU9IGkxOG4udCgnc2lnbmluOmZvcmdvdFRleHQnKSAlPjwvYT5cXG4gIDwlIH0gJT5cXG48L2Rpdj5cIiwgZmlsZW5hbWU6IFwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvd2lkZ2V0L2h0bWwvbG9naW5fYWN0aW9ucy5lanNcIiB9O1xuZnVuY3Rpb24gcmV0aHJvdyhlcnIsIHN0ciwgZmlsZW5hbWUsIGxpbmVubyl7XG4gIHZhciBsaW5lcyA9IHN0ci5zcGxpdCgnXFxuJylcbiAgICAsIHN0YXJ0ID0gTWF0aC5tYXgobGluZW5vIC0gMywgMClcbiAgICAsIGVuZCA9IE1hdGgubWluKGxpbmVzLmxlbmd0aCwgbGluZW5vICsgMyk7XG5cbiAgLy8gRXJyb3IgY29udGV4dFxuICB2YXIgY29udGV4dCA9IGxpbmVzLnNsaWNlKHN0YXJ0LCBlbmQpLm1hcChmdW5jdGlvbihsaW5lLCBpKXtcbiAgICB2YXIgY3VyciA9IGkgKyBzdGFydCArIDE7XG4gICAgcmV0dXJuIChjdXJyID09IGxpbmVubyA/ICcgPj4gJyA6ICcgICAgJylcbiAgICAgICsgY3VyclxuICAgICAgKyAnfCAnXG4gICAgICArIGxpbmU7XG4gIH0pLmpvaW4oJ1xcbicpO1xuXG4gIC8vIEFsdGVyIGV4Y2VwdGlvbiBtZXNzYWdlXG4gIGVyci5wYXRoID0gZmlsZW5hbWU7XG4gIGVyci5tZXNzYWdlID0gKGZpbGVuYW1lIHx8ICdlanMnKSArICc6J1xuICAgICsgbGluZW5vICsgJ1xcbidcbiAgICArIGNvbnRleHQgKyAnXFxuXFxuJ1xuICAgICsgZXJyLm1lc3NhZ2U7XG4gIFxuICB0aHJvdyBlcnI7XG59XG50cnkge1xudmFyIGJ1ZiA9IFtdO1xud2l0aCAobG9jYWxzIHx8IHt9KSB7IChmdW5jdGlvbigpeyBcbiBidWYucHVzaCgnPGRpdiBjbGFzcz1cImEwLWNyZWF0ZS1hY2NvdW50XCI+XFxuICAnKTtfX3N0YWNrLmxpbmVubz0yOyBpZiAoc2hvd1NpZ251cCkgeyA7IGJ1Zi5wdXNoKCdcXG4gIDxhIGhyZWY9XCInLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTMsICBsb2NhbHMuc2lnbnVwTGluayB8fCAnamF2YXNjcmlwdDoge30nICkpLCAnXCJcXG4gICAgY2xhc3M9XCJhMC1zaWduLXVwXCI+XFxuICAgICcsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NSwgIGkxOG4udCgnc2lnbmluOnNpZ251cFRleHQnKSApKSwgJ1xcbiAgPC9hPlxcbiAgJyk7X19zdGFjay5saW5lbm89NzsgfSA7IGJ1Zi5wdXNoKCdcXG4gICcpO19fc3RhY2subGluZW5vPTg7IGlmIChzaG93U2lnbnVwICYmIHNob3dGb3Jnb3QpIHsgOyBidWYucHVzaCgnXFxuICA8c3BhbiBjbGFzcz1cImEwLWRpdmlkZXJcIj4mbmJzcDvigKImbmJzcDs8L3NwYW4+XFxuICAnKTtfX3N0YWNrLmxpbmVubz0xMDsgfSA7IGJ1Zi5wdXNoKCdcXG4gICcpO19fc3RhY2subGluZW5vPTExOyBpZiAoc2hvd0ZvcmdvdCkgeyA7IGJ1Zi5wdXNoKCdcXG4gIDxhIGhyZWY9XCInLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTEyLCAgbG9jYWxzLmZvcmdvdExpbmsgfHwgJ2phdmFzY3JpcHQ6IHt9JyApKSwgJ1wiXFxuICAgIGNsYXNzPVwiYTAtZm9yZ290LXBhc3NcIj4nLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTEzLCAgaTE4bi50KCdzaWduaW46Zm9yZ290VGV4dCcpICkpLCAnPC9hPlxcbiAgJyk7X19zdGFjay5saW5lbm89MTQ7IH0gOyBidWYucHVzaCgnXFxuPC9kaXY+Jyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn0gY2F0Y2ggKGVycikge1xuICByZXRocm93KGVyciwgX19zdGFjay5pbnB1dCwgX19zdGFjay5maWxlbmFtZSwgX19zdGFjay5saW5lbm8pO1xufVxufSkiLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGUsIHJldGhyb3cpIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/ISM/W2EtekEtWjAtOV0rOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC8nL2csICcmIzM5OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgX19zdGFjayA9IHsgbGluZW5vOiAxLCBpbnB1dDogXCI8ZGl2IGlkPVxcXCJhMC13aWRnZXRcXFwiIGNsYXNzPVxcXCJhMC13aWRnZXRcXFwiIGRpcj1cXFwiYXV0b1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImEwLXNpZ25pbiA8JT0gbG9jYWxzICYmIGxvY2Fscy5lbWJlZGRlZCA/ICdhMC1lbWJlZGRlZCcgOiAnJyAlPiA8JT0gb3B0aW9ucy50aGVtZSA/ICgnYTAtdGhlbWUtJyArIG9wdGlvbnMudGhlbWUpIDogJycgJT5cXFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiYTAtcG9wdXBcXFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImEwLW92ZXJsYXlcXFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCI8JT0gbG9jYWxzICYmIGxvY2Fscy5leHBhbmQgPyAnJyA6ICdhMC1jZW50cml4JyAlPlxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8JSBpbmNsdWRlIHdpZGdldCAlPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cXG5cIiwgZmlsZW5hbWU6IFwiL1VzZXJzL2NyaXN0aWFuL1dvcmsvYXV0aDAvYXBwcy93aWRnZXQvd2lkZ2V0L2h0bWwvbWFpbi5lanNcIiB9O1xuZnVuY3Rpb24gcmV0aHJvdyhlcnIsIHN0ciwgZmlsZW5hbWUsIGxpbmVubyl7XG4gIHZhciBsaW5lcyA9IHN0ci5zcGxpdCgnXFxuJylcbiAgICAsIHN0YXJ0ID0gTWF0aC5tYXgobGluZW5vIC0gMywgMClcbiAgICAsIGVuZCA9IE1hdGgubWluKGxpbmVzLmxlbmd0aCwgbGluZW5vICsgMyk7XG5cbiAgLy8gRXJyb3IgY29udGV4dFxuICB2YXIgY29udGV4dCA9IGxpbmVzLnNsaWNlKHN0YXJ0LCBlbmQpLm1hcChmdW5jdGlvbihsaW5lLCBpKXtcbiAgICB2YXIgY3VyciA9IGkgKyBzdGFydCArIDE7XG4gICAgcmV0dXJuIChjdXJyID09IGxpbmVubyA/ICcgPj4gJyA6ICcgICAgJylcbiAgICAgICsgY3VyclxuICAgICAgKyAnfCAnXG4gICAgICArIGxpbmU7XG4gIH0pLmpvaW4oJ1xcbicpO1xuXG4gIC8vIEFsdGVyIGV4Y2VwdGlvbiBtZXNzYWdlXG4gIGVyci5wYXRoID0gZmlsZW5hbWU7XG4gIGVyci5tZXNzYWdlID0gKGZpbGVuYW1lIHx8ICdlanMnKSArICc6J1xuICAgICsgbGluZW5vICsgJ1xcbidcbiAgICArIGNvbnRleHQgKyAnXFxuXFxuJ1xuICAgICsgZXJyLm1lc3NhZ2U7XG4gIFxuICB0aHJvdyBlcnI7XG59XG50cnkge1xudmFyIGJ1ZiA9IFtdO1xud2l0aCAobG9jYWxzIHx8IHt9KSB7IChmdW5jdGlvbigpeyBcbiBidWYucHVzaCgnPGRpdiBpZD1cImEwLXdpZGdldFwiIGNsYXNzPVwiYTAtd2lkZ2V0XCIgZGlyPVwiYXV0b1wiPlxcbiAgICA8ZGl2IGNsYXNzPVwiYTAtc2lnbmluICcsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MiwgIGxvY2FscyAmJiBsb2NhbHMuZW1iZWRkZWQgPyAnYTAtZW1iZWRkZWQnIDogJycgKSksICcgJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0yLCAgb3B0aW9ucy50aGVtZSA/ICgnYTAtdGhlbWUtJyArIG9wdGlvbnMudGhlbWUpIDogJycgKSksICdcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhMC1wb3B1cFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1vdmVybGF5XCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCInLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTUsICBsb2NhbHMgJiYgbG9jYWxzLmV4cGFuZCA/ICcnIDogJ2EwLWNlbnRyaXgnICkpLCAnXCI+XFxuICAgICAgICAgICAgICAgICAgICAnICsgKGZ1bmN0aW9uKCl7dmFyIGJ1ZiA9IFtdO1xuIGJ1Zi5wdXNoKCc8ZGl2IGlkPVwiYTAtb25lc3RlcFwiIGNsYXNzPVwiYTAtcGFuZWwgYTAtb25lc3RlcCBhMC1mcmVlLXN1YnNjcmlwdGlvblwiPlxcbiAgICAnKTtfX3N0YWNrLmxpbmVubz0yOyBpZiAoIWxvY2Fscy5lbWJlZGRlZCkgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgPGRpdiBjbGFzcz1cImEwLWhlYWRlciBhMC10b3AtaGVhZGVyXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtaW1hZ2UgJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz00LCAgIW9wdGlvbnMuc2hvd0ljb24gPyAnYTAtaGlkZScgOiAnJyApKSwgJ1wiPlxcbiAgICAgICAgICAgIDxpbWcgc3JjPVwiJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz01LCAgb3B0aW9ucy5pY29uIHx8ICcnICkpLCAnXCI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhMC1hdmF0YXIgJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz03LCAgb3B0aW9ucy5zaG93SWNvbiA/ICdhMC1oaWRlJyA6ICcnICkpLCAnXCI+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XCJhMC1hdmF0YXItZ3Vlc3QgYTAtaWNvbi1idWRpY29uLTJcIj48L2k+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxoMT4nLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTEwLCAgaTE4bi50KCdzaWduaW46dGl0bGUnKSApKSwgJzwvaDE+XFxuICAgICAgICA8aDIgY2xhc3M9XCJhMC1lcnJvciBhMC1oaWRlXCI+Jm5ic3A7PC9oMj5cXG4gICAgICAgIDxoMiBjbGFzcz1cImEwLXN1Y2Nlc3MgYTAtaGlkZVwiPiZuYnNwOzwvaDI+XFxuICAgICAgICA8YSBjbGFzcz1cImEwLWNsb3NlIGEwLWljb24tYnVkaWNvbi0zICcsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MTMsICBvcHRpb25zLnN0YW5kYWxvbmUgPyAnYTAtaGlkZScgOiAnJyApKSwgJztcIj5cXG5cXG4gICAgICAgIDwvYT5cXG4gICAgPC9kaXY+XFxuICAgICcpO19fc3RhY2subGluZW5vPTE3OyB9IDsgYnVmLnB1c2goJ1xcblxcblxcbiAgICA8ZGl2IGNsYXNzPVwiYTAtbG9hZGluZyBhMC1tb2RlXCI+XFxuICAgICAgICAnKTtfX3N0YWNrLmxpbmVubz0yMTsgaWYgKGxvY2Fscy5hbHRfc3Bpbm5lcikgeyA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhMC1zcGluLWltZ1wiIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcJycsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MjIsICBsb2NhbHMuYWx0X3NwaW5uZXIgKSksICdcXCcpXCI+PC9kaXY+XFxuICAgICAgICAnKTtfX3N0YWNrLmxpbmVubz0yMzsgfSBlbHNlIHsgOyBidWYucHVzaCgnXFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtc3Bpbi1jb250YWluZXJcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtc3Bpbm5lci1jc3NcIj5cXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYTAtc2lkZSBhMC1zcF9sZWZ0XCI+XFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYTAtZmlsbFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYTAtc2lkZSBhMC1zcF9yaWdodFwiPlxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImEwLWZpbGxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLXNwaW4tbWVzc2FnZVwiPlxcbiAgICAgICAgICAgICAgICA8c3Bhbj4mbmJzcDs8L3NwYW4+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgICcpO19fc3RhY2subGluZW5vPTM3OyB9IDsgYnVmLnB1c2goJ1xcbiAgICA8L2Rpdj5cXG5cXG5cXG4gICAgJyArIChmdW5jdGlvbigpe3ZhciBidWYgPSBbXTtcbiBidWYucHVzaCgnPGRpdiBjbGFzcz1cImEwLWxvZ2dlZGluIGEwLW1vZGUgYTAtaGlkZVwiPlxcbiAgICA8Zm9ybSBub3ZhbGlkYXRlPlxcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJhMC1jZW50ZXJlZCBhMC1sYXN0LXRpbWVcIj4nLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTMsICBpMThuLnQoJ3NpZ25pbjpyZXR1cm5Vc2VyTGFiZWwnKSApKSwgJzwvc3Bhbj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhMC1zdHJhdGVneVwiPjwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLWVtYWlsUGFzc3dvcmQgYTAtaGlkZVwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1lbWFpbFwiPlxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImEwLWVtYWlsLXJlYWRvbmx5XCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT1cImVtYWlsXCJcXG4gICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXFxuICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT1cIlwiXFxuICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZFxcbiAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCInLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTEyLCAgaTE4bi50KCdzaWduaW46ZW1haWxQbGFjZWhvbGRlcicpICkpLCAnXCJcXG4gICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0xMywgIGkxOG4udCgnc2lnbmluOmVtYWlsUGxhY2Vob2xkZXInKSApKSwgJ1wiXFxuICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImEwLWhpZGVcIj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtcGFzc3dvcmRcIj5cXG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYTAtc2FkLXBsYWNlaG9sZGVyXCI+XFxuICAgICAgICAgICAgICAgICAgJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0xOCwgIGkxOG4udCgnc2lnbmluOnBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1xcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT1cInBhc3N3b3JkXCIgdHlwZT1cInBhc3N3b3JkXCJcXG4gICAgICAgICAgICAgICAgICAgICAgIGF1dG9mb2N1c1xcbiAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCInLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTIyLCAgaTE4bi50KCdzaWduaW46cGFzc3dvcmRQbGFjZWhvbGRlcicpICkpLCAnXCJcXG4gICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0yMywgIGkxOG4udCgnc2lnbmluOnBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1wiPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1hY3Rpb25cIj5cXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJhMC1wcmltYXJ5IGEwLW5leHRcIiBzdHlsZT1cIndpZHRoOiAxMDAlO1wiPicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MjYsICBpMThuLnQoJ3NpZ25pbjphY3Rpb24nKSApKSwgJzwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICAnKTtfX3N0YWNrLmxpbmVubz0yNzsgaWYgKG9wdGlvbnMuc2hvd0ZvcmdvdCAhPT0gZmFsc2UpIHsgOyBidWYucHVzaCgnXFxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImEwLWNyZWF0ZS1hY2NvdW50XCI+XFxuICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MjksICBvcHRpb25zLmZvcmdvdExpbmsgfHwgJ2phdmFzY3JpcHQ6IHt9JyApKSwgJ1wiXFxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImEwLWZvcmdvdC1wYXNzXCI+JywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0zMCwgIGkxOG4udCgnc2lnbmluOmZvcmdvdFRleHQnKSApKSwgJzwvYT5cXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgJyk7X19zdGFjay5saW5lbm89MzI7IH0gOyBidWYucHVzaCgnXFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVwiYTAtY2VudGVyZWQgYTAtYWxsXCI+JywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0zNSwgIGkxOG4udCgnc2lnbmluOmFsbCcpICkpLCAnPC9zcGFuPlxcbiAgICA8L2Zvcm0+XFxuPC9kaXY+Jyk7XG5yZXR1cm4gYnVmLmpvaW4oJycpO30pKCkgKyAnXFxuICAgICcgKyAoZnVuY3Rpb24oKXt2YXIgYnVmID0gW107XG4gYnVmLnB1c2goJzxkaXYgY2xhc3M9XCJhMC1ub3Rsb2dnZWRpbiBhMC1tb2RlIGEwLWhpZGVcIj5cXG4gICAgPGZvcm0gbm92YWxpZGF0ZT5cXG4gICAgICA8ZGl2IGNsYXNzPVwiYTAtY29sbGFwc2Utc29jaWFsXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtaWNvbmxpc3QgYTAtaGlkZVwiPjxwIGNsYXNzPVwiYTAtaGlkZVwiPicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NCwgIGkxOG4udCgnc2lnbmluOm9yJykgKSksICc8L3A+PC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtc2VwYXJhdG9yIGEwLWhpZGVcIj48c3Bhbj4nLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTUsICBpMThuLnQoJ3NpZ25pbjpzZXBhcmF0b3JUZXh0JykgKSksICc8L3NwYW4+PC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgICAgPGRpdiBjbGFzcz1cImEwLWVtYWlsUGFzc3dvcmRcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhMC1pbnB1dHNcIj5cXG4gICAgICAgICAgJyk7X19zdGFjay5saW5lbm89OTsgaWYgKG9wdGlvbnMuc2hvd0VtYWlsICE9PSBmYWxzZSkgeyA7IGJ1Zi5wdXNoKCdcXG5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWVtYWlsXCI+XFxuICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiYTAtc2lnbmluX2Vhc3lfZW1haWxcIiBjbGFzcz1cImEwLXNhZC1wbGFjZWhvbGRlclwiPlxcbiAgICAgICAgICAgICAgICAnLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTEzLCAgaTE4bi50KCdzaWduaW46ZW1haWxQbGFjZWhvbGRlcicpICkpLCAnXFxuICAgICAgICAgICAgICA8L2xhYmVsPlxcblxcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWlucHV0LWJveFwiPlxcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImEwLWljb24tYnVkaWNvbi0xXCI+PC9pPlxcblxcbiAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJlbWFpbFwiXFxuICAgICAgICAgICAgICAgICAgICAgaWQ9XCJhMC1zaWduaW5fZWFzeV9lbWFpbFwiXFxuICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImVtYWlsXCJcXG4gICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MjIsICBpMThuLnQoJ3NpZ25pbjplbWFpbFBsYWNlaG9sZGVyJykgKSksICdcIlxcbiAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0yMywgIGkxOG4udCgnc2lnbmluOmVtYWlsUGxhY2Vob2xkZXInKSApKSwgJ1wiPlxcbiAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAnKTtfX3N0YWNrLmxpbmVubz0yNjsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImEwLXBhc3N3b3JkIGEwLWhpZGVcIj5cXG4gICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJhMC1zaWduaW5fZWFzeV9wYXNzd29yZFwiIGNsYXNzPVwiYTAtc2FkLXBsYWNlaG9sZGVyXCI+XFxuICAgICAgICAgICAgICAgICcsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MjksICBpMThuLnQoJ3NpZ25pbjpwYXNzd29yZFBsYWNlaG9sZGVyJykgKSksICdcXG4gICAgICAgICAgICAgIDwvbGFiZWw+XFxuXFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtaW5wdXQtYm94XCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ib3hcIj5cXG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJhMC1pY29uLWJ1ZGljb25cIj48L2k+XFxuXFxuICAgICAgICAgICAgICA8aW5wdXQgbmFtZT1cInBhc3N3b3JkXCJcXG4gICAgICAgICAgICAgICAgICAgICBpZD1cImEwLXNpZ25pbl9lYXN5X3Bhc3N3b3JkXCJcXG4gICAgICAgICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxcbiAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0zOSwgIGkxOG4udCgnc2lnbmluOnBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1wiXFxuICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCInLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTQwLCAgaTE4bi50KCdzaWduaW46cGFzc3dvcmRQbGFjZWhvbGRlcicpICkpLCAnXCI+XFxuICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPCEtLSAuYTAtaW5wdXRzIC0tPlxcblxcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLWFjdGlvblwiPlxcbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiYTAtcHJpbWFyeSBhMC1uZXh0XCI+JywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz00OSwgIGkxOG4udCgnc2lnbmluOmFjdGlvbicpICkpLCAnPC9idXR0b24+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWRiLWFjdGlvbnNcIj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICA8L2Zvcm0+XFxuPC9kaXY+Jyk7XG5yZXR1cm4gYnVmLmpvaW4oJycpO30pKCkgKyAnXFxuICAgICcgKyAoZnVuY3Rpb24oKXt2YXIgYnVmID0gW107XG4gYnVmLnB1c2goJzxkaXYgY2xhc3M9XCJhMC1zaWdudXAgYTAtbW9kZSBhMC1oaWRlXCI+XFxuICAgIDxmb3JtIG5vdmFsaWRhdGU+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtaGVhZGVyXCI+JywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0zLCAgaTE4bi50KCdzaWdudXA6ZGVzY3JpcHRpb24nKSApKSwgJzwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLWNvbGxhcHNlLXNvY2lhbC1zaWdudXBcIj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWljb25saXN0XCI+PHAgY2xhc3M9XCJhMC1oaWRlXCI+JywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz01LCAgaTE4bi50KCdzaWduaW46b3InKSApKSwgJzwvcD48L2Rpdj5cXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImEwLXNlcGFyYXRvclwiPjxzcGFuPicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NiwgIGkxOG4udCgnc2lnbmluOnNlcGFyYXRvclRleHQnKSApKSwgJzwvc3Bhbj48L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLWhlYWRlclwiPicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89OCwgIGkxOG4udCgnc2lnbnVwOmhlYWRlclRleHQnKSApKSwgJzwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLWVtYWlsUGFzc3dvcmRcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtaW5wdXRzXCI+XFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtZW1haWxcIj5cXG4gICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiYTAtc2lnbnVwX2Vhc3lfZW1haWxcIiBjbGFzcz1cImEwLXNhZC1wbGFjZWhvbGRlclwiPlxcbiAgICAgICAgICAgICAgICAgICAgJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0xMywgIGkxOG4udCgnc2lnbnVwOmVtYWlsUGxhY2Vob2xkZXInKSApKSwgJ1xcbiAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWlucHV0LWJveFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJhMC1pY29uLWJ1ZGljb24tMVwiPjwvaT5cXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwiZW1haWxcIiBpZD1cImEwLXNpZ251cF9lYXN5X2VtYWlsXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImVtYWlsXCIgdmFsdWU9XCJcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MTksICBpMThuLnQoJ3NpZ251cDplbWFpbFBsYWNlaG9sZGVyJykgKSksICdcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MjAsICBpMThuLnQoJ3NpZ251cDplbWFpbFBsYWNlaG9sZGVyJykgKSksICdcIj5cXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLXBhc3N3b3JkXCI+XFxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImEwLXNpZ251cF9lYXN5X3Bhc3N3b3JkXCIgY2xhc3M9XCJhMC1zYWQtcGxhY2Vob2xkZXJcIj5cXG4gICAgICAgICAgICAgICAgICAgICcsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MjUsICBpMThuLnQoJ3NpZ251cDpwYXNzd29yZFBsYWNlaG9sZGVyJykgKSksICdcXG4gICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcblxcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1pbnB1dC1ib3hcIj5cXG4gICAgICAgICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJhMC1pY29uLWJ1ZGljb25cIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT1cInBhc3N3b3JkXCIgaWQ9XCJhMC1zaWdudXBfZWFzeV9wYXNzd29yZFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCIgdmFsdWU9XCJcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0zMywgIGkxOG4udCgnc2lnbnVwOnBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1wiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCInLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTM0LCAgaTE4bi50KCdzaWdudXA6cGFzc3dvcmRQbGFjZWhvbGRlcicpICkpLCAnXCI+XFxuXFxuICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtYWN0aW9uXCI+XFxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiYTAtcHJpbWFyeSBhMC1uZXh0XCI+JywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz00MSwgIGkxOG4udCgnc2lnbnVwOmFjdGlvbicpICkpLCAnPC9idXR0b24+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1vcHRpb25zXCI+XFxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDoge31cIiBjbGFzcz1cImEwLWNlbnRlcmVkIGEwLWNhbmNlbFwiPicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NDMsICBpMThuLnQoJ3NpZ251cDpjYW5jZWxBY3Rpb24nKSApKSwgJzwvYT5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLXNpZ251cC1mb290ZXJcIj5cXG4gICAgICAgICAgICAnLCAoX19zdGFjay5saW5lbm89NDcsICBpMThuLnQoJ3NpZ251cDpmb290ZXJUZXh0JykgKSwgJ1xcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZm9ybT5cXG48L2Rpdj4nKTtcbnJldHVybiBidWYuam9pbignJyk7fSkoKSArICdcXG4gICAgJyArIChmdW5jdGlvbigpe3ZhciBidWYgPSBbXTtcbiBidWYucHVzaCgnPGRpdiBjbGFzcz1cImEwLXJlc2V0IGEwLW1vZGUgYTAtaGlkZVwiPlxcbiAgICA8Zm9ybSBpZD1cImEwLWNoYW5nZV9wYXNzd29yZFwiIGNsYXNzPVwiZm9ybS1yZXNldC1wYXNzd29yZFwiIG5vdmFsaWRhdGU+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtY29sbGFwc2UtcmVzZXRcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtaGVhZGVyIGEwLWluc3RydWN0aW9uc1wiPicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NCwgIGkxOG4udCgncmVzZXQ6aGVhZGVyVGV4dCcpICkpLCAnPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhMC1lbWFpbFBhc3N3b3JkXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWlucHV0c1wiPlxcblxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtZW1haWxcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJhMC1yZXNldF9lYXN5X2VtYWlsXCIgY2xhc3M9XCJhMC1zYWQtcGxhY2Vob2xkZXJcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0xMSwgIGkxOG4udCgncmVzZXQ6ZW1haWxQbGFjZWhvbGRlcicpICkpLCAnXFxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWlucHV0LWJveFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImEwLWljb24tYnVkaWNvbi0xXCI+PC9pPlxcbiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT1cImVtYWlsXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cImEwLXJlc2V0X2Vhc3lfZW1haWxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9XCJcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0xOSwgIGkxOG4udCgncmVzZXQ6ZW1haWxQbGFjZWhvbGRlcicpICkpLCAnXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MjAsICBpMThuLnQoJ3Jlc2V0OmVtYWlsUGxhY2Vob2xkZXInKSApKSwgJ1wiPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtcGFzc3dvcmRcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJhMC1yZXNldF9lYXN5X3Bhc3N3b3JkXCIgY2xhc3M9XCJhMC1zYWQtcGxhY2Vob2xkZXJcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0yNSwgIGkxOG4udCgncmVzZXQ6cGFzc3dvcmRQbGFjZWhvbGRlcicpICkpLCAnXFxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWlucHV0LWJveFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImEwLWljb24tYnVkaWNvblwiPjwvaT5cXG4gICAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJwYXNzd29yZFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJhMC1yZXNldF9lYXN5X3Bhc3N3b3JkXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPVwiXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MzMsICBpMThuLnQoJ3Jlc2V0OnBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1wiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCInLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTM0LCAgaTE4bi50KCdyZXNldDpwYXNzd29yZFBsYWNlaG9sZGVyJykgKSksICdcIj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLXJlcGVhdFBhc3N3b3JkXCI+XFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiYTAtcmVzZXRfZWFzeV9yZXBlYXRfcGFzc3dvcmRcIiBjbGFzcz1cImEwLXNhZC1wbGFjZWhvbGRlclwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAnLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTM5LCAgaTE4bi50KCdyZXNldDpyZXBlYXRQYXNzd29yZFBsYWNlaG9sZGVyJykgKSksICdcXG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtaW5wdXQtYm94XCI+XFxuICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiYTAtaWNvbi1idWRpY29uXCI+PC9pPlxcbiAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT1cInJlcGVhdF9wYXNzd29yZFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJhMC1yZXNldF9lYXN5X3JlcGVhdF9wYXNzd29yZFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCIgdmFsdWU9XCJcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz00NiwgIGkxOG4udCgncmVzZXQ6cmVwZWF0UGFzc3dvcmRQbGFjZWhvbGRlcicpICkpLCAnXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NDcsICBpMThuLnQoJ3Jlc2V0OnJlcGVhdFBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1wiPlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1hY3Rpb25cIj5cXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJhMC1wcmltYXJ5IGEwLW5leHRcIiBzdHlsZT1cIndpZHRoOiAxMDAlO1wiPicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NTQsICBpMThuLnQoJ3Jlc2V0OmFjdGlvbicpICkpLCAnPC9idXR0b24+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1vcHRpb25zXCI+XFxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDoge31cIiBjbGFzcz1cImEwLWNlbnRlcmVkIGEwLWNhbmNlbFwiPicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NTYsICBpMThuLnQoJ3Jlc2V0OmNhbmNlbEFjdGlvbicpICkpLCAnPC9hPlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Zvcm0+XFxuPC9kaXY+Jyk7XG5yZXR1cm4gYnVmLmpvaW4oJycpO30pKCkgKyAnXFxuXFxuICAgIDxkaXYgY2xhc3M9XFwnYTAtZm9vdGVyXFwnPlxcblxcbiAgICAgICAgPGEgaHJlZj1cImh0dHA6Ly9hdXRoMC5jb21cIiB0YXJnZXQ9XCJfbmV3XCIgY2xhc3M9XCJhMC1sb2dvXCI+XFxuICAgICAgICAgICAgPGkgY2xhc3M9XCJhMC1pY29uLWJhZGdlXCI+PC9pPlxcbiAgICAgICAgPC9hPlxcbiAgICA8L2Rpdj5cXG48L2Rpdj4nKTtcbnJldHVybiBidWYuam9pbignJyk7fSkoKSArICdcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxuJyk7IH0pKCk7XG59IFxucmV0dXJuIGJ1Zi5qb2luKCcnKTtcbn0gY2F0Y2ggKGVycikge1xuICByZXRocm93KGVyciwgX19zdGFjay5pbnB1dCwgX19zdGFjay5maWxlbmFtZSwgX19zdGFjay5saW5lbm8pO1xufVxufSkiLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiBhbm9ueW1vdXMobG9jYWxzLCBmaWx0ZXJzLCBlc2NhcGUsIHJldGhyb3cpIHtcbmVzY2FwZSA9IGVzY2FwZSB8fCBmdW5jdGlvbiAoaHRtbCl7XG4gIHJldHVybiBTdHJpbmcoaHRtbClcbiAgICAucmVwbGFjZSgvJig/ISM/W2EtekEtWjAtOV0rOykvZywgJyZhbXA7JylcbiAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgIC5yZXBsYWNlKC8nL2csICcmIzM5OycpXG4gICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcbn07XG52YXIgX19zdGFjayA9IHsgbGluZW5vOiAxLCBpbnB1dDogXCI8ZGl2IGlkPVxcXCJhMC13aWRnZXRcXFwiIGNsYXNzPVxcXCJhMC13aWRnZXRcXFwiIGRpcj1cXFwiYXV0b1xcXCI+XFxuICAgIDxkaXYgY2xhc3M9XFxcImEwLXNpZ25pbiBhMC1lbWJlZGRlZCA8JT0gb3B0aW9ucy50aGVtZSA/ICgnYTAtdGhlbWUtJyArIG9wdGlvbnMudGhlbWUpIDogJycgJT5cXFwiPlxcbiAgICAgICAgPCUgaW5jbHVkZSB3aWRnZXQgJT5cXG4gICAgPC9kaXY+XFxuPC9kaXY+XFxuXCIsIGZpbGVuYW1lOiBcIi9Vc2Vycy9jcmlzdGlhbi9Xb3JrL2F1dGgwL2FwcHMvd2lkZ2V0L3dpZGdldC9odG1sL21haW5fZW1iZWRkZWQuZWpzXCIgfTtcbmZ1bmN0aW9uIHJldGhyb3coZXJyLCBzdHIsIGZpbGVuYW1lLCBsaW5lbm8pe1xuICB2YXIgbGluZXMgPSBzdHIuc3BsaXQoJ1xcbicpXG4gICAgLCBzdGFydCA9IE1hdGgubWF4KGxpbmVubyAtIDMsIDApXG4gICAgLCBlbmQgPSBNYXRoLm1pbihsaW5lcy5sZW5ndGgsIGxpbmVubyArIDMpO1xuXG4gIC8vIEVycm9yIGNvbnRleHRcbiAgdmFyIGNvbnRleHQgPSBsaW5lcy5zbGljZShzdGFydCwgZW5kKS5tYXAoZnVuY3Rpb24obGluZSwgaSl7XG4gICAgdmFyIGN1cnIgPSBpICsgc3RhcnQgKyAxO1xuICAgIHJldHVybiAoY3VyciA9PSBsaW5lbm8gPyAnID4+ICcgOiAnICAgICcpXG4gICAgICArIGN1cnJcbiAgICAgICsgJ3wgJ1xuICAgICAgKyBsaW5lO1xuICB9KS5qb2luKCdcXG4nKTtcblxuICAvLyBBbHRlciBleGNlcHRpb24gbWVzc2FnZVxuICBlcnIucGF0aCA9IGZpbGVuYW1lO1xuICBlcnIubWVzc2FnZSA9IChmaWxlbmFtZSB8fCAnZWpzJykgKyAnOidcbiAgICArIGxpbmVubyArICdcXG4nXG4gICAgKyBjb250ZXh0ICsgJ1xcblxcbidcbiAgICArIGVyci5tZXNzYWdlO1xuICBcbiAgdGhyb3cgZXJyO1xufVxudHJ5IHtcbnZhciBidWYgPSBbXTtcbndpdGggKGxvY2FscyB8fCB7fSkgeyAoZnVuY3Rpb24oKXsgXG4gYnVmLnB1c2goJzxkaXYgaWQ9XCJhMC13aWRnZXRcIiBjbGFzcz1cImEwLXdpZGdldFwiIGRpcj1cImF1dG9cIj5cXG4gICAgPGRpdiBjbGFzcz1cImEwLXNpZ25pbiBhMC1lbWJlZGRlZCAnLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTIsICBvcHRpb25zLnRoZW1lID8gKCdhMC10aGVtZS0nICsgb3B0aW9ucy50aGVtZSkgOiAnJyApKSwgJ1wiPlxcbiAgICAgICAgJyArIChmdW5jdGlvbigpe3ZhciBidWYgPSBbXTtcbiBidWYucHVzaCgnPGRpdiBpZD1cImEwLW9uZXN0ZXBcIiBjbGFzcz1cImEwLXBhbmVsIGEwLW9uZXN0ZXAgYTAtZnJlZS1zdWJzY3JpcHRpb25cIj5cXG4gICAgJyk7X19zdGFjay5saW5lbm89MjsgaWYgKCFsb2NhbHMuZW1iZWRkZWQpIHsgOyBidWYucHVzaCgnXFxuICAgIDxkaXYgY2xhc3M9XCJhMC1oZWFkZXIgYTAtdG9wLWhlYWRlclwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLWltYWdlICcsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NCwgICFvcHRpb25zLnNob3dJY29uID8gJ2EwLWhpZGUnIDogJycgKSksICdcIj5cXG4gICAgICAgICAgICA8aW1nIHNyYz1cIicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NSwgIG9wdGlvbnMuaWNvbiB8fCAnJyApKSwgJ1wiPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtYXZhdGFyICcsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NywgIG9wdGlvbnMuc2hvd0ljb24gPyAnYTAtaGlkZScgOiAnJyApKSwgJ1wiPlxcbiAgICAgICAgICAgIDxpIGNsYXNzPVwiYTAtYXZhdGFyLWd1ZXN0IGEwLWljb24tYnVkaWNvbi0yXCI+PC9pPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8aDE+JywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0xMCwgIGkxOG4udCgnc2lnbmluOnRpdGxlJykgKSksICc8L2gxPlxcbiAgICAgICAgPGgyIGNsYXNzPVwiYTAtZXJyb3IgYTAtaGlkZVwiPiZuYnNwOzwvaDI+XFxuICAgICAgICA8aDIgY2xhc3M9XCJhMC1zdWNjZXNzIGEwLWhpZGVcIj4mbmJzcDs8L2gyPlxcbiAgICAgICAgPGEgY2xhc3M9XCJhMC1jbG9zZSBhMC1pY29uLWJ1ZGljb24tMyAnLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTEzLCAgb3B0aW9ucy5zdGFuZGFsb25lID8gJ2EwLWhpZGUnIDogJycgKSksICc7XCI+XFxuXFxuICAgICAgICA8L2E+XFxuICAgIDwvZGl2PlxcbiAgICAnKTtfX3N0YWNrLmxpbmVubz0xNzsgfSA7IGJ1Zi5wdXNoKCdcXG5cXG5cXG4gICAgPGRpdiBjbGFzcz1cImEwLWxvYWRpbmcgYTAtbW9kZVwiPlxcbiAgICAgICAgJyk7X19zdGFjay5saW5lbm89MjE7IGlmIChsb2NhbHMuYWx0X3NwaW5uZXIpIHsgOyBidWYucHVzaCgnXFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtc3Bpbi1pbWdcIiBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6IHVybChcXCcnLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTIyLCAgbG9jYWxzLmFsdF9zcGlubmVyICkpLCAnXFwnKVwiPjwvZGl2PlxcbiAgICAgICAgJyk7X19zdGFjay5saW5lbm89MjM7IH0gZWxzZSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLXNwaW4tY29udGFpbmVyXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLXNwaW5uZXItY3NzXCI+XFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImEwLXNpZGUgYTAtc3BfbGVmdFwiPlxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImEwLWZpbGxcIj48L3NwYW4+XFxuICAgICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImEwLXNpZGUgYTAtc3BfcmlnaHRcIj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJhMC1maWxsXCI+PC9zcGFuPlxcbiAgICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1zcGluLW1lc3NhZ2VcIj5cXG4gICAgICAgICAgICAgICAgPHNwYW4+Jm5ic3A7PC9zcGFuPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICAnKTtfX3N0YWNrLmxpbmVubz0zNzsgfSA7IGJ1Zi5wdXNoKCdcXG4gICAgPC9kaXY+XFxuXFxuXFxuICAgICcgKyAoZnVuY3Rpb24oKXt2YXIgYnVmID0gW107XG4gYnVmLnB1c2goJzxkaXYgY2xhc3M9XCJhMC1sb2dnZWRpbiBhMC1tb2RlIGEwLWhpZGVcIj5cXG4gICAgPGZvcm0gbm92YWxpZGF0ZT5cXG4gICAgICAgIDxzcGFuIGNsYXNzPVwiYTAtY2VudGVyZWQgYTAtbGFzdC10aW1lXCI+JywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0zLCAgaTE4bi50KCdzaWduaW46cmV0dXJuVXNlckxhYmVsJykgKSksICc8L3NwYW4+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtc3RyYXRlZ3lcIj48L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhMC1lbWFpbFBhc3N3b3JkIGEwLWhpZGVcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtZW1haWxcIj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJhMC1lbWFpbC1yZWFkb25seVwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJlbWFpbFwiXFxuICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiZW1haWxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9XCJcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWRcXG4gICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0xMiwgIGkxOG4udCgnc2lnbmluOmVtYWlsUGxhY2Vob2xkZXInKSApKSwgJ1wiXFxuICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MTMsICBpMThuLnQoJ3NpZ25pbjplbWFpbFBsYWNlaG9sZGVyJykgKSksICdcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJhMC1oaWRlXCI+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLXBhc3N3b3JkXCI+XFxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImEwLXNhZC1wbGFjZWhvbGRlclwiPlxcbiAgICAgICAgICAgICAgICAgICcsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MTgsICBpMThuLnQoJ3NpZ25pbjpwYXNzd29yZFBsYWNlaG9sZGVyJykgKSksICdcXG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJwYXNzd29yZFwiIHR5cGU9XCJwYXNzd29yZFwiXFxuICAgICAgICAgICAgICAgICAgICAgICBhdXRvZm9jdXNcXG4gICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0yMiwgIGkxOG4udCgnc2lnbmluOnBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1wiXFxuICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MjMsICBpMThuLnQoJ3NpZ25pbjpwYXNzd29yZFBsYWNlaG9sZGVyJykgKSksICdcIj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtYWN0aW9uXCI+XFxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiYTAtcHJpbWFyeSBhMC1uZXh0XCIgc3R5bGU9XCJ3aWR0aDogMTAwJTtcIj4nLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTI2LCAgaTE4bi50KCdzaWduaW46YWN0aW9uJykgKSksICc8L2J1dHRvbj5cXG4gICAgICAgICAgICAgICAgJyk7X19zdGFjay5saW5lbm89Mjc7IGlmIChvcHRpb25zLnNob3dGb3Jnb3QgIT09IGZhbHNlKSB7IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJhMC1jcmVhdGUtYWNjb3VudFwiPlxcbiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCInLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTI5LCAgb3B0aW9ucy5mb3Jnb3RMaW5rIHx8ICdqYXZhc2NyaXB0OiB7fScgKSksICdcIlxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJhMC1mb3Jnb3QtcGFzc1wiPicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MzAsICBpMThuLnQoJ3NpZ25pbjpmb3Jnb3RUZXh0JykgKSksICc8L2E+XFxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxuICAgICAgICAgICAgICAgICcpO19fc3RhY2subGluZW5vPTMyOyB9IDsgYnVmLnB1c2goJ1xcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8c3BhbiBjbGFzcz1cImEwLWNlbnRlcmVkIGEwLWFsbFwiPicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MzUsICBpMThuLnQoJ3NpZ25pbjphbGwnKSApKSwgJzwvc3Bhbj5cXG4gICAgPC9mb3JtPlxcbjwvZGl2PicpO1xucmV0dXJuIGJ1Zi5qb2luKCcnKTt9KSgpICsgJ1xcbiAgICAnICsgKGZ1bmN0aW9uKCl7dmFyIGJ1ZiA9IFtdO1xuIGJ1Zi5wdXNoKCc8ZGl2IGNsYXNzPVwiYTAtbm90bG9nZ2VkaW4gYTAtbW9kZSBhMC1oaWRlXCI+XFxuICAgIDxmb3JtIG5vdmFsaWRhdGU+XFxuICAgICAgPGRpdiBjbGFzcz1cImEwLWNvbGxhcHNlLXNvY2lhbFwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLWljb25saXN0IGEwLWhpZGVcIj48cCBjbGFzcz1cImEwLWhpZGVcIj4nLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTQsICBpMThuLnQoJ3NpZ25pbjpvcicpICkpLCAnPC9wPjwvZGl2PlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLXNlcGFyYXRvciBhMC1oaWRlXCI+PHNwYW4+JywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz01LCAgaTE4bi50KCdzaWduaW46c2VwYXJhdG9yVGV4dCcpICkpLCAnPC9zcGFuPjwvZGl2PlxcbiAgICAgIDwvZGl2PlxcbiAgICAgIDxkaXYgY2xhc3M9XCJhMC1lbWFpbFBhc3N3b3JkXCI+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtaW5wdXRzXCI+XFxuICAgICAgICAgICcpO19fc3RhY2subGluZW5vPTk7IGlmIChvcHRpb25zLnNob3dFbWFpbCAhPT0gZmFsc2UpIHsgOyBidWYucHVzaCgnXFxuXFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1lbWFpbFwiPlxcbiAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImEwLXNpZ25pbl9lYXN5X2VtYWlsXCIgY2xhc3M9XCJhMC1zYWQtcGxhY2Vob2xkZXJcIj5cXG4gICAgICAgICAgICAgICAgJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0xMywgIGkxOG4udCgnc2lnbmluOmVtYWlsUGxhY2Vob2xkZXInKSApKSwgJ1xcbiAgICAgICAgICAgICAgPC9sYWJlbD5cXG5cXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1pbnB1dC1ib3hcIj5cXG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJhMC1pY29uLWJ1ZGljb24tMVwiPjwvaT5cXG5cXG4gICAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwiZW1haWxcIlxcbiAgICAgICAgICAgICAgICAgICAgIGlkPVwiYTAtc2lnbmluX2Vhc3lfZW1haWxcIlxcbiAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXFxuICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCInLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTIyLCAgaTE4bi50KCdzaWduaW46ZW1haWxQbGFjZWhvbGRlcicpICkpLCAnXCJcXG4gICAgICAgICAgICAgICAgICAgICB0aXRsZT1cIicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MjMsICBpMThuLnQoJ3NpZ25pbjplbWFpbFBsYWNlaG9sZGVyJykgKSksICdcIj5cXG4gICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgJyk7X19zdGFjay5saW5lbm89MjY7IH0gOyBidWYucHVzaCgnXFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1wYXNzd29yZCBhMC1oaWRlXCI+XFxuICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiYTAtc2lnbmluX2Vhc3lfcGFzc3dvcmRcIiBjbGFzcz1cImEwLXNhZC1wbGFjZWhvbGRlclwiPlxcbiAgICAgICAgICAgICAgICAnLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTI5LCAgaTE4bi50KCdzaWduaW46cGFzc3dvcmRQbGFjZWhvbGRlcicpICkpLCAnXFxuICAgICAgICAgICAgICA8L2xhYmVsPlxcblxcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWlucHV0LWJveFwiPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtYm94XCI+XFxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiYTAtaWNvbi1idWRpY29uXCI+PC9pPlxcblxcbiAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJwYXNzd29yZFwiXFxuICAgICAgICAgICAgICAgICAgICAgaWQ9XCJhMC1zaWduaW5fZWFzeV9wYXNzd29yZFwiXFxuICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcXG4gICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MzksICBpMThuLnQoJ3NpZ25pbjpwYXNzd29yZFBsYWNlaG9sZGVyJykgKSksICdcIlxcbiAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz00MCwgIGkxOG4udCgnc2lnbmluOnBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1wiPlxcbiAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgPC9kaXY+XFxuXFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwhLS0gLmEwLWlucHV0cyAtLT5cXG5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhMC1hY3Rpb25cIj5cXG4gICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cImEwLXByaW1hcnkgYTAtbmV4dFwiPicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NDksICBpMThuLnQoJ3NpZ25pbjphY3Rpb24nKSApKSwgJzwvYnV0dG9uPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1kYi1hY3Rpb25zXCI+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICA8L2Rpdj5cXG4gICAgPC9mb3JtPlxcbjwvZGl2PicpO1xucmV0dXJuIGJ1Zi5qb2luKCcnKTt9KSgpICsgJ1xcbiAgICAnICsgKGZ1bmN0aW9uKCl7dmFyIGJ1ZiA9IFtdO1xuIGJ1Zi5wdXNoKCc8ZGl2IGNsYXNzPVwiYTAtc2lnbnVwIGEwLW1vZGUgYTAtaGlkZVwiPlxcbiAgICA8Zm9ybSBub3ZhbGlkYXRlPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLWhlYWRlclwiPicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MywgIGkxOG4udCgnc2lnbnVwOmRlc2NyaXB0aW9uJykgKSksICc8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhMC1jb2xsYXBzZS1zb2NpYWwtc2lnbnVwXCI+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1pY29ubGlzdFwiPjxwIGNsYXNzPVwiYTAtaGlkZVwiPicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NSwgIGkxOG4udCgnc2lnbmluOm9yJykgKSksICc8L3A+PC9kaXY+XFxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1zZXBhcmF0b3JcIj48c3Bhbj4nLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTYsICBpMThuLnQoJ3NpZ25pbjpzZXBhcmF0b3JUZXh0JykgKSksICc8L3NwYW4+PC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhMC1oZWFkZXJcIj4nLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTgsICBpMThuLnQoJ3NpZ251cDpoZWFkZXJUZXh0JykgKSksICc8L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJhMC1lbWFpbFBhc3N3b3JkXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWlucHV0c1wiPlxcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWVtYWlsXCI+XFxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImEwLXNpZ251cF9lYXN5X2VtYWlsXCIgY2xhc3M9XCJhMC1zYWQtcGxhY2Vob2xkZXJcIj5cXG4gICAgICAgICAgICAgICAgICAgICcsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MTMsICBpMThuLnQoJ3NpZ251cDplbWFpbFBsYWNlaG9sZGVyJykgKSksICdcXG4gICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1pbnB1dC1ib3hcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiYTAtaWNvbi1idWRpY29uLTFcIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT1cImVtYWlsXCIgaWQ9XCJhMC1zaWdudXBfZWFzeV9lbWFpbFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJlbWFpbFwiIHZhbHVlPVwiXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCInLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTE5LCAgaTE4bi50KCdzaWdudXA6ZW1haWxQbGFjZWhvbGRlcicpICkpLCAnXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCInLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTIwLCAgaTE4bi50KCdzaWdudXA6ZW1haWxQbGFjZWhvbGRlcicpICkpLCAnXCI+XFxuICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1wYXNzd29yZFwiPlxcbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJhMC1zaWdudXBfZWFzeV9wYXNzd29yZFwiIGNsYXNzPVwiYTAtc2FkLXBsYWNlaG9sZGVyXCI+XFxuICAgICAgICAgICAgICAgICAgICAnLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTI1LCAgaTE4bi50KCdzaWdudXA6cGFzc3dvcmRQbGFjZWhvbGRlcicpICkpLCAnXFxuICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG5cXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtaW5wdXQtYm94XCI+XFxuICAgICAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiYTAtaWNvbi1idWRpY29uXCI+PC9pPlxcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJwYXNzd29yZFwiIGlkPVwiYTAtc2lnbnVwX2Vhc3lfcGFzc3dvcmRcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiIHZhbHVlPVwiXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MzMsICBpMThuLnQoJ3NpZ251cDpwYXNzd29yZFBsYWNlaG9sZGVyJykgKSksICdcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0zNCwgIGkxOG4udCgnc2lnbnVwOnBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1wiPlxcblxcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxcblxcbiAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWFjdGlvblwiPlxcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cImEwLXByaW1hcnkgYTAtbmV4dFwiPicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NDEsICBpMThuLnQoJ3NpZ251cDphY3Rpb24nKSApKSwgJzwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtb3B0aW9uc1wiPlxcbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImphdmFzY3JpcHQ6IHt9XCIgY2xhc3M9XCJhMC1jZW50ZXJlZCBhMC1jYW5jZWxcIj4nLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTQzLCAgaTE4bi50KCdzaWdudXA6Y2FuY2VsQWN0aW9uJykgKSksICc8L2E+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1zaWdudXAtZm9vdGVyXCI+XFxuICAgICAgICAgICAgJywgKF9fc3RhY2subGluZW5vPTQ3LCAgaTE4bi50KCdzaWdudXA6Zm9vdGVyVGV4dCcpICksICdcXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Zvcm0+XFxuPC9kaXY+Jyk7XG5yZXR1cm4gYnVmLmpvaW4oJycpO30pKCkgKyAnXFxuICAgICcgKyAoZnVuY3Rpb24oKXt2YXIgYnVmID0gW107XG4gYnVmLnB1c2goJzxkaXYgY2xhc3M9XCJhMC1yZXNldCBhMC1tb2RlIGEwLWhpZGVcIj5cXG4gICAgPGZvcm0gaWQ9XCJhMC1jaGFuZ2VfcGFzc3dvcmRcIiBjbGFzcz1cImZvcm0tcmVzZXQtcGFzc3dvcmRcIiBub3ZhbGlkYXRlPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImEwLWNvbGxhcHNlLXJlc2V0XCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWhlYWRlciBhMC1pbnN0cnVjdGlvbnNcIj4nLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTQsICBpMThuLnQoJ3Jlc2V0OmhlYWRlclRleHQnKSApKSwgJzwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtZW1haWxQYXNzd29yZFwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1pbnB1dHNcIj5cXG5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWVtYWlsXCI+XFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiYTAtcmVzZXRfZWFzeV9lbWFpbFwiIGNsYXNzPVwiYTAtc2FkLXBsYWNlaG9sZGVyXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICcsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MTEsICBpMThuLnQoJ3Jlc2V0OmVtYWlsUGxhY2Vob2xkZXInKSApKSwgJ1xcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1pbnB1dC1ib3hcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJhMC1pY29uLWJ1ZGljb24tMVwiPjwvaT5cXG4gICAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJlbWFpbFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJhMC1yZXNldF9lYXN5X2VtYWlsXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiZW1haWxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPVwiXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MTksICBpMThuLnQoJ3Jlc2V0OmVtYWlsUGxhY2Vob2xkZXInKSApKSwgJ1wiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCInLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTIwLCAgaTE4bi50KCdyZXNldDplbWFpbFBsYWNlaG9sZGVyJykgKSksICdcIj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLXBhc3N3b3JkXCI+XFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiYTAtcmVzZXRfZWFzeV9wYXNzd29yZFwiIGNsYXNzPVwiYTAtc2FkLXBsYWNlaG9sZGVyXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICcsIGVzY2FwZSgoX19zdGFjay5saW5lbm89MjUsICBpMThuLnQoJ3Jlc2V0OnBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1xcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1pbnB1dC1ib3hcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJhMC1pY29uLWJ1ZGljb25cIj48L2k+XFxuICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwicGFzc3dvcmRcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiYTAtcmVzZXRfZWFzeV9wYXNzd29yZFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT1cIlwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCInLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTMzLCAgaTE4bi50KCdyZXNldDpwYXNzd29yZFBsYWNlaG9sZGVyJykgKSksICdcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0zNCwgIGkxOG4udCgncmVzZXQ6cGFzc3dvcmRQbGFjZWhvbGRlcicpICkpLCAnXCI+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhMC1yZXBlYXRQYXNzd29yZFwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImEwLXJlc2V0X2Vhc3lfcmVwZWF0X3Bhc3N3b3JkXCIgY2xhc3M9XCJhMC1zYWQtcGxhY2Vob2xkZXJcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgJywgZXNjYXBlKChfX3N0YWNrLmxpbmVubz0zOSwgIGkxOG4udCgncmVzZXQ6cmVwZWF0UGFzc3dvcmRQbGFjZWhvbGRlcicpICkpLCAnXFxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImEwLWlucHV0LWJveFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImEwLWljb24tYnVkaWNvblwiPjwvaT5cXG4gICAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJyZXBlYXRfcGFzc3dvcmRcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiYTAtcmVzZXRfZWFzeV9yZXBlYXRfcGFzc3dvcmRcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJwYXNzd29yZFwiIHZhbHVlPVwiXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIicsIGVzY2FwZSgoX19zdGFjay5saW5lbm89NDYsICBpMThuLnQoJ3Jlc2V0OnJlcGVhdFBhc3N3b3JkUGxhY2Vob2xkZXInKSApKSwgJ1wiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCInLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTQ3LCAgaTE4bi50KCdyZXNldDpyZXBlYXRQYXNzd29yZFBsYWNlaG9sZGVyJykgKSksICdcIj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICA8L2Rpdj5cXG5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtYWN0aW9uXCI+XFxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiYTAtcHJpbWFyeSBhMC1uZXh0XCIgc3R5bGU9XCJ3aWR0aDogMTAwJTtcIj4nLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTU0LCAgaTE4bi50KCdyZXNldDphY3Rpb24nKSApKSwgJzwvYnV0dG9uPlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYTAtb3B0aW9uc1wiPlxcbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImphdmFzY3JpcHQ6IHt9XCIgY2xhc3M9XCJhMC1jZW50ZXJlZCBhMC1jYW5jZWxcIj4nLCBlc2NhcGUoKF9fc3RhY2subGluZW5vPTU2LCAgaTE4bi50KCdyZXNldDpjYW5jZWxBY3Rpb24nKSApKSwgJzwvYT5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9mb3JtPlxcbjwvZGl2PicpO1xucmV0dXJuIGJ1Zi5qb2luKCcnKTt9KSgpICsgJ1xcblxcbiAgICA8ZGl2IGNsYXNzPVxcJ2EwLWZvb3RlclxcJz5cXG5cXG4gICAgICAgIDxhIGhyZWY9XCJodHRwOi8vYXV0aDAuY29tXCIgdGFyZ2V0PVwiX25ld1wiIGNsYXNzPVwiYTAtbG9nb1wiPlxcbiAgICAgICAgICAgIDxpIGNsYXNzPVwiYTAtaWNvbi1iYWRnZVwiPjwvaT5cXG4gICAgICAgIDwvYT5cXG4gICAgPC9kaXY+XFxuPC9kaXY+Jyk7XG5yZXR1cm4gYnVmLmpvaW4oJycpO30pKCkgKyAnXFxuICAgIDwvZGl2PlxcbjwvZGl2PlxcbicpOyB9KSgpO1xufSBcbnJldHVybiBidWYuam9pbignJyk7XG59IGNhdGNoIChlcnIpIHtcbiAgcmV0aHJvdyhlcnIsIF9fc3RhY2suaW5wdXQsIF9fc3RhY2suZmlsZW5hbWUsIF9fc3RhY2subGluZW5vKTtcbn1cbn0pIiwidmFyIGdsb2JhbD10eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge307cmVxdWlyZSgnLi4vbGliL2luc2VydC1jc3MnKTtcblxudmFyIEF1dGgwICAgICAgID0gcmVxdWlyZSgnYXV0aDAtanMnKTtcbnZhciBfICAgICAgICAgICA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcbnZhciBzdHJhdGVnaWVzICA9IHJlcXVpcmUoJy4vanMvc3RyYXRlZ2llcycpO1xudmFyIG1haW5UbXBsICAgID0gcmVxdWlyZSgnLi9odG1sL21haW4uZWpzJyk7XG52YXIgZW1iVG1wbCAgICAgPSByZXF1aXJlKCcuL2h0bWwvbWFpbl9lbWJlZGRlZC5lanMnKTtcbnZhciBidXR0b25UbXBsICA9IHJlcXVpcmUoJy4vaHRtbC9idXR0b24uZWpzJyk7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbnZhciBsb2dnZWRpbkJ0blRtcGwgICAgICA9IHJlcXVpcmUoJy4vaHRtbC9sb2dnZWRpbl9idXR0b24uZWpzJyk7XG52YXIgbG9naW5BY3Rpb25zVG1wbCAgICAgPSByZXF1aXJlKCcuL2h0bWwvbG9naW5fYWN0aW9ucy5lanMnKTtcbnZhciBpMThuICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4uL2kxOG4nKTtcblxudmFyIGVtYWlsX3BhcnNlciA9IC9eKChbXjw+KClbXFxdXFxcXC4sOzpcXHNAXFxcIl0rKFxcLltePD4oKVtcXF1cXFxcLiw7Olxcc0BcXFwiXSspKil8KFxcXCIuK1xcXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXF0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvO1xuXG52YXIgc2lnbnVwID0gcmVxdWlyZSgnLi9tb2Rlcy9zaWdudXAnKTtcbnZhciByZXNldCA9IHJlcXVpcmUoJy4vbW9kZXMvcmVzZXQnKTtcblxudmFyICQgPSByZXF1aXJlKCcuL2pzL2JvbnpvX3F3ZXJ5Jyk7XG52YXIgaXNfc21hbGxfc2NyZWVuID0gcmVxdWlyZSgnLi9qcy9pc19zbWFsbF9zY3JlZW4nKTtcbnZhciBnZXRfdmlld3BvcnQgPSByZXF1aXJlKCcuL2pzL2dldF92aWV3cG9ydCcpO1xuXG4vL2Jyb3dzZXIgaW5jb21wYXRpYmlsaXRpZXMgZml4ZXNcbnZhciBwbGFjZWhvbGRlclN1cHBvcnRlZCA9IHJlcXVpcmUoJy4vcGYvcGxhY2Vob2xkZXJTdXBwb3J0ZWQnKTtcbnZhciBvYmplY3RfY3JlYXRlID0gcmVxdWlyZSgnLi9wZi9PYmplY3QuY3JlYXRlJyk7XG52YXIgdHJhbnNpdGlvbl9lbmQgPSByZXF1aXJlKCcuL3BmL3RyYW5zaXRpb25fZW5kJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3BmL3V0aWxzJyk7XG52YXIgaGFzX2FuaW1hdGlvbnMgPSByZXF1aXJlKCcuL3BmL2hhc19hbmltYXRpb25zJyk7XG5cbmZ1bmN0aW9uIGhhc1RyYW5zaXRpb25zIChlbCkge1xuICAvL2RlZmVyIHRoaXMuIHByZXZlbnQgZXJyb3JzIGlmIHRoZSBzY3JpcHQgaXMgcGxhY2VkIG9uIHRoZSA8aGVhZD5cbiAgcmV0dXJuIHJlcXVpcmUoJ2hhcy10cmFuc2l0aW9ucycpKGVsKTtcbn1cblxuZnVuY3Rpb24gc2V0Zm9jdXMgKGVsKSB7XG4gIGlmIChpc19zbWFsbF9zY3JlZW4oKSkgcmV0dXJuO1xuICB0cnl7IGVsLmZvY3VzKCk7IH0gY2F0Y2goZXIpIHt9XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvbl9zaGFrZSgpIHtcbiAgJCgnLmEwLXBhbmVsJylcbiAgICAucmVtb3ZlQ2xhc3MoJ2EwLXN3aW5nJylcbiAgICAuYWRkQ2xhc3MoJ2EwLWVycm9ycycpXG4gICAgLmFkZENsYXNzKCdhMC1hbmltYXRlZCBhMC1zaGFrZScpO1xufVxuXG5mdW5jdGlvbiBhbmltYXRpb25fc2hha2VfcmVzZXQoKSB7XG4gICQoJy5hMC1hbmltYXRlZCcpLnJlbW92ZUNsYXNzKCdhMC1hbmltYXRlZCcpO1xuICAkKCcuYTAtc2hha2UnKS5yZW1vdmVDbGFzcygnYTAtc2hha2UnKTtcbn1cblxuZnVuY3Rpb24gQXV0aDBXaWRnZXQgKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEF1dGgwV2lkZ2V0KSkge1xuICAgIHJldHVybiBuZXcgQXV0aDBXaWRnZXQob3B0aW9ucyk7XG4gIH1cblxuICB0aGlzLl9kaWN0ID0gaTE4bi5nZXREaWN0KG9wdGlvbnMuZGljdCk7XG5cbiAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gIHRoaXMuX3N0cmF0ZWdpZXMgPSBzdHJhdGVnaWVzO1xuICB0aGlzLl9hdXRoMCA9IG5ldyBBdXRoMCh7XG4gICAgY2xpZW50SUQ6ICAgICB0aGlzLl9vcHRpb25zLmNsaWVudElELFxuICAgIGNhbGxiYWNrVVJMOiAgdGhpcy5fb3B0aW9ucy5jYWxsYmFja1VSTCxcbiAgICBkb21haW46ICAgICAgIHRoaXMuX29wdGlvbnMuZG9tYWluLFxuICAgIGNhbGxiYWNrT25Mb2NhdGlvbkhhc2g6IHRoaXMuX29wdGlvbnMuY2FsbGJhY2tPbkxvY2F0aW9uSGFzaFxuICB9KTtcblxuICBpZiAoIXRoaXMuX29wdGlvbnMuYXNzZXRzVXJsKSB7XG4gICAgLy8gdXNlIGRvbWFpbiBhcyBhc3NldHNVcmwgaWYgZG9tYWluIGlzIG5vdCAqLmF1dGgwLmNvbVxuICAgIHRoaXMuX29wdGlvbnMuYXNzZXRzVXJsID0gdGhpcy5faXNBdXRoMERvbWFpbigpID9cbiAgICAgICdodHRwczovL3MzLmFtYXpvbmF3cy5jb20vYXNzZXRzLmF1dGgwLmNvbS8nIDpcbiAgICAgICdodHRwczovLycgKyB0aGlzLl9vcHRpb25zLmRvbWFpbiArICcvJztcbiAgfVxuXG4gIGlmICghdGhpcy5fb3B0aW9ucy5jZG4pIHtcbiAgICAvLyB1c2UgZG9tYWluIGFzIGNkbiBpZiBkb21haW4gaXMgbm90ICouYXV0aDAuY29tXG4gICAgdGhpcy5fb3B0aW9ucy5jZG4gPSB0aGlzLl9pc0F1dGgwRG9tYWluKCkgP1xuICAgICAgJ2h0dHBzOi8vZDE5cDR6ZW1jeWNtN2EuY2xvdWRmcm9udC5uZXQvdzIvJyA6XG4gICAgICAnaHR0cHM6Ly8nICsgdGhpcy5fb3B0aW9ucy5kb21haW4gKyAnL3cyLyc7XG4gIH1cblxuICB0aGlzLl9nZXRBcHAoKTtcblxuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xufVxuXG5BdXRoMFdpZGdldC5wcm90b3R5cGUgPSBvYmplY3RfY3JlYXRlKEV2ZW50RW1pdHRlci5wcm90b3R5cGUpO1xuXG4vLyBoZWxwZXIgbWV0aG9kc1xuQXV0aDBXaWRnZXQucHJvdG90eXBlLl9nZXRBcHAgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgZ2xvYmFsLndpbmRvdy5BdXRoMCA9IGdsb2JhbC53aW5kb3cuQXV0aDAgfHwge307XG4gIGdsb2JhbC53aW5kb3cuQXV0aDAuc2V0Q2xpZW50ID0gZnVuY3Rpb24gKGNsaWVudCkge1xuICAgIHNlbGYuX2NsaWVudCA9IGNsaWVudDtcbiAgICBzZWxmLmVtaXQoJ2NsaWVudF9pbml0aWFsaXplZCcsIGNsaWVudCk7XG4gIH07XG5cbiAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICBzY3JpcHQuc3JjID0gdGhpcy5fb3B0aW9ucy5hc3NldHNVcmwgK1xuICAgICAgICAgICAgICAgJ2NsaWVudC8nICsgdGhpcy5fb3B0aW9ucy5jbGllbnRJRCArICcuanMnICtcbiAgICAgICAgICAgICAgICc/dCcgKyAoK25ldyBEYXRlKTsgLy9EYXRlLm5vdygpIGRvZXNudCB3b3JrIG9uIGllLlxuXG4gIHZhciBmaXJzdFNjcmlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcbiAgZmlyc3RTY3JpcHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoc2NyaXB0LCBmaXJzdFNjcmlwdCk7XG59O1xuXG5BdXRoMFdpZGdldC5wcm90b3R5cGUuX2lzQXV0aDBEb21haW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBkb21haW5VcmwgPSB1dGlscy5wYXJzZVVybCgnaHR0cHM6Ly8nICsgdGhpcy5fb3B0aW9ucy5kb21haW4pO1xuICByZXR1cm4gdXRpbHMuZW5kc1dpdGgoZG9tYWluVXJsLmhvc3RuYW1lLCAnLmF1dGgwLmNvbScpO1xufTtcblxuQXV0aDBXaWRnZXQucHJvdG90eXBlLl9pZ25vcmVFbWFpbFZhbGlkYXRpb25zID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5hdHRyKCd0eXBlJykgIT09ICdlbWFpbCc7XG59O1xuXG5BdXRoMFdpZGdldC5wcm90b3R5cGUuX3NldEN1c3RvbVZhbGlkaXR5ID0gZnVuY3Rpb24gKGlucHV0LCBtZXNzYWdlKSB7XG4gIGlmICghaW5wdXQpIHJldHVybjtcbiAgaWYgKGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KSB7XG4gICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkobWVzc2FnZSk7XG4gIH1cbiAgLy8gVE9ETzogc3VwcG9ydCBzZXRDdXN0b21WYWxpZGl0eSBpbiBJRTlcbn07XG5cbkF1dGgwV2lkZ2V0LnByb3RvdHlwZS5fc2hvd0Vycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG5cbiAgLy8gaWYgbm8gZXJyb3IsIGNsZWFuXG4gIGlmICghZXJyb3IpIHtcbiAgICAvLyByZXNldCBlcnJvcnNcbiAgICAkKCcuYTAtZXJyb3InKS5odG1sKCcnKS5hZGRDbGFzcygnYTAtaGlkZScpO1xuICAgICQoJy5hMC1lcnJvcnMnKS5yZW1vdmVDbGFzcygnYTAtZXJyb3JzJyk7XG4gICAgLy8gcmVzZXQgYW5pbWF0aW9uc1xuICAgIHJldHVybiBhbmltYXRpb25fc2hha2VfcmVzZXQoKTtcbiAgfVxuXG4gIC8vIGVsc2UsIHNob3cgYW5kIHJlbmRlciBlcnJvciBtZXNzYWdlXG4gIHNldFRpbWVvdXQoYW5pbWF0aW9uX3NoYWtlLCAwKTtcblxuICAkKCcuYTAtc3VjY2VzcycpLmFkZENsYXNzKCdhMC1oaWRlJyk7XG4gICQoJy5hMC1lcnJvcicpLmh0bWwoZXJyb3IpLnJlbW92ZUNsYXNzKCdhMC1oaWRlJyk7XG4gIHRoaXMuZW1pdCgnX2Vycm9yJywgZXJyb3IpO1xufTtcblxuQXV0aDBXaWRnZXQucHJvdG90eXBlLl9zaG93U3VjY2VzcyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gIC8vIGlmIG5vIG1lc3NhZ2UsIGNsZWFuIHN1Y2Nlc3Mgc3BhblxuICBpZiAoIW1lc3NhZ2UpIHJldHVybiAkKCcuYTAtc3VjY2VzcycpLmh0bWwoJycpLmFkZENsYXNzKCdhMC1oaWRlJyk7XG4gIC8vIGVsc2UsIHNob3cgYW5kIHJlbmRlciBzdWNjZXNzIG1lc3NhZ2VcbiAgJCgnLmEwLWVycm9yJykuYWRkQ2xhc3MoJ2EwLWhpZGUnKTtcbiAgJCgnLmEwLXN1Y2Nlc3MnKS5odG1sKG1lc3NhZ2UpLnJlbW92ZUNsYXNzKCdhMC1oaWRlJyk7XG59O1xuXG5BdXRoMFdpZGdldC5wcm90b3R5cGUuX2ZvY3VzRXJyb3IgPSBmdW5jdGlvbihpbnB1dCwgbWVzc2FnZSkge1xuICAvLyByZW1vdmUgYWxsIGBfZm9jdXNFcnJvcmAgcmVzb3VyY2VzXG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIC8vIHJlc2V0IGVycm9yc1xuICAgICQoJy5hMC1lcnJvcnMnKS5yZW1vdmVDbGFzcygnYTAtZXJyb3JzJyk7XG4gICAgJCgnLmEwLWVycm9yLWlucHV0JykucmVtb3ZlQ2xhc3MoJ2EwLWVycm9yLWlucHV0Jyk7XG4gICAgJCgnLmEwLWVycm9yLW1lc3NhZ2UnKS5yZW1vdmUoKTtcbiAgICAvLyByZXNldCBhbmltYXRpb25zXG4gICAgcmV0dXJuIGFuaW1hdGlvbl9zaGFrZV9yZXNldCgpOztcbiAgfVxuXG4gIC8vIGFuaW1hdGlvblxuICBzZXRUaW1lb3V0KGFuaW1hdGlvbl9zaGFrZSwgMCk7XG5cbiAgaW5wdXRcbiAgICAucGFyZW50KClcbiAgICAuYWRkQ2xhc3MoJ2EwLWVycm9yLWlucHV0JylcblxuICBpZiAoIW1lc3NhZ2UpIHJldHVybjtcbiAgaW5wdXQucGFyZW50KClcbiAgICAuYXBwZW5kKCQuY3JlYXRlKCc8c3BhbiBjbGFzcz1cImEwLWVycm9yLW1lc3NhZ2VcIj4nICsgbWVzc2FnZSArICc8L3NwYW4+JykpO1xufTtcblxuQXV0aDBXaWRnZXQucHJvdG90eXBlLl9zZXRUaXRsZSA9IGZ1bmN0aW9uKHRpdGxlKSB7XG4gIC8vICQoJy5hMC1lcnJvcicpLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gIC8vICQoJy5hMC1zdWNjZXNzJykuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgJCgnaDEnKS5odG1sKHRpdGxlKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XG59O1xuXG5BdXRoMFdpZGdldC5wcm90b3R5cGUuX2FyZVRoZXJlQW55U29jaWFsQ29ubiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhXy5maW5kV2hlcmUodGhpcy5fY2xpZW50LnN0cmF0ZWdpZXMsIHtzb2NpYWw6IHRydWV9KTtcbn07XG5cbkF1dGgwV2lkZ2V0LnByb3RvdHlwZS5fYXJlVGhlcmVBbnlFbnRlcnByaXNlT3JEYkNvbm4gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICEhXy5maW5kV2hlcmUodGhpcy5fY2xpZW50LnN0cmF0ZWdpZXMsIHtzb2NpYWw6IGZhbHNlfSk7XG59O1xuXG5BdXRoMFdpZGdldC5wcm90b3R5cGUuX2FyZVRoZXJlQW55RGJDb25uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhIV8uZmluZFdoZXJlKHRoaXMuX2NsaWVudC5zdHJhdGVnaWVzLCB7dXNlckFuZFBhc3M6IHRydWV9KTtcbn07XG5cbkF1dGgwV2lkZ2V0LnByb3RvdHlwZS5faXNFbnRlcnByaXNlQ29ubmVjdGlvbiA9IGZ1bmN0aW9uIChlbWFpbCwgb3V0cHV0KSB7XG4gIHZhciBlbWFpbE0gPSBlbWFpbF9wYXJzZXIuZXhlYyhlbWFpbC50b0xvd2VyQ2FzZSgpKTtcblxuICBpZiAoIWVtYWlsTSkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBlbWFpbF9kb21haW4gPSBlbWFpbE0uc2xpY2UoLTIpWzBdO1xuXG4gIHZhciBjb25uID0gXy5jaGFpbih0aGlzLl9jbGllbnQuc3RyYXRlZ2llcylcbiAgICAgICAgICAgICAgLndoZXJlKHt1c2VyQW5kUGFzczogdW5kZWZpbmVkfSlcbiAgICAgICAgICAgICAgLnBsdWNrKCdjb25uZWN0aW9ucycpXG4gICAgICAgICAgICAgIC5mbGF0dGVuKClcbiAgICAgICAgICAgICAgLmZpbmRXaGVyZSh7ZG9tYWluOiBlbWFpbF9kb21haW59KVxuICAgICAgICAgICAgICAudmFsdWUoKTtcblxuICBpZiAoY29ubiAmJiBvdXRwdXQpIHtcbiAgICBvdXRwdXQuZG9tYWluID0gY29ubi5kb21haW47XG4gIH1cblxuICByZXR1cm4gISFjb25uO1xufTtcblxuQXV0aDBXaWRnZXQucHJvdG90eXBlLl9nZXRDb25maWd1cmVkU3RyYXRlZ3kgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gXy5maW5kV2hlcmUodGhpcy5fY2xpZW50LnN0cmF0ZWdpZXMsIHtuYW1lOiBuYW1lfSk7XG59O1xuXG5BdXRoMFdpZGdldC5wcm90b3R5cGUuX2dldFN0cmF0ZWd5ID0gZnVuY3Rpb24gKGNvbm5OYW1lKSB7XG4gIHJldHVybiBfLmNoYWluKHRoaXMuX2NsaWVudC5zdHJhdGVnaWVzKVxuICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgIHJldHVybiBfLmZpbmRXaGVyZShzLmNvbm5lY3Rpb25zLCB7bmFtZTogY29ubk5hbWV9KTtcbiAgICAgICAgICB9KS52YWx1ZSgpWzBdO1xufTtcblxuQXV0aDBXaWRnZXQucHJvdG90eXBlLl9nZXRBdXRoMENvbm5lY3Rpb24gPSBmdW5jdGlvbih1c2VyTmFtZSkge1xuICAvLyBpZiBzcGVjaWZpZWQsIHVzZSBpdCwgb3RoZXJ3aXNlIHJldHVybiBmaXJzdFxuICBpZiAodGhpcy5fc2lnbmluT3B0aW9uc1sndXNlclB3ZENvbm5lY3Rpb25OYW1lJ10pIHtcbiAgICByZXR1cm4gXy5jaGFpbih0aGlzLl9hdXRoMFN0cmF0ZWdpZXMpXG4gICAgICAgICAgICAucGx1Y2soJ2Nvbm5lY3Rpb25zJylcbiAgICAgICAgICAgIC5mbGF0dGVuKClcbiAgICAgICAgICAgIC5maW5kV2hlcmUoe25hbWU6IHRoaXMuX3NpZ25pbk9wdGlvbnNbJ3VzZXJQd2RDb25uZWN0aW9uTmFtZSddfSlcbiAgICAgICAgICAgIC52YWx1ZSgpO1xuICB9XG5cbiAgdmFyIGRvbWFpbiA9IHVzZXJOYW1lICYmIH51c2VyTmFtZS5pbmRleE9mKCdAJykgPyB1c2VyTmFtZS5zcGxpdCgnQCcpWzFdIDogJyc7XG5cbiAgaWYgKHVzZXJOYW1lICYmIGRvbWFpbiAmJiB0aGlzLl9jbGllbnQuc3RyYXRlZ2llcykge1xuICAgIC8vdGhlcmUgaXMgc3RpbGwgYSBjaGFuY2UgdGhhdCB0aGUgY29ubmVjdGlvbiBtaWdodCBiZVxuICAgIC8vYWRsZGFwIGFuZCB3aXRoIGRvbWFpblxuICAgIHZhciBjb25uID0gXy5jaGFpbih0aGlzLl9jbGllbnQuc3RyYXRlZ2llcylcbiAgICAgICAgICAgICAgICAucGx1Y2soJ2Nvbm5lY3Rpb25zJylcbiAgICAgICAgICAgICAgICAuZmxhdHRlbigpXG4gICAgICAgICAgICAgICAgLmZpbmRXaGVyZSh7ZG9tYWluOiBkb21haW59KVxuICAgICAgICAgICAgICAgIC52YWx1ZSgpO1xuICAgIGlmIChjb25uKSB7XG4gICAgICByZXR1cm4gY29ubjtcbiAgICB9XG4gIH1cblxuICAvLyBCeSBkZWZhdWx0LCBpZiBleGlzdHMsIHJldHVybiBhdXRoMCBjb25uZWN0aW9uIChkYi1jb25uKSBvciBmaXJzdFxuICB2YXIgZGVmYXVsdFN0cmF0ZWd5ID0gXy5maW5kV2hlcmUodGhpcy5fYXV0aDBTdHJhdGVnaWVzLCB7IG5hbWU6ICdhdXRoMCcgfSk7XG4gIGRlZmF1bHRTdHJhdGVneSA9IGRlZmF1bHRTdHJhdGVneSB8fMKgKHRoaXMuX2F1dGgwU3RyYXRlZ2llcy5sZW5ndGggPiAwID8gdGhpcy5fYXV0aDBTdHJhdGVnaWVzWzBdIDogbnVsbCk7XG5cbiAgcmV0dXJuIGRlZmF1bHRTdHJhdGVneSAmJiBkZWZhdWx0U3RyYXRlZ3kuY29ubmVjdGlvbnMubGVuZ3RoID4gMCA/XG4gICAgICAgICBkZWZhdWx0U3RyYXRlZ3kuY29ubmVjdGlvbnNbMF0gOiBudWxsO1xufTtcblxuQXV0aDBXaWRnZXQucHJvdG90eXBlLl9zaG93T3JIaWRlUGFzc3dvcmQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBtYWlsRmllbGQgPSAkKCcuYTAtbm90bG9nZ2VkaW4gLmEwLWVtYWlsIGlucHV0Jyk7XG4gIHZhciBwd2RGaWVsZCAgPSAkKCcuYTAtbm90bG9nZ2VkaW4gLmEwLXBhc3N3b3JkIGlucHV0JykuZmlyc3QoKTtcblxuICB2YXIgaXNFbnRlcnByaXNlQ29ubmVjdGlvbiA9IHRoaXMuX2lzRW50ZXJwcmlzZUNvbm5lY3Rpb24obWFpbEZpZWxkLnZhbCgpIHx8ICcnKTtcblxuICBpZiAoaXNFbnRlcnByaXNlQ29ubmVjdGlvbikge1xuICAgIHB3ZEZpZWxkLmF0dHIoJ2Rpc2FibGVkJywgdHJ1ZSk7XG4gICAgLy8gcHdkRmllbGQucmVtb3ZlQXR0cigncmVxdWlyZWQnKTtcbiAgfSBlbHNlIHtcbiAgICBwd2RGaWVsZC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgIC8vIHB3ZEZpZWxkLmF0dHIoJ3JlcXVpcmVkJywgdHJ1ZSk7XG4gIH1cbn07XG5cbkF1dGgwV2lkZ2V0LnByb3RvdHlwZS5faGlkZVNpZ25JbiA9IGZ1bmN0aW9uIChjYikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMuX2N1cnJlbnRQYW5lID0gbnVsbDtcbiAgdGhpcy5fbm9kZSA9IG51bGw7XG5cbiAgJCgnZGl2LmEwLW92ZXJsYXknKS5yZW1vdmVDbGFzcygnYTAtYWN0aXZlJyk7XG5cbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgJCgpLnJlbW92ZUNsYXNzKCdhMC1tb2RlLXNpZ25pbicpO1xuICAgICQoKS5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgIGlmIChjYikgY2IoKTtcbiAgICBzZWxmLmVtaXQoJ2Nsb3NlZCcpO1xuICB9LCA1MDApO1xuXG4gIHJldHVybiBzZWxmO1xufTtcblxuQXV0aDBXaWRnZXQucHJvdG90eXBlLl9nZXRBY3RpdmVMb2dpblZpZXcgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNvbnRhaW5lciA9IHRoaXMuX2N1cnJlbnRQYW5lLmhhc0NsYXNzKCdhMC1sb2dnZWRpbicpID9cbiAgICAgICAgICAgICAgICAgICAgJCgnLmEwLWxvZ2dlZGluJykgOlxuICAgICAgICAgICAgICAgICAgICAkKCcuYTAtbm90bG9nZ2VkaW4nKTtcbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn07XG5cbkF1dGgwV2lkZ2V0LnByb3RvdHlwZS5fc2hvd1NpZ25VcEV4cGVyaWVuY2UgPSBmdW5jdGlvbigpIHtcbiAgc2lnbnVwLmJpbmQodGhpcyk7XG4gIHRoaXMuX3NldExvZ2luVmlldyh7IG1vZGU6ICdzaWdudXAnIH0pO1xufTtcblxuQXV0aDBXaWRnZXQucHJvdG90eXBlLl9zaG93UmVzZXRFeHBlcmllbmNlID0gZnVuY3Rpb24oKSB7XG4gIHJlc2V0LmJpbmQodGhpcyk7XG4gIHRoaXMuX3NldExvZ2luVmlldyh7IG1vZGU6ICdyZXNldCcgfSk7XG59O1xuXG5BdXRoMFdpZGdldC5wcm90b3R5cGUuX3Nob3dMb2FkaW5nRXhwZXJpZW5jZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5fb3BlbldpdGgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2V0TG9naW5WaWV3KHsgbW9kZTogJ2xvYWRpbmcnLCB0aXRsZTogdGhpcy5fb3BlbldpdGgudG9Mb3dlckNhc2UoKSB9KTtcbiAgfVxuICB0aGlzLl9zZXRMb2dpblZpZXcoeyBtb2RlOiAnbG9hZGluZycgfSk7XG59O1xuXG5BdXRoMFdpZGdldC5wcm90b3R5cGUuX3RyYW5zaXRpb25Nb2RlID0gZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICAkKCcuYTAtbG9hZGluZycpLnJlbW92ZUNsYXNzKCdhMC13aXRoLW1lc3NhZ2UnKTtcblxuICBpZigoIXNlbGYuX2N1cnJlbnRQYW5lIHx8IHNlbGYuX2N1cnJlbnRQYW5lLmhhc0NsYXNzKCdhMC1sb2FkaW5nJykpICYmIG9wdGlvbnMubW9kZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgc2VsZi5fc2V0VGl0bGUob3B0aW9ucy50aXRsZSA/IHRoaXMuX2RpY3QudChvcHRpb25zLnRpdGxlICsgJzp0aXRsZScpIDogdGhpcy5fZGljdC50KCdzaWduaW46dGl0bGUnKSk7XG4gICAgc2VsZi5fY3VycmVudFBhbmUgPSAkKCcuYTAtbG9hZGluZycpO1xuICAgIHNlbGYuZW1pdCgndHJhbnNpdGlvbl9tb2RlJywgJ2xvYWRpbmcnKTtcbiAgICBzZWxmLmVtaXQoJ2xvYWRpbmdfcmVhZHknKTtcbiAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgc2VsZi5fY3VycmVudFBhbmUpO1xuICB9XG5cbiAgc2VsZi5fY3VycmVudFBhbmUgPSBzZWxmLl9jdXJyZW50UGFuZSB8fCAkKCcuYTAtbG9hZGluZycpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB2YXIgY3VycmVudEVtYWlsID0gJCgnLmEwLWVtYWlsIGlucHV0Jywgc2VsZi5fY3VycmVudFBhbmUpLnZhbCgpO1xuICB2YXIgbW9kZSA9IG9wdGlvbnMubW9kZSB8fCBudWxsO1xuICB2YXIgbmV3UGFuZSwgdGl0bGU7XG5cbiAgc3dpdGNoIChtb2RlKSB7XG4gICAgY2FzZSBudWxsOlxuICAgICAgdGl0bGUgPSB0aGlzLl9kaWN0LnQoJ3NpZ25pbjp0aXRsZScpO1xuICAgICAgbmV3UGFuZSA9ICQob3B0aW9ucy5pc1JldHVybmluZ1VzZXIgPyAnLmEwLWxvZ2dlZGluJyA6ICcuYTAtbm90bG9nZ2VkaW4nKTtcbiAgICAgIGlmIChzZWxmLl9jdXJyZW50UGFuZS5oYXNDbGFzcygnYTAtcmVzZXQnKSB8fCBzZWxmLl9jdXJyZW50UGFuZS5oYXNDbGFzcygnYTAtbG9hZGluZycpKSB7XG4gICAgICAgIC8vIHJlc2V0IHBhc3N3b3JkIGZpZWxkXG4gICAgICAgICQoJy5hMC1wYXNzd29yZCBpbnB1dCcsIG5ld1BhbmUpLnZhbCgnJyk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgIGNhc2UgJ2xvYWRpbmcnOlxuICAgICAgdGl0bGUgPSBvcHRpb25zLnRpdGxlID8gdGhpcy5fZGljdC50KG9wdGlvbnMudGl0bGUgKyAnOnRpdGxlJykgOiB0aGlzLl9kaWN0LnQoJ3NpZ25pbjp0aXRsZScpO1xuICAgICAgbmV3UGFuZSA9ICQoJy5hMC1sb2FkaW5nJykuZmlyc3QoKTtcblxuICAgICAgLy8gc2V0IGxvYWRpbmcgbWVzc2FnZVxuICAgICAgaWYgKG9wdGlvbnMubWVzc2FnZSkge1xuICAgICAgICBuZXdQYW5lLmFkZENsYXNzKCdhMC13aXRoLW1lc3NhZ2UnKTtcbiAgICAgICAgJCgnLmEwLXNwaW4tbWVzc2FnZSBzcGFuJywgbmV3UGFuZSkuaHRtbChvcHRpb25zLm1lc3NhZ2UucmVwbGFjZSgnLScsICcgJykpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc2lnbnVwJzpcbiAgICBjYXNlICdyZXNldCc6XG4gICAgICB0aXRsZSA9IHRoaXMuX2RpY3QudChvcHRpb25zLm1vZGUgKyAnOnRpdGxlJyk7XG4gICAgICBuZXdQYW5lID0gJCgnLmEwLScgKyBvcHRpb25zLm1vZGUpLmZpcnN0KCk7XG4gICAgICAkKCcuYTAtZW1haWwgaW5wdXQnLCBuZXdQYW5lKS52YWwoY3VycmVudEVtYWlsIHx8ICcnKTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgaWYgKCFoYXNUcmFuc2l0aW9ucygpIHx8ICFoYXNUcmFuc2l0aW9ucygkKCcjYTAtb25lc3RlcCcpWzBdKSl7XG4gICAgc2VsZi5fc2V0VGl0bGUodGl0bGUpO1xuICAgIHNlbGYuX2N1cnJlbnRQYW5lLnRvZ2dsZUNsYXNzKCdhMC1oaWRlJywgdHJ1ZSk7XG4gICAgc2VsZi5fY3VycmVudFBhbmUgPSBuZXdQYW5lLnRvZ2dsZUNsYXNzKCdhMC1oaWRlJywgZmFsc2UpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5lbWl0KCd0cmFuc2l0aW9uX21vZGUnLCBtb2RlIHx8ICdzaWduaW4nKTtcbiAgICAgIHNlbGYuZW1pdCgobW9kZSB8fCAnc2lnbmluJykgKyAnX3JlYWR5Jyk7XG4gICAgfSwgMCk7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHNlbGYuX2N1cnJlbnRQYW5lKTtcbiAgfVxuXG4gIHZhciBwYW5lX2NvbnRhaW5lciA9ICQoJy5hMC1vbmVzdGVwJyk7XG4gIHZhciBvcmlnaW5hbF9oZWlnaHQgPSBwYW5lX2NvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ2EwLWRpc2FibGUtdHJhbnNpdGlvbicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5jc3MoJ2hlaWdodCcsICdhdXRvJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmRpbSgpLmhlaWdodDtcblxuICBwYW5lX2NvbnRhaW5lci5jc3MoJ21pbi1oZWlnaHQnLCBvcmlnaW5hbF9oZWlnaHQudG9TdHJpbmcoKSArICdweCcpO1xuXG4gIC8vZG8gbm90IGhpZGUgeWV0XG4gIHNlbGYuX2N1cnJlbnRQYW5lXG4gICAgICAuY3NzKCdwb3NpdGlvbicsICdhYnNvbHV0ZScpXG4gICAgICAuY3NzKCdsZWZ0JywgJy0xMDAwcHgnKTtcblxuICBuZXdQYW5lXG4gICAgLnRvZ2dsZUNsYXNzKCdhMC1oaWRlJywgZmFsc2UpXG4gICAgLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcblxuICBwYW5lX2NvbnRhaW5lci5jc3MoJ21pbi1oZWlnaHQnLCAnJyk7XG5cbiAgdmFyIG5ld19oZWlnaHQgPSBwYW5lX2NvbnRhaW5lci5kaW0oKS5oZWlnaHQ7XG5cbiAgcGFuZV9jb250YWluZXIuY3NzKCdtaW4taGVpZ2h0Jywgb3JpZ2luYWxfaGVpZ2h0LnRvU3RyaW5nKCkgKyAncHgnKTtcblxuICBuZXdQYW5lLmNzcygndmlzaWJpbGl0eScsICcnKS50b2dnbGVDbGFzcygnYTAtaGlkZScsIHRydWUpO1xuXG4gIHNlbGYuX2N1cnJlbnRQYW5lXG4gICAgICAuY3NzKCdwb3NpdGlvbicsICcnKVxuICAgICAgLmNzcygnbGVmdCcsICcnKVxuICAgICAgLnRvZ2dsZUNsYXNzKCdhMC1oaWRlJywgZmFsc2UpO1xuXG4gIHBhbmVfY29udGFpbmVyXG4gICAgLmNzcygnaGVpZ2h0Jywgb3JpZ2luYWxfaGVpZ2h0LnRvU3RyaW5nKCkgKyAncHgnKVxuICAgIC5jc3MoJ21pbi1oZWlnaHQnLCAnJyk7XG5cbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgcGFuZV9jb250YWluZXIucmVtb3ZlQ2xhc3MoJ2EwLWRpc2FibGUtdHJhbnNpdGlvbicpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFwYW5lX2NvbnRhaW5lclswXSkgcmV0dXJuO1xuICAgICAgdHJhbnNpdGlvbl9lbmQub24ocGFuZV9jb250YWluZXJbMF0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFwYW5lX2NvbnRhaW5lclswXSkgcmV0dXJuO1xuICAgICAgICB0cmFuc2l0aW9uX2VuZC5vZmYocGFuZV9jb250YWluZXJbMF0pO1xuICAgICAgICBzZWxmLl9zZXRUaXRsZSh0aXRsZSk7XG4gICAgICAgIHNlbGYuX2N1cnJlbnRQYW5lLnRvZ2dsZUNsYXNzKCdhMC1oaWRlJywgdHJ1ZSk7XG4gICAgICAgIHNlbGYuX2N1cnJlbnRQYW5lID0gbmV3UGFuZS50b2dnbGVDbGFzcygnYTAtaGlkZScsIGZhbHNlKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2VsZi5lbWl0KCd0cmFuc2l0aW9uX21vZGUnLCBtb2RlIHx8ICdzaWduaW4nKTtcbiAgICAgICAgICBzZWxmLmVtaXQoKG1vZGUgfHwgJ3NpZ25pbicpICsgJ19yZWFkeScpO1xuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHNlbGYuX2N1cnJlbnRQYW5lKTtcbiAgICAgICAgfSwgMTApO1xuICAgICAgfSk7XG4gICAgICBwYW5lX2NvbnRhaW5lci5jc3MoJ2hlaWdodCcsIG5ld19oZWlnaHQudG9TdHJpbmcoKSArICdweCcpO1xuICAgICAgaWYgKG5ld19oZWlnaHQgPj0gZ2V0X3ZpZXdwb3J0KCkuaGVpZ2h0KSBwYW5lX2NvbnRhaW5lci5hZGRDbGFzcygnYTAtZXF1YWwtdmlld3BvcnQnKTtcbiAgICB9LCAxMCk7XG4gIH0sIDEwKTtcbn07XG5cbkF1dGgwV2lkZ2V0LnByb3RvdHlwZS5fc2V0TG9naW5WaWV3ID0gZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLl90cmFuc2l0aW9uTW9kZShvcHRpb25zLCBmdW5jdGlvbiAoZXJyLCBjdXJyZW50UGFuZSkge1xuICAgIGlmICghc2VsZi5fc2lnbmluT3B0aW9ucy5fYXZvaWRJbml0aWFsRm9jdXMpIHNldGZvY3VzKCQoJ2lucHV0JywgY3VycmVudFBhbmUpLmZpcnN0KCkpO1xuICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgfSk7XG59O1xuXG5BdXRoMFdpZGdldC5wcm90b3R5cGUuX2dldExvZ2dlZEluQXV0aFBhcmFtcyA9IGZ1bmN0aW9uIChzdHJhdGVneSwgc3NvRGF0YSkge1xuICBzd2l0Y2ggKHN0cmF0ZWd5KSB7XG4gICAgY2FzZSAnZ29vZ2xlLW9hdXRoMic6XG4gICAgICByZXR1cm4ge2xvZ2luX2hpbnQ6c3NvRGF0YS5sYXN0VXNlZFVzZXJuYW1lfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG5BdXRoMFdpZGdldC5wcm90b3R5cGUuX3Nob3dMb2dnZWRJbkV4cGVyaWVuY2UgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgc3RyYXRlZ3lfbmFtZSA9IHRoaXMuX3Nzb0RhdGEubGFzdFVzZWRDb25uZWN0aW9uLnN0cmF0ZWd5O1xuICB2YXIgc3RyYXRlZ3kgPSB0aGlzLl9zdHJhdGVnaWVzW3N0cmF0ZWd5X25hbWVdO1xuXG4gIGlmICghc3RyYXRlZ3kpIHJldHVybjtcblxuICB2YXIgbG9naW5WaWV3ID0gJCgnLmEwLWxvZ2dlZGluJyk7XG5cbiAgJCgnZm9ybScsIGxvZ2luVmlldykuYTBfb24oJ3N1Ym1pdCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5fc2lnbkluRW50ZXJwcmlzZShlKTtcbiAgfSk7XG5cbiAgdmFyIGJ1dHRvbiA9ICQuY3JlYXRlKGxvZ2dlZGluQnRuVG1wbCh7XG4gICAgbmFtZTogc3RyYXRlZ3lfbmFtZSxcbiAgICB0aXRsZTogc3RyYXRlZ3kudGl0bGUsXG4gICAgY3NzOiBzdHJhdGVneS5jc3MsXG4gICAgaW1hZ2VpY29uOiBzdHJhdGVneS5pbWFnZWljb24sXG4gICAgdXNlcm5hbWU6IHRoaXMuX3Nzb0RhdGEubGFzdFVzZWRVc2VybmFtZVxuICB9KSk7XG5cbiAgJCgnLmEwLWxhc3QtdGltZScpLmh0bWwodGhpcy5fZGljdC50KCdzaWduaW46cmV0dXJuVXNlckxhYmVsJykpO1xuXG4gICQoJy5hMC1zdHJhdGVneSBkaXYnLCBsb2dpblZpZXcpLnJlbW92ZSgpO1xuXG4gICQoJy5hMC1zdHJhdGVneScsIGxvZ2luVmlldylcbiAgICAuYXBwZW5kKGJ1dHRvbik7XG5cbiAgJCgnLmEwLXN0cmF0ZWd5IC5hMC16b2NpYWxbZGF0YS1zdHJhdGVneV0nLCBsb2dpblZpZXcpLmEwX29uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHNlbGYuX3NpZ25JblNvY2lhbChcbiAgICAgIHN0cmF0ZWd5X25hbWUsXG4gICAgICBzZWxmLl9zc29EYXRhLmxhc3RVc2VkQ29ubmVjdGlvbiAmJiBzZWxmLl9zc29EYXRhLmxhc3RVc2VkQ29ubmVjdGlvbi5uYW1lLFxuICAgICAgc2VsZi5fZ2V0TG9nZ2VkSW5BdXRoUGFyYW1zKHN0cmF0ZWd5X25hbWUsIHNlbGYuX3Nzb0RhdGEpKTtcbiAgfSk7XG5cbiAgJCgnLmEwLWFsbCcsIGxvZ2luVmlldykuYTBfb24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYuX3NldExvZ2luVmlldygpO1xuICB9KTtcblxuICB0aGlzLl9zZXRMb2dpblZpZXcoeyBpc1JldHVybmluZ1VzZXI6ICEhc3RyYXRlZ3kgfSk7XG59O1xuXG5BdXRoMFdpZGdldC5wcm90b3R5cGUuX3Nob3dBZEluRG9tYWluRXhwZXJpZW5jZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjb25uZWN0aW9uID0gdGhpcy5fc3NvRGF0YS5jb25uZWN0aW9uO1xuICAvL3RoaXMgY291bGQgYmUgYWQgb3IgYXV0aDAtYWRsZGFwXG4gIHZhciBzdHJhdGVneV9uYW1lID0gdGhpcy5fc3NvRGF0YS5zdHJhdGVneTtcbiAgdmFyIHN0cmF0ZWd5ID0gdGhpcy5fc3RyYXRlZ2llc1tzdHJhdGVneV9uYW1lXTtcblxuICBpZiAoIXN0cmF0ZWd5KSByZXR1cm47XG5cbiAgdmFyIGxvZ2luVmlldyA9ICQoJy5hMC1sb2dnZWRpbicpO1xuXG4gICQoJ2Zvcm0nLCBsb2dpblZpZXcpLmEwX29uKCdzdWJtaXQnLCBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYuX3NpZ25JbkVudGVycHJpc2UoZSk7XG4gIH0pO1xuXG4gIHZhciBidXR0b24gPSAkLmNyZWF0ZShidXR0b25UbXBsKHtcbiAgICB1c2VfYmlnX2J1dHRvbnM6IHRydWUsXG4gICAgbmFtZTogc3RyYXRlZ3lfbmFtZSxcbiAgICB0aXRsZTogdGhpcy5fZGljdC50KCd3aW5kb3dzQXV0aFRpdGxlJykucmVwbGFjZSgne2Nvbm5lY3Rpb259JywgY29ubmVjdGlvbiksXG4gICAgY3NzOiBzdHJhdGVneS5jc3MsXG4gICAgaW1hZ2VpY29uOiBzdHJhdGVneS5pbWFnZWljb24sXG4gIH0pKTtcblxuICAkKCcuYTAtbGFzdC10aW1lJykuaHRtbCh0aGlzLl9kaWN0LnQoJ3NpZ25pbjpkb21haW5Vc2VyTGFiZWwnKSk7XG5cbiAgJCgnLmEwLXN0cmF0ZWd5IGRpdicsIGxvZ2luVmlldykucmVtb3ZlKCk7XG5cbiAgJCgnLmEwLXN0cmF0ZWd5JywgbG9naW5WaWV3KVxuICAgIC5hcHBlbmQoYnV0dG9uKTtcblxuICAkKCcuYTAtc3RyYXRlZ3kgLmEwLXpvY2lhbFtkYXRhLXN0cmF0ZWd5XScsIGxvZ2luVmlldykuYTBfb24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgc2VsZi5fc2lnbkluU29jaWFsKHN0cmF0ZWd5X25hbWUsIGNvbm5lY3Rpb24pO1xuICB9KTtcblxuICAkKCcuYTAtYWxsJywgbG9naW5WaWV3KS5hMF9vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5fc2V0TG9naW5WaWV3KCk7XG4gIH0pO1xuXG4gIHRoaXMuX3NldExvZ2luVmlldyh7IGlzUmV0dXJuaW5nVXNlcjogISFzdHJhdGVneSB9KTtcbn07XG5cbi8vIHNpZ24gaW4gbWV0aG9kc1xuQXV0aDBXaWRnZXQucHJvdG90eXBlLl9zaWduSW5Tb2NpYWwgPSBmdW5jdGlvbiAoZSwgY29ubmVjdGlvbiwgZXh0cmFQYXJhbXMpIHtcbiAgdmFyIHRhcmdldCA9IGUuY3VycmVudFRhcmdldCB8fCBlLmRlbGVnYXRlVGFyZ2V0IHx8IGUudGFyZ2V0IHx8IGU7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHN0cmF0ZWd5TmFtZSA9IHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnID8gdGFyZ2V0IDogdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1zdHJhdGVneScpO1xuICB2YXIgc3RyYXRlZ3kgPSB0aGlzLl9nZXRDb25maWd1cmVkU3RyYXRlZ3koc3RyYXRlZ3lOYW1lKTtcblxuICB2YXIgY29ubmVjdGlvbl9uYW1lID0gY29ubmVjdGlvbiB8fCBzdHJhdGVneS5jb25uZWN0aW9uc1swXS5uYW1lO1xuICBpZiAoc3RyYXRlZ3kpIHtcbiAgICB2YXIgbG9naW5PcHRpb25zID0gXy5leHRlbmQoe30sIHtcbiAgICAgIGNvbm5lY3Rpb246IGNvbm5lY3Rpb25fbmFtZSxcbiAgICAgIHBvcHVwOiBzZWxmLl9zaWduaW5PcHRpb25zLnBvcHVwLFxuICAgICAgcG9wdXBPcHRpb25zOiBzZWxmLl9zaWduaW5PcHRpb25zLnBvcHVwT3B0aW9uc1xuICAgIH0sIHNlbGYuX3NpZ25pbk9wdGlvbnMuZXh0cmFQYXJhbWV0ZXJzLCBleHRyYVBhcmFtcyk7XG4gICAgdGhpcy5fYXV0aDAubG9naW4obG9naW5PcHRpb25zKTtcbiAgfVxufTtcblxuQXV0aDBXaWRnZXQucHJvdG90eXBlLl9zaWduSW5FbnRlcnByaXNlID0gZnVuY3Rpb24gKGUpIHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY29udGFpbmVyID0gdGhpcy5fZ2V0QWN0aXZlTG9naW5WaWV3KCk7XG4gIHZhciBmb3JtID0gJCgnZm9ybScsIGNvbnRhaW5lcik7XG4gIHZhciB2YWxpZCA9IHRydWU7XG5cbiAgdmFyIGVtYWlsRCA9ICQoJy5hMC1lbWFpbCcsIGZvcm0pO1xuICB2YXIgcGFzc3dvcmRfaW5wdXQgPSAkKCdpbnB1dFtuYW1lPXBhc3N3b3JkXScsIGZvcm0pO1xuICB2YXIgcGFzc3dvcmRfZW1wdHkgPSAvXlxccyokLy50ZXN0KHBhc3N3b3JkX2lucHV0LnZhbCgpKTtcbiAgdmFyIHBhc3N3b3JkX2Rpc2FibGVkID0gcGFzc3dvcmRfaW5wdXQuYXR0cignZGlzYWJsZWQnKTtcbiAgdmFyIHBhc3N3b3JkX3JlcXVpcmVkID0gc2VsZi5fc2lnbmluT3B0aW9ucy5zaG93RW1haWwgJiYgc2VsZi5fc2lnbmluT3B0aW9ucy5zaG93UGFzc3dvcmQgJiYgc2VsZi5fYXJlVGhlcmVBbnlEYkNvbm4oKTtcbiAgdmFyIGVtYWlsX2lucHV0ID0gJCgnaW5wdXRbbmFtZT1lbWFpbF0nLCBmb3JtKTtcbiAgdmFyIGVtYWlsX3BhcnNlZCA9IGVtYWlsX3BhcnNlci5leGVjKGVtYWlsX2lucHV0LnZhbCgpLnRvTG93ZXJDYXNlKCkpO1xuICB2YXIgZW1haWxfZW1wdHkgPSAvXlxccyokLy50ZXN0KGVtYWlsX2lucHV0LnZhbCgpKTtcbiAgdmFyIGVtYWlsID0gbnVsbCwgZG9tYWluLCBjb25uZWN0aW9uLCBoYXNfZXJyb3JzID0gZmFsc2U7XG5cbiAgLy8gQ2xlYW4gZXJyb3IgY29udGFpbmVyXG4gIHRoaXMuX3Nob3dFcnJvcigpO1xuICB0aGlzLl9mb2N1c0Vycm9yKCk7XG5cbiAgaWYgKCF0aGlzLl9pZ25vcmVFbWFpbFZhbGlkYXRpb25zKGVtYWlsX2lucHV0KSkge1xuXG4gICAgaWYgKGVtYWlsX2VtcHR5KSB7XG4gICAgICB0aGlzLl9mb2N1c0Vycm9yKGVtYWlsX2lucHV0KTtcbiAgICAgIGhhc19lcnJvcnMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICghZW1haWxfcGFyc2VkICYmICFlbWFpbF9lbXB0eSkge1xuICAgICAgdGhpcy5fZm9jdXNFcnJvcihlbWFpbF9pbnB1dCwgdGhpcy5fZGljdC50KCdpbnZhbGlkJykpO1xuICAgICAgaGFzX2Vycm9ycyA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKHBhc3N3b3JkX2VtcHR5ICYmIHBhc3N3b3JkX3JlcXVpcmVkICYmICFwYXNzd29yZF9kaXNhYmxlZCkge1xuICAgIHRoaXMuX2ZvY3VzRXJyb3IocGFzc3dvcmRfaW5wdXQpO1xuICAgIGhhc19lcnJvcnMgPSB0cnVlO1xuICB9O1xuXG4gIGlmIChoYXNfZXJyb3JzKSByZXR1cm47XG5cbiAgdmFyIGlucHV0X2VtYWlsX2RvbWFpbiA9IGVtYWlsX3BhcnNlZCA/IGVtYWlsX3BhcnNlZC5zbGljZSgtMilbMF0gOiB1bmRlZmluZWQ7XG5cbiAgdmFyIGNvbm5fb2JqID0gXy5jaGFpbih0aGlzLl9jbGllbnQuc3RyYXRlZ2llcylcbiAgICAud2hlcmUoe3VzZXJBbmRQYXNzOiB1bmRlZmluZWR9KVxuICAgIC5wbHVjaygnY29ubmVjdGlvbnMnKVxuICAgIC5mbGF0dGVuKClcbiAgICAuZmluZFdoZXJlKHtkb21haW46IGlucHV0X2VtYWlsX2RvbWFpbn0pXG4gICAgLnZhbHVlKCk7XG5cbiAgaWYgKGNvbm5fb2JqKSB7XG4gICAgZG9tYWluID0gY29ubl9vYmouZG9tYWluO1xuICAgIGVtYWlsID0gZW1haWxfaW5wdXQudmFsKCk7XG4gICAgY29ubmVjdGlvbiA9IGNvbm5fb2JqLm5hbWU7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMuX2F1dGgwU3RyYXRlZ2llcy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2lnbkluV2l0aEF1dGgwKGVtYWlsX2lucHV0LnZhbCgpKTtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXRfZW1haWxfZG9tYWluID09PSAnZ21haWwuY29tJykge1xuICAgICAgcmV0dXJuIHRoaXMuX3NpZ25JblNvY2lhbCgnZ29vZ2xlLW9hdXRoMicpO1xuICAgIH1cblxuICAgIHRoaXMuX3Nob3dFcnJvcihcbiAgICAgIHRoaXMuX2RpY3QudCgnc2lnbmluOnN0cmF0ZWd5RG9tYWluSW52YWxpZCcpXG4gICAgICAgICAgLnJlcGxhY2UoJ3tkb21haW59JywgaW5wdXRfZW1haWxfZG9tYWluKSk7XG4gICAgdGhpcy5fZm9jdXNFcnJvcihlbWFpbF9pbnB1dCk7XG4gIH1cblxuICB2YWxpZCAmPSAoIWRvbWFpbiAmJiAhZW1haWxELmFkZENsYXNzKCdhMC1pbnZhbGlkJykpIHx8ICghIWRvbWFpbiAmJiAhIWVtYWlsRC5yZW1vdmVDbGFzcygnYTAtaW52YWxpZCcpKTtcblxuICBpZiAodmFsaWQpIHtcbiAgICB2YXIgbG9hZGluZ01lc3NhZ2UgPSBzZWxmLl9kaWN0LnQoJ3NpZ25pbjpsb2FkaW5nTWVzc2FnZScpLnJlcGxhY2UoJ3tjb25uZWN0aW9ufScsIGNvbm5lY3Rpb24pO1xuICAgIHRoaXMuX3NldExvZ2luVmlldyh7IG1vZGU6ICdsb2FkaW5nJywgbWVzc2FnZTogbG9hZGluZ01lc3NhZ2UgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGxvZ2luT3B0aW9ucyA9IF8uZXh0ZW5kKHt9LCB7XG4gICAgICAgIGNvbm5lY3Rpb246IGNvbm5lY3Rpb24sXG4gICAgICAgIHBvcHVwOiBzZWxmLl9zaWduaW5PcHRpb25zLnBvcHVwLFxuICAgICAgICBwb3B1cE9wdGlvbnM6IHNlbGYuX3NpZ25pbk9wdGlvbnMucG9wdXBPcHRpb25zXG4gICAgICB9LCBzZWxmLl9zaWduaW5PcHRpb25zLmV4dHJhUGFyYW1ldGVycyk7XG4gICAgICBzZWxmLl9hdXRoMC5sb2dpbihsb2dpbk9wdGlvbnMpO1xuICAgIH0pO1xuICB9XG59O1xuXG5BdXRoMFdpZGdldC5wcm90b3R5cGUuX3NpZ25JbldpdGhBdXRoMCA9IGZ1bmN0aW9uICh1c2VyTmFtZSwgc2lnbkluUGFzc3dvcmQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY29udGFpbmVyID0gdGhpcy5fZ2V0QWN0aXZlTG9naW5WaWV3KCk7XG4gIHZhciBjb25uZWN0aW9uICA9IHRoaXMuX2dldEF1dGgwQ29ubmVjdGlvbih1c2VyTmFtZSk7XG4gIHZhciBlbWFpbF9pbnB1dCA9ICQoJ2lucHV0W25hbWU9ZW1haWxdJywgY29udGFpbmVyKTtcbiAgdmFyIHBhc3N3b3JkX2lucHV0ID0gJCgnaW5wdXRbbmFtZT1wYXNzd29yZF0nLCBjb250YWluZXIpO1xuXG4gIHZhciBsb2dpbk9wdGlvbnMgPSB7XG4gICAgY29ubmVjdGlvbjogY29ubmVjdGlvbi5uYW1lLFxuICAgIHVzZXJuYW1lOiBjb25uZWN0aW9uLmRvbWFpbiA/XG4gICAgICAgICAgICAgICAgdXNlck5hbWUucmVwbGFjZSgnQCcgKyBjb25uZWN0aW9uLmRvbWFpbiwgJycpIDpcbiAgICAgICAgICAgICAgICB1c2VyTmFtZSxcbiAgICBwYXNzd29yZDogc2lnbkluUGFzc3dvcmQgfHzCoCQoJy5hMC1wYXNzd29yZCBpbnB1dCcsIGNvbnRhaW5lcikudmFsKCksXG4gICAgcG9wdXA6IHNlbGYuX3NpZ25pbk9wdGlvbnMucG9wdXAsXG4gICAgcG9wdXBPcHRpb25zOiBzZWxmLl9zaWduaW5PcHRpb25zLnBvcHVwT3B0aW9uc1xuICB9O1xuXG4gIGxvZ2luT3B0aW9ucyA9IF8uZXh0ZW5kKHt9LCBsb2dpbk9wdGlvbnMsIHNlbGYuX3NpZ25pbk9wdGlvbnMuZXh0cmFQYXJhbWV0ZXJzKTtcblxuICB2YXIgc3RyYXRlZ3kgPSBzZWxmLl9nZXRTdHJhdGVneShjb25uZWN0aW9uLm5hbWUpIHx8IHt9O1xuICB2YXIgbG9hZGluZ01lc3NhZ2UgPSBzdHJhdGVneS5uYW1lICE9PSAnYXV0aDAnID8gLy8gZG9udCBzaG93IGxvYWRpbmcgbWVzc2FnZSBmb3IgZGJDb25uZWN0aW9uc1xuICAgIHNlbGYuX2RpY3QudCgnc2lnbmluOmxvYWRpbmdNZXNzYWdlJykucmVwbGFjZSgne2Nvbm5lY3Rpb259JywgY29ubmVjdGlvbi5uYW1lKSA6ICcnO1xuXG4gIC8vIENsZWFuIGVycm9yIGNvbnRhaW5lclxuICBzZWxmLl9zaG93RXJyb3IoKTtcbiAgc2VsZi5fZm9jdXNFcnJvcigpO1xuICBpZiAoc2VsZi5fc2lnbmluT3B0aW9ucy5wb3B1cCkge1xuICAgIHJldHVybiBzZWxmLl9hdXRoMC5sb2dpbihsb2dpbk9wdGlvbnMsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgaWYgKGVyci5zdGF0dXMgIT09IDQwMSkgcmV0dXJuIHNlbGYuX3Nob3dFcnJvcihzZWxmLl9kaWN0LnQoJ3NpZ25pbjpzZXJ2ZXJFcnJvclRleHQnKSk7XG5cbiAgICAgICAgLy8gc2VsZi5fc2hvd0Vycm9yKHNlbGYuX2RpY3QudCgnc2lnbmluOndyb25nRW1haWxQYXNzd29yZEVycm9yVGV4dCcpKTtcbiAgICAgICAgc2VsZi5fZm9jdXNFcnJvcihlbWFpbF9pbnB1dCk7XG4gICAgICAgIHNlbGYuX2ZvY3VzRXJyb3IocGFzc3dvcmRfaW5wdXQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5fc2V0TG9naW5WaWV3KHsgbW9kZTogJ2xvYWRpbmcnLCBtZXNzYWdlOiBsb2FkaW5nTWVzc2FnZSB9LCBmdW5jdGlvbiAoKXtcbiAgICBzZWxmLl9hdXRoMC5sb2dpbihsb2dpbk9wdGlvbnMsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgc2VsZi5fc2V0TG9naW5WaWV3KHt9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKGVyci5zdGF0dXMgIT09IDQwMSkgcmV0dXJuIHNlbGYuX3Nob3dFcnJvcihzZWxmLl9kaWN0LnQoJ3NpZ25pbjpzZXJ2ZXJFcnJvclRleHQnKSk7XG5cbiAgICAgICAgICAvLyBzZWxmLl9zaG93RXJyb3Ioc2VsZi5fZGljdC50KCdzaWduaW46d3JvbmdFbWFpbFBhc3N3b3JkRXJyb3JUZXh0JykpO1xuICAgICAgICAgIHNlbGYuX2ZvY3VzRXJyb3IoZW1haWxfaW5wdXQpO1xuICAgICAgICAgIHNlbGYuX2ZvY3VzRXJyb3IocGFzc3dvcmRfaW5wdXQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59O1xuXG4vLyBpbml0aWFsaXplXG5BdXRoMFdpZGdldC5wcm90b3R5cGUuX2luaXRpYWxpemUgPSBmdW5jdGlvbiAoY2IpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICAkKCkuYWRkQ2xhc3MoJ2EwLW1vZGUtc2lnbmluJyk7XG5cbiAgLy8gd2FpdCBmb3Igc2V0Q2xpZW50KClcbiAgaWYgKCFzZWxmLl9jbGllbnQpIHtcbiAgICB2YXIgYXJncyAgPSBhcmd1bWVudHM7XG4gICAgdmFyIHNldENsaWVudCA9IGdsb2JhbC53aW5kb3cuQXV0aDAuc2V0Q2xpZW50O1xuXG4gICAgZ2xvYmFsLndpbmRvdy5BdXRoMC5zZXRDbGllbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzZXRDbGllbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHNlbGYuX2luaXRpYWxpemUuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGJ1dHRvbnMgYWN0aW9uc1xuICAkKCcuYTAtb25lc3RlcCBhLmEwLWNsb3NlJykuYTBfb24oJ2NsaWNrJywgZnVuY3Rpb24gKCkgeyBzZWxmLl9oaWRlU2lnbkluKCk7IH0pO1xuICAkKCcuYTAtbm90bG9nZ2VkaW4gZm9ybScpLmEwX29uKCdzdWJtaXQnLCBmdW5jdGlvbiAoZSkgeyBzZWxmLl9zaWduSW5FbnRlcnByaXNlKGUpOyB9KTtcbiAgJCgnJykuYTBfb24oJ2tleXVwJywgZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoKGUud2hpY2ggPT0gMjcgfHwgZS5rZXljb2RlID09IDI3KSAmJiAhc2VsZi5fc2lnbmluT3B0aW9ucy5zdGFuZGFsb25lKSB7XG4gICAgICBzZWxmLl9oaWRlU2lnbkluKCk7IC8vIGNsb3NlIHBvcHVwIHdpdGggRVNDIGtleVxuICAgIH1cbiAgfSk7XG5cbiAgaWYgKHNlbGYuX2NsaWVudC5zdWJzY3JpcHRpb24gJiYgIX5bJ2ZyZWUnLCAnZGV2J10uaW5kZXhPZihzZWxmLl9jbGllbnQuc3Vic2NyaXB0aW9uKSkge1xuICAgIC8vIGhpZGUgZm9vdGVyIGZvciBub24gZnJlZS9kZXYgc3Vic2NyaXB0aW9uc1xuICAgICQoJy5hMC1mb290ZXInKS50b2dnbGVDbGFzcygnYTAtaGlkZScsIHRydWUpO1xuICAgICQoJy5hMC1mcmVlLXN1YnNjcmlwdGlvbicpLnJlbW92ZUNsYXNzKCdhMC1mcmVlLXN1YnNjcmlwdGlvbicpO1xuICB9XG5cbiAgLy8gaW1hZ2VzIGZyb20gY2RuXG4gIC8vICQoJy5hMC1oZWFkZXIgYS5hMC1jbG9zZScpLmNzcygnYmFja2dyb3VuZC1pbWFnZScsICd1cmwoJyArIHNlbGYuX3NpZ25pbk9wdGlvbnMuY2RuICsgJ2ltZy9jbG9zZS5wbmcpJyk7XG5cbiAgLy8gbGFiZWxzIHRleHRcbiAgdmFyIG9wdGlvbnMgPSBfLmV4dGVuZCh7fSwgdGhpcy5fc2lnbmluT3B0aW9ucywgdGhpcy5fc2lnbmluT3B0aW9ucy5yZXNvdXJjZXMpO1xuICBvcHRpb25zWydzaG93RW1haWwnXSA9IHR5cGVvZiBvcHRpb25zWydzaG93RW1haWwnXSAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zWydzaG93RW1haWwnXSA6IHRydWU7XG4gIG9wdGlvbnNbJ3Nob3dQYXNzd29yZCddID0gdHlwZW9mIG9wdGlvbnNbJ3Nob3dQYXNzd29yZCddICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnNbJ3Nob3dQYXNzd29yZCddIDogdHJ1ZTtcbiAgb3B0aW9uc1snZW5hYmxlUmV0dXJuVXNlckV4cGVyaWVuY2UnXSA9IHR5cGVvZiBvcHRpb25zWydlbmFibGVSZXR1cm5Vc2VyRXhwZXJpZW5jZSddICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnNbJ2VuYWJsZVJldHVyblVzZXJFeHBlcmllbmNlJ10gOiB0cnVlO1xuICBvcHRpb25zWydlbmFibGVBRFJlYWxtRGlzY292ZXJ5J10gPSB0eXBlb2Ygb3B0aW9uc1snZW5hYmxlQURSZWFsbURpc2NvdmVyeSddICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnNbJ2VuYWJsZUFEUmVhbG1EaXNjb3ZlcnknXSA6IHRydWU7XG5cbiAgdGhpcy5fc2lnbmluT3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgLy8gYWN0aXZhdGUgcGFuZWxcbiAgJCgnZGl2LmEwLXBhbmVsJykucmVtb3ZlQ2xhc3MoJ2EwLWFjdGl2ZScpO1xuICAkKCdkaXYuYTAtb3ZlcmxheScpLmFkZENsYXNzKCdhMC1hY3RpdmUnKTtcbiAgJCgnZGl2LmEwLXBhbmVsLmEwLW9uZXN0ZXAnKS5hZGRDbGFzcygnYTAtYWN0aXZlJyk7XG5cbiAgaWYgKHNlbGYuX3NpZ25pbk9wdGlvbnMuY29udGFpbmVyKSB7XG4gICAgJCgnZGl2LmEwLWFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhMC1vdmVybGF5Jyk7XG4gIH1cblxuICAkKCcuYTAtcG9wdXAgaDEnKS5odG1sKHRoaXMuX2RpY3QudCgnc2lnbmluOnRpdGxlJykpO1xuICAkKCcuYTAtcG9wdXAgLmEwLWludmFsaWQnKS5yZW1vdmVDbGFzcygnYTAtaW52YWxpZCcpO1xuXG4gICQoJ2Rpdi5hMC1wYW5lbC5hMC1vbmVzdGVwIGgxJykuaHRtbCh0aGlzLl9zaWduaW5PcHRpb25zWyd0aXRsZSddKTtcblxuICBpZiAoc2VsZi5fc2lnbmluT3B0aW9ucy5jb25uZWN0aW9ucykge1xuICAgIHNlbGYuX2NsaWVudC5zdHJhdGVnaWVzID0gXy5jaGFpbihzZWxmLl9jbGllbnQuc3RyYXRlZ2llcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuY29ubmVjdGlvbnMgPSBfLmZpbHRlcihzLmNvbm5lY3Rpb25zLCBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF8uY29udGFpbnMoc2VsZi5fc2lnbmluT3B0aW9ucy5jb25uZWN0aW9ucywgYy5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMuY29ubmVjdGlvbnMubGVuZ3RoID4gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkudmFsdWUoKTtcbiAgfVxuXG5cbiAgLy8gbWVyZ2Ugc3RyYXRlZ2llcyBpbmZvXG4gIGZvciAodmFyIHMgPSAwOyBzIDwgc2VsZi5fY2xpZW50LnN0cmF0ZWdpZXMubGVuZ3RoOyBzKyspIHtcbiAgICB2YXIgc3RyYXRlZ3lfbmFtZSA9IHNlbGYuX2NsaWVudC5zdHJhdGVnaWVzW3NdLm5hbWU7XG4gICAgc2VsZi5fY2xpZW50LnN0cmF0ZWdpZXNbc10gPSBfLmV4dGVuZCh7fSwgc2VsZi5fY2xpZW50LnN0cmF0ZWdpZXNbc10sIHNlbGYuX3N0cmF0ZWdpZXNbc3RyYXRlZ3lfbmFtZV0pO1xuICB9XG5cbiAgc2VsZi5fYXV0aDBTdHJhdGVnaWVzID0gXy5jaGFpbihzZWxmLl9jbGllbnQuc3RyYXRlZ2llcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnVzZXJBbmRQYXNzICYmIHMuY29ubmVjdGlvbnMubGVuZ3RoID4gMDsgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudmFsdWUoKTtcblxuICB2YXIgYXV0aDBDb25uID0gdGhpcy5fZ2V0QXV0aDBDb25uZWN0aW9uKCkgfHwge307XG4gIGlmIChzZWxmLl9vcGVuV2l0aCA9PT0gJ1NpZ25VcCcgJiYgIWF1dGgwQ29ubi5zaG93U2lnbnVwICYmICFzZWxmLl9zaWduaW5PcHRpb25zLnNpZ251cExpbmspIHNlbGYuX29wZW5XaXRoID0gbnVsbDtcbiAgaWYgKHNlbGYuX29wZW5XaXRoID09PSAnUmVzZXQnICYmICFhdXRoMENvbm4uc2hvd0ZvcmdvdCAmJiAhc2VsZi5fc2lnbmluT3B0aW9ucy5mb3Jnb3RMaW5rKSBzZWxmLl9vcGVuV2l0aCA9IG51bGw7XG5cbiAgLy8gc2hvdyBsb2FkaW5nXG4gIHNlbGYuX3Nob3dMb2FkaW5nRXhwZXJpZW5jZSgpO1xuXG4gIGZ1bmN0aW9uIGZpbmlzaChlcnIsIHNzb0RhdGEpe1xuICAgIHNlbGYuX3Nzb0RhdGEgPSBzc29EYXRhO1xuICAgIGlmIChzZWxmLl9vcGVuV2l0aCkge1xuICAgICAgcmV0dXJuIHNlbGZbJ19zaG93JyArIHNlbGYuX29wZW5XaXRoICsgJ0V4cGVyaWVuY2UnXSgpO1xuICAgIH1cbiAgICBzZWxmLl9yZXNvbHZlTG9naW5WaWV3KCk7XG4gICAgaWYgKGNiICYmIHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykgY2IoKTtcbiAgfVxuXG4gIHZhciBpc19hbnlfYWQgPSBfLnNvbWUoc2VsZi5fY2xpZW50LnN0cmF0ZWdpZXMsIGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIChzLm5hbWUgPT09ICdhZCcgfHwgcy5uYW1lID09PSAnYXV0aDAtYWRsZGFwJykgJiZcbiAgICAgICAgICAgIHMuY29ubmVjdGlvbnMubGVuZ3RoID4gMDtcbiAgfSk7XG5cbiAgLy8gZ2V0IFNTTyBkYXRhXG4gIGlmICh0aGlzLl9zaWduaW5PcHRpb25zLmVuYWJsZVJldHVyblVzZXJFeHBlcmllbmNlID09PSBmYWxzZSAmJiAoIWlzX2FueV9hZCB8fCBzZWxmLl9vcGVuV2l0aCB8fCB0aGlzLl9zaWduaW5PcHRpb25zLmVuYWJsZUFEUmVhbG1EaXNjb3ZlcnkgPT09IGZhbHNlKSkge1xuICAgIGZpbmlzaChudWxsLCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgc2VsZi5fYXV0aDAuZ2V0U1NPRGF0YShpc19hbnlfYWQsIGZpbmlzaCk7XG4gIH1cbn07XG5cbkF1dGgwV2lkZ2V0LnByb3RvdHlwZS5fcmVzb2x2ZUxvZ2luVmlldyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciB1c2VfYmlnX2J1dHRvbnMgPSB0aGlzLl9zaWduaW5PcHRpb25zWydzb2NpYWxCaWdCdXR0b25zJ10gfHwgIXRoaXMuX2FyZVRoZXJlQW55RW50ZXJwcmlzZU9yRGJDb25uKCk7XG5cbiAgLy8gbG9hZCBzb2NpYWwgYnV0dG9uc1xuICB2YXIgbGlzdCA9ICQoJy5hMC1ub3Rsb2dnZWRpbiAuYTAtaWNvbmxpc3QnKTtcbiAgdmFyIHNvY2lhbFN0cmF0ZWdpZXMgPSBfLmNoYWluKHNlbGYuX2NsaWVudC5zdHJhdGVnaWVzKS53aGVyZSh7c29jaWFsOiB0cnVlfSk7XG5cbiAgaWYgKHNlbGYuX3NpZ25pbk9wdGlvbnMuY29ubmVjdGlvbnMpIHtcbiAgICAvLyBzb3J0IHNvY2lhbCBzdHJhdGVnaWVzIGJhc2VkIG9uIG9wdGlvbnMuY29ubmVjdGlvbnMgYXJyYXkgb3JkZXJcbiAgICB2YXIgY29ubmVjdGlvbnMgPSBzZWxmLl9zaWduaW5PcHRpb25zLmNvbm5lY3Rpb25zO1xuICAgIHNvY2lhbFN0cmF0ZWdpZXMgPSBzb2NpYWxTdHJhdGVnaWVzLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgdmFyIG4gPSBjb25uZWN0aW9ucy5pbmRleE9mKHMuY29ubmVjdGlvbnNbMF0ubmFtZSk7XG4gICAgICBjb25uZWN0aW9uc1tuXSA9ICcnO1xuICAgICAgcmV0dXJuIFtuLCBzXTtcbiAgICB9KS5zb3J0KCkubWFwKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4WzFdOyB9KTtcbiAgfVxuXG4gIHNvY2lhbFN0cmF0ZWdpZXNcbiAgICAubWFwKGZ1bmN0aW9uIChzKSB7IHJldHVybiAgXy5leHRlbmQoe30sIHMsIHt1c2VfYmlnX2J1dHRvbnM6IHVzZV9iaWdfYnV0dG9uc30pOyB9KVxuICAgIC5lYWNoKGZ1bmN0aW9uIChzKSB7IHJldHVybiBsaXN0LmFwcGVuZChidXR0b25UbXBsKHMpKTsgfSk7XG5cbiAgaWYgKF8ud2hlcmUoc2VsZi5fY2xpZW50LnN0cmF0ZWdpZXMsIHtzb2NpYWw6IHRydWV9KS5sZW5ndGggPiAwKSB7XG4gICAgJCgnLmEwLW5vdGxvZ2dlZGluIC5hMC1zZXBhcmF0b3IsIC5hMC1ub3Rsb2dnZWRpbiAuYTAtaWNvbmxpc3QnKS50b2dnbGVDbGFzcygnYTAtaGlkZScsIGZhbHNlKTtcbiAgfVxuXG4gICQoJy5hMC1ub3Rsb2dnZWRpbiAuYTAtZW1haWwgaW5wdXQnKS5hMF9vbignaW5wdXQnLCBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYuX3Nob3dPckhpZGVQYXNzd29yZChlKTtcbiAgfSk7XG5cbiAgJCgnLmEwLXpvY2lhbFtkYXRhLXN0cmF0ZWd5XScsIGxpc3QpLmEwX29uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5fc2lnbkluU29jaWFsKGUpO1xuICB9KTtcblxuICAvLyBzaG93IHNpZ251cC9mb3Jnb3QgbGlua3NcbiAgdmFyIGF1dGgwQ29ubiA9IHRoaXMuX2dldEF1dGgwQ29ubmVjdGlvbigpIHx8IHt9O1xuICB2YXIgYWN0aW9ucyA9ICQuY3JlYXRlKGxvZ2luQWN0aW9uc1RtcGwoe1xuICAgIHNob3dTaWdudXA6ICh0aGlzLl9zaWduaW5PcHRpb25zLnNob3dTaWdudXAgIT09IGZhbHNlKSAmJiAoKGF1dGgwQ29ubiAmJiBhdXRoMENvbm4uc2hvd1NpZ251cCkgfHwgdGhpcy5fc2lnbmluT3B0aW9ucy5zaWdudXBMaW5rKSxcbiAgICBzaG93Rm9yZ290OiAodGhpcy5fc2lnbmluT3B0aW9ucy5zaG93Rm9yZ290ICE9PSBmYWxzZSkgJiYgKChhdXRoMENvbm4gJiYgYXV0aDBDb25uLnNob3dGb3Jnb3QpIHx8IHRoaXMuX3NpZ25pbk9wdGlvbnMuZm9yZ290TGluayksXG4gICAgaTE4bjogdGhpcy5fZGljdCxcbiAgICBzaWdudXBMaW5rOiB0aGlzLl9zaWduaW5PcHRpb25zLnNpZ251cExpbmssXG4gICAgZm9yZ290TGluazogdGhpcy5fc2lnbmluT3B0aW9ucy5mb3Jnb3RMaW5rXG4gIH0pKTtcblxuICAvLyB1c2VybmFtZV9zdHlsZVxuICB2YXIgYXV0aDBDb25uU3RyYXRlZ3kgPSB0aGlzLl9nZXRTdHJhdGVneShhdXRoMENvbm4ubmFtZSkgfHwge307XG5cbiAgaWYgKCF0aGlzLl9zaWduaW5PcHRpb25zLnVzZXJuYW1lX3N0eWxlICYmXG4gICAgICAoYXV0aDBDb25uU3RyYXRlZ3kubmFtZSA9PT0gJ2FkJyB8fCBhdXRoMENvbm5TdHJhdGVneS5uYW1lID09PSAnYXV0aDAtYWRsZGFwJykpIHtcbiAgICB0aGlzLl9zaWduaW5PcHRpb25zLnVzZXJuYW1lX3N0eWxlID0gJ3VzZXJuYW1lJztcbiAgfVxuXG4gIGlmICh0aGlzLl9zaWduaW5PcHRpb25zLnVzZXJuYW1lX3N0eWxlID09PSAndXNlcm5hbWUnKSB7XG4gICAgLy8gc2V0IHVzZXJuYW1lIG1vZGVcbiAgICB2YXIgcGxhY2Vob2xkZXIgPSB0aGlzLl9kaWN0LnQoJ3NpZ25pbjp1c2VybmFtZVBsYWNlaG9sZGVyJyk7XG4gICAgJCgnLmEwLW5vdGxvZ2dlZGluIC5hMC1lbWFpbCBpbnB1dCcpXG4gICAgICAuYXR0cigndHlwZScsICd0ZXh0JylcbiAgICAgIC5hdHRyKCd0aXRsZScsIHBsYWNlaG9sZGVyKVxuICAgICAgLmF0dHIoJ3BsYWNlaG9sZGVyJywgcGxhY2Vob2xkZXIpO1xuXG4gICAgJCgnLmEwLW5vdGxvZ2dlZGluIC5hMC1lbWFpbCBsYWJlbCcpLnRleHQocGxhY2Vob2xkZXIpO1xuICB9XG5cbiAgJCgnLmEwLWRiLWFjdGlvbnMnKS5hcHBlbmQoYWN0aW9ucyk7XG5cbiAgdmFyIHNpZ251cF9idG4gPSAkKCcuYTAtc2lnbi11cCcpO1xuICBpZiAoIXRoaXMuX3NpZ25pbk9wdGlvbnMuc2lnbnVwTGluayAmJiBzaWdudXBfYnRuLmxlbmd0aCA+IDApIHtcbiAgICBzaWdudXBfYnRuLmEwX29uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBzZWxmLl9zaG93U2lnblVwRXhwZXJpZW5jZShlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICghdGhpcy5fc2lnbmluT3B0aW9ucy5mb3Jnb3RMaW5rKSB7XG4gICAgJCgnLmEwLWZvcmdvdC1wYXNzJykuYTBfb24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHNlbGYuX3Nob3dSZXNldEV4cGVyaWVuY2UoZSk7XG4gICAgfSk7XG4gIH1cblxuICAkKCcuYTAtcGFuZWwgaW5wdXQnKS52YWwoJycpO1xuXG4gICQoJy5hMC1wYW5lbCAuYTAtc2lnbnVwIC5hMC1lbWFpbCBpbnB1dCcpLmEwX29uKCdpbnB1dCcsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvdXRwdXQgPSB7fTtcbiAgICBpZiAoc2VsZi5faXNFbnRlcnByaXNlQ29ubmVjdGlvbih0aGlzLnZhbHVlLCBvdXRwdXQpKSB7XG4gICAgICB2YXIgd2FybmluZ1RleHQgPSBzZWxmLl9kaWN0LnQoJ3NpZ251cDplbnRlcnByaXNlRW1haWxXYXJuaW5nVGV4dCcpLnJlcGxhY2UoL3tkb21haW59L2csIG91dHB1dC5kb21haW4pO1xuICAgICAgLy8gc2VsZi5fc2V0Q3VzdG9tVmFsaWRpdHkodGhpcywgd2FybmluZ1RleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzZWxmLl9zZXRDdXN0b21WYWxpZGl0eSh0aGlzLCAnJyk7XG4gICAgfVxuICB9KTtcblxuICAkKCcuYTAtcGFuZWwgLmEwLW9wdGlvbnMgLmEwLWNhbmNlbCcpLmEwX29uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLl9zZXRMb2dpblZpZXcoKTtcbiAgfSk7XG5cbiAgLy8gc2hvdyBlbWFpbCwgcGFzc3dvcmQsIHNlcGFyYXRvciBhbmQgYnV0dG9uIGlmIHRoZXJlIGFyZSBlbnRlcnByaXNlL2RiIGNvbm5lY3Rpb25zXG4gIHZhciBhbnlFbnRlcnByaXNlT3JEYkNvbm5lY3Rpb24gPSBzZWxmLl9hcmVUaGVyZUFueUVudGVycHJpc2VPckRiQ29ubigpO1xuICB2YXIgYW55U29jaWFsQ29ubmVjdGlvbiA9IHNlbGYuX2FyZVRoZXJlQW55U29jaWFsQ29ubigpO1xuICB2YXIgYW55RGJDb25uZWN0aW9uID0gc2VsZi5fYXJlVGhlcmVBbnlEYkNvbm4oKTtcblxuICAkKCcuYTAtcGFuZWwgLmEwLWVtYWlsIGlucHV0JykudG9nZ2xlQ2xhc3MoJ2EwLWhpZGUnLCAhKHNlbGYuX3NpZ25pbk9wdGlvbnMuc2hvd0VtYWlsICYmIGFueUVudGVycHJpc2VPckRiQ29ubmVjdGlvbikpO1xuICAkKCcuYTAtcGFuZWwgLmEwLXpvY2lhbC5hMC1wcmltYXJ5JykudG9nZ2xlQ2xhc3MoJ2EwLWhpZGUnLCAhKHNlbGYuX3NpZ25pbk9wdGlvbnMuc2hvd0VtYWlsICYmIGFueUVudGVycHJpc2VPckRiQ29ubmVjdGlvbikpO1xuICAkKCcuYTAtcGFuZWwgLmEwLXBhc3N3b3JkJykudG9nZ2xlQ2xhc3MoJ2EwLWhpZGUnLCAhKHNlbGYuX3NpZ25pbk9wdGlvbnMuc2hvd0VtYWlsICYmIHNlbGYuX3NpZ25pbk9wdGlvbnMuc2hvd1Bhc3N3b3JkICYmIGFueURiQ29ubmVjdGlvbikpO1xuICAkKCcuYTAtcGFuZWwgLmEwLXNlcGFyYXRvcicpLnRvZ2dsZUNsYXNzKCdhMC1oaWRlJywgIShzZWxmLl9zaWduaW5PcHRpb25zLnNob3dFbWFpbCAmJiBhbnlFbnRlcnByaXNlT3JEYkNvbm5lY3Rpb24gJiYgYW55U29jaWFsQ29ubmVjdGlvbikpO1xuXG4gICQoJy5hMC1wYW5lbCAuYTAtaW5wdXRzJykudG9nZ2xlQ2xhc3MoJ2EwLWhpZGUnLCAhYW55RW50ZXJwcmlzZU9yRGJDb25uZWN0aW9uKTtcbiAgJCgnLmEwLXBhbmVsIC5hMC1hY3Rpb24nKS50b2dnbGVDbGFzcygnYTAtaGlkZScsICFhbnlFbnRlcnByaXNlT3JEYkNvbm5lY3Rpb24pO1xuXG4gIGlmIChpc19zbWFsbF9zY3JlZW4oKSkge1xuICAgIHZhciBjb2xsYXBzZV9vbmZvY3VzID0gcmVxdWlyZSgnLi9qcy9jb2xsYXBzZV9vbmZvY3VzJyk7XG4gICAgY29sbGFwc2Vfb25mb2N1cy5ob29rKCQoJy5hMC1ub3Rsb2dnZWRpbiBmb3JtIGlucHV0JyksICQoJy5hMC1jb2xsYXBzZS1zb2NpYWwnKSk7XG4gIH1cblxuICAvLyBpZiB1c2VyIGluIEFEIGlwIHJhbmdlXG4gIGlmIChzZWxmLl9zc29EYXRhICYmIHNlbGYuX3Nzb0RhdGEuY29ubmVjdGlvbikge1xuICAgIHNlbGYuX3Nob3dBZEluRG9tYWluRXhwZXJpZW5jZSgpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIHtcbiAgICAvLyBpZiB1c2VyIGxvZ2dlZCBpbiBzaG93IGxvZ2dlZCBpbiBleHBlcmllbmNlXG4gICAgaWYgKHNlbGYuX3Nzb0RhdGEuc3NvICYmIHNlbGYuX3NpZ25pbk9wdGlvbnNbJ2VuYWJsZVJldHVyblVzZXJFeHBlcmllbmNlJ10pIHtcbiAgICAgIHNlbGYuX3Nob3dMb2dnZWRJbkV4cGVyaWVuY2UoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuXG4gIHNlbGYuX3NldExvZ2luVmlldyh7IGlzUmV0dXJuaW5nVXNlcjogc2VsZi5fc3NvRGF0YS5zc28gJiYgc2VsZi5fc2lnbmluT3B0aW9uc1snZW5hYmxlUmV0dXJuVXNlckV4cGVyaWVuY2UnXSAhPT0gZmFsc2V9KTtcbn07XG5cbkF1dGgwV2lkZ2V0LnByb3RvdHlwZS5fZ2V0RW1iZWRlZFRlbXBsYXRlID0gZnVuY3Rpb24gKHNpZ25pbk9wdGlvbnMpIHtcbiAgcmV0dXJuIHNpZ25pbk9wdGlvbnMuY2hyb21lID9cbiAgICBtYWluVG1wbCh7XG4gICAgICBleHBhbmQ6ICAgICAgIHRydWUsIC8vIGNvdmVyIHRoZSBlbnRpcmUgY29udGFpbmVyXG4gICAgICBpMThuOiAgICAgICAgIHRoaXMuX2RpY3QsXG4gICAgICBvcHRpb25zOiAgICAgIHNpZ25pbk9wdGlvbnMsXG4gICAgICBhbHRfc3Bpbm5lcjogICFoYXNfYW5pbWF0aW9ucygpID8gKHNpZ25pbk9wdGlvbnMuY2RuICsgJ2ltZy9hamF4LWxvYWRlci5naWYnKSA6IG51bGxcbiAgICB9KSA6XG4gICAgZW1iVG1wbCh7XG4gICAgICBlbWJlZGRlZDogICAgIHRydWUsXG4gICAgICBpMThuOiAgICAgICAgIHRoaXMuX2RpY3QsXG4gICAgICBvcHRpb25zOiAgICAgIHNpZ25pbk9wdGlvbnMsXG4gICAgICBhbHRfc3Bpbm5lcjogICFoYXNfYW5pbWF0aW9ucygpID8gKHNpZ25pbk9wdGlvbnMuY2RuICsgJ2ltZy9hamF4LWxvYWRlci5naWYnKSA6IG51bGxcbiAgICB9KTtcbn07XG5cbkF1dGgwV2lkZ2V0LnByb3RvdHlwZS5nZXRDbGllbnQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9hdXRoMDtcbn07XG5cbkF1dGgwV2lkZ2V0LnByb3RvdHlwZS5wYXJzZUhhc2ggPSBmdW5jdGlvbiAoaGFzaCkge1xuICByZXR1cm4gdGhpcy5fYXV0aDAucGFyc2VIYXNoKGhhc2gpO1xufTtcblxuQXV0aDBXaWRnZXQucHJvdG90eXBlLmdldFByb2ZpbGUgPSBmdW5jdGlvbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gIHRoaXMuX2F1dGgwLmdldFByb2ZpbGUodG9rZW4sIGNhbGxiYWNrKTtcbn07XG5cbkF1dGgwV2lkZ2V0LnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uIChzaWduaW5PcHRpb25zLCBjYWxsYmFjaykge1xuICB0aGlzLl9vcGVuV2l0aCA9ICdSZXNldCc7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgJChmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5fc2hvdyhzaWduaW5PcHRpb25zLCBjYWxsYmFjayk7XG4gIH0pO1xuICByZXR1cm4gc2VsZjtcbn07XG5cbkF1dGgwV2lkZ2V0LnByb3RvdHlwZS5zaWdudXAgPSBmdW5jdGlvbiAoc2lnbmluT3B0aW9ucywgY2FsbGJhY2spIHtcbiAgdGhpcy5fb3BlbldpdGggPSAnU2lnblVwJztcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICAkKGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLl9zaG93KHNpZ25pbk9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfSk7XG4gIHJldHVybiBzZWxmO1xufTtcblxuQXV0aDBXaWRnZXQucHJvdG90eXBlLnNob3cgPSBBdXRoMFdpZGdldC5wcm90b3R5cGUuc2lnbmluID0gZnVuY3Rpb24gKHNpZ25pbk9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIHRoaXMuX29wZW5XaXRoID0gbnVsbDtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICAkKGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLl9zaG93KHNpZ25pbk9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgfSk7XG4gIHJldHVybiBzZWxmO1xufTtcblxuQXV0aDBXaWRnZXQucHJvdG90eXBlLl9zaG93ID0gZnVuY3Rpb24gKHNpZ25pbk9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygc2lnbmluT3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gc2lnbmluT3B0aW9ucztcbiAgICBzaWduaW5PcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgc2VsZi5fc2lnbmluT3B0aW9ucyA9IF8uZXh0ZW5kKHt9LCBzZWxmLl9vcHRpb25zLCBzaWduaW5PcHRpb25zKTtcblxuICB2YXIgZXh0cmEgPSB1dGlscy5leHRyYWN0KHNlbGYuX3NpZ25pbk9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgWyAnc3RhdGUnLCAnYWNjZXNzX3Rva2VuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzY29wZScsICdwcm90b2NvbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVxdWVzdF9pZCcgXSk7XG5cbiAgc2VsZi5fc2lnbmluT3B0aW9ucy5leHRyYVBhcmFtZXRlcnMgPSBfLmV4dGVuZCh7fSwgZXh0cmEsIHNlbGYuX3NpZ25pbk9wdGlvbnMuZXh0cmFQYXJhbWV0ZXJzKTtcblxuICAvLyB3aWRnZXQgY29udGFpbmVyXG4gIGlmIChzZWxmLl9zaWduaW5PcHRpb25zLmNvbnRhaW5lcikge1xuICAgIHNlbGYuX3NpZ25pbk9wdGlvbnMudGhlbWUgPSAnc3RhdGljJztcbiAgICBzZWxmLl9zaWduaW5PcHRpb25zLnN0YW5kYWxvbmUgPSB0cnVlO1xuICAgIHNlbGYuX3NpZ25pbk9wdGlvbnMudG9wID0gdHJ1ZTtcblxuICAgIHZhciBzcGVjaWZpZWRDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzZWxmLl9zaWduaW5PcHRpb25zLmNvbnRhaW5lcik7XG4gICAgc3BlY2lmaWVkQ29udGFpbmVyLmlubmVySFRNTCA9IHNlbGYuX2dldEVtYmVkZWRUZW1wbGF0ZShzZWxmLl9zaWduaW5PcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZW1vdmUgd2lkZ2V0IGNvbnRhaW5lciAoaWYgZXhpc3QpXG4gICAgJCgpLnBhcmVudCgpLnJlbW92ZSgpO1xuXG4gICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdi5pbm5lckhUTUwgPSBtYWluVG1wbCh7XG4gICAgICBpMThuOiAgICB0aGlzLl9kaWN0LFxuICAgICAgb3B0aW9uczogc2VsZi5fc2lnbmluT3B0aW9ucyxcbiAgICAgIGFsdF9zcGlubmVyOiAhaGFzX2FuaW1hdGlvbnMoKSA/IChzZWxmLl9zaWduaW5PcHRpb25zLmNkbiArICdpbWcvYWpheC1sb2FkZXIuZ2lmJykgOiBudWxsXG4gICAgfSk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpO1xuXG4gICAgaWYgKCF+JCgnLmEwLW92ZXJsYXknKS5jc3MoJ2JhY2tncm91bmQtaW1hZ2UnKS5pbmRleE9mKFwicmFkaWFsXCIpICYmXG4gICAgICAgICAgIX5uYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKFwiTVNJRSAxMFwiKSkge1xuICAgICAgJCgnLmEwLW92ZXJsYXknKS5hZGRDbGFzcygnYTAtaWU4LW92ZXJsYXknKTtcbiAgICB9XG4gIH1cblxuICBzZWxmLl9ub2RlID0gJCgpWzBdO1xuXG4gIGlmICghcGxhY2Vob2xkZXJTdXBwb3J0ZWQpIHtcbiAgICAkKCcuYTAtb3ZlcmxheScpLmFkZENsYXNzKCdhMC1uby1wbGFjZWhvbGRlci1zdXBwb3J0Jyk7XG4gIH1cblxuICBzZWxmLl9pbml0aWFsaXplKGNhbGxiYWNrKTtcblxuICByZXR1cm4gc2VsZjtcbn07XG5cbkF1dGgwV2lkZ2V0LnByb3RvdHlwZS5sb2dvdXQgPSBmdW5jdGlvbiAocXVlcnkpIHtcbiAgdGhpcy5fYXV0aDAubG9nb3V0KHF1ZXJ5KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0aDBXaWRnZXQ7XG4iLCJ2YXIgcXdlcnkgICAgICAgPSByZXF1aXJlKCdxd2VyeScpO1xudmFyIGJvbnpvICAgICAgID0gcmVxdWlyZSgnYm9uem8nKTtcbnZhciBkb21yZWFkeSA9IHJlcXVpcmUoJ2RvbXJlYWR5Jyk7XG52YXIgYmVhbiAgICAgICAgPSByZXF1aXJlKCdiZWFuJyk7XG5cbmJvbnpvLmF1Zyh7XG4gIGEwX29uOiBmdW5jdGlvbiAoZXZlbnQsIGhhbmRsZXIpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgYmVhbi5vbihlbCwgZXZlbnQsIGhhbmRsZXIpO1xuICAgIH0pO1xuICB9LFxuICBhMF9vZmY6IGZ1bmN0aW9uIChldmVudCwgaGFuZGxlcikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICBiZWFuLm9mZihlbCwgZXZlbnQsIGhhbmRsZXIpO1xuICAgIH0pO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIHJvb3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBkb21yZWFkeShzZWxlY3Rvcik7XG4gIH1cbiAgcmV0dXJuIGJvbnpvKHF3ZXJ5KCcjYTAtd2lkZ2V0ICcgKyAoc2VsZWN0b3IgfHwgJycpLCByb290KSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5jcmVhdGUgPSBmdW5jdGlvbiAoaHRtbCkge1xuICByZXR1cm4gYm9uem8uY3JlYXRlKGh0bWwpO1xufTsiLCJ2YXIgJCA9IHJlcXVpcmUoJy4vYm9uem9fcXdlcnknKTtcblxubW9kdWxlLmV4cG9ydHMuaG9vayA9IGZ1bmN0aW9uIChpbnB1dHMsIGNvbGxhcHNpYmxlKSB7XG4gIHZhciB0aW1lb3V0SWQ7XG5cbiAgZnVuY3Rpb24gb25fYmx1cigpIHtcbiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbGxhcHNpYmxlLnNob3coKTtcbiAgICAgICQoJy5hMC1oZWFkZXInKS5zaG93KCk7XG4gICAgfSwgNSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbl9mb2N1cyAoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgY29sbGFwc2libGUuaGlkZSgpO1xuICAgICQoJy5hMC1oZWFkZXInKS5oaWRlKCk7XG4gIH1cblxuICBpbnB1dHNcbiAgICAuYTBfb2ZmKCdibHVyLmNvbGxhcHNlX29uZm9jdXMnKVxuICAgIC5hMF9vbignYmx1ci5jb2xsYXBzZV9vbmZvY3VzJywgb25fYmx1cilcbiAgICAuYTBfb2ZmKCdmb2N1cy5jb2xsYXBzZV9vbmZvY3VzJylcbiAgICAuYTBfb24oJ2ZvY3VzLmNvbGxhcHNlX29uZm9jdXMnLCBvbl9mb2N1cylcbiAgICAuYTBfb2ZmKCd0b3VjaHN0YXJ0LnRzX2NvbGxhcHNlX29uZm9jdXMnKVxuICAgIC5hMF9vbigndG91Y2hzdGFydC50c19jb2xsYXBzZV9vbmZvY3VzJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBlLnRhcmdldC5mb2N1cygpO1xuICAgICAgfSwgNTAwKTtcbiAgICB9KTtcbn07IiwiLyoqXG4gKiBFeHBvc2UgYGdldF92aWV3cG9ydGBcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldF92aWV3cG9ydDtcblxuLyoqXG4gKiBHZXQgd2luZG93IHZpZXdwb3J0IGBoZWlnaHRgIGFuZCBgd2lkdGhgXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSBgd2lkdGhgIGFuZCBgaGVpZ2h0YCBwcm9wZXJ0aWVzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGdldF92aWV3cG9ydCgpIHtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogTWF0aC5tYXgoZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCksXG4gICAgaGVpZ2h0OiBNYXRoLm1heChkb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApXG4gIH1cbn0iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHdpbmRvdy5tYXRjaE1lZGlhICYmICF3aW5kb3cubWF0Y2hNZWRpYSggXCIobWluLXdpZHRoOiAzNDBweClcIiApLm1hdGNoZXM7XG59OyIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgciA9IG1vZHVsZS5leHBvcnRzO1xuXG4vLyBDaGVjayBmb3IgYSB2YWxpZCBlbWFpbCBhZGRyZXNzXG5yLmVtYWlsX3BhcnNlciA9IC9eKChbXjw+KClbXFxdXFxcXC4sOzpcXHNAXFxcIl0rKFxcLltePD4oKVtcXF1cXFxcLiw7Olxcc0BcXFwiXSspKil8KFxcXCIuK1xcXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXF0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvO1xuXG4vLyBjaGVjayBmb3IgYW4gZW1wdHkgZm9ybSB2YWx1ZVxuci5lbXB0eSA9IC9eXFxzKiQvO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgJ2dvb2dsZS1vcGVuaWQnOiB7XG4gICAgICAgIGNzczogJ2dvb2dsZScsXG4gICAgICAgIHRpdGxlOiAnR29vZ2xlIE9wZW5JZCcsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ2dvb2dsZS1hcHBzJzoge1xuICAgICAgICBjc3M6ICdnb29nbGUnLFxuICAgICAgICB0aXRsZTogJ0dvb2dsZSBBcHBzJyxcbiAgICAgICAgc29jaWFsOiBmYWxzZVxuICAgIH0sXG4gICAgJ2dvb2dsZS1vYXV0aDInOiB7XG4gICAgICAgIGNzczogJ2dvb2dsZXBsdXMnLFxuICAgICAgICB0aXRsZTogJ0dvb2dsZScsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ2ZhY2Vib29rJzoge1xuICAgICAgICBjc3M6ICdmYWNlYm9vaycsXG4gICAgICAgIHRpdGxlOiAnRmFjZWJvb2snLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICd3aW5kb3dzbGl2ZSc6IHtcbiAgICAgICAgY3NzOiAnd2luZG93cycsXG4gICAgICAgIHRpdGxlOiAnTWljcm9zb2Z0IEFjY291bnQnLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICdsaW5rZWRpbic6IHtcbiAgICAgICAgY3NzOiAnbGlua2VkaW4nLFxuICAgICAgICB0aXRsZTogJ0xpbmtlZEluJyxcbiAgICAgICAgc29jaWFsOiB0cnVlXG4gICAgfSxcbiAgICAnZ2l0aHViJzoge1xuICAgICAgICBjc3M6ICdnaXRodWInLFxuICAgICAgICB0aXRsZTogJ0dpdEh1YicsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ3BheXBhbCc6IHtcbiAgICAgICAgY3NzOiAncGF5cGFsJyxcbiAgICAgICAgdGl0bGU6ICdQYXlQYWwnLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICd0d2l0dGVyJzoge1xuICAgICAgICBjc3M6ICd0d2l0dGVyJyxcbiAgICAgICAgdGl0bGU6ICdUd2l0dGVyJyxcbiAgICAgICAgc29jaWFsOiB0cnVlXG4gICAgfSxcbiAgICAnYW1hem9uJzoge1xuICAgICAgICBjc3M6ICdhbWF6b24nLFxuICAgICAgICB0aXRsZTogJ0FtYXpvbicsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ3Zrb250YWt0ZSc6IHtcbiAgICAgICAgY3NzOiAndmsnLFxuICAgICAgICB0aXRsZTogJ3ZLb250YWt0ZScsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ3lhbmRleCc6IHtcbiAgICAgICAgY3NzOiAneWFuZGV4JyxcbiAgICAgICAgdGl0bGU6ICdZYW5kZXgnLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICdvZmZpY2UzNjUnOiB7XG4gICAgICAgIGNzczogJ29mZmljZTM2NScsXG4gICAgICAgIHRpdGxlOiAnT2ZmaWNlMzY1JyxcbiAgICAgICAgc29jaWFsOiBmYWxzZVxuICAgIH0sXG4gICAgJ3dhYWQnOiB7XG4gICAgICAgIGNzczogJ3dhYWQnLFxuICAgICAgICB0aXRsZTogJ1dpbmRvd3MgQXp1cmUgQUQnLFxuICAgICAgICBzb2NpYWw6IGZhbHNlXG4gICAgfSxcbiAgICAnYWRmcyc6IHtcbiAgICAgICAgY3NzOiAnd2luZG93cycsXG4gICAgICAgIHRpdGxlOiAnQURGUycsXG4gICAgICAgIHNvY2lhbDogZmFsc2VcbiAgICB9LFxuICAgICdzYW1scCc6IHtcbiAgICAgICAgY3NzOiAnZ3Vlc3QnLFxuICAgICAgICB0aXRsZTogJ1NBTUwnLFxuICAgICAgICBzb2NpYWw6IGZhbHNlXG4gICAgfSxcbiAgICAncGluZ2ZlZGVyYXRlJzoge1xuICAgICAgICBjc3M6ICdndWVzdCcsXG4gICAgICAgIHRpdGxlOiAnUGluZyBGZWRlcmF0ZScsXG4gICAgICAgIHNvY2lhbDogZmFsc2VcbiAgICB9LFxuICAgICdpcCc6IHtcbiAgICAgICAgY3NzOiAnZ3Vlc3QnLFxuICAgICAgICB0aXRsZTogJ0lQIEFkZHJlc3MnLFxuICAgICAgICBzb2NpYWw6IGZhbHNlXG4gICAgfSxcbiAgICAnbXNjcm0nOiB7XG4gICAgICAgIGNzczogJ2d1ZXN0JyxcbiAgICAgICAgdGl0bGU6ICdEeW5hbWljcyBDUk0nLFxuICAgICAgICBzb2NpYWw6IGZhbHNlXG4gICAgfSxcbiAgICAnYWQnOiB7XG4gICAgICAgIGNzczogJ3dpbmRvd3MnLFxuICAgICAgICB0aXRsZTogJ0FEIC8gTERBUCcsXG4gICAgICAgIHNvY2lhbDogZmFsc2UsXG4gICAgICAgIHVzZXJBbmRQYXNzOiB0cnVlXG4gICAgfSxcbiAgICAnY3VzdG9tJzoge1xuICAgICAgICBjc3M6ICdndWVzdCcsXG4gICAgICAgIHRpdGxlOiAnQ3VzdG9tIEF1dGgnLFxuICAgICAgICBzb2NpYWw6IGZhbHNlXG4gICAgfSxcbiAgICAnYXV0aDAnOiB7XG4gICAgICAgIGNzczogJ2d1ZXN0JyxcbiAgICAgICAgdGl0bGU6ICdBdXRoMCcsXG4gICAgICAgIHNvY2lhbDogZmFsc2UsXG4gICAgICAgIHVzZXJBbmRQYXNzOiB0cnVlXG4gICAgfSxcbiAgICAnYXV0aDAtYWRsZGFwJzoge1xuICAgICAgICBjc3M6ICdndWVzdCcsXG4gICAgICAgIHRpdGxlOiAnQUQvTERBUCcsXG4gICAgICAgIHNvY2lhbDogZmFsc2UsXG4gICAgICAgIHVzZXJBbmRQYXNzOiB0cnVlXG4gICAgfSxcbiAgICAndGhpcnR5c2V2ZW5zaWduYWxzJzoge1xuICAgICAgICBjc3M6ICd0aGlydHlzZXZlbnNpZ25hbHMnLFxuICAgICAgICB0aXRsZTogJzM3IFNpZ25hbHMnLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICdib3gnOiB7XG4gICAgICAgIGNzczogJ2JveCcsXG4gICAgICAgIHRpdGxlOiAnQm94JyxcbiAgICAgICAgc29jaWFsOiB0cnVlLFxuICAgICAgICBpbWFnZWljb246IHRydWVcbiAgICB9LFxuICAgICdzYWxlc2ZvcmNlJzoge1xuICAgICAgICBjc3M6ICdzYWxlc2ZvcmNlJyxcbiAgICAgICAgdGl0bGU6ICdTYWxlc2ZvcmNlJyxcbiAgICAgICAgc29jaWFsOiB0cnVlXG4gICAgfSxcbiAgICAnc2FsZXNmb3JjZS1zYW5kYm94Jzoge1xuICAgICAgICBjc3M6ICdzYWxlc2ZvcmNlJyxcbiAgICAgICAgdGl0bGU6ICdTYWxlc2ZvcmNlIChzYW5kYm94KScsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ2ZpdGJpdCc6IHtcbiAgICAgICAgY3NzOiAnZml0Yml0JyxcbiAgICAgICAgdGl0bGU6ICdGaXRiaXQnLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICdiYWlkdSc6IHtcbiAgICAgICAgY3NzOiAnYmFpZHUnLFxuICAgICAgICB0aXRsZTogJ0JhaWR1JyxcbiAgICAgICAgc29jaWFsOiB0cnVlXG4gICAgfSxcbiAgICAncmVucmVuJzoge1xuICAgICAgICBjc3M6ICdyZW5yZW4nLFxuICAgICAgICB0aXRsZTogJ1JlblJlbicsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ3lhaG9vJzoge1xuICAgICAgICBjc3M6ICd5YWhvbycsXG4gICAgICAgIHRpdGxlOiAnWWFob28hJyxcbiAgICAgICAgc29jaWFsOiB0cnVlXG4gICAgfSxcbiAgICAnYW9sJzoge1xuICAgICAgICBjc3M6ICdhb2wnLFxuICAgICAgICB0aXRsZTogJ0FvbCcsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ3lhbW1lcic6IHtcbiAgICAgICAgY3NzOiAneWFtbWVyJyxcbiAgICAgICAgdGl0bGU6ICdZYW1tZXInLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICd3b3JkcHJlc3MnOiB7XG4gICAgICAgIGNzczogJ3dvcmRwcmVzcycsXG4gICAgICAgIHRpdGxlOiAnV29yZHByZXNzJyxcbiAgICAgICAgc29jaWFsOiB0cnVlXG4gICAgfSxcbiAgICAnZHdvbGxhJzoge1xuICAgICAgICBjc3M6ICdkd29sbGEnLFxuICAgICAgICB0aXRsZTogJ0R3b2xsYScsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ3Nob3BpZnknOiB7XG4gICAgICAgIGNzczogJ3Nob3BpZnknLFxuICAgICAgICB0aXRsZTogJ1Nob3BpZnknLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICdtaWljYXJkJzoge1xuICAgICAgICBjc3M6ICdtaWljYXJkJyxcbiAgICAgICAgdGl0bGU6ICdtaWlDYXJkJyxcbiAgICAgICAgc29jaWFsOiB0cnVlXG4gICAgfSxcbiAgICAnc291bmRjbG91ZCc6IHtcbiAgICAgICAgY3NzOiAnc291bmRjbG91ZCcsXG4gICAgICAgIHRpdGxlOiAnU291bmRjbG91ZCcsXG4gICAgICAgIHNvY2lhbDogdHJ1ZVxuICAgIH0sXG4gICAgJ2ViYXknOiB7XG4gICAgICAgIGNzczogJ2ViYXknLFxuICAgICAgICB0aXRsZTogJ2ViYXknLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICdldmVybm90ZSc6IHtcbiAgICAgICAgY3NzOiAnZXZlcm5vdGUnLFxuICAgICAgICB0aXRsZTogJ0V2ZXJub3RlJyxcbiAgICAgICAgc29jaWFsOiB0cnVlXG4gICAgfSxcbiAgICAnc2hhcmVwb2ludCc6IHtcbiAgICAgICAgY3NzOiAnc2hhcmVwb2ludCcsXG4gICAgICAgIHRpdGxlOiAnU2hhcmVQb2ludCBBcHBzJyxcbiAgICAgICAgc29jaWFsOiBmYWxzZVxuICAgIH0sXG4gICAgJ3dlaWJvJzoge1xuICAgICAgICBjc3M6ICd3ZWlibycsXG4gICAgICAgIHRpdGxlOiAnV2VpYm8nLFxuICAgICAgICBzb2NpYWw6IHRydWVcbiAgICB9LFxuICAgICdpbnN0YWdyYW0nOiB7XG4gICAgICAgIGNzczogJ2luc3RhZ3JhbScsXG4gICAgICAgIHRpdGxlOiAnSW5zdGFncmFtJyxcbiAgICAgICAgc29jaWFsOiB0cnVlXG4gICAgfVxufTsiLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2pzL2JvbnpvX3F3ZXJ5Jyk7XG52YXIgcmVzZXQgPSBtb2R1bGUuZXhwb3J0cztcblxudmFyIGlzX3NtYWxsX3NjcmVlbiA9IHJlcXVpcmUoJy4uL2pzL2lzX3NtYWxsX3NjcmVlbicpO1xudmFyIGNvbGxhcHNlX29uZm9jdXMgPSByZXF1aXJlKCcuLi9qcy9jb2xsYXBzZV9vbmZvY3VzJyk7XG52YXIgcmVnZXggPSByZXF1aXJlKCcuLi9qcy9yZWdleCcpO1xudmFyIGVtYWlsX3BhcnNlciA9IHJlZ2V4LmVtYWlsX3BhcnNlcjtcbnZhciBlbXB0eSA9IHJlZ2V4LmVtcHR5O1xuXG5yZXNldC5zdWJtaXQgPSBmdW5jdGlvbiAod2lkZ2V0LCBjb25uZWN0aW9uTmFtZSwgdXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gIHZhciBjb250YWluZXIgPSAkKCcuYTAtcmVzZXQgZm9ybScpO1xuXG4gIHdpZGdldC5fc2V0TG9naW5WaWV3KHsgbW9kZTogJ2xvYWRpbmcnLCB0aXRsZTogJ3Jlc2V0JyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgd2lkZ2V0Ll9hdXRoMC5jaGFuZ2VQYXNzd29yZCh7XG4gICAgICBjb25uZWN0aW9uOiBjb25uZWN0aW9uTmFtZSxcbiAgICAgIHVzZXJuYW1lOiAgIHVzZXJuYW1lLFxuICAgICAgcGFzc3dvcmQ6ICAgcGFzc3dvcmRcbiAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG5cbiAgICAgIGlmICggJCgpWzBdICE9PSB3aWRnZXQuX25vZGUgKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmxvZyAmJiBjb25zb2xlLmxvZygndGhpcyBwYXNzd29yZCByZXNldCB3YXMgdHJpZ2dlcmVkIGZyb20gYW5vdGhlciBub2RlIGluc3RhbmNlJywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgJCgnLmEwLXBhc3N3b3JkIGlucHV0JywgY29udGFpbmVyKS52YWwoJycpO1xuICAgICAgJCgnLmEwLXJlcGVhdFBhc3N3b3JkIGlucHV0JywgY29udGFpbmVyKS52YWwoJycpO1xuXG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiB3aWRnZXQuX3NldExvZ2luVmlldyh7IG1vZGU6ICdyZXNldCcgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICg0MDAgPT09IGVyci5zdGF0dXMpIHJldHVybiB3aWRnZXQuX3Nob3dFcnJvcih3aWRnZXQuX2RpY3QudCgncmVzZXQ6dXNlckRvZXNOb3RFeGlzdEVycm9yVGV4dCcpKTtcbiAgICAgICAgICB3aWRnZXQuX3Nob3dFcnJvcih3aWRnZXQuX2RpY3QudCgncmVzZXQ6c2VydmVyRXJyb3JUZXh0JykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgJCgnLmEwLWVtYWlsIGlucHV0JywgY29udGFpbmVyKS52YWwoJycpO1xuXG4gICAgICB3aWRnZXQuX3NldExvZ2luVmlldyh7fSwgZnVuY3Rpb24gKCkge1xuICAgICAgICB3aWRnZXQuX3Nob3dTdWNjZXNzKHdpZGdldC5fZGljdC50KCdyZXNldDpzdWNjZXNzVGV4dCcpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbnJlc2V0LmJpbmQgPSBmdW5jdGlvbiAod2lkZ2V0KSB7XG4gICQoJy5hMC1yZXNldCAuYTAtb3B0aW9ucycpLnNob3cod2lkZ2V0Ll9vcGVuV2l0aCA/ICdub25lJyA6ICdibG9jaycpO1xuXG4gIHZhciBmb3JtID0gJCgnLmEwLXJlc2V0IGZvcm0nKVxuICAgIC5hMF9vZmYoJ3N1Ym1pdCcpXG4gICAgLmEwX29uKCdzdWJtaXQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIHVzZXJuYW1lID0gJCgnLmEwLWVtYWlsIGlucHV0JywgZm9ybSkudmFsKCk7XG4gICAgICB2YXIgcGFzc3dvcmQgPSAkKCcuYTAtcGFzc3dvcmQgaW5wdXQnLCBmb3JtKS52YWwoKTtcbiAgICAgIHZhciBjb25uZWN0aW9uICA9IHdpZGdldC5fZ2V0QXV0aDBDb25uZWN0aW9uKCk7XG5cbiAgICAgIGlmICghdmFsaWQoZm9ybSwgd2lkZ2V0KSkgcmV0dXJuO1xuICAgICAgcmVzZXQuc3VibWl0KHdpZGdldCwgY29ubmVjdGlvbi5uYW1lLCB1c2VybmFtZSwgcGFzc3dvcmQpO1xuICAgIH0pO1xuXG4gIGlmIChpc19zbWFsbF9zY3JlZW4oKSkge1xuICAgIGNvbGxhcHNlX29uZm9jdXMuaG9vaygkKCcuYTAtcmVzZXQgZm9ybSBpbnB1dCcpLCAkKCcuYTAtY29sbGFwc2UtcmVzZXQnKSk7XG4gIH1cblxuICAkKCcuYTAtcmVwZWF0UGFzc3dvcmQgaW5wdXQnLCBmb3JtKVxuICAgIC5hMF9vZmYoJ2lucHV0JylcbiAgICAuYTBfb24oJ2lucHV0JywgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoJCgnLmEwLXBhc3N3b3JkIGlucHV0JywgZm9ybSkudmFsKCkgIT0gdGhpcy52YWx1ZSkge1xuICAgICAgICB3aWRnZXQuX3NldEN1c3RvbVZhbGlkaXR5KHRoaXMsIHdpZGdldC5fZGljdC50KCdyZXNldDplbnRlclNhbWVQYXNzd29yZFRleHQnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aWRnZXQuX3NldEN1c3RvbVZhbGlkaXR5KHRoaXMsICcnKTtcbiAgICAgIH1cbiAgICB9KTtcbn07XG5cbmZ1bmN0aW9uIHZhbGlkKGZvcm0sIHdpZGdldCkge1xuICB2YXIgb2sgPSB0cnVlO1xuICB2YXIgZW1haWxfaW5wdXQgPSAkKCdpbnB1dFtuYW1lPWVtYWlsXScsIGZvcm0pO1xuICB2YXIgZW1haWxfZW1wdHkgPSBlbXB0eS50ZXN0KGVtYWlsX2lucHV0LnZhbCgpKTtcbiAgdmFyIGVtYWlsX3BhcnNlZCA9IGVtYWlsX3BhcnNlci5leGVjKGVtYWlsX2lucHV0LnZhbCgpLnRvTG93ZXJDYXNlKCkpO1xuICB2YXIgcGFzc3dvcmRfaW5wdXQgPSAkKCdpbnB1dFtuYW1lPXBhc3N3b3JkXScsIGZvcm0pO1xuICB2YXIgcGFzc3dvcmRfZW1wdHkgPSBlbXB0eS50ZXN0KHBhc3N3b3JkX2lucHV0LnZhbCgpKTtcbiAgdmFyIHJlcGVhdF9wYXNzd29yZF9pbnB1dCA9ICQoJ2lucHV0W25hbWU9cmVwZWF0X3Bhc3N3b3JkXScsIGZvcm0pO1xuICB2YXIgcmVwZWF0X3Bhc3N3b3JkX2VtcHR5ID0gZW1wdHkudGVzdChyZXBlYXRfcGFzc3dvcmRfaW5wdXQudmFsKCkpO1xuXG4gIC8vIGFzdW1lIHZhbGlkIGJ5IGRlZmF1bHRcbiAgLy8gYW5kIHJlc2V0IGVycm9yc1xuICB3aWRnZXQuX3Nob3dFcnJvcigpO1xuICB3aWRnZXQuX2ZvY3VzRXJyb3IoKTtcblxuICBpZiAoZW1haWxfZW1wdHkpIHtcbiAgICB3aWRnZXQuX2ZvY3VzRXJyb3IoZW1haWxfaW5wdXQpO1xuICAgIG9rID0gZmFsc2U7XG4gIH1cblxuICBpZiAoIWVtYWlsX3BhcnNlZCAmJiAhZW1haWxfZW1wdHkpIHtcbiAgICB3aWRnZXQuX2ZvY3VzRXJyb3IoZW1haWxfaW5wdXQsIHdpZGdldC5fZGljdC50KCdpbnZhbGlkJykpO1xuICAgIG9rID0gZmFsc2U7XG4gIH1cblxuICBpZiAocGFzc3dvcmRfZW1wdHkpIHtcbiAgICB3aWRnZXQuX2ZvY3VzRXJyb3IocGFzc3dvcmRfaW5wdXQpO1xuICAgIG9rID0gZmFsc2U7XG4gIH07XG5cbiAgaWYgKHJlcGVhdF9wYXNzd29yZF9lbXB0eSkge1xuICAgIHdpZGdldC5fZm9jdXNFcnJvcihyZXBlYXRfcGFzc3dvcmRfaW5wdXQpO1xuICAgIG9rID0gZmFsc2U7XG4gIH07XG5cbiAgaWYgKHJlcGVhdF9wYXNzd29yZF9pbnB1dC52YWwoKSAhPT0gcGFzc3dvcmRfaW5wdXQudmFsKCkpIHtcbiAgICB3aWRnZXQuX2ZvY3VzRXJyb3IocmVwZWF0X3Bhc3N3b3JkX2lucHV0LCB3aWRnZXQuX2RpY3QudCgnbXVzdE1hdGNoJykpO1xuICAgIG9rID0gZmFsc2U7XG4gIH07XG5cbiAgcmV0dXJuIG9rO1xufSIsInZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xudmFyICQgPSByZXF1aXJlKCcuLi9qcy9ib256b19xd2VyeScpO1xuXG52YXIgYnV0dG9uVG1wbCA9IHJlcXVpcmUoJy4uL2h0bWwvYnV0dG9uLmVqcycpO1xudmFyIGNvbGxhcHNlX29uZm9jdXMgPSByZXF1aXJlKCcuLi9qcy9jb2xsYXBzZV9vbmZvY3VzJyk7XG52YXIgaXNfc21hbGxfc2NyZWVuID0gcmVxdWlyZSgnLi4vanMvaXNfc21hbGxfc2NyZWVuJyk7XG52YXIgcmVnZXggPSByZXF1aXJlKCcuLi9qcy9yZWdleCcpO1xudmFyIGVtcHR5ID0gcmVnZXguZW1wdHk7XG52YXIgZW1haWxfcGFyc2VyID0gcmVnZXguZW1haWxfcGFyc2VyO1xudmFyIHNpZ251cCA9IG1vZHVsZS5leHBvcnRzO1xuXG5cbnNpZ251cC5zdWJtaXQgPSBmdW5jdGlvbiAod2lkZ2V0LCBjb25uZWN0aW9uTmFtZSwgZW1haWwsIHBhc3N3b3JkKSB7XG4gIHdpZGdldC5fc2V0TG9naW5WaWV3KHttb2RlOiAnbG9hZGluZycsIHRpdGxlOiAnc2lnbnVwJ30sIGZ1bmN0aW9uICgpIHtcbiAgICB3aWRnZXQuX2F1dGgwLnNpZ251cCh7XG4gICAgICBjb25uZWN0aW9uOiBjb25uZWN0aW9uTmFtZSxcbiAgICAgIHVzZXJuYW1lOiAgIGVtYWlsLFxuICAgICAgcGFzc3dvcmQ6ICAgcGFzc3dvcmQsXG4gICAgICBhdXRvX2xvZ2luOiBmYWxzZVxuICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcblxuICAgICAgaWYgKCAkKClbMF0gIT09IHdpZGdldC5fbm9kZSApIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nICYmIGNvbnNvbGUubG9nKCd0aGlzIHNpZ251cCB3YXMgdHJpZ2dlcmVkIGZyb20gYW5vdGhlciBub2RlIGluc3RhbmNlJywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gd2lkZ2V0Ll9zZXRMb2dpblZpZXcoe21vZGU6ICdzaWdudXAnfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICg0MDAgPT09IGVyci5zdGF0dXMpIHJldHVybiB3aWRnZXQuX3Nob3dFcnJvcih3aWRnZXQuX2RpY3QudCgnc2lnbnVwOnVzZXJFeGlzdHNFcnJvclRleHQnKSk7XG4gICAgICAgICAgd2lkZ2V0Ll9zaG93RXJyb3Iod2lkZ2V0Ll9kaWN0LnQoJ3NpZ251cDpzZXJ2ZXJFcnJvclRleHQnKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdpZGdldC5fc2lnbkluV2l0aEF1dGgwKGVtYWlsLCBwYXNzd29yZCk7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuc2lnbnVwLmJpbmQgPSBmdW5jdGlvbiAod2lkZ2V0KSB7XG4gIHZhciBsaXN0ID0gJCgnLmEwLXNpZ251cCAuYTAtaWNvbmxpc3QnKS5odG1sKCcnKTtcblxuICAkKCcuYTAtc2lnbnVwIC5hMC1vcHRpb25zJykuc2hvdyh3aWRnZXQuX29wZW5XaXRoID8gJ25vbmUnIDogJ2Jsb2NrJyk7XG5cbiAgXy5jaGFpbih3aWRnZXQuX2NsaWVudC5zdHJhdGVnaWVzKVxuICAgICAud2hlcmUoe3NvY2lhbDogdHJ1ZX0pXG4gICAgIC5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuICBfLmV4dGVuZCh7fSwgcywge3VzZV9iaWdfYnV0dG9uczogZmFsc2V9KTsgfSlcbiAgICAgLmVhY2goZnVuY3Rpb24gKHMpIHsgcmV0dXJuIGxpc3QuYXBwZW5kKGJ1dHRvblRtcGwocykpOyB9KTtcblxuICBpZiAoXy53aGVyZSh3aWRnZXQuX2NsaWVudC5zdHJhdGVnaWVzLCB7c29jaWFsOiB0cnVlfSkubGVuZ3RoID4gMCkge1xuICAgICQoJy5hMC1zaWdudXAgLmEwLXNlcGFyYXRvciwgLmEwLXNpZ251cCAuYTAtaWNvbmxpc3QnKS5zaG93KCk7XG4gIH1cblxuICAkKCcuYTAtem9jaWFsW2RhdGEtc3RyYXRlZ3ldJywgbGlzdCkuYTBfb24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICB3aWRnZXQuX3NpZ25JblNvY2lhbChlKTtcbiAgfSk7XG5cbiAgdmFyIGZvcm0gPSAkKCcuYTAtc2lnbnVwIGZvcm0nKVxuICAgIC5hMF9vZmYoJ3N1Ym1pdCcpXG4gICAgLmEwX29uKCdzdWJtaXQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIGNvbm5lY3Rpb24gID0gd2lkZ2V0Ll9nZXRBdXRoMENvbm5lY3Rpb24oKTtcbiAgICAgIHZhciBlbWFpbCA9ICQoJy5hMC1lbWFpbCBpbnB1dCcsIGZvcm0pLnZhbCgpO1xuICAgICAgdmFyIHBhc3N3b3JkID0gJCgnLmEwLXBhc3N3b3JkIGlucHV0JywgZm9ybSkudmFsKCk7XG5cbiAgICAgIGlmICghdmFsaWQoZm9ybSwgd2lkZ2V0KSkgcmV0dXJuO1xuICAgICAgc2lnbnVwLnN1Ym1pdCh3aWRnZXQsIGNvbm5lY3Rpb24ubmFtZSwgZW1haWwsIHBhc3N3b3JkKTtcbiAgICB9KTtcblxuICBpZiAoaXNfc21hbGxfc2NyZWVuKCkpIHtcbiAgICBjb2xsYXBzZV9vbmZvY3VzLmhvb2soJCgnLmEwLXNpZ251cCBmb3JtIGlucHV0JyksICQoJy5hMC1jb2xsYXBzZS1zb2NpYWwtc2lnbnVwJykpO1xuICB9XG5cbiAgcmV0dXJuIHNpZ251cDtcbn07XG5cbmZ1bmN0aW9uIHZhbGlkKGZvcm0sIHdpZGdldCkge1xuICB2YXIgb2sgPSB0cnVlO1xuICB2YXIgZW1haWxfaW5wdXQgPSAkKCdpbnB1dFtuYW1lPWVtYWlsXScsIGZvcm0pO1xuICB2YXIgZW1haWxfZW1wdHkgPSBlbXB0eS50ZXN0KGVtYWlsX2lucHV0LnZhbCgpKTtcbiAgdmFyIGVtYWlsX3BhcnNlZCA9IGVtYWlsX3BhcnNlci5leGVjKGVtYWlsX2lucHV0LnZhbCgpLnRvTG93ZXJDYXNlKCkpO1xuICB2YXIgcGFzc3dvcmRfaW5wdXQgPSAkKCdpbnB1dFtuYW1lPXBhc3N3b3JkXScsIGZvcm0pO1xuICB2YXIgcGFzc3dvcmRfZW1wdHkgPSBlbXB0eS50ZXN0KHBhc3N3b3JkX2lucHV0LnZhbCgpKTtcblxuICAvLyBhc3VtZSB2YWxpZCBieSBkZWZhdWx0XG4gIC8vIGFuZCByZXNldCBlcnJvcnNcbiAgd2lkZ2V0Ll9zaG93RXJyb3IoKTtcbiAgd2lkZ2V0Ll9mb2N1c0Vycm9yKCk7XG5cbiAgaWYgKGVtYWlsX2VtcHR5KSB7XG4gICAgd2lkZ2V0Ll9mb2N1c0Vycm9yKGVtYWlsX2lucHV0KTtcbiAgICBvayA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKCFlbWFpbF9wYXJzZWQgJiYgIWVtYWlsX2VtcHR5KSB7XG4gICAgd2lkZ2V0Ll9mb2N1c0Vycm9yKGVtYWlsX2lucHV0LCB3aWRnZXQuX2RpY3QudCgnaW52YWxpZCcpKTtcbiAgICBvayA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHBhc3N3b3JkX2VtcHR5KSB7XG4gICAgd2lkZ2V0Ll9mb2N1c0Vycm9yKHBhc3N3b3JkX2lucHV0KTtcbiAgICBvayA9IGZhbHNlO1xuICB9O1xuXG4gIHJldHVybiBvaztcbn0iLCIvL2llOSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvY3JlYXRlI1BvbHlmaWxsXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgKGZ1bmN0aW9uKCl7XG4gIGZ1bmN0aW9uIEYoKXt9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG8pe1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYmplY3QuY3JlYXRlIGltcGxlbWVudGF0aW9uIG9ubHkgYWNjZXB0cyBvbmUgcGFyYW1ldGVyLicpO1xuICAgIH1cbiAgICBGLnByb3RvdHlwZSA9IG87XG4gICAgcmV0dXJuIG5ldyBGKCk7XG4gIH07XG59KSgpOyIsInZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF8uY2hhaW4oWydXZWJraXQnLCAnTW96JywgJ08nLCAnbXMnLCAnS2h0bWwnLCAnJ10pXG4gICAgICAgICAgLm1hcChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgJ0FuaW1hdGlvbic7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc29tZShmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBkb2N1bWVudC5ib2R5LnN0eWxlW3NdICE9PSAndW5kZWZpbmVkJztcbiAgICAgICAgICB9KTtcbn07IiwiZnVuY3Rpb24gcGxhY2Vob2xkZXJJc1N1cHBvcnRlZCgpIHtcbiAgdmFyIHRlc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICByZXR1cm4gKCdwbGFjZWhvbGRlcicgaW4gdGVzdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGxhY2Vob2xkZXJJc1N1cHBvcnRlZCgpOyIsInZhciB0cmFuc2l0aW9uZW5kTmFtZXMgPSBbXG4gICAgJ3RyYW5zaXRpb25lbmQnLFxuICAgICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICAnTW96VHJhbnNpdGlvbkVuZCcsXG4gICAgJ29UcmFuc2l0aW9uRW5kJ1xuXTtcblxudmFyIGJlYW4gPSByZXF1aXJlKCdiZWFuJyk7XG5cbm1vZHVsZS5leHBvcnRzLm9uID0gZnVuY3Rpb24gKGVsLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiBzdWJzY3JpYmUobmFtZSkge1xuICAgIGJlYW4ub24oZWwsIG5hbWUsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBjYWxsYmFjayhlKTtcbiAgICB9KTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYW5zaXRpb25lbmROYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHN1YnNjcmliZSh0cmFuc2l0aW9uZW5kTmFtZXNbaV0pO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5vZmYgPSBmdW5jdGlvbiAoZWwpIHtcbiAgZnVuY3Rpb24gc3Vic2NyaWJlKG5hbWUpIHtcbiAgICBiZWFuLm9mZihlbCwgbmFtZSk7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFuc2l0aW9uZW5kTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICBzdWJzY3JpYmUodHJhbnNpdGlvbmVuZE5hbWVzW2ldKTtcbiAgfVxufTsiLCJ2YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhcnNlVXJsOiBmdW5jdGlvbiAodXJsKSB7XG4gICAgdmFyIHBhcnNlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBwYXJzZXIuaHJlZiA9IHVybDtcbiAgICByZXR1cm4gcGFyc2VyO1xuICB9LFxuXG4gIGVuZHNXaXRoOiBmdW5jdGlvbiAoc3RyLCBzdWZmaXgpIHtcbiAgICByZXR1cm4gc3RyLmluZGV4T2Yoc3VmZml4LCBzdHIubGVuZ3RoIC0gc3VmZml4Lmxlbmd0aCkgIT09IC0xO1xuICB9LFxuXG4gIGV4dHJhY3Q6IGZ1bmN0aW9uIChvYmosIHByb3BzKSB7XG4gICAgdmFyIHByZSA9IF8ucGljayhvYmosIHByb3BzKTtcblxuICAgIHJldHVybiBfLmNoYWluKF8ucGFpcnMocHJlKSlcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHBhaXIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBwYWlyWzFdICE9PSAndW5kZWZpbmVkJztcbiAgICAgICAgICAgIH0pLnJlZHVjZShmdW5jdGlvbiAociwgY3VycmVudCkge1xuICAgICAgICAgICAgICByW2N1cnJlbnRbMF1dID0gY3VycmVudFsxXTtcbiAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICB9LCB7fSkudmFsdWUoKTtcbiAgfVxufTtcbiJdfQ==
;